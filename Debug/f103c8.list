
f103c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eff0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0800f0fc  0800f0fc  0001f0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f94c  0800f94c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  0800f94c  0800f94c  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f94c  0800f94c  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f94c  0800f94c  0001f94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f950  0800f950  0001f950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800f954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b1c  200000b0  0800fa04  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bcc  0800fa04  00020bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001efec  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a2c  00000000  00000000  0003f0c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00042af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001780  00000000  00000000  000440f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b081  00000000  00000000  00045878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184a8  00000000  00000000  000608f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f9cf  00000000  00000000  00078da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108770  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000695c  00000000  00000000  001087c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800f0e4 	.word	0x0800f0e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	0800f0e4 	.word	0x0800f0e4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_frsub>:
 80004d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__addsf3>
 80004da:	bf00      	nop

080004dc <__aeabi_fsub>:
 80004dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080004e0 <__addsf3>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	bf1f      	itttt	ne
 80004e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004e8:	ea92 0f03 	teqne	r2, r3
 80004ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004f4:	d06a      	beq.n	80005cc <__addsf3+0xec>
 80004f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004fe:	bfc1      	itttt	gt
 8000500:	18d2      	addgt	r2, r2, r3
 8000502:	4041      	eorgt	r1, r0
 8000504:	4048      	eorgt	r0, r1
 8000506:	4041      	eorgt	r1, r0
 8000508:	bfb8      	it	lt
 800050a:	425b      	neglt	r3, r3
 800050c:	2b19      	cmp	r3, #25
 800050e:	bf88      	it	hi
 8000510:	4770      	bxhi	lr
 8000512:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000516:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800051a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4240      	negne	r0, r0
 8000522:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000526:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800052a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800052e:	bf18      	it	ne
 8000530:	4249      	negne	r1, r1
 8000532:	ea92 0f03 	teq	r2, r3
 8000536:	d03f      	beq.n	80005b8 <__addsf3+0xd8>
 8000538:	f1a2 0201 	sub.w	r2, r2, #1
 800053c:	fa41 fc03 	asr.w	ip, r1, r3
 8000540:	eb10 000c 	adds.w	r0, r0, ip
 8000544:	f1c3 0320 	rsb	r3, r3, #32
 8000548:	fa01 f103 	lsl.w	r1, r1, r3
 800054c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000550:	d502      	bpl.n	8000558 <__addsf3+0x78>
 8000552:	4249      	negs	r1, r1
 8000554:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000558:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800055c:	d313      	bcc.n	8000586 <__addsf3+0xa6>
 800055e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000562:	d306      	bcc.n	8000572 <__addsf3+0x92>
 8000564:	0840      	lsrs	r0, r0, #1
 8000566:	ea4f 0131 	mov.w	r1, r1, rrx
 800056a:	f102 0201 	add.w	r2, r2, #1
 800056e:	2afe      	cmp	r2, #254	; 0xfe
 8000570:	d251      	bcs.n	8000616 <__addsf3+0x136>
 8000572:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000576:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800057a:	bf08      	it	eq
 800057c:	f020 0001 	biceq.w	r0, r0, #1
 8000580:	ea40 0003 	orr.w	r0, r0, r3
 8000584:	4770      	bx	lr
 8000586:	0049      	lsls	r1, r1, #1
 8000588:	eb40 0000 	adc.w	r0, r0, r0
 800058c:	3a01      	subs	r2, #1
 800058e:	bf28      	it	cs
 8000590:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000594:	d2ed      	bcs.n	8000572 <__addsf3+0x92>
 8000596:	fab0 fc80 	clz	ip, r0
 800059a:	f1ac 0c08 	sub.w	ip, ip, #8
 800059e:	ebb2 020c 	subs.w	r2, r2, ip
 80005a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80005a6:	bfaa      	itet	ge
 80005a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005ac:	4252      	neglt	r2, r2
 80005ae:	4318      	orrge	r0, r3
 80005b0:	bfbc      	itt	lt
 80005b2:	40d0      	lsrlt	r0, r2
 80005b4:	4318      	orrlt	r0, r3
 80005b6:	4770      	bx	lr
 80005b8:	f092 0f00 	teq	r2, #0
 80005bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005c0:	bf06      	itte	eq
 80005c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005c6:	3201      	addeq	r2, #1
 80005c8:	3b01      	subne	r3, #1
 80005ca:	e7b5      	b.n	8000538 <__addsf3+0x58>
 80005cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005d4:	bf18      	it	ne
 80005d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005da:	d021      	beq.n	8000620 <__addsf3+0x140>
 80005dc:	ea92 0f03 	teq	r2, r3
 80005e0:	d004      	beq.n	80005ec <__addsf3+0x10c>
 80005e2:	f092 0f00 	teq	r2, #0
 80005e6:	bf08      	it	eq
 80005e8:	4608      	moveq	r0, r1
 80005ea:	4770      	bx	lr
 80005ec:	ea90 0f01 	teq	r0, r1
 80005f0:	bf1c      	itt	ne
 80005f2:	2000      	movne	r0, #0
 80005f4:	4770      	bxne	lr
 80005f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005fa:	d104      	bne.n	8000606 <__addsf3+0x126>
 80005fc:	0040      	lsls	r0, r0, #1
 80005fe:	bf28      	it	cs
 8000600:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000604:	4770      	bx	lr
 8000606:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800060a:	bf3c      	itt	cc
 800060c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000610:	4770      	bxcc	lr
 8000612:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000616:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061e:	4770      	bx	lr
 8000620:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000624:	bf16      	itet	ne
 8000626:	4608      	movne	r0, r1
 8000628:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800062c:	4601      	movne	r1, r0
 800062e:	0242      	lsls	r2, r0, #9
 8000630:	bf06      	itte	eq
 8000632:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000636:	ea90 0f01 	teqeq	r0, r1
 800063a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800063e:	4770      	bx	lr

08000640 <__aeabi_ui2f>:
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	e004      	b.n	8000650 <__aeabi_i2f+0x8>
 8000646:	bf00      	nop

08000648 <__aeabi_i2f>:
 8000648:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	ea5f 0c00 	movs.w	ip, r0
 8000654:	bf08      	it	eq
 8000656:	4770      	bxeq	lr
 8000658:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800065c:	4601      	mov	r1, r0
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	e01c      	b.n	800069e <__aeabi_l2f+0x2a>

08000664 <__aeabi_ul2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f04f 0300 	mov.w	r3, #0
 8000670:	e00a      	b.n	8000688 <__aeabi_l2f+0x14>
 8000672:	bf00      	nop

08000674 <__aeabi_l2f>:
 8000674:	ea50 0201 	orrs.w	r2, r0, r1
 8000678:	bf08      	it	eq
 800067a:	4770      	bxeq	lr
 800067c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000680:	d502      	bpl.n	8000688 <__aeabi_l2f+0x14>
 8000682:	4240      	negs	r0, r0
 8000684:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000688:	ea5f 0c01 	movs.w	ip, r1
 800068c:	bf02      	ittt	eq
 800068e:	4684      	moveq	ip, r0
 8000690:	4601      	moveq	r1, r0
 8000692:	2000      	moveq	r0, #0
 8000694:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000698:	bf08      	it	eq
 800069a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800069e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80006a2:	fabc f28c 	clz	r2, ip
 80006a6:	3a08      	subs	r2, #8
 80006a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006ac:	db10      	blt.n	80006d0 <__aeabi_l2f+0x5c>
 80006ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80006b2:	4463      	add	r3, ip
 80006b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006b8:	f1c2 0220 	rsb	r2, r2, #32
 80006bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006c0:	fa20 f202 	lsr.w	r2, r0, r2
 80006c4:	eb43 0002 	adc.w	r0, r3, r2
 80006c8:	bf08      	it	eq
 80006ca:	f020 0001 	biceq.w	r0, r0, #1
 80006ce:	4770      	bx	lr
 80006d0:	f102 0220 	add.w	r2, r2, #32
 80006d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006d8:	f1c2 0220 	rsb	r2, r2, #32
 80006dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006e0:	fa21 f202 	lsr.w	r2, r1, r2
 80006e4:	eb43 0002 	adc.w	r0, r3, r2
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006ee:	4770      	bx	lr

080006f0 <__aeabi_fmul>:
 80006f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006f8:	bf1e      	ittt	ne
 80006fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006fe:	ea92 0f0c 	teqne	r2, ip
 8000702:	ea93 0f0c 	teqne	r3, ip
 8000706:	d06f      	beq.n	80007e8 <__aeabi_fmul+0xf8>
 8000708:	441a      	add	r2, r3
 800070a:	ea80 0c01 	eor.w	ip, r0, r1
 800070e:	0240      	lsls	r0, r0, #9
 8000710:	bf18      	it	ne
 8000712:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000716:	d01e      	beq.n	8000756 <__aeabi_fmul+0x66>
 8000718:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800071c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000720:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000724:	fba0 3101 	umull	r3, r1, r0, r1
 8000728:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800072c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000730:	bf3e      	ittt	cc
 8000732:	0049      	lslcc	r1, r1, #1
 8000734:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000738:	005b      	lslcc	r3, r3, #1
 800073a:	ea40 0001 	orr.w	r0, r0, r1
 800073e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000742:	2afd      	cmp	r2, #253	; 0xfd
 8000744:	d81d      	bhi.n	8000782 <__aeabi_fmul+0x92>
 8000746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800074a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800074e:	bf08      	it	eq
 8000750:	f020 0001 	biceq.w	r0, r0, #1
 8000754:	4770      	bx	lr
 8000756:	f090 0f00 	teq	r0, #0
 800075a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800075e:	bf08      	it	eq
 8000760:	0249      	lsleq	r1, r1, #9
 8000762:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000766:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800076a:	3a7f      	subs	r2, #127	; 0x7f
 800076c:	bfc2      	ittt	gt
 800076e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000772:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000776:	4770      	bxgt	lr
 8000778:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800077c:	f04f 0300 	mov.w	r3, #0
 8000780:	3a01      	subs	r2, #1
 8000782:	dc5d      	bgt.n	8000840 <__aeabi_fmul+0x150>
 8000784:	f112 0f19 	cmn.w	r2, #25
 8000788:	bfdc      	itt	le
 800078a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800078e:	4770      	bxle	lr
 8000790:	f1c2 0200 	rsb	r2, r2, #0
 8000794:	0041      	lsls	r1, r0, #1
 8000796:	fa21 f102 	lsr.w	r1, r1, r2
 800079a:	f1c2 0220 	rsb	r2, r2, #32
 800079e:	fa00 fc02 	lsl.w	ip, r0, r2
 80007a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80007a6:	f140 0000 	adc.w	r0, r0, #0
 80007aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007ae:	bf08      	it	eq
 80007b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007b4:	4770      	bx	lr
 80007b6:	f092 0f00 	teq	r2, #0
 80007ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80007be:	bf02      	ittt	eq
 80007c0:	0040      	lsleq	r0, r0, #1
 80007c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80007c6:	3a01      	subeq	r2, #1
 80007c8:	d0f9      	beq.n	80007be <__aeabi_fmul+0xce>
 80007ca:	ea40 000c 	orr.w	r0, r0, ip
 80007ce:	f093 0f00 	teq	r3, #0
 80007d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007d6:	bf02      	ittt	eq
 80007d8:	0049      	lsleq	r1, r1, #1
 80007da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80007de:	3b01      	subeq	r3, #1
 80007e0:	d0f9      	beq.n	80007d6 <__aeabi_fmul+0xe6>
 80007e2:	ea41 010c 	orr.w	r1, r1, ip
 80007e6:	e78f      	b.n	8000708 <__aeabi_fmul+0x18>
 80007e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007ec:	ea92 0f0c 	teq	r2, ip
 80007f0:	bf18      	it	ne
 80007f2:	ea93 0f0c 	teqne	r3, ip
 80007f6:	d00a      	beq.n	800080e <__aeabi_fmul+0x11e>
 80007f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80007fc:	bf18      	it	ne
 80007fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000802:	d1d8      	bne.n	80007b6 <__aeabi_fmul+0xc6>
 8000804:	ea80 0001 	eor.w	r0, r0, r1
 8000808:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800080c:	4770      	bx	lr
 800080e:	f090 0f00 	teq	r0, #0
 8000812:	bf17      	itett	ne
 8000814:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000818:	4608      	moveq	r0, r1
 800081a:	f091 0f00 	teqne	r1, #0
 800081e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000822:	d014      	beq.n	800084e <__aeabi_fmul+0x15e>
 8000824:	ea92 0f0c 	teq	r2, ip
 8000828:	d101      	bne.n	800082e <__aeabi_fmul+0x13e>
 800082a:	0242      	lsls	r2, r0, #9
 800082c:	d10f      	bne.n	800084e <__aeabi_fmul+0x15e>
 800082e:	ea93 0f0c 	teq	r3, ip
 8000832:	d103      	bne.n	800083c <__aeabi_fmul+0x14c>
 8000834:	024b      	lsls	r3, r1, #9
 8000836:	bf18      	it	ne
 8000838:	4608      	movne	r0, r1
 800083a:	d108      	bne.n	800084e <__aeabi_fmul+0x15e>
 800083c:	ea80 0001 	eor.w	r0, r0, r1
 8000840:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000844:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000848:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800084c:	4770      	bx	lr
 800084e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000852:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000856:	4770      	bx	lr

08000858 <__aeabi_fdiv>:
 8000858:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000860:	bf1e      	ittt	ne
 8000862:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000866:	ea92 0f0c 	teqne	r2, ip
 800086a:	ea93 0f0c 	teqne	r3, ip
 800086e:	d069      	beq.n	8000944 <__aeabi_fdiv+0xec>
 8000870:	eba2 0203 	sub.w	r2, r2, r3
 8000874:	ea80 0c01 	eor.w	ip, r0, r1
 8000878:	0249      	lsls	r1, r1, #9
 800087a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800087e:	d037      	beq.n	80008f0 <__aeabi_fdiv+0x98>
 8000880:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000884:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000888:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800088c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000890:	428b      	cmp	r3, r1
 8000892:	bf38      	it	cc
 8000894:	005b      	lslcc	r3, r3, #1
 8000896:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800089a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800089e:	428b      	cmp	r3, r1
 80008a0:	bf24      	itt	cs
 80008a2:	1a5b      	subcs	r3, r3, r1
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008ac:	bf24      	itt	cs
 80008ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008ba:	bf24      	itt	cs
 80008bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008c8:	bf24      	itt	cs
 80008ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d2:	011b      	lsls	r3, r3, #4
 80008d4:	bf18      	it	ne
 80008d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008da:	d1e0      	bne.n	800089e <__aeabi_fdiv+0x46>
 80008dc:	2afd      	cmp	r2, #253	; 0xfd
 80008de:	f63f af50 	bhi.w	8000782 <__aeabi_fmul+0x92>
 80008e2:	428b      	cmp	r3, r1
 80008e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008e8:	bf08      	it	eq
 80008ea:	f020 0001 	biceq.w	r0, r0, #1
 80008ee:	4770      	bx	lr
 80008f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f8:	327f      	adds	r2, #127	; 0x7f
 80008fa:	bfc2      	ittt	gt
 80008fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000900:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000904:	4770      	bxgt	lr
 8000906:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800090a:	f04f 0300 	mov.w	r3, #0
 800090e:	3a01      	subs	r2, #1
 8000910:	e737      	b.n	8000782 <__aeabi_fmul+0x92>
 8000912:	f092 0f00 	teq	r2, #0
 8000916:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800091a:	bf02      	ittt	eq
 800091c:	0040      	lsleq	r0, r0, #1
 800091e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000922:	3a01      	subeq	r2, #1
 8000924:	d0f9      	beq.n	800091a <__aeabi_fdiv+0xc2>
 8000926:	ea40 000c 	orr.w	r0, r0, ip
 800092a:	f093 0f00 	teq	r3, #0
 800092e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000932:	bf02      	ittt	eq
 8000934:	0049      	lsleq	r1, r1, #1
 8000936:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800093a:	3b01      	subeq	r3, #1
 800093c:	d0f9      	beq.n	8000932 <__aeabi_fdiv+0xda>
 800093e:	ea41 010c 	orr.w	r1, r1, ip
 8000942:	e795      	b.n	8000870 <__aeabi_fdiv+0x18>
 8000944:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000948:	ea92 0f0c 	teq	r2, ip
 800094c:	d108      	bne.n	8000960 <__aeabi_fdiv+0x108>
 800094e:	0242      	lsls	r2, r0, #9
 8000950:	f47f af7d 	bne.w	800084e <__aeabi_fmul+0x15e>
 8000954:	ea93 0f0c 	teq	r3, ip
 8000958:	f47f af70 	bne.w	800083c <__aeabi_fmul+0x14c>
 800095c:	4608      	mov	r0, r1
 800095e:	e776      	b.n	800084e <__aeabi_fmul+0x15e>
 8000960:	ea93 0f0c 	teq	r3, ip
 8000964:	d104      	bne.n	8000970 <__aeabi_fdiv+0x118>
 8000966:	024b      	lsls	r3, r1, #9
 8000968:	f43f af4c 	beq.w	8000804 <__aeabi_fmul+0x114>
 800096c:	4608      	mov	r0, r1
 800096e:	e76e      	b.n	800084e <__aeabi_fmul+0x15e>
 8000970:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000974:	bf18      	it	ne
 8000976:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800097a:	d1ca      	bne.n	8000912 <__aeabi_fdiv+0xba>
 800097c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000980:	f47f af5c 	bne.w	800083c <__aeabi_fmul+0x14c>
 8000984:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000988:	f47f af3c 	bne.w	8000804 <__aeabi_fmul+0x114>
 800098c:	e75f      	b.n	800084e <__aeabi_fmul+0x15e>
 800098e:	bf00      	nop

08000990 <__aeabi_f2iz>:
 8000990:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000994:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000998:	d30f      	bcc.n	80009ba <__aeabi_f2iz+0x2a>
 800099a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800099e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009a2:	d90d      	bls.n	80009c0 <__aeabi_f2iz+0x30>
 80009a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009b0:	fa23 f002 	lsr.w	r0, r3, r2
 80009b4:	bf18      	it	ne
 80009b6:	4240      	negne	r0, r0
 80009b8:	4770      	bx	lr
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	4770      	bx	lr
 80009c0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009c4:	d101      	bne.n	80009ca <__aeabi_f2iz+0x3a>
 80009c6:	0242      	lsls	r2, r0, #9
 80009c8:	d105      	bne.n	80009d6 <__aeabi_f2iz+0x46>
 80009ca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009ce:	bf08      	it	eq
 80009d0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d4:	4770      	bx	lr
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	4770      	bx	lr

080009dc <__popcountsi2>:
 80009dc:	0843      	lsrs	r3, r0, #1
 80009de:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80009e2:	1ac0      	subs	r0, r0, r3
 80009e4:	0883      	lsrs	r3, r0, #2
 80009e6:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80009ea:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80009ee:	4418      	add	r0, r3
 80009f0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80009f4:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80009f8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80009fc:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000a00:	0e00      	lsrs	r0, r0, #24
 8000a02:	4770      	bx	lr

08000a04 <SET_COUNT>:
extern uint8_t read_X2[4], read_X1[4], read_X0[4];
extern uint8_t read_Y2[4], read_Y1[4], read_Y0[4];
extern uint8_t read_Z2[4], read_Z1[4], read_Z0[4];


void SET_COUNT(int chip_select) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8000a0c:	4a2c      	ldr	r2, [pc, #176]	; (8000ac0 <SET_COUNT+0xbc>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a14:	4a2b      	ldr	r2, [pc, #172]	; (8000ac4 <SET_COUNT+0xc0>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f008 fb2c 	bl	800907c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 8000a24:	4a26      	ldr	r2, [pc, #152]	; (8000ac0 <SET_COUNT+0xbc>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a2c:	4a25      	ldr	r2, [pc, #148]	; (8000ac4 <SET_COUNT+0xc0>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a34:	2200      	movs	r2, #0
 8000a36:	4619      	mov	r1, r3
 8000a38:	f008 fb20 	bl	800907c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, rm3100_MSB_X_buf, sizeof(rm3100_MSB_X_buf), 1000); //Not need to necessary to send multiple value or register
 8000a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a40:	2201      	movs	r2, #1
 8000a42:	4921      	ldr	r1, [pc, #132]	; (8000ac8 <SET_COUNT+0xc4>)
 8000a44:	4821      	ldr	r0, [pc, #132]	; (8000acc <SET_COUNT+0xc8>)
 8000a46:	f00a fdf3 	bl	800b630 <HAL_SPI_Transmit>
	//Initiate Count cycle
	HAL_SPI_Transmit(&hspi1, MSB_X_buf, sizeof(MSB_X_buf), 1000);
 8000a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4e:	2201      	movs	r2, #1
 8000a50:	491f      	ldr	r1, [pc, #124]	; (8000ad0 <SET_COUNT+0xcc>)
 8000a52:	481e      	ldr	r0, [pc, #120]	; (8000acc <SET_COUNT+0xc8>)
 8000a54:	f00a fdec 	bl	800b630 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_X_buf, sizeof(LSB_X_buf), 1000);
 8000a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	491d      	ldr	r1, [pc, #116]	; (8000ad4 <SET_COUNT+0xd0>)
 8000a60:	481a      	ldr	r0, [pc, #104]	; (8000acc <SET_COUNT+0xc8>)
 8000a62:	f00a fde5 	bl	800b630 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Y_buf, sizeof(MSB_Y_buf), 1000);
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	491a      	ldr	r1, [pc, #104]	; (8000ad8 <SET_COUNT+0xd4>)
 8000a6e:	4817      	ldr	r0, [pc, #92]	; (8000acc <SET_COUNT+0xc8>)
 8000a70:	f00a fdde 	bl	800b630 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Y_buf, sizeof(LSB_Y_buf), 1000);
 8000a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4918      	ldr	r1, [pc, #96]	; (8000adc <SET_COUNT+0xd8>)
 8000a7c:	4813      	ldr	r0, [pc, #76]	; (8000acc <SET_COUNT+0xc8>)
 8000a7e:	f00a fdd7 	bl	800b630 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Z_buf, sizeof(MSB_Z_buf), 1000);
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	2201      	movs	r2, #1
 8000a88:	4915      	ldr	r1, [pc, #84]	; (8000ae0 <SET_COUNT+0xdc>)
 8000a8a:	4810      	ldr	r0, [pc, #64]	; (8000acc <SET_COUNT+0xc8>)
 8000a8c:	f00a fdd0 	bl	800b630 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Z_buf, sizeof(LSB_Z_buf), 1000);
 8000a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a94:	2201      	movs	r2, #1
 8000a96:	4913      	ldr	r1, [pc, #76]	; (8000ae4 <SET_COUNT+0xe0>)
 8000a98:	480c      	ldr	r0, [pc, #48]	; (8000acc <SET_COUNT+0xc8>)
 8000a9a:	f00a fdc9 	bl	800b630 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH);
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <SET_COUNT+0xbc>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000aa6:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <SET_COUNT+0xc0>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f008 fae3 	bl	800907c <HAL_GPIO_WritePin>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000028 	.word	0x20000028
 8000ac4:	20000038 	.word	0x20000038
 8000ac8:	20000004 	.word	0x20000004
 8000acc:	20000840 	.word	0x20000840
 8000ad0:	200000d0 	.word	0x200000d0
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	200000d4 	.word	0x200000d4
 8000adc:	2000000c 	.word	0x2000000c
 8000ae0:	200000d8 	.word	0x200000d8
 8000ae4:	20000010 	.word	0x20000010

08000ae8 <Continuous_Mode>:
//Initiate Continuous Measurements Mode

void Continuous_Mode(int chip_select) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8000af0:	4a1a      	ldr	r2, [pc, #104]	; (8000b5c <Continuous_Mode+0x74>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <Continuous_Mode+0x78>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b00:	2201      	movs	r2, #1
 8000b02:	4619      	mov	r1, r3
 8000b04:	f008 faba 	bl	800907c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 8000b08:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <Continuous_Mode+0x74>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <Continuous_Mode+0x78>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f008 faae 	bl	800907c <HAL_GPIO_WritePin>
	//Initiate Continuous Measurements Mode
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_buf, sizeof(rm3100_cmm_buf), 1000);
 8000b20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b24:	2201      	movs	r2, #1
 8000b26:	490f      	ldr	r1, [pc, #60]	; (8000b64 <Continuous_Mode+0x7c>)
 8000b28:	480f      	ldr	r0, [pc, #60]	; (8000b68 <Continuous_Mode+0x80>)
 8000b2a:	f00a fd81 	bl	800b630 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_mod_buf, sizeof(rm3100_cmm_mod_buf), 1000);
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	2201      	movs	r2, #1
 8000b34:	490d      	ldr	r1, [pc, #52]	; (8000b6c <Continuous_Mode+0x84>)
 8000b36:	480c      	ldr	r0, [pc, #48]	; (8000b68 <Continuous_Mode+0x80>)
 8000b38:	f00a fd7a 	bl	800b630 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <Continuous_Mode+0x74>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b44:	4a06      	ldr	r2, [pc, #24]	; (8000b60 <Continuous_Mode+0x78>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f008 fa94 	bl	800907c <HAL_GPIO_WritePin>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000028 	.word	0x20000028
 8000b60:	20000038 	.word	0x20000038
 8000b64:	20000014 	.word	0x20000014
 8000b68:	20000840 	.word	0x20000840
 8000b6c:	20000018 	.word	0x20000018

08000b70 <TMRC_Mode>:
//Initiate Time Measurements and Rate Control

void TMRC_Mode(int chip_select) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8000b78:	4a1a      	ldr	r2, [pc, #104]	; (8000be4 <TMRC_Mode+0x74>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b80:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <TMRC_Mode+0x78>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f008 fa76 	bl	800907c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <TMRC_Mode+0x74>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b98:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <TMRC_Mode+0x78>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f008 fa6a 	bl	800907c <HAL_GPIO_WritePin>
	//initiate Time Measurements and Reset Control
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_add_buf, sizeof(rm3100_tmrc_add_buf), 1000);
 8000ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bac:	2201      	movs	r2, #1
 8000bae:	490f      	ldr	r1, [pc, #60]	; (8000bec <TMRC_Mode+0x7c>)
 8000bb0:	480f      	ldr	r0, [pc, #60]	; (8000bf0 <TMRC_Mode+0x80>)
 8000bb2:	f00a fd3d 	bl	800b630 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_Val_buf, sizeof(rm3100_tmrc_Val_buf), 1000);
 8000bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bba:	2201      	movs	r2, #1
 8000bbc:	490d      	ldr	r1, [pc, #52]	; (8000bf4 <TMRC_Mode+0x84>)
 8000bbe:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <TMRC_Mode+0x80>)
 8000bc0:	f00a fd36 	bl	800b630 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_read_buf, sizeof(rm3100_tmrc_read_buf),
//			1000);
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <TMRC_Mode+0x74>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bcc:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <TMRC_Mode+0x78>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f008 fa50 	bl	800907c <HAL_GPIO_WritePin>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000028 	.word	0x20000028
 8000be8:	20000038 	.word	0x20000038
 8000bec:	2000001c 	.word	0x2000001c
 8000bf0:	20000840 	.word	0x20000840
 8000bf4:	20000020 	.word	0x20000020

08000bf8 <Mea_Result>:

//Read Measurements Results
void Mea_Result(int chip_select) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8000c00:	4a3f      	ldr	r2, [pc, #252]	; (8000d00 <Mea_Result+0x108>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c08:	4a3e      	ldr	r2, [pc, #248]	; (8000d04 <Mea_Result+0x10c>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c10:	2201      	movs	r2, #1
 8000c12:	4619      	mov	r1, r3
 8000c14:	f008 fa32 	bl	800907c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 8000c18:	4a39      	ldr	r2, [pc, #228]	; (8000d00 <Mea_Result+0x108>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c20:	4a38      	ldr	r2, [pc, #224]	; (8000d04 <Mea_Result+0x10c>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f008 fa26 	bl	800907c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, MRRW2_X_buf, sizeof(MRRW2_X_buf), 1000);
 8000c30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c34:	2201      	movs	r2, #1
 8000c36:	4934      	ldr	r1, [pc, #208]	; (8000d08 <Mea_Result+0x110>)
 8000c38:	4834      	ldr	r0, [pc, #208]	; (8000d0c <Mea_Result+0x114>)
 8000c3a:	f00a fcf9 	bl	800b630 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &read_X2[chip_select], sizeof(read_X2[chip_select]), 1000);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <Mea_Result+0x118>)
 8000c42:	1899      	adds	r1, r3, r2
 8000c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4830      	ldr	r0, [pc, #192]	; (8000d0c <Mea_Result+0x114>)
 8000c4c:	f00a fe34 	bl	800b8b8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X1[chip_select], sizeof(read_X1[chip_select]), 1000);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a30      	ldr	r2, [pc, #192]	; (8000d14 <Mea_Result+0x11c>)
 8000c54:	1899      	adds	r1, r3, r2
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	482b      	ldr	r0, [pc, #172]	; (8000d0c <Mea_Result+0x114>)
 8000c5e:	f00a fe2b 	bl	800b8b8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X0[chip_select], sizeof(read_X0[chip_select]), 1000);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a2c      	ldr	r2, [pc, #176]	; (8000d18 <Mea_Result+0x120>)
 8000c66:	1899      	adds	r1, r3, r2
 8000c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4827      	ldr	r0, [pc, #156]	; (8000d0c <Mea_Result+0x114>)
 8000c70:	f00a fe22 	bl	800b8b8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y2[chip_select], sizeof(read_Y2[chip_select]), 1000);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a29      	ldr	r2, [pc, #164]	; (8000d1c <Mea_Result+0x124>)
 8000c78:	1899      	adds	r1, r3, r2
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4822      	ldr	r0, [pc, #136]	; (8000d0c <Mea_Result+0x114>)
 8000c82:	f00a fe19 	bl	800b8b8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y1[chip_select], sizeof(read_Y1[chip_select]), 1000);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a25      	ldr	r2, [pc, #148]	; (8000d20 <Mea_Result+0x128>)
 8000c8a:	1899      	adds	r1, r3, r2
 8000c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c90:	2201      	movs	r2, #1
 8000c92:	481e      	ldr	r0, [pc, #120]	; (8000d0c <Mea_Result+0x114>)
 8000c94:	f00a fe10 	bl	800b8b8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y0[chip_select], sizeof(read_Y0[chip_select]), 1000);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a22      	ldr	r2, [pc, #136]	; (8000d24 <Mea_Result+0x12c>)
 8000c9c:	1899      	adds	r1, r3, r2
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4819      	ldr	r0, [pc, #100]	; (8000d0c <Mea_Result+0x114>)
 8000ca6:	f00a fe07 	bl	800b8b8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z2[chip_select], sizeof(read_Z2[chip_select]), 1000);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <Mea_Result+0x130>)
 8000cae:	1899      	adds	r1, r3, r2
 8000cb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4815      	ldr	r0, [pc, #84]	; (8000d0c <Mea_Result+0x114>)
 8000cb8:	f00a fdfe 	bl	800b8b8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z1[chip_select], sizeof(read_Z1[chip_select]), 1000);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <Mea_Result+0x134>)
 8000cc0:	1899      	adds	r1, r3, r2
 8000cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4810      	ldr	r0, [pc, #64]	; (8000d0c <Mea_Result+0x114>)
 8000cca:	f00a fdf5 	bl	800b8b8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z0[chip_select], sizeof(read_Z0[chip_select]), 1000);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <Mea_Result+0x138>)
 8000cd2:	1899      	adds	r1, r3, r2
 8000cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd8:	2201      	movs	r2, #1
 8000cda:	480c      	ldr	r0, [pc, #48]	; (8000d0c <Mea_Result+0x114>)
 8000cdc:	f00a fdec 	bl	800b8b8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <Mea_Result+0x108>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ce8:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <Mea_Result+0x10c>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f008 f9c2 	bl	800907c <HAL_GPIO_WritePin>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000028 	.word	0x20000028
 8000d04:	20000038 	.word	0x20000038
 8000d08:	20000024 	.word	0x20000024
 8000d0c:	20000840 	.word	0x20000840
 8000d10:	2000046c 	.word	0x2000046c
 8000d14:	20000428 	.word	0x20000428
 8000d18:	20000480 	.word	0x20000480
 8000d1c:	200004a4 	.word	0x200004a4
 8000d20:	200003c0 	.word	0x200003c0
 8000d24:	20000498 	.word	0x20000498
 8000d28:	2000042c 	.word	0x2000042c
 8000d2c:	200003e4 	.word	0x200003e4
 8000d30:	20000494 	.word	0x20000494

08000d34 <Comb_measurement>:
//    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
//}


//Combine Measurements
void Comb_measurement(int chip_select) {
 8000d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d36:	b09f      	sub	sp, #124	; 0x7c
 8000d38:	af02      	add	r7, sp, #8
 8000d3a:	6078      	str	r0, [r7, #4]
//    // Get current time from RTC
//    HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
//    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);

    // Combine bytes for X-axis
    mag_X[chip_select] = (read_X2[chip_select] << 16) | (read_X1[chip_select] << 8) | read_X0[chip_select];
 8000d3c:	4a40      	ldr	r2, [pc, #256]	; (8000e40 <Comb_measurement+0x10c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	041a      	lsls	r2, r3, #16
 8000d46:	493f      	ldr	r1, [pc, #252]	; (8000e44 <Comb_measurement+0x110>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	440b      	add	r3, r1
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	4313      	orrs	r3, r2
 8000d52:	493d      	ldr	r1, [pc, #244]	; (8000e48 <Comb_measurement+0x114>)
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	440a      	add	r2, r1
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4a3b      	ldr	r2, [pc, #236]	; (8000e4c <Comb_measurement+0x118>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_X[chip_select] = (mag_X[chip_select] & 0x800000) ? (mag_X[chip_select] | 0xFF000000) : mag_X[chip_select];
 8000d66:	4a39      	ldr	r2, [pc, #228]	; (8000e4c <Comb_measurement+0x118>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d007      	beq.n	8000d86 <Comb_measurement+0x52>
 8000d76:	4a35      	ldr	r2, [pc, #212]	; (8000e4c <Comb_measurement+0x118>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000d82:	4619      	mov	r1, r3
 8000d84:	e004      	b.n	8000d90 <Comb_measurement+0x5c>
 8000d86:	4a31      	ldr	r2, [pc, #196]	; (8000e4c <Comb_measurement+0x118>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4a2f      	ldr	r2, [pc, #188]	; (8000e50 <Comb_measurement+0x11c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Combine bytes for Y-axis
    mag_Y[chip_select] = (read_Y2[chip_select] << 16) | (read_Y1[chip_select] << 8) | read_Y0[chip_select];
 8000d98:	4a2e      	ldr	r2, [pc, #184]	; (8000e54 <Comb_measurement+0x120>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	041a      	lsls	r2, r3, #16
 8000da2:	492d      	ldr	r1, [pc, #180]	; (8000e58 <Comb_measurement+0x124>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	440b      	add	r3, r1
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	4313      	orrs	r3, r2
 8000dae:	492b      	ldr	r1, [pc, #172]	; (8000e5c <Comb_measurement+0x128>)
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	440a      	add	r2, r1
 8000db4:	7812      	ldrb	r2, [r2, #0]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	4619      	mov	r1, r3
 8000dba:	4a29      	ldr	r2, [pc, #164]	; (8000e60 <Comb_measurement+0x12c>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_Y[chip_select] = (mag_Y[chip_select] & 0x800000) ? (mag_Y[chip_select] | 0xFF000000) : mag_Y[chip_select];
 8000dc2:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <Comb_measurement+0x12c>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d007      	beq.n	8000de2 <Comb_measurement+0xae>
 8000dd2:	4a23      	ldr	r2, [pc, #140]	; (8000e60 <Comb_measurement+0x12c>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000dde:	4619      	mov	r1, r3
 8000de0:	e004      	b.n	8000dec <Comb_measurement+0xb8>
 8000de2:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <Comb_measurement+0x12c>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dea:	4619      	mov	r1, r3
 8000dec:	4a1d      	ldr	r2, [pc, #116]	; (8000e64 <Comb_measurement+0x130>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Combine bytes for Z-axis
    mag_Z[chip_select] = (read_Z2[chip_select] << 16) | (read_Z1[chip_select] << 8) | read_Z0[chip_select];
 8000df4:	4a1c      	ldr	r2, [pc, #112]	; (8000e68 <Comb_measurement+0x134>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	041a      	lsls	r2, r3, #16
 8000dfe:	491b      	ldr	r1, [pc, #108]	; (8000e6c <Comb_measurement+0x138>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	440b      	add	r3, r1
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	4919      	ldr	r1, [pc, #100]	; (8000e70 <Comb_measurement+0x13c>)
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	440a      	add	r2, r1
 8000e10:	7812      	ldrb	r2, [r2, #0]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	4619      	mov	r1, r3
 8000e16:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <Comb_measurement+0x140>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_Z[chip_select] = (mag_Z[chip_select] & 0x800000) ? (mag_Z[chip_select] | 0xFF000000) : mag_Z[chip_select];
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <Comb_measurement+0x140>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d024      	beq.n	8000e78 <Comb_measurement+0x144>
 8000e2e:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <Comb_measurement+0x140>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	e021      	b.n	8000e82 <Comb_measurement+0x14e>
 8000e3e:	bf00      	nop
 8000e40:	2000046c 	.word	0x2000046c
 8000e44:	20000428 	.word	0x20000428
 8000e48:	20000480 	.word	0x20000480
 8000e4c:	20000470 	.word	0x20000470
 8000e50:	200003a0 	.word	0x200003a0
 8000e54:	200004a4 	.word	0x200004a4
 8000e58:	200003c0 	.word	0x200003c0
 8000e5c:	20000498 	.word	0x20000498
 8000e60:	2000019c 	.word	0x2000019c
 8000e64:	20000484 	.word	0x20000484
 8000e68:	2000042c 	.word	0x2000042c
 8000e6c:	200003e4 	.word	0x200003e4
 8000e70:	20000494 	.word	0x20000494
 8000e74:	200003c4 	.word	0x200003c4
 8000e78:	4a8a      	ldr	r2, [pc, #552]	; (80010a4 <Comb_measurement+0x370>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	4619      	mov	r1, r3
 8000e82:	4a89      	ldr	r2, [pc, #548]	; (80010a8 <Comb_measurement+0x374>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Calculate magnitude
   // magnitude[chip_select] = sqrt((float)(signed_mag_X[chip_select] * signed_mag_X[chip_select]) + (signed_mag_Y[chip_select] * signed_mag_Y[chip_select]) + (signed_mag_Z[chip_select] * signed_mag_Z[chip_select]));

    // Calculate axis values in float
    X_axis[chip_select] = (float)signed_mag_X[chip_select] / gain;
 8000e8a:	4a88      	ldr	r2, [pc, #544]	; (80010ac <Comb_measurement+0x378>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fbd8 	bl	8000648 <__aeabi_i2f>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	4b85      	ldr	r3, [pc, #532]	; (80010b0 <Comb_measurement+0x37c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	f7ff fcd9 	bl	8000858 <__aeabi_fdiv>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4a82      	ldr	r2, [pc, #520]	; (80010b4 <Comb_measurement+0x380>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Y_axis[chip_select] = (float)signed_mag_Y[chip_select] / gain;
 8000eb2:	4a81      	ldr	r2, [pc, #516]	; (80010b8 <Comb_measurement+0x384>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fbc4 	bl	8000648 <__aeabi_i2f>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	4b7b      	ldr	r3, [pc, #492]	; (80010b0 <Comb_measurement+0x37c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4610      	mov	r0, r2
 8000eca:	f7ff fcc5 	bl	8000858 <__aeabi_fdiv>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4a7a      	ldr	r2, [pc, #488]	; (80010bc <Comb_measurement+0x388>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Z_axis[chip_select] = (float)signed_mag_Z[chip_select] / gain;
 8000eda:	4a73      	ldr	r2, [pc, #460]	; (80010a8 <Comb_measurement+0x374>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fbb0 	bl	8000648 <__aeabi_i2f>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	4b71      	ldr	r3, [pc, #452]	; (80010b0 <Comb_measurement+0x37c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	f7ff fcb1 	bl	8000858 <__aeabi_fdiv>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4a71      	ldr	r2, [pc, #452]	; (80010c0 <Comb_measurement+0x38c>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    //Converting float axis data in to  integer data
    x_axis[chip_select] = (int16_t)(X_axis[chip_select] * 100);
 8000f02:	4a6c      	ldr	r2, [pc, #432]	; (80010b4 <Comb_measurement+0x380>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0a:	496e      	ldr	r1, [pc, #440]	; (80010c4 <Comb_measurement+0x390>)
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fbef 	bl	80006f0 <__aeabi_fmul>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fd3b 	bl	8000990 <__aeabi_f2iz>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	b299      	uxth	r1, r3
 8000f20:	4a69      	ldr	r2, [pc, #420]	; (80010c8 <Comb_measurement+0x394>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    y_axis[chip_select] = (int16_t)(Y_axis[chip_select] * 100);
 8000f28:	4a64      	ldr	r2, [pc, #400]	; (80010bc <Comb_measurement+0x388>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f30:	4964      	ldr	r1, [pc, #400]	; (80010c4 <Comb_measurement+0x390>)
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fbdc 	bl	80006f0 <__aeabi_fmul>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fd28 	bl	8000990 <__aeabi_f2iz>
 8000f40:	4603      	mov	r3, r0
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	b299      	uxth	r1, r3
 8000f46:	4a61      	ldr	r2, [pc, #388]	; (80010cc <Comb_measurement+0x398>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    z_axis[chip_select] = (int16_t)(Z_axis[chip_select] * 100);
 8000f4e:	4a5c      	ldr	r2, [pc, #368]	; (80010c0 <Comb_measurement+0x38c>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	495b      	ldr	r1, [pc, #364]	; (80010c4 <Comb_measurement+0x390>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fbc9 	bl	80006f0 <__aeabi_fmul>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fd15 	bl	8000990 <__aeabi_f2iz>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	4a58      	ldr	r2, [pc, #352]	; (80010d0 <Comb_measurement+0x39c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    data1[counter++]=x_axis[chip_select]>> 8;
 8000f74:	4a54      	ldr	r2, [pc, #336]	; (80010c8 <Comb_measurement+0x394>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	b298      	uxth	r0, r3
 8000f80:	4b54      	ldr	r3, [pc, #336]	; (80010d4 <Comb_measurement+0x3a0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	1c5a      	adds	r2, r3, #1
 8000f86:	4953      	ldr	r1, [pc, #332]	; (80010d4 <Comb_measurement+0x3a0>)
 8000f88:	600a      	str	r2, [r1, #0]
 8000f8a:	b201      	sxth	r1, r0
 8000f8c:	4a52      	ldr	r2, [pc, #328]	; (80010d8 <Comb_measurement+0x3a4>)
 8000f8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    data1[counter++]=x_axis[chip_select];
 8000f92:	4a4d      	ldr	r2, [pc, #308]	; (80010c8 <Comb_measurement+0x394>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8000f9a:	4b4e      	ldr	r3, [pc, #312]	; (80010d4 <Comb_measurement+0x3a0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	494c      	ldr	r1, [pc, #304]	; (80010d4 <Comb_measurement+0x3a0>)
 8000fa2:	600a      	str	r2, [r1, #0]
 8000fa4:	b201      	sxth	r1, r0
 8000fa6:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <Comb_measurement+0x3a4>)
 8000fa8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    data1[counter++]=y_axis[chip_select]>>8;
 8000fac:	4a47      	ldr	r2, [pc, #284]	; (80010cc <Comb_measurement+0x398>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	b298      	uxth	r0, r3
 8000fb8:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <Comb_measurement+0x3a0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	4945      	ldr	r1, [pc, #276]	; (80010d4 <Comb_measurement+0x3a0>)
 8000fc0:	600a      	str	r2, [r1, #0]
 8000fc2:	b201      	sxth	r1, r0
 8000fc4:	4a44      	ldr	r2, [pc, #272]	; (80010d8 <Comb_measurement+0x3a4>)
 8000fc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    data1[counter++]=y_axis[chip_select];
 8000fca:	4a40      	ldr	r2, [pc, #256]	; (80010cc <Comb_measurement+0x398>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8000fd2:	4b40      	ldr	r3, [pc, #256]	; (80010d4 <Comb_measurement+0x3a0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	493e      	ldr	r1, [pc, #248]	; (80010d4 <Comb_measurement+0x3a0>)
 8000fda:	600a      	str	r2, [r1, #0]
 8000fdc:	b201      	sxth	r1, r0
 8000fde:	4a3e      	ldr	r2, [pc, #248]	; (80010d8 <Comb_measurement+0x3a4>)
 8000fe0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    data1[counter++]=z_axis[chip_select]>>8;
 8000fe4:	4a3a      	ldr	r2, [pc, #232]	; (80010d0 <Comb_measurement+0x39c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	b298      	uxth	r0, r3
 8000ff0:	4b38      	ldr	r3, [pc, #224]	; (80010d4 <Comb_measurement+0x3a0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	4937      	ldr	r1, [pc, #220]	; (80010d4 <Comb_measurement+0x3a0>)
 8000ff8:	600a      	str	r2, [r1, #0]
 8000ffa:	b201      	sxth	r1, r0
 8000ffc:	4a36      	ldr	r2, [pc, #216]	; (80010d8 <Comb_measurement+0x3a4>)
 8000ffe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    data1[counter++]=z_axis[chip_select];
 8001002:	4a33      	ldr	r2, [pc, #204]	; (80010d0 <Comb_measurement+0x39c>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800100a:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <Comb_measurement+0x3a0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	4930      	ldr	r1, [pc, #192]	; (80010d4 <Comb_measurement+0x3a0>)
 8001012:	600a      	str	r2, [r1, #0]
 8001014:	b201      	sxth	r1, r0
 8001016:	4a30      	ldr	r2, [pc, #192]	; (80010d8 <Comb_measurement+0x3a4>)
 8001018:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    char buf[100];
//    sprintf(buf, "%0.2f\t%0.2f\t%0.2f\t\t\0",X_axis[chip_select],Y_axis[chip_select],Z_axis[chip_select]);
//    HAL_UART_Transmit(&huart1, buf, strlen(buf),1000);

    if(counter + 12 > DATA_SIZE){
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <Comb_measurement+0x3a0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	330c      	adds	r3, #12
 8001022:	2bfa      	cmp	r3, #250	; 0xfa
 8001024:	d919      	bls.n	800105a <Comb_measurement+0x326>
    	write_to_file("/epdm.txt", data1, counter);
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <Comb_measurement+0x3a0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	492a      	ldr	r1, [pc, #168]	; (80010d8 <Comb_measurement+0x3a4>)
 800102e:	482b      	ldr	r0, [pc, #172]	; (80010dc <Comb_measurement+0x3a8>)
 8001030:	f006 fa84 	bl	800753c <write_to_file>
    	HAL_UART_Transmit(&huart2, data1, counter, 1000);
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <Comb_measurement+0x3a0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	b29a      	uxth	r2, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	4926      	ldr	r1, [pc, #152]	; (80010d8 <Comb_measurement+0x3a4>)
 8001040:	4827      	ldr	r0, [pc, #156]	; (80010e0 <Comb_measurement+0x3ac>)
 8001042:	f00b f95a 	bl	800c2fa <HAL_UART_Transmit>

//    	HAL_UART_Transmit(&huart1, data1, counter, 1000);
    	HAL_UART_Transmit(&huart1, "Data written to flash\n", sizeof("Data written to flash\n"), 1000);
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	2217      	movs	r2, #23
 800104c:	4925      	ldr	r1, [pc, #148]	; (80010e4 <Comb_measurement+0x3b0>)
 800104e:	4826      	ldr	r0, [pc, #152]	; (80010e8 <Comb_measurement+0x3b4>)
 8001050:	f00b f953 	bl	800c2fa <HAL_UART_Transmit>
    	counter = 0;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <Comb_measurement+0x3a0>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
//
////        // Read back data
   //     Bulk_Read_4B(&hspi2, 0, &read_data, sizeof(read_data));

         //Transmitting float data via UART
        myDebug("%d %d %d %d ", x_axis[chip_select],y_axis[chip_select],z_axis[chip_select],Magnitude[chip_select]);
 800105a:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <Comb_measurement+0x394>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001062:	461c      	mov	r4, r3
 8001064:	4a19      	ldr	r2, [pc, #100]	; (80010cc <Comb_measurement+0x398>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800106c:	461d      	mov	r5, r3
 800106e:	4a18      	ldr	r2, [pc, #96]	; (80010d0 <Comb_measurement+0x39c>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001076:	461e      	mov	r6, r3
 8001078:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <Comb_measurement+0x3b8>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f9cf 	bl	8000424 <__aeabi_f2d>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	e9cd 2300 	strd	r2, r3, [sp]
 800108e:	4633      	mov	r3, r6
 8001090:	462a      	mov	r2, r5
 8001092:	4621      	mov	r1, r4
 8001094:	4816      	ldr	r0, [pc, #88]	; (80010f0 <Comb_measurement+0x3bc>)
 8001096:	f000 f82d 	bl	80010f4 <myDebug>
//    	myDebug("%.2f", x_axis[chip_select]);
//    	myDebug("%.2f", y_axis[chip_select]);
//    	myDebug("%.2f", z_axis[chip_select]);
//        myDebug("%.2f", Magnitude[chip_select]);
}
 800109a:	bf00      	nop
 800109c:	3774      	adds	r7, #116	; 0x74
 800109e:	46bd      	mov	sp, r7
 80010a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200003c4 	.word	0x200003c4
 80010a8:	20000418 	.word	0x20000418
 80010ac:	200003a0 	.word	0x200003a0
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000408 	.word	0x20000408
 80010b8:	20000484 	.word	0x20000484
 80010bc:	200003e8 	.word	0x200003e8
 80010c0:	200003b0 	.word	0x200003b0
 80010c4:	42c80000 	.word	0x42c80000
 80010c8:	20000464 	.word	0x20000464
 80010cc:	2000049c 	.word	0x2000049c
 80010d0:	20000194 	.word	0x20000194
 80010d4:	200000cc 	.word	0x200000cc
 80010d8:	200001ac 	.word	0x200001ac
 80010dc:	0800f0fc 	.word	0x0800f0fc
 80010e0:	20000898 	.word	0x20000898
 80010e4:	0800f108 	.word	0x0800f108
 80010e8:	200006b8 	.word	0x200006b8
 80010ec:	200003f8 	.word	0x200003f8
 80010f0:	0800f120 	.word	0x0800f120

080010f4 <myDebug>:

void myDebug(const char *fmt, ...) {
 80010f4:	b40f      	push	{r0, r1, r2, r3}
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b09a      	sub	sp, #104	; 0x68
 80010fa:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 80010fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001100:	667b      	str	r3, [r7, #100]	; 0x64
    char buffer[100];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001102:	4638      	mov	r0, r7
 8001104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001106:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001108:	2164      	movs	r1, #100	; 0x64
 800110a:	f00d fa49 	bl	800e5a0 <vsniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 800110e:	463b      	mov	r3, r7
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff f81b 	bl	800014c <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	b29a      	uxth	r2, r3
 800111a:	4639      	mov	r1, r7
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <myDebug+0x40>)
 8001122:	f00b f8ea 	bl	800c2fa <HAL_UART_Transmit>
    va_end(args);
}
 8001126:	bf00      	nop
 8001128:	3768      	adds	r7, #104	; 0x68
 800112a:	46bd      	mov	sp, r7
 800112c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001130:	b004      	add	sp, #16
 8001132:	4770      	bx	lr
 8001134:	200006b8 	.word	0x200006b8

08001138 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4293      	cmp	r3, r2
 8001148:	bf38      	it	cc
 800114a:	4613      	movcc	r3, r2
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4293      	cmp	r3, r2
 8001166:	bf28      	it	cs
 8001168:	4613      	movcs	r3, r2
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	fbb3 f2f2 	udiv	r2, r3, r2
 8001186:	6839      	ldr	r1, [r7, #0]
 8001188:	fb01 f202 	mul.w	r2, r1, r2
 800118c:	1a9b      	subs	r3, r3, r2
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	1ad3      	subs	r3, r2, r3
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	3b01      	subs	r3, #1
 80011ae:	6839      	ldr	r1, [r7, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ffdf 	bl	8001174 <lfs_aligndown>
 80011b6:	4603      	mov	r3, r0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	fab3 f383 	clz	r3, r3
 80011d0:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr

080011de <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	fa93 f3a3 	rbit	r3, r3
 80011ec:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fbea 	bl	80009dc <__popcountsi2>
 8001208:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	1ad3      	subs	r3, r2, r3
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8001234:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ffef 	bl	800122c <lfs_fromle32>
 800124e:	4603      	mov	r3, r0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffee 	bl	8001258 <lfs_frombe32>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f00c fd54 	bl	800dd3c <malloc>
 8001294:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f00c fd50 	bl	800dd4c <free>
#else
    (void)p;
#endif
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	601a      	str	r2, [r3, #0]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	68d8      	ldr	r0, [r3, #12]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e4:	461a      	mov	r2, r3
 80012e6:	21ff      	movs	r1, #255	; 0xff
 80012e8:	f00c fd54 	bl	800dd94 <memset>
    pcache->block = LFS_BLOCK_NULL;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	f04f 32ff 	mov.w	r2, #4294967295
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af02      	add	r7, sp, #8
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800130a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800130c:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001316:	429a      	cmp	r2, r3
 8001318:	d208      	bcs.n	800132c <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 800131a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800131c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800131e:	441a      	add	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001324:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8001326:	429a      	cmp	r2, r3
 8001328:	f240 811b 	bls.w	8001562 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 800132c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8001330:	e11c      	b.n	800156c <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8001332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001334:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d03f      	beq.n	80013bc <lfs_bd_read+0xc0>
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001342:	429a      	cmp	r2, r3
 8001344:	d13a      	bne.n	80013bc <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8001350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001352:	429a      	cmp	r2, r3
 8001354:	d232      	bcs.n	80013bc <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800135c:	429a      	cmp	r2, r3
 800135e:	d324      	bcc.n	80013aa <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	6859      	ldr	r1, [r3, #4]
 8001368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800136a:	1acb      	subs	r3, r1, r3
 800136c:	4413      	add	r3, r2
 800136e:	4619      	mov	r1, r3
 8001370:	69b8      	ldr	r0, [r7, #24]
 8001372:	f7ff fef0 	bl	8001156 <lfs_min>
 8001376:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001382:	1acb      	subs	r3, r1, r3
 8001384:	4413      	add	r3, r2
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4619      	mov	r1, r3
 800138a:	69f8      	ldr	r0, [r7, #28]
 800138c:	f00c fcf4 	bl	800dd78 <memcpy>

                data += diff;
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4413      	add	r3, r2
 8001396:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4413      	add	r3, r2
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80013a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80013a8:	e0db      	b.n	8001562 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	4619      	mov	r1, r3
 80013b4:	69b8      	ldr	r0, [r7, #24]
 80013b6:	f7ff fece 	bl	8001156 <lfs_min>
 80013ba:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d13a      	bne.n	800143c <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	4413      	add	r3, r2
        if (block == rcache->block &&
 80013d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d232      	bcs.n	800143c <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013dc:	429a      	cmp	r2, r3
 80013de:	d324      	bcc.n	800142a <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6859      	ldr	r1, [r3, #4]
 80013e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ea:	1acb      	subs	r3, r1, r3
 80013ec:	4413      	add	r3, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	69b8      	ldr	r0, [r7, #24]
 80013f2:	f7ff feb0 	bl	8001156 <lfs_min>
 80013f6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001402:	1acb      	subs	r3, r1, r3
 8001404:	4413      	add	r3, r2
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4619      	mov	r1, r3
 800140a:	69f8      	ldr	r0, [r7, #28]
 800140c:	f00c fcb4 	bl	800dd78 <memcpy>

                data += diff;
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	4413      	add	r3, r2
 8001416:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4413      	add	r3, r2
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001428:	e09b      	b.n	8001562 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	4619      	mov	r1, r3
 8001434:	69b8      	ldr	r0, [r7, #24]
 8001436:	f7ff fe8e 	bl	8001156 <lfs_min>
 800143a:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800143c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d336      	bcc.n	80014b2 <lfs_bd_read+0x1b6>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001448:	695a      	ldr	r2, [r3, #20]
 800144a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001450:	fb02 f201 	mul.w	r2, r2, r1
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d12b      	bne.n	80014b2 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800145e:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8001460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001462:	429a      	cmp	r2, r3
 8001464:	d325      	bcc.n	80014b2 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	4619      	mov	r1, r3
 800146e:	69b8      	ldr	r0, [r7, #24]
 8001470:	f7ff fe80 	bl	8001174 <lfs_aligndown>
 8001474:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800147a:	685c      	ldr	r4, [r3, #4]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800148a:	47a0      	blx	r4
 800148c:	6178      	str	r0, [r7, #20]
            if (err) {
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <lfs_bd_read+0x19c>
                return err;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	e069      	b.n	800156c <lfs_bd_read+0x270>
            }

            data += diff;
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4413      	add	r3, r2
 800149e:	61fb      	str	r3, [r7, #28]
            off += diff;
 80014a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4413      	add	r3, r2
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 80014a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 80014b0:	e057      	b.n	8001562 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d305      	bcc.n	80014ca <lfs_bd_read+0x1ce>
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <lfs_bd_read+0x278>)
 80014c0:	4a2d      	ldr	r2, [pc, #180]	; (8001578 <lfs_bd_read+0x27c>)
 80014c2:	216b      	movs	r1, #107	; 0x6b
 80014c4:	482d      	ldr	r0, [pc, #180]	; (800157c <lfs_bd_read+0x280>)
 80014c6:	f00c fbdf 	bl	800dc88 <__assert_func>
        rcache->block = block;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ce:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	4619      	mov	r1, r3
 80014d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014da:	f7ff fe4b 	bl	8001174 <lfs_aligndown>
 80014de:	4602      	mov	r2, r0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 80014e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	4619      	mov	r1, r3
 80014f2:	4610      	mov	r0, r2
 80014f4:	f7ff fe52 	bl	800119c <lfs_alignup>
 80014f8:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	4619      	mov	r1, r3
 8001502:	4610      	mov	r0, r2
 8001504:	f7ff fe27 	bl	8001156 <lfs_min>
 8001508:	4602      	mov	r2, r0
                - rcache->off,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800150e:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	4619      	mov	r1, r3
 8001518:	4610      	mov	r0, r2
 800151a:	f7ff fe1c 	bl	8001156 <lfs_min>
 800151e:	4602      	mov	r2, r0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001528:	685c      	ldr	r4, [r3, #4]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	462b      	mov	r3, r5
 8001542:	47a0      	blx	r4
 8001544:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	2b00      	cmp	r3, #0
 800154a:	dd05      	ble.n	8001558 <lfs_bd_read+0x25c>
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <lfs_bd_read+0x284>)
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <lfs_bd_read+0x27c>)
 8001550:	2176      	movs	r1, #118	; 0x76
 8001552:	480a      	ldr	r0, [pc, #40]	; (800157c <lfs_bd_read+0x280>)
 8001554:	f00c fb98 	bl	800dc88 <__assert_func>
        if (err) {
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <lfs_bd_read+0x266>
            return err;
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	e004      	b.n	800156c <lfs_bd_read+0x270>
    while (size > 0) {
 8001562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001564:	2b00      	cmp	r3, #0
 8001566:	f47f aee4 	bne.w	8001332 <lfs_bd_read+0x36>
        }
    }

    return 0;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bdb0      	pop	{r4, r5, r7, pc}
 8001574:	0800f130 	.word	0x0800f130
 8001578:	0800f6ec 	.word	0x0800f6ec
 800157c:	0800f150 	.word	0x0800f150
 8001580:	0800f164 	.word	0x0800f164

08001584 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b08e      	sub	sp, #56	; 0x38
 8001588:	af04      	add	r7, sp, #16
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8001592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001594:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
 800159e:	e039      	b.n	8001614 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 80015a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2108      	movs	r1, #8
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fdd4 	bl	8001156 <lfs_min>
 80015ae:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	1ad1      	subs	r1, r2, r3
 80015b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	4413      	add	r3, r2
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	9203      	str	r2, [sp, #12]
 80015c0:	f107 0210 	add.w	r2, r7, #16
 80015c4:	9202      	str	r2, [sp, #8]
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	460b      	mov	r3, r1
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7ff fe92 	bl	80012fc <lfs_bd_read>
 80015d8:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <lfs_bd_cmp+0x60>
            return res;
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	e01c      	b.n	800161e <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 80015e4:	6a3a      	ldr	r2, [r7, #32]
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	18d1      	adds	r1, r2, r3
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00c fbb3 	bl	800dd5c <memcmp>
 80015f6:	61b8      	str	r0, [r7, #24]
        if (res) {
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	da01      	bge.n	8001608 <lfs_bd_cmp+0x84>
 8001604:	2301      	movs	r3, #1
 8001606:	e00a      	b.n	800161e <lfs_bd_cmp+0x9a>
 8001608:	2302      	movs	r3, #2
 800160a:	e008      	b.n	800161e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800160c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	4413      	add	r3, r2
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
 8001614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001618:	429a      	cmp	r2, r3
 800161a:	d3c1      	bcc.n	80015a0 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b08c      	sub	sp, #48	; 0x30
 800162c:	af04      	add	r7, sp, #16
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163e:	d061      	beq.n	8001704 <lfs_bd_flush+0xdc>
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f113 0f02 	cmn.w	r3, #2
 8001648:	d05c      	beq.n	8001704 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	429a      	cmp	r2, r3
 8001656:	d305      	bcc.n	8001664 <lfs_bd_flush+0x3c>
 8001658:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <lfs_bd_flush+0xe8>)
 800165a:	4a2e      	ldr	r2, [pc, #184]	; (8001714 <lfs_bd_flush+0xec>)
 800165c:	219e      	movs	r1, #158	; 0x9e
 800165e:	482e      	ldr	r0, [pc, #184]	; (8001718 <lfs_bd_flush+0xf0>)
 8001660:	f00c fb12 	bl	800dc88 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	4619      	mov	r1, r3
 8001670:	4610      	mov	r0, r2
 8001672:	f7ff fd93 	bl	800119c <lfs_alignup>
 8001676:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800167c:	689c      	ldr	r4, [r3, #8]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	6819      	ldr	r1, [r3, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	462b      	mov	r3, r5
 8001694:	47a0      	blx	r4
 8001696:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2b00      	cmp	r3, #0
 800169c:	dd05      	ble.n	80016aa <lfs_bd_flush+0x82>
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <lfs_bd_flush+0xf4>)
 80016a0:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <lfs_bd_flush+0xec>)
 80016a2:	21a2      	movs	r1, #162	; 0xa2
 80016a4:	481c      	ldr	r0, [pc, #112]	; (8001718 <lfs_bd_flush+0xf0>)
 80016a6:	f00c faef 	bl	800dc88 <__assert_func>
        if (err) {
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <lfs_bd_flush+0x8c>
            return err;
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	e028      	b.n	8001706 <lfs_bd_flush+0xde>
        }

        if (validate) {
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d020      	beq.n	80016fc <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff fdf9 	bl	80012b4 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 80016ce:	69f8      	ldr	r0, [r7, #28]
 80016d0:	9003      	str	r0, [sp, #12]
 80016d2:	9102      	str	r1, [sp, #8]
 80016d4:	9201      	str	r2, [sp, #4]
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	2100      	movs	r1, #0
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f7ff ff50 	bl	8001584 <lfs_bd_cmp>
 80016e4:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da01      	bge.n	80016f0 <lfs_bd_flush+0xc8>
                return res;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	e00a      	b.n	8001706 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 80016f6:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80016fa:	e004      	b.n	8001706 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff fde6 	bl	80012d0 <lfs_cache_zero>
    }

    return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3720      	adds	r7, #32
 800170a:	46bd      	mov	sp, r7
 800170c:	bdb0      	pop	{r4, r5, r7, pc}
 800170e:	bf00      	nop
 8001710:	0800f170 	.word	0x0800f170
 8001714:	0800f6f8 	.word	0x0800f6f8
 8001718:	0800f150 	.word	0x0800f150
 800171c:	0800f164 	.word	0x0800f164

08001720 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f7ff fdbf 	bl	80012b4 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	68b9      	ldr	r1, [r7, #8]
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f7ff ff73 	bl	8001628 <lfs_bd_flush>
 8001742:	6178      	str	r0, [r7, #20]
    if (err) {
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <lfs_bd_sync+0x2e>
        return err;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	e011      	b.n	8001772 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001758:	4610      	mov	r0, r2
 800175a:	4798      	blx	r3
 800175c:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2b00      	cmp	r3, #0
 8001762:	dd05      	ble.n	8001770 <lfs_bd_sync+0x50>
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <lfs_bd_sync+0x5c>)
 8001766:	4a06      	ldr	r2, [pc, #24]	; (8001780 <lfs_bd_sync+0x60>)
 8001768:	21c8      	movs	r1, #200	; 0xc8
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <lfs_bd_sync+0x64>)
 800176c:	f00c fa8c 	bl	800dc88 <__assert_func>
    return err;
 8001770:	697b      	ldr	r3, [r7, #20]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	0800f164 	.word	0x0800f164
 8001780:	0800f708 	.word	0x0800f708
 8001784:	0800f150 	.word	0x0800f150

08001788 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8001796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001798:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 800179a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179c:	f113 0f02 	cmn.w	r3, #2
 80017a0:	d00b      	beq.n	80017ba <lfs_bd_prog+0x32>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d305      	bcc.n	80017ba <lfs_bd_prog+0x32>
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <lfs_bd_prog+0x144>)
 80017b0:	4a47      	ldr	r2, [pc, #284]	; (80018d0 <lfs_bd_prog+0x148>)
 80017b2:	21d3      	movs	r1, #211	; 0xd3
 80017b4:	4847      	ldr	r0, [pc, #284]	; (80018d4 <lfs_bd_prog+0x14c>)
 80017b6:	f00c fa67 	bl	800dc88 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 80017ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017be:	441a      	add	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d977      	bls.n	80018ba <lfs_bd_prog+0x132>
 80017ca:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <lfs_bd_prog+0x150>)
 80017cc:	4a40      	ldr	r2, [pc, #256]	; (80018d0 <lfs_bd_prog+0x148>)
 80017ce:	21d4      	movs	r1, #212	; 0xd4
 80017d0:	4840      	ldr	r0, [pc, #256]	; (80018d4 <lfs_bd_prog+0x14c>)
 80017d2:	f00c fa59 	bl	800dc88 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017dc:	429a      	cmp	r2, r3
 80017de:	d151      	bne.n	8001884 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 80017e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d34c      	bcc.n	8001884 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	4413      	add	r3, r2
                off >= pcache->off &&
 80017f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d243      	bcs.n	8001884 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	6859      	ldr	r1, [r3, #4]
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800180a:	4413      	add	r3, r2
 800180c:	4619      	mov	r1, r3
 800180e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001810:	f7ff fca1 	bl	8001156 <lfs_min>
 8001814:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001820:	1acb      	subs	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	69f9      	ldr	r1, [r7, #28]
 8001828:	4618      	mov	r0, r3
 800182a:	f00c faa5 	bl	800dd78 <memcpy>

            data += diff;
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	4413      	add	r3, r2
 8001834:	61fb      	str	r3, [r7, #28]
            off += diff;
 8001836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	4413      	add	r3, r2
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 800183e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	6898      	ldr	r0, [r3, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	4619      	mov	r1, r3
 8001854:	f7ff fc70 	bl	8001138 <lfs_max>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	429a      	cmp	r2, r3
 800186a:	d126      	bne.n	80018ba <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f7ff fed8 	bl	8001628 <lfs_bd_flush>
 8001878:	6178      	str	r0, [r7, #20]
                if (err) {
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01c      	beq.n	80018ba <lfs_bd_prog+0x132>
                    return err;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	e01e      	b.n	80018c2 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188c:	d005      	beq.n	800189a <lfs_bd_prog+0x112>
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <lfs_bd_prog+0x154>)
 8001890:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <lfs_bd_prog+0x148>)
 8001892:	21f1      	movs	r1, #241	; 0xf1
 8001894:	480f      	ldr	r0, [pc, #60]	; (80018d4 <lfs_bd_prog+0x14c>)
 8001896:	f00c f9f7 	bl	800dc88 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800189e:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	4619      	mov	r1, r3
 80018a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018aa:	f7ff fc63 	bl	8001174 <lfs_aligndown>
 80018ae:	4602      	mov	r2, r0
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 80018ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d18a      	bne.n	80017d6 <lfs_bd_prog+0x4e>
    }

    return 0;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	0800f198 	.word	0x0800f198
 80018d0:	0800f714 	.word	0x0800f714
 80018d4:	0800f150 	.word	0x0800f150
 80018d8:	0800f1d4 	.word	0x0800f1d4
 80018dc:	0800f1f8 	.word	0x0800f1f8

080018e0 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d305      	bcc.n	8001902 <lfs_bd_erase+0x22>
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <lfs_bd_erase+0x54>)
 80018f8:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <lfs_bd_erase+0x58>)
 80018fa:	21ff      	movs	r1, #255	; 0xff
 80018fc:	480f      	ldr	r0, [pc, #60]	; (800193c <lfs_bd_erase+0x5c>)
 80018fe:	f00c f9c3 	bl	800dc88 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800190c:	6839      	ldr	r1, [r7, #0]
 800190e:	4610      	mov	r0, r2
 8001910:	4798      	blx	r3
 8001912:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	dd06      	ble.n	8001928 <lfs_bd_erase+0x48>
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <lfs_bd_erase+0x60>)
 800191c:	4a06      	ldr	r2, [pc, #24]	; (8001938 <lfs_bd_erase+0x58>)
 800191e:	f240 1101 	movw	r1, #257	; 0x101
 8001922:	4806      	ldr	r0, [pc, #24]	; (800193c <lfs_bd_erase+0x5c>)
 8001924:	f00c f9b0 	bl	800dc88 <__assert_func>
    return err;
 8001928:	68fb      	ldr	r3, [r7, #12]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	0800f130 	.word	0x0800f130
 8001938:	0800f720 	.word	0x0800f720
 800193c:	0800f150 	.word	0x0800f150
 8001940:	0800f164 	.word	0x0800f164

08001944 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3304      	adds	r3, #4
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	601a      	str	r2, [r3, #0]
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197c:	d005      	beq.n	800198a <lfs_pair_isnull+0x1e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3304      	adds	r3, #4
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001988:	d101      	bne.n	800198e <lfs_pair_isnull+0x22>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <lfs_pair_isnull+0x24>
 800198e:	2300      	movs	r3, #0
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	b2db      	uxtb	r3, r3
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d017      	beq.n	80019e6 <lfs_pair_cmp+0x46>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3304      	adds	r3, #4
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	3304      	adds	r3, #4
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d00f      	beq.n	80019e6 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	3304      	adds	r3, #4
 80019ce:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d008      	beq.n	80019e6 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3304      	adds	r3, #4
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d001      	beq.n	80019e6 <lfs_pair_cmp+0x46>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <lfs_pair_cmp+0x48>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d107      	bne.n	8001a18 <lfs_pair_sync+0x26>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	3304      	adds	r3, #4
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d00d      	beq.n	8001a34 <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d108      	bne.n	8001a38 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d101      	bne.n	8001a38 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <lfs_pair_sync+0x48>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	b2db      	uxtb	r3, r3
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8001a4a:	b590      	push	{r4, r7, lr}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fbe8 	bl	800122c <lfs_fromle32>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3304      	adds	r3, #4
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	1d1c      	adds	r4, r3, #4
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	f7ff fbdd 	bl	800122c <lfs_fromle32>
 8001a72:	4603      	mov	r3, r0
 8001a74:	6023      	str	r3, [r4, #0]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}

08001a7e <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8001a7e:	b590      	push	{r4, r7, lr}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fbd8 	bl	8001240 <lfs_tole32>
 8001a90:	4602      	mov	r2, r0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	1d1c      	adds	r4, r3, #4
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	f7ff fbcd 	bl	8001240 <lfs_tole32>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6023      	str	r3, [r4, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}

08001ab2 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	0fdb      	lsrs	r3, r3, #31
 8001ac0:	b2db      	uxtb	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	059b      	lsls	r3, r3, #22
 8001ad8:	159b      	asrs	r3, r3, #22
 8001ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ade:	bf0c      	ite	eq
 8001ae0:	2301      	moveq	r3, #1
 8001ae2:	2300      	movne	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	0d1b      	lsrs	r3, r3, #20
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b02:	b29b      	uxth	r3, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	0d1b      	lsrs	r3, r3, #20
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b20:	b29b      	uxth	r3, r3
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	0d1b      	lsrs	r3, r3, #20
 8001b38:	b2db      	uxtb	r3, r3
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ffed 	bl	8001b2c <lfs_tag_chunk>
 8001b52:	4603      	mov	r3, r0
 8001b54:	b25b      	sxtb	r3, r3
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	0a9b      	lsrs	r3, r3, #10
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b70:	b29b      	uxth	r3, r3
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff95 	bl	8001acc <lfs_tag_isdelete>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ffe6 	bl	8001b7c <lfs_tag_size>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	3304      	adds	r3, #4
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e012      	b.n	8001bf2 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	6819      	ldr	r1, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	4403      	add	r3, r0
 8001be8:	404a      	eors	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	dde9      	ble.n	8001bcc <lfs_gstate_xor+0x10>
    }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e00b      	b.n	8001c2a <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <lfs_gstate_iszero+0x20>
            return false;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e006      	b.n	8001c32 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3301      	adds	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	ddf0      	ble.n	8001c12 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff97 	bl	8001b7c <lfs_tag_size>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff84 	bl	8001b7c <lfs_tag_size>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b2db      	uxtb	r3, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff2f 	bl	8001af0 <lfs_tag_type1>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf14      	ite	ne
 8001c98:	2301      	movne	r3, #1
 8001c9a:	2300      	moveq	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff1b 	bl	8001af0 <lfs_tag_type1>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00a      	beq.n	8001cd6 <lfs_gstate_hasmovehere+0x30>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	6839      	ldr	r1, [r7, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fe6a 	bl	80019a0 <lfs_pair_cmp>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <lfs_gstate_hasmovehere+0x30>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <lfs_gstate_hasmovehere+0x32>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	b2db      	uxtb	r3, r3
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fa9a 	bl	800122c <lfs_fromle32>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fa92 	bl	800122c <lfs_fromle32>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fa8a 	bl	800122c <lfs_fromle32>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fa84 	bl	8001240 <lfs_tole32>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fa7c 	bl	8001240 <lfs_tole32>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fa74 	bl	8001240 <lfs_tole32>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fa5a 	bl	800122c <lfs_fromle32>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fa52 	bl	800122c <lfs_fromle32>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	605a      	str	r2, [r3, #4]
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fa4c 	bl	8001240 <lfs_tole32>
 8001da8:	4602      	mov	r2, r0
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fa44 	bl	8001240 <lfs_tole32>
 8001db8:	4602      	mov	r2, r0
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	605a      	str	r2, [r3, #4]
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fa2a 	bl	800122c <lfs_fromle32>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fa22 	bl	800122c <lfs_fromle32>
 8001de8:	4602      	mov	r2, r0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fa1a 	bl	800122c <lfs_fromle32>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fa12 	bl	800122c <lfs_fromle32>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fa0a 	bl	800122c <lfs_fromle32>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fa02 	bl	800122c <lfs_fromle32>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	615a      	str	r2, [r3, #20]
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff f9fc 	bl	8001240 <lfs_tole32>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f9f4 	bl	8001240 <lfs_tole32>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f9ec 	bl	8001240 <lfs_tole32>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f9e4 	bl	8001240 <lfs_tole32>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff f9dc 	bl	8001240 <lfs_tole32>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff f9d4 	bl	8001240 <lfs_tole32>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	615a      	str	r2, [r3, #20]
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8001ea6:	b480      	push	{r7}
 8001ea8:	b085      	sub	sp, #20
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e009      	b.n	8001eca <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d101      	bne.n	8001ec4 <lfs_mlist_isopen+0x1e>
            return true;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e007      	b.n	8001ed4 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f1      	bne.n	8001eb6 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3328      	adds	r3, #40	; 0x28
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	e00d      	b.n	8001f0c <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d105      	bne.n	8001f06 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	601a      	str	r2, [r3, #0]
            break;
 8001f04:	e007      	b.n	8001f16 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1ed      	bne.n	8001ef0 <lfs_mlist_remove+0x12>
        }
    }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4413      	add	r3, r2
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f64:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8001f66:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f6a:	fb02 f201 	mul.w	r2, r2, r1
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d212      	bcs.n	8001fa2 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	009a      	lsls	r2, r3, #2
 8001f86:	440a      	add	r2, r1
 8001f88:	6811      	ldr	r1, [r2, #0]
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	f002 021f 	and.w	r2, r2, #31
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4403      	add	r3, r0
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fba:	6a1a      	ldr	r2, [r3, #32]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffe5 	bl	8001fae <lfs_alloc_ack>
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8001ff6:	e04f      	b.n	8002098 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffc:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200c:	1e5a      	subs	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	2101      	movs	r1, #1
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d132      	bne.n	8002098 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	4413      	add	r3, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800203e:	6a12      	ldr	r2, [r2, #32]
 8002040:	fbb3 f1f2 	udiv	r1, r3, r2
 8002044:	fb02 f201 	mul.w	r2, r2, r1
 8002048:	1a9a      	subs	r2, r3, r2
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 800204e:	e009      	b.n	8002064 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205e:	1e5a      	subs	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	429a      	cmp	r2, r3
 800206e:	d011      	beq.n	8002094 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	2101      	movs	r1, #1
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1dd      	bne.n	8002050 <lfs_alloc+0x64>
                }

                return 0;
 8002094:	2300      	movs	r3, #0
 8002096:	e043      	b.n	8002120 <lfs_alloc+0x134>
        while (lfs->free.i != lfs->free.size) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d1a9      	bne.n	8001ff8 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <lfs_alloc+0xc6>
            LFS_ERROR("No more free space %"PRIu32,
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 80020ac:	f06f 031b 	mvn.w	r3, #27
 80020b0:	e036      	b.n	8002120 <lfs_alloc+0x134>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020c0:	6a12      	ldr	r2, [r2, #32]
 80020c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80020c6:	fb02 f201 	mul.w	r2, r2, r1
 80020ca:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	00da      	lsls	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020dc:	4619      	mov	r1, r3
 80020de:	4610      	mov	r0, r2
 80020e0:	f7ff f839 	bl	8001156 <lfs_min>
 80020e4:	4602      	mov	r2, r0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fa:	461a      	mov	r2, r3
 80020fc:	2100      	movs	r1, #0
 80020fe:	f00b fe49 	bl	800dd94 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8002102:	2301      	movs	r3, #1
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	4908      	ldr	r1, [pc, #32]	; (8002128 <lfs_alloc+0x13c>)
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f004 fb39 	bl	8006780 <lfs_fs_rawtraverse>
 800210e:	60f8      	str	r0, [r7, #12]
        if (err) {
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f43f af6f 	beq.w	8001ff6 <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ff56 	bl	8001fca <lfs_alloc_drop>
            return err;
 800211e:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	08001f43 	.word	0x08001f43

0800212c <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b08f      	sub	sp, #60	; 0x3c
 8002130:	af04      	add	r7, sp, #16
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	333c      	adds	r3, #60	; 0x3c
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fda7 	bl	8001ca6 <lfs_gstate_hasmovehere>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80b9 	beq.w	80022d2 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff fcfc 	bl	8001b5e <lfs_tag_id>
 8002166:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80b2 	beq.w	80022d2 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fcf3 	bl	8001b5e <lfs_tag_id>
 8002178:	4603      	mov	r3, r0
 800217a:	461c      	mov	r4, r3
 800217c:	6838      	ldr	r0, [r7, #0]
 800217e:	f7ff fcee 	bl	8001b5e <lfs_tag_id>
 8002182:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8002184:	429c      	cmp	r4, r3
 8002186:	f200 80a4 	bhi.w	80022d2 <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002190:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8002192:	e09e      	b.n	80022d2 <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fcfc 	bl	8001b94 <lfs_tag_dsize>
 800219c:	4602      	mov	r2, r0
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 80021a8:	68f9      	ldr	r1, [r7, #12]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2204      	movs	r2, #4
 80021b0:	9203      	str	r2, [sp, #12]
 80021b2:	f107 0210 	add.w	r2, r7, #16
 80021b6:	9202      	str	r2, [sp, #8]
 80021b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ba:	9201      	str	r2, [sp, #4]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	2304      	movs	r3, #4
 80021c0:	460a      	mov	r2, r1
 80021c2:	2100      	movs	r1, #0
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f7ff f899 	bl	80012fc <lfs_bd_read>
 80021ca:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <lfs_dir_getslice+0xaa>
            return err;
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	e089      	b.n	80022ea <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f83d 	bl	8001258 <lfs_frombe32>
 80021de:	4602      	mov	r2, r0
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	4053      	eors	r3, r2
 80021e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021e8:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fcb7 	bl	8001b5e <lfs_tag_id>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d02b      	beq.n	800224e <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80021f6:	69f8      	ldr	r0, [r7, #28]
 80021f8:	f7ff fc7a 	bl	8001af0 <lfs_tag_type1>
 80021fc:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 80021fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002202:	d124      	bne.n	800224e <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8002204:	69f8      	ldr	r0, [r7, #28]
 8002206:	f7ff fcaa 	bl	8001b5e <lfs_tag_id>
 800220a:	4603      	mov	r3, r0
 800220c:	461c      	mov	r4, r3
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fca2 	bl	8001b5e <lfs_tag_id>
 800221a:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800221c:	429c      	cmp	r4, r3
 800221e:	d816      	bhi.n	800224e <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	1ad2      	subs	r2, r2, r3
 8002226:	4b33      	ldr	r3, [pc, #204]	; (80022f4 <lfs_dir_getslice+0x1c8>)
 8002228:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800222a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800222e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	429a      	cmp	r2, r3
 8002236:	d102      	bne.n	800223e <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8002238:	f06f 0301 	mvn.w	r3, #1
 800223c:	e055      	b.n	80022ea <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800223e:	69f8      	ldr	r0, [r7, #28]
 8002240:	f7ff fc80 	bl	8001b44 <lfs_tag_splice>
 8002244:	4603      	mov	r3, r0
 8002246:	029a      	lsls	r2, r3, #10
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	4413      	add	r3, r2
 800224c:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	1ad2      	subs	r2, r2, r3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	405a      	eors	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d138      	bne.n	80022d2 <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 8002260:	69f8      	ldr	r0, [r7, #28]
 8002262:	f7ff fc33 	bl	8001acc <lfs_tag_isdelete>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 800226c:	f06f 0301 	mvn.w	r3, #1
 8002270:	e03b      	b.n	80022ea <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8002272:	69f8      	ldr	r0, [r7, #28]
 8002274:	f7ff fc82 	bl	8001b7c <lfs_tag_size>
 8002278:	4603      	mov	r3, r0
 800227a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe ff6a 	bl	8001156 <lfs_min>
 8002282:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800228a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800228c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800228e:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8002290:	3204      	adds	r2, #4
 8002292:	6979      	ldr	r1, [r7, #20]
 8002294:	9103      	str	r1, [sp, #12]
 8002296:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002298:	9102      	str	r1, [sp, #8]
 800229a:	9201      	str	r2, [sp, #4]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	4602      	mov	r2, r0
 80022a2:	2100      	movs	r1, #0
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7ff f829 	bl	80012fc <lfs_bd_read>
 80022aa:	61b8      	str	r0, [r7, #24]
            if (err) {
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <lfs_dir_getslice+0x18a>
                return err;
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	e019      	b.n	80022ea <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 80022b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	18d0      	adds	r0, r2, r3
 80022bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	2100      	movs	r1, #0
 80022c6:	f00b fd65 	bl	800dd94 <memset>

            return tag + gdiff;
 80022ca:	6a3a      	ldr	r2, [r7, #32]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	4413      	add	r3, r2
 80022d0:	e00b      	b.n	80022ea <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fc5d 	bl	8001b94 <lfs_tag_dsize>
 80022da:	4603      	mov	r3, r0
 80022dc:	3304      	adds	r3, #4
 80022de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e0:	429a      	cmp	r2, r3
 80022e2:	f4bf af57 	bcs.w	8002194 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 80022e6:	f06f 0301 	mvn.w	r3, #1
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	372c      	adds	r7, #44	; 0x2c
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd90      	pop	{r4, r7, pc}
 80022f2:	bf00      	nop
 80022f4:	000ffc00 	.word	0x000ffc00

080022f8 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af04      	add	r7, sp, #16
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8002306:	6838      	ldr	r0, [r7, #0]
 8002308:	f7ff fc38 	bl	8001b7c <lfs_tag_size>
 800230c:	4603      	mov	r3, r0
 800230e:	9302      	str	r3, [sp, #8]
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	2300      	movs	r3, #0
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f7ff ff04 	bl	800212c <lfs_dir_getslice>
 8002324:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800232e:	b580      	push	{r7, lr}
 8002330:	b08c      	sub	sp, #48	; 0x30
 8002332:	af04      	add	r7, sp, #16
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233e:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8002340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002344:	441a      	add	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	429a      	cmp	r2, r3
 800234e:	f240 80c0 	bls.w	80024d2 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8002352:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002356:	e0c1      	b.n	80024dc <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8002358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800235a:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d03f      	beq.n	80023e2 <lfs_dir_getread+0xb4>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f113 0f02 	cmn.w	r3, #2
 800236a:	d13a      	bne.n	80023e2 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8002376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002378:	429a      	cmp	r2, r3
 800237a:	d232      	bcs.n	80023e2 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002382:	429a      	cmp	r2, r3
 8002384:	d324      	bcc.n	80023d0 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6859      	ldr	r1, [r3, #4]
 800238e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002390:	1acb      	subs	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	4619      	mov	r1, r3
 8002396:	69b8      	ldr	r0, [r7, #24]
 8002398:	f7fe fedd 	bl	8001156 <lfs_min>
 800239c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023a8:	1acb      	subs	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4619      	mov	r1, r3
 80023b0:	69f8      	ldr	r0, [r7, #28]
 80023b2:	f00b fce1 	bl	800dd78 <memcpy>

                data += diff;
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	4413      	add	r3, r2
 80023bc:	61fb      	str	r3, [r7, #28]
                off += diff;
 80023be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	4413      	add	r3, r2
 80023c4:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80023c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80023ce:	e080      	b.n	80024d2 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	4619      	mov	r1, r3
 80023da:	69b8      	ldr	r0, [r7, #24]
 80023dc:	f7fe febb 	bl	8001156 <lfs_min>
 80023e0:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f113 0f02 	cmn.w	r3, #2
 80023ea:	d13a      	bne.n	8002462 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 80023f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d232      	bcs.n	8002462 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002402:	429a      	cmp	r2, r3
 8002404:	d324      	bcc.n	8002450 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6859      	ldr	r1, [r3, #4]
 800240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002410:	1acb      	subs	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	4619      	mov	r1, r3
 8002416:	69b8      	ldr	r0, [r7, #24]
 8002418:	f7fe fe9d 	bl	8001156 <lfs_min>
 800241c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002428:	1acb      	subs	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4619      	mov	r1, r3
 8002430:	69f8      	ldr	r0, [r7, #28]
 8002432:	f00b fca1 	bl	800dd78 <memcpy>

                data += diff;
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	4413      	add	r3, r2
 800243c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800243e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	4413      	add	r3, r2
 8002444:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8002446:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800244e:	e040      	b.n	80024d2 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	4619      	mov	r1, r3
 800245a:	69b8      	ldr	r0, [r7, #24]
 800245c:	f7fe fe7b 	bl	8001156 <lfs_min>
 8002460:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	f06f 0201 	mvn.w	r2, #1
 8002468:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	4619      	mov	r1, r3
 8002472:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002474:	f7fe fe7e 	bl	8001174 <lfs_aligndown>
 8002478:	4602      	mov	r2, r0
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800247e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	441a      	add	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	4619      	mov	r1, r3
 800248c:	4610      	mov	r0, r2
 800248e:	f7fe fe85 	bl	800119c <lfs_alignup>
 8002492:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	4619      	mov	r1, r3
 800249c:	4610      	mov	r0, r2
 800249e:	f7fe fe5a 	bl	8001156 <lfs_min>
 80024a2:	4602      	mov	r2, r0
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80024b0:	6839      	ldr	r1, [r7, #0]
 80024b2:	6889      	ldr	r1, [r1, #8]
 80024b4:	9102      	str	r1, [sp, #8]
 80024b6:	9201      	str	r2, [sp, #4]
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f7ff fe33 	bl	800212c <lfs_dir_getslice>
 80024c6:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	da01      	bge.n	80024d2 <lfs_dir_getread+0x1a4>
            return err;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	e004      	b.n	80024dc <lfs_dir_getread+0x1ae>
    while (size > 0) {
 80024d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f47f af3f 	bne.w	8002358 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <lfs_dir_traverse_filter+0x1e>
 80024fe:	4b24      	ldr	r3, [pc, #144]	; (8002590 <lfs_dir_traverse_filter+0xac>)
 8002500:	e000      	b.n	8002504 <lfs_dir_traverse_filter+0x20>
 8002502:	4b24      	ldr	r3, [pc, #144]	; (8002594 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8002504:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	405a      	eors	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d014      	beq.n	8002540 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fad6 	bl	8001acc <lfs_tag_isdelete>
 8002520:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4a19      	ldr	r2, [pc, #100]	; (8002590 <lfs_dir_traverse_filter+0xac>)
 800252a:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	6819      	ldr	r1, [r3, #0]
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <lfs_dir_traverse_filter+0xb4>)
 8002532:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002534:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8002538:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d104      	bne.n	800254a <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
        return true;
 8002546:	2301      	movs	r3, #1
 8002548:	e01e      	b.n	8002588 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800254a:	68b8      	ldr	r0, [r7, #8]
 800254c:	f7ff fad0 	bl	8001af0 <lfs_tag_type1>
 8002550:	4603      	mov	r3, r0
 8002552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002556:	d116      	bne.n	8002586 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8002558:	68b8      	ldr	r0, [r7, #8]
 800255a:	f7ff fb00 	bl	8001b5e <lfs_tag_id>
 800255e:	4603      	mov	r3, r0
 8002560:	461c      	mov	r4, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff faf9 	bl	8001b5e <lfs_tag_id>
 800256c:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800256e:	429c      	cmp	r4, r3
 8002570:	d809      	bhi.n	8002586 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002572:	68b8      	ldr	r0, [r7, #8]
 8002574:	f7ff fae6 	bl	8001b44 <lfs_tag_splice>
 8002578:	4603      	mov	r3, r0
 800257a:	029a      	lsls	r2, r3, #10
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	441a      	add	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	601a      	str	r2, [r3, #0]
    }

    return false;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	bd90      	pop	{r4, r7, pc}
 8002590:	7ffffc00 	.word	0x7ffffc00
 8002594:	700ffc00 	.word	0x700ffc00
 8002598:	000ffc00 	.word	0x000ffc00

0800259c <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b0c1      	sub	sp, #260	; 0x104
 80025a0:	af04      	add	r7, sp, #16
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 80025b0:	6838      	ldr	r0, [r7, #0]
 80025b2:	f7ff faef 	bl	8001b94 <lfs_tag_dsize>
 80025b6:	4602      	mov	r2, r0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	441a      	add	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d237      	bcs.n	8002634 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 80025c4:	6838      	ldr	r0, [r7, #0]
 80025c6:	f7ff fae5 	bl	8001b94 <lfs_tag_dsize>
 80025ca:	4602      	mov	r2, r0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 80025d2:	68f9      	ldr	r1, [r7, #12]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2204      	movs	r2, #4
 80025da:	9203      	str	r2, [sp, #12]
 80025dc:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80025e0:	9202      	str	r2, [sp, #8]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	9201      	str	r2, [sp, #4]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2304      	movs	r3, #4
 80025ea:	460a      	mov	r2, r1
 80025ec:	2100      	movs	r1, #0
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f7fe fe84 	bl	80012fc <lfs_bd_read>
 80025f4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 80025f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <lfs_dir_traverse+0x6a>
                    return err;
 8002600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002604:	e3cf      	b.n	8002da6 <lfs_dir_traverse+0x80a>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8002606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002608:	4618      	mov	r0, r3
 800260a:	f7fe fe25 	bl	8001258 <lfs_frombe32>
 800260e:	4602      	mov	r2, r0
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4053      	eors	r3, r2
 8002614:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002618:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3304      	adds	r3, #4
 8002624:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8002626:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800262a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 800262e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	e01b      	b.n	800266c <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8002634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002638:	2b00      	cmp	r3, #0
 800263a:	dd13      	ble.n	8002664 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 800263c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8002644:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 800264e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002652:	3308      	adds	r3, #8
 8002654:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8002658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800265c:	3b01      	subs	r3, #1
 800265e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002662:	e003      	b.n	800266c <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 800266a:	e2bc      	b.n	8002be6 <lfs_dir_traverse+0x64a>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800266c:	4b85      	ldr	r3, [pc, #532]	; (8002884 <lfs_dir_traverse+0x2e8>)
 800266e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8002672:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002678:	405a      	eors	r2, r3
 800267a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800267e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002682:	400b      	ands	r3, r1
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 82a0 	bne.w	8002bcc <lfs_dir_traverse+0x630>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800268c:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002690:	f7ff fa65 	bl	8001b5e <lfs_tag_id>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80fe 	beq.w	8002898 <lfs_dir_traverse+0x2fc>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800269c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d906      	bls.n	80026b2 <lfs_dir_traverse+0x116>
 80026a4:	4b78      	ldr	r3, [pc, #480]	; (8002888 <lfs_dir_traverse+0x2ec>)
 80026a6:	4a79      	ldr	r2, [pc, #484]	; (800288c <lfs_dir_traverse+0x2f0>)
 80026a8:	f44f 7154 	mov.w	r1, #848	; 0x350
 80026ac:	4878      	ldr	r0, [pc, #480]	; (8002890 <lfs_dir_traverse+0x2f4>)
 80026ae:	f00b faeb 	bl	800dc88 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 80026b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026b4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80026c4:	4413      	add	r3, r2
 80026c6:	3b98      	subs	r3, #152	; 0x98
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80026dc:	4413      	add	r3, r2
 80026de:	3b94      	subs	r3, #148	; 0x94
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80026f4:	4413      	add	r3, r2
 80026f6:	3b90      	subs	r3, #144	; 0x90
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800270c:	4413      	add	r3, r2
 800270e:	3b8c      	subs	r3, #140	; 0x8c
 8002710:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800271a:	4613      	mov	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002726:	4413      	add	r3, r2
 8002728:	3b88      	subs	r3, #136	; 0x88
 800272a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002734:	4613      	mov	r3, r2
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002740:	4413      	add	r3, r2
 8002742:	3b84      	subs	r3, #132	; 0x84
 8002744:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800275a:	4413      	add	r3, r2
 800275c:	3b80      	subs	r3, #128	; 0x80
 800275e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002774:	4413      	add	r3, r2
 8002776:	3b7c      	subs	r3, #124	; 0x7c
 8002778:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 800277c:	801a      	strh	r2, [r3, #0]
 800277e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002782:	4613      	mov	r3, r2
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	1a9b      	subs	r3, r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800278e:	4413      	add	r3, r2
 8002790:	3b7a      	subs	r3, #122	; 0x7a
 8002792:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8002796:	801a      	strh	r2, [r3, #0]
 8002798:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80027a8:	4413      	add	r3, r2
 80027aa:	3b78      	subs	r3, #120	; 0x78
 80027ac:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80027b0:	801a      	strh	r2, [r3, #0]
 80027b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80027b6:	4613      	mov	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80027c2:	4413      	add	r3, r2
 80027c4:	3b74      	subs	r3, #116	; 0x74
 80027c6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80027dc:	4413      	add	r3, r2
 80027de:	3b70      	subs	r3, #112	; 0x70
 80027e0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80027f6:	4413      	add	r3, r2
 80027f8:	3b6c      	subs	r3, #108	; 0x6c
 80027fa:	6019      	str	r1, [r3, #0]
 80027fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800280c:	4413      	add	r3, r2
 800280e:	3b68      	subs	r3, #104	; 0x68
 8002810:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002826:	4413      	add	r3, r2
 8002828:	3b68      	subs	r3, #104	; 0x68
 800282a:	3304      	adds	r3, #4
 800282c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002830:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002834:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8002838:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800283c:	3301      	adds	r3, #1
 800283e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <lfs_dir_traverse+0x2f8>)
 8002862:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8002866:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800286a:	1e5a      	subs	r2, r3, #1
 800286c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002870:	4613      	mov	r3, r2
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	3328      	adds	r3, #40	; 0x28
 800287a:	440b      	add	r3, r1
 800287c:	3304      	adds	r3, #4
 800287e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002882:	e695      	b.n	80025b0 <lfs_dir_traverse+0x14>
 8002884:	7ff00000 	.word	0x7ff00000
 8002888:	0800f21c 	.word	0x0800f21c
 800288c:	0800f730 	.word	0x0800f730
 8002890:	0800f150 	.word	0x0800f150
 8002894:	080024e5 	.word	0x080024e5
                continue;
            }
        }

popped:
 8002898:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800289a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800289e:	f7ff f95e 	bl	8001b5e <lfs_tag_id>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d015      	beq.n	80028d4 <lfs_dir_traverse+0x338>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80028a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff f957 	bl	8001b5e <lfs_tag_id>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 80028b4:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80028b8:	4293      	cmp	r3, r2
 80028ba:	f200 8189 	bhi.w	8002bd0 <lfs_dir_traverse+0x634>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80028be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff f94c 	bl	8001b5e <lfs_tag_id>
 80028c6:	4603      	mov	r3, r0
 80028c8:	461a      	mov	r2, r3
 80028ca:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80028ce:	4293      	cmp	r3, r2
 80028d0:	f240 817e 	bls.w	8002bd0 <lfs_dir_traverse+0x634>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 80028d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff f919 	bl	8001b0e <lfs_tag_type3>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f43f ae66 	beq.w	80025b0 <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 80028e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff f911 	bl	8001b0e <lfs_tag_type3>
 80028ec:	4603      	mov	r3, r0
 80028ee:	461a      	mov	r2, r3
 80028f0:	f240 1301 	movw	r3, #257	; 0x101
 80028f4:	429a      	cmp	r2, r3
 80028f6:	f040 80ed 	bne.w	8002ad4 <lfs_dir_traverse+0x538>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 80028fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028fe:	4ab7      	ldr	r2, [pc, #732]	; (8002bdc <lfs_dir_traverse+0x640>)
 8002900:	4293      	cmp	r3, r2
 8002902:	f000 8167 	beq.w	8002bd4 <lfs_dir_traverse+0x638>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8002906:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002916:	4413      	add	r3, r2
 8002918:	3b98      	subs	r3, #152	; 0x98
 800291a:	4618      	mov	r0, r3
 800291c:	233c      	movs	r3, #60	; 0x3c
 800291e:	461a      	mov	r2, r3
 8002920:	2100      	movs	r1, #0
 8002922:	f00b fa37 	bl	800dd94 <memset>
 8002926:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800292a:	4613      	mov	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002936:	4413      	add	r3, r2
 8002938:	3b98      	subs	r3, #152	; 0x98
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002942:	4613      	mov	r3, r2
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800294e:	4413      	add	r3, r2
 8002950:	3b94      	subs	r3, #148	; 0x94
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002966:	4413      	add	r3, r2
 8002968:	3b90      	subs	r3, #144	; 0x90
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002972:	4613      	mov	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800297e:	4413      	add	r3, r2
 8002980:	3b8c      	subs	r3, #140	; 0x8c
 8002982:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002998:	4413      	add	r3, r2
 800299a:	3b88      	subs	r3, #136	; 0x88
 800299c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80029b2:	4413      	add	r3, r2
 80029b4:	3b84      	subs	r3, #132	; 0x84
 80029b6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80029cc:	4413      	add	r3, r2
 80029ce:	3b80      	subs	r3, #128	; 0x80
 80029d0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80029e6:	4413      	add	r3, r2
 80029e8:	3b7c      	subs	r3, #124	; 0x7c
 80029ea:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80029ee:	801a      	strh	r2, [r3, #0]
 80029f0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002a00:	4413      	add	r3, r2
 8002a02:	3b7a      	subs	r3, #122	; 0x7a
 8002a04:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8002a08:	801a      	strh	r2, [r3, #0]
 8002a0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3b78      	subs	r3, #120	; 0x78
 8002a1e:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8002a22:	801a      	strh	r2, [r3, #0]
 8002a24:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002a28:	4613      	mov	r3, r2
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002a34:	4413      	add	r3, r2
 8002a36:	3b74      	subs	r3, #116	; 0x74
 8002a38:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002a4e:	4413      	add	r3, r2
 8002a50:	3b70      	subs	r3, #112	; 0x70
 8002a52:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002a56:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8002a58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8002a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff f889 	bl	8001b7c <lfs_tag_size>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8002a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff f873 	bl	8001b5e <lfs_tag_id>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8002a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a82:	60bb      	str	r3, [r7, #8]
            off = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8c:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8002a9a:	4b51      	ldr	r3, [pc, #324]	; (8002be0 <lfs_dir_traverse+0x644>)
 8002a9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8002aa0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002aa4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8002aa8:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002aac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8002ab0:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8002aba:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8002abe:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8002aca:	4413      	add	r3, r2
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8002ad2:	e56d      	b.n	80025b0 <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8002ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff f819 	bl	8001b0e <lfs_tag_type3>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8002ae2:	d159      	bne.n	8002b98 <lfs_dir_traverse+0x5fc>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002aea:	e04b      	b.n	8002b84 <lfs_dir_traverse+0x5e8>
                const struct lfs_attr *a = buffer;
 8002aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8002af4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	461a      	mov	r2, r3
 8002b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b06:	4413      	add	r3, r2
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002b0e:	051c      	lsls	r4, r3, #20
 8002b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff f823 	bl	8001b5e <lfs_tag_id>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8002b20:	4413      	add	r3, r2
 8002b22:	029b      	lsls	r3, r3, #10
 8002b24:	ea44 0103 	orr.w	r1, r4, r3
 8002b28:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	461a      	mov	r2, r3
 8002b36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b3a:	4413      	add	r3, r2
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8002b40:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b52:	4413      	add	r3, r2
 8002b54:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8002b56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b5a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002b5e:	4798      	blx	r3
 8002b60:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8002b64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	da02      	bge.n	8002b72 <lfs_dir_traverse+0x5d6>
                    return res;
 8002b6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b70:	e119      	b.n	8002da6 <lfs_dir_traverse+0x80a>
                }

                if (res) {
 8002b72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d12e      	bne.n	8002bd8 <lfs_dir_traverse+0x63c>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fff8 	bl	8001b7c <lfs_tag_size>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d3aa      	bcc.n	8002aec <lfs_dir_traverse+0x550>
 8002b96:	e50b      	b.n	80025b0 <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8002b98:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8002b9c:	029a      	lsls	r2, r3, #10
 8002b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba0:	18d1      	adds	r1, r2, r3
 8002ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ba6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002baa:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002bae:	4798      	blx	r3
 8002bb0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8002bb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	da02      	bge.n	8002bc2 <lfs_dir_traverse+0x626>
                return res;
 8002bbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002bc0:	e0f1      	b.n	8002da6 <lfs_dir_traverse+0x80a>
            }

            if (res) {
 8002bc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10c      	bne.n	8002be4 <lfs_dir_traverse+0x648>
 8002bca:	e4f1      	b.n	80025b0 <lfs_dir_traverse+0x14>
                continue;
 8002bcc:	bf00      	nop
 8002bce:	e4ef      	b.n	80025b0 <lfs_dir_traverse+0x14>
            continue;
 8002bd0:	bf00      	nop
 8002bd2:	e4ed      	b.n	80025b0 <lfs_dir_traverse+0x14>
                continue;
 8002bd4:	bf00      	nop
 8002bd6:	e4eb      	b.n	80025b0 <lfs_dir_traverse+0x14>
                    break;
 8002bd8:	bf00      	nop
        {
 8002bda:	e4e9      	b.n	80025b0 <lfs_dir_traverse+0x14>
 8002bdc:	080024e5 	.word	0x080024e5
 8002be0:	600ffc00 	.word	0x600ffc00
                break;
 8002be4:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8002be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80d9 	beq.w	8002da2 <lfs_dir_traverse+0x806>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8002bf0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002bf4:	1e5a      	subs	r2, r3, #1
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002c02:	4413      	add	r3, r2
 8002c04:	3b98      	subs	r3, #152	; 0x98
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8002c0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002c0e:	1e5a      	subs	r2, r3, #1
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3b94      	subs	r3, #148	; 0x94
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8002c24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002c28:	1e5a      	subs	r2, r3, #1
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002c36:	4413      	add	r3, r2
 8002c38:	3b90      	subs	r3, #144	; 0x90
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8002c3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002c42:	1e5a      	subs	r2, r3, #1
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002c50:	4413      	add	r3, r2
 8002c52:	3b8c      	subs	r3, #140	; 0x8c
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 8002c5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002c5e:	1e5a      	subs	r2, r3, #1
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3b88      	subs	r3, #136	; 0x88
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8002c76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002c7a:	1e5a      	subs	r2, r3, #1
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002c88:	4413      	add	r3, r2
 8002c8a:	3b84      	subs	r3, #132	; 0x84
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8002c92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002c96:	1e5a      	subs	r2, r3, #1
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3b80      	subs	r3, #128	; 0x80
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8002cae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002cb2:	1e5a      	subs	r2, r3, #1
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3b7c      	subs	r3, #124	; 0x7c
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8002cca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002cce:	1e5a      	subs	r2, r3, #1
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002cdc:	4413      	add	r3, r2
 8002cde:	3b7a      	subs	r3, #122	; 0x7a
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 8002ce6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002cea:	1e5a      	subs	r2, r3, #1
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3b78      	subs	r3, #120	; 0x78
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8002d02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002d06:	1e5a      	subs	r2, r3, #1
 8002d08:	4613      	mov	r3, r2
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002d14:	4413      	add	r3, r2
 8002d16:	3b74      	subs	r3, #116	; 0x74
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8002d1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002d22:	1e5a      	subs	r2, r3, #1
 8002d24:	4613      	mov	r3, r2
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002d30:	4413      	add	r3, r2
 8002d32:	3b70      	subs	r3, #112	; 0x70
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 8002d3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002d3e:	1e5a      	subs	r2, r3, #1
 8002d40:	4613      	mov	r3, r2
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3b6c      	subs	r3, #108	; 0x6c
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8002d54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002d58:	1e5a      	subs	r2, r3, #1
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002d66:	4413      	add	r3, r2
 8002d68:	3b68      	subs	r3, #104	; 0x68
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 8002d70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002d74:	1e5a      	subs	r2, r3, #1
 8002d76:	4613      	mov	r3, r2
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002d82:	4413      	add	r3, r2
 8002d84:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8002d88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d8c:	3204      	adds	r2, #4
 8002d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d92:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8002d96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 8002da0:	e57b      	b.n	800289a <lfs_dir_traverse+0x2fe>
    } else {
        return res;
 8002da2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	37f4      	adds	r7, #244	; 0xf4
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd90      	pop	{r4, r7, pc}
 8002dae:	bf00      	nop

08002db0 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b09f      	sub	sp, #124	; 0x7c
 8002db4:	af04      	add	r7, sp, #16
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d207      	bcs.n	8002de2 <lfs_dir_fetchmatch+0x32>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d302      	bcc.n	8002de8 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 8002de2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002de6:	e33a      	b.n	800345e <lfs_dir_fetchmatch+0x6ae>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8002de8:	2300      	movs	r3, #0
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30
 8002dec:	2300      	movs	r3, #0
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8002df4:	2300      	movs	r3, #0
 8002df6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002df8:	e056      	b.n	8002ea8 <lfs_dir_fetchmatch+0xf8>
        int err = lfs_bd_read(lfs,
 8002dfa:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8002e04:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002e06:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002e0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e0c:	0092      	lsls	r2, r2, #2
 8002e0e:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8002e10:	2104      	movs	r1, #4
 8002e12:	9103      	str	r1, [sp, #12]
 8002e14:	9202      	str	r2, [sp, #8]
 8002e16:	2200      	movs	r2, #0
 8002e18:	9201      	str	r2, [sp, #4]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	4602      	mov	r2, r0
 8002e20:	2100      	movs	r1, #0
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7fe fa6a 	bl	80012fc <lfs_bd_read>
 8002e28:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 8002e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002e32:	4413      	add	r3, r2
 8002e34:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe f9f7 	bl	800122c <lfs_fromle32>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002e48:	440b      	add	r3, r1
 8002e4a:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <lfs_dir_fetchmatch+0xb0>
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e56:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002e5a:	d001      	beq.n	8002e60 <lfs_dir_fetchmatch+0xb0>
            return err;
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5e:	e2fe      	b.n	800345e <lfs_dir_fetchmatch+0x6ae>
        }

        if (err != LFS_ERR_CORRUPT &&
 8002e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e62:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002e66:	d01c      	beq.n	8002ea2 <lfs_dir_fetchmatch+0xf2>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8002e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002e70:	4413      	add	r3, r2
 8002e72:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8002e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e78:	3301      	adds	r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	bfb8      	it	lt
 8002e82:	425b      	neglt	r3, r3
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f7fe f9bd 	bl	8001212 <lfs_scmp>
 8002e98:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	dd01      	ble.n	8002ea2 <lfs_dir_fetchmatch+0xf2>
            r = i;
 8002e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea0:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8002ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	dda5      	ble.n	8002dfa <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8002eae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	bfb8      	it	lt
 8002eb8:	425b      	neglt	r3, r3
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8002ec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec8:	3301      	adds	r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	bfb8      	it	lt
 8002ed2:	425b      	neglt	r3, r3
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	bfb8      	it	lt
 8002eea:	425b      	neglt	r3, r3
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2200      	movs	r2, #0
 8002f00:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8002f02:	2300      	movs	r3, #0
 8002f04:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f06:	e2a4      	b.n	8003452 <lfs_dir_fetchmatch+0x6a2>
        lfs_off_t off = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 8002f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f10:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8002f18:	4aad      	ldr	r2, [pc, #692]	; (80031d0 <lfs_dir_fetchmatch+0x420>)
 8002f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f22:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 8002f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f2e:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe f983 	bl	8001240 <lfs_tole32>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	3308      	adds	r3, #8
 8002f44:	2204      	movs	r2, #4
 8002f46:	4619      	mov	r1, r3
 8002f48:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4c:	f004 f94e 	bl	80071ec <lfs_crc>
 8002f50:	4603      	mov	r3, r0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe f967 	bl	800122c <lfs_fromle32>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8002f64:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002f66:	f7fe fe15 	bl	8001b94 <lfs_tag_dsize>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f6e:	4413      	add	r3, r2
 8002f70:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 8002f72:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8002f78:	69d8      	ldr	r0, [r3, #28]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2204      	movs	r2, #4
 8002f80:	9203      	str	r2, [sp, #12]
 8002f82:	f107 0220 	add.w	r2, r7, #32
 8002f86:	9202      	str	r2, [sp, #8]
 8002f88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f8a:	9201      	str	r2, [sp, #4]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	4603      	mov	r3, r0
 8002f90:	460a      	mov	r2, r1
 8002f92:	2100      	movs	r1, #0
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7fe f9b1 	bl	80012fc <lfs_bd_read>
 8002f9a:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8002f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <lfs_dir_fetchmatch+0x206>
                if (err == LFS_ERR_CORRUPT) {
 8002fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002fa8:	d103      	bne.n	8002fb2 <lfs_dir_fetchmatch+0x202>
                    // can't continue?
                    dir->erased = false;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2200      	movs	r2, #0
 8002fae:	759a      	strb	r2, [r3, #22]
                    break;
 8002fb0:	e1d6      	b.n	8003360 <lfs_dir_fetchmatch+0x5b0>
                }
                return err;
 8002fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb4:	e253      	b.n	800345e <lfs_dir_fetchmatch+0x6ae>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	f107 0120 	add.w	r1, r7, #32
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f004 f914 	bl	80071ec <lfs_crc>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe f944 	bl	8001258 <lfs_frombe32>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd4:	4053      	eors	r3, r2
 8002fd6:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fd69 	bl	8001ab2 <lfs_tag_isvalid>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f083 0301 	eor.w	r3, r3, #1
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01b      	beq.n	8003024 <lfs_dir_fetchmatch+0x274>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8002fec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002fee:	f7fe fd7f 	bl	8001af0 <lfs_tag_type1>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002ff8:	d10d      	bne.n	8003016 <lfs_dir_fetchmatch+0x266>
                        dir->off % lfs->cfg->prog_size == 0);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003002:	6992      	ldr	r2, [r2, #24]
 8003004:	fbb3 f1f2 	udiv	r1, r3, r2
 8003008:	fb02 f201 	mul.w	r2, r2, r1
 800300c:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <lfs_dir_fetchmatch+0x266>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <lfs_dir_fetchmatch+0x268>
 8003016:	2300      	movs	r3, #0
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	759a      	strb	r2, [r3, #22]
                break;
 8003022:	e19d      	b.n	8003360 <lfs_dir_fetchmatch+0x5b0>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fdb4 	bl	8001b94 <lfs_tag_dsize>
 800302c:	4602      	mov	r2, r0
 800302e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003030:	441a      	add	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	429a      	cmp	r2, r3
 800303a:	d903      	bls.n	8003044 <lfs_dir_fetchmatch+0x294>
                dir->erased = false;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2200      	movs	r2, #0
 8003040:	759a      	strb	r2, [r3, #22]
                break;
 8003042:	e18d      	b.n	8003360 <lfs_dir_fetchmatch+0x5b0>
            }

            ptag = tag;
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe fd50 	bl	8001af0 <lfs_tag_type1>
 8003050:	4603      	mov	r3, r0
 8003052:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003056:	d164      	bne.n	8003122 <lfs_dir_fetchmatch+0x372>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8003058:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800305e:	69dc      	ldr	r4, [r3, #28]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003066:	3204      	adds	r2, #4
 8003068:	2104      	movs	r1, #4
 800306a:	9103      	str	r1, [sp, #12]
 800306c:	f107 011c 	add.w	r1, r7, #28
 8003070:	9102      	str	r1, [sp, #8]
 8003072:	9201      	str	r2, [sp, #4]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	4623      	mov	r3, r4
 8003078:	4602      	mov	r2, r0
 800307a:	2100      	movs	r1, #0
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f7fe f93d 	bl	80012fc <lfs_bd_read>
 8003082:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8003084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <lfs_dir_fetchmatch+0x2ee>
                    if (err == LFS_ERR_CORRUPT) {
 800308a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003090:	d103      	bne.n	800309a <lfs_dir_fetchmatch+0x2ea>
                        dir->erased = false;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2200      	movs	r2, #0
 8003096:	759a      	strb	r2, [r3, #22]
                        break;
 8003098:	e162      	b.n	8003360 <lfs_dir_fetchmatch+0x5b0>
                    }
                    return err;
 800309a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800309c:	e1df      	b.n	800345e <lfs_dir_fetchmatch+0x6ae>
                }
                dcrc = lfs_fromle32(dcrc);
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe f8c3 	bl	800122c <lfs_fromle32>
 80030a6:	4603      	mov	r3, r0
 80030a8:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 80030aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d003      	beq.n	80030ba <lfs_dir_fetchmatch+0x30a>
                    dir->erased = false;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2200      	movs	r2, #0
 80030b6:	759a      	strb	r2, [r3, #22]
                    break;
 80030b8:	e152      	b.n	8003360 <lfs_dir_fetchmatch+0x5b0>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe fd35 	bl	8001b2c <lfs_tag_chunk>
 80030c2:	4603      	mov	r3, r0
 80030c4:	07db      	lsls	r3, r3, #31
 80030c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030c8:	4053      	eors	r3, r2
 80030ca:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80030d4:	2204      	movs	r2, #4
 80030d6:	4618      	mov	r0, r3
 80030d8:	f004 f888 	bl	80071ec <lfs_crc>
 80030dc:	4602      	mov	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 80030e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e4:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fe fd53 	bl	8001b94 <lfs_tag_dsize>
 80030ee:	4602      	mov	r2, r0
 80030f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f2:	441a      	add	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030fc:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8003104:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8003106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800310c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003118:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 800311a:	f04f 33ff 	mov.w	r3, #4294967295
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
 8003120:	e720      	b.n	8002f64 <lfs_dir_fetchmatch+0x1b4>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8003122:	2304      	movs	r3, #4
 8003124:	647b      	str	r3, [r7, #68]	; 0x44
 8003126:	e02f      	b.n	8003188 <lfs_dir_fetchmatch+0x3d8>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8003128:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800312e:	69dc      	ldr	r4, [r3, #28]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003138:	440a      	add	r2, r1
 800313a:	2101      	movs	r1, #1
 800313c:	9103      	str	r1, [sp, #12]
 800313e:	f107 011b 	add.w	r1, r7, #27
 8003142:	9102      	str	r1, [sp, #8]
 8003144:	9201      	str	r2, [sp, #4]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	4623      	mov	r3, r4
 800314a:	4602      	mov	r2, r0
 800314c:	2100      	movs	r1, #0
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7fe f8d4 	bl	80012fc <lfs_bd_read>
 8003154:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8003156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d009      	beq.n	8003170 <lfs_dir_fetchmatch+0x3c0>
                    if (err == LFS_ERR_CORRUPT) {
 800315c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003162:	d103      	bne.n	800316c <lfs_dir_fetchmatch+0x3bc>
                        dir->erased = false;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2200      	movs	r2, #0
 8003168:	759a      	strb	r2, [r3, #22]
 800316a:	e015      	b.n	8003198 <lfs_dir_fetchmatch+0x3e8>
                        break;
                    }
                    return err;
 800316c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800316e:	e176      	b.n	800345e <lfs_dir_fetchmatch+0x6ae>
                }

                crc = lfs_crc(crc, &dat, 1);
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	f107 011b 	add.w	r1, r7, #27
 8003176:	2201      	movs	r2, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f004 f837 	bl	80071ec <lfs_crc>
 800317e:	4603      	mov	r3, r0
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8003182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003184:	3301      	adds	r3, #1
 8003186:	647b      	str	r3, [r7, #68]	; 0x44
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fd02 	bl	8001b94 <lfs_tag_dsize>
 8003190:	4602      	mov	r2, r0
 8003192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003194:	4293      	cmp	r3, r2
 8003196:	d3c7      	bcc.n	8003128 <lfs_dir_fetchmatch+0x378>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fca8 	bl	8001af0 <lfs_tag_type1>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d116      	bne.n	80031d4 <lfs_dir_fetchmatch+0x424>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fe fcd8 	bl	8001b5e <lfs_tag_id>
 80031ae:	4603      	mov	r3, r0
 80031b0:	461a      	mov	r2, r3
 80031b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031b6:	4293      	cmp	r3, r2
 80031b8:	f200 8086 	bhi.w	80032c8 <lfs_dir_fetchmatch+0x518>
                    tempcount = lfs_tag_id(tag) + 1;
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fe fccd 	bl	8001b5e <lfs_tag_id>
 80031c4:	4603      	mov	r3, r0
 80031c6:	3301      	adds	r3, #1
 80031c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80031cc:	e07c      	b.n	80032c8 <lfs_dir_fetchmatch+0x518>
 80031ce:	bf00      	nop
 80031d0:	0800f224 	.word	0x0800f224
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe fc8a 	bl	8001af0 <lfs_tag_type1>
 80031dc:	4603      	mov	r3, r0
 80031de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e2:	d134      	bne.n	800324e <lfs_dir_fetchmatch+0x49e>
                tempcount += lfs_tag_splice(tag);
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe fcac 	bl	8001b44 <lfs_tag_splice>
 80031ec:	4603      	mov	r3, r0
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031f4:	4413      	add	r3, r2
 80031f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 80031fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031fc:	4b9a      	ldr	r3, [pc, #616]	; (8003468 <lfs_dir_fetchmatch+0x6b8>)
 80031fe:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003200:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8003204:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8003208:	6a3a      	ldr	r2, [r7, #32]
 800320a:	4293      	cmp	r3, r2
 800320c:	d104      	bne.n	8003218 <lfs_dir_fetchmatch+0x468>
                    tempbesttag |= 0x80000000;
 800320e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003210:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003214:	64bb      	str	r3, [r7, #72]	; 0x48
 8003216:	e057      	b.n	80032c8 <lfs_dir_fetchmatch+0x518>
                } else if (tempbesttag != -1 &&
 8003218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800321a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321e:	d053      	beq.n	80032c8 <lfs_dir_fetchmatch+0x518>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe fc9b 	bl	8001b5e <lfs_tag_id>
 8003228:	4603      	mov	r3, r0
 800322a:	461c      	mov	r4, r3
 800322c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fc95 	bl	8001b5e <lfs_tag_id>
 8003234:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8003236:	429c      	cmp	r4, r3
 8003238:	d846      	bhi.n	80032c8 <lfs_dir_fetchmatch+0x518>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe fc81 	bl	8001b44 <lfs_tag_splice>
 8003242:	4603      	mov	r3, r0
 8003244:	029a      	lsls	r2, r3, #10
 8003246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003248:	4413      	add	r3, r2
 800324a:	64bb      	str	r3, [r7, #72]	; 0x48
 800324c:	e03c      	b.n	80032c8 <lfs_dir_fetchmatch+0x518>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe fc4d 	bl	8001af0 <lfs_tag_type1>
 8003256:	4603      	mov	r3, r0
 8003258:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800325c:	d134      	bne.n	80032c8 <lfs_dir_fetchmatch+0x518>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fc63 	bl	8001b2c <lfs_tag_chunk>
 8003266:	4603      	mov	r3, r0
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 8003278:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800327e:	69dc      	ldr	r4, [r3, #28]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003286:	3204      	adds	r2, #4
 8003288:	2108      	movs	r1, #8
 800328a:	9103      	str	r1, [sp, #12]
 800328c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003290:	9102      	str	r1, [sp, #8]
 8003292:	9201      	str	r2, [sp, #4]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	4623      	mov	r3, r4
 8003298:	4602      	mov	r2, r0
 800329a:	2100      	movs	r1, #0
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7fe f82d 	bl	80012fc <lfs_bd_read>
 80032a2:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 80032a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <lfs_dir_fetchmatch+0x50e>
                    if (err == LFS_ERR_CORRUPT) {
 80032aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ac:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80032b0:	d103      	bne.n	80032ba <lfs_dir_fetchmatch+0x50a>
                        dir->erased = false;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2200      	movs	r2, #0
 80032b6:	759a      	strb	r2, [r3, #22]
                        break;
 80032b8:	e052      	b.n	8003360 <lfs_dir_fetchmatch+0x5b0>
                    }
                    return err;
 80032ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032bc:	e0cf      	b.n	800345e <lfs_dir_fetchmatch+0x6ae>
                }
                lfs_pair_fromle32(temptail);
 80032be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fbc1 	bl	8001a4a <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032cc:	405a      	eors	r2, r3
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f47f ae46 	bne.w	8002f64 <lfs_dir_fetchmatch+0x1b4>
                int res = cb(data, tag, &(struct lfs_diskoff){
 80032d8:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 80032de:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 80032e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e2:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	f107 0210 	add.w	r2, r7, #16
 80032ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032ee:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80032f2:	4798      	blx	r3
 80032f4:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 80032f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	da09      	bge.n	8003310 <lfs_dir_fetchmatch+0x560>
                    if (res == LFS_ERR_CORRUPT) {
 80032fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032fe:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003302:	d103      	bne.n	800330c <lfs_dir_fetchmatch+0x55c>
                        dir->erased = false;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2200      	movs	r2, #0
 8003308:	759a      	strb	r2, [r3, #22]
 800330a:	e029      	b.n	8003360 <lfs_dir_fetchmatch+0x5b0>
                        break;
                    }
                    return res;
 800330c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 800330e:	e0a6      	b.n	800345e <lfs_dir_fetchmatch+0x6ae>
                }

                if (res == LFS_CMP_EQ) {
 8003310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <lfs_dir_fetchmatch+0x56c>
                    // found a match
                    tempbesttag = tag;
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	64bb      	str	r3, [r7, #72]	; 0x48
 800331a:	e623      	b.n	8002f64 <lfs_dir_fetchmatch+0x1b4>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800331c:	6a3a      	ldr	r2, [r7, #32]
 800331e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003320:	405a      	eors	r2, r3
 8003322:	4b52      	ldr	r3, [pc, #328]	; (800346c <lfs_dir_fetchmatch+0x6bc>)
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <lfs_dir_fetchmatch+0x582>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800332a:	f04f 33ff 	mov.w	r3, #4294967295
 800332e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003330:	e618      	b.n	8002f64 <lfs_dir_fetchmatch+0x1b4>
                } else if (res == LFS_CMP_GT &&
 8003332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003334:	2b02      	cmp	r3, #2
 8003336:	f47f ae15 	bne.w	8002f64 <lfs_dir_fetchmatch+0x1b4>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe fc0e 	bl	8001b5e <lfs_tag_id>
 8003342:	4603      	mov	r3, r0
 8003344:	461c      	mov	r4, r3
 8003346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe fc08 	bl	8001b5e <lfs_tag_id>
 800334e:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8003350:	429c      	cmp	r4, r3
 8003352:	f63f ae07 	bhi.w	8002f64 <lfs_dir_fetchmatch+0x1b4>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800335c:	64bb      	str	r3, [r7, #72]	; 0x48
 800335e:	e601      	b.n	8002f64 <lfs_dir_fetchmatch+0x1b4>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d100      	bne.n	800336a <lfs_dir_fetchmatch+0x5ba>
 8003368:	e05d      	b.n	8003426 <lfs_dir_fetchmatch+0x676>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	333c      	adds	r3, #60	; 0x3c
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe fc97 	bl	8001ca6 <lfs_gstate_hasmovehere>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d028      	beq.n	80033d0 <lfs_dir_fetchmatch+0x620>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe fbeb 	bl	8001b5e <lfs_tag_id>
 8003388:	4603      	mov	r3, r0
 800338a:	461c      	mov	r4, r3
 800338c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe fbe5 	bl	8001b5e <lfs_tag_id>
 8003394:	4603      	mov	r3, r0
 8003396:	429c      	cmp	r4, r3
 8003398:	d104      	bne.n	80033a4 <lfs_dir_fetchmatch+0x5f4>
                    besttag |= 0x80000000;
 800339a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800339c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033a0:	667b      	str	r3, [r7, #100]	; 0x64
 80033a2:	e015      	b.n	80033d0 <lfs_dir_fetchmatch+0x620>
                } else if (besttag != -1 &&
 80033a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d011      	beq.n	80033d0 <lfs_dir_fetchmatch+0x620>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe fbd4 	bl	8001b5e <lfs_tag_id>
 80033b6:	4603      	mov	r3, r0
 80033b8:	461c      	mov	r4, r3
 80033ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe fbce 	bl	8001b5e <lfs_tag_id>
 80033c2:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 80033c4:	429c      	cmp	r4, r3
 80033c6:	d203      	bcs.n	80033d0 <lfs_dir_fetchmatch+0x620>
                    besttag -= LFS_MKTAG(0, 1, 0);
 80033c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ca:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80033ce:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 80033d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00f      	beq.n	80033f6 <lfs_dir_fetchmatch+0x646>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 80033d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe fbc0 	bl	8001b5e <lfs_tag_id>
 80033de:	4603      	mov	r3, r0
 80033e0:	461a      	mov	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	8a9b      	ldrh	r3, [r3, #20]
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f7fd feb4 	bl	8001156 <lfs_min>
 80033ee:	4603      	mov	r3, r0
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033f4:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 80033f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fe fb5a 	bl	8001ab2 <lfs_tag_isvalid>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <lfs_dir_fetchmatch+0x658>
                return besttag;
 8003404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003406:	e02a      	b.n	800345e <lfs_dir_fetchmatch+0x6ae>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8003408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe fba7 	bl	8001b5e <lfs_tag_id>
 8003410:	4603      	mov	r3, r0
 8003412:	461a      	mov	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	8a9b      	ldrh	r3, [r3, #20]
 8003418:	429a      	cmp	r2, r3
 800341a:	d202      	bcs.n	8003422 <lfs_dir_fetchmatch+0x672>
                return LFS_ERR_NOENT;
 800341c:	f06f 0301 	mvn.w	r3, #1
 8003420:	e01d      	b.n	800345e <lfs_dir_fetchmatch+0x6ae>
            } else {
                return 0;
 8003422:	2300      	movs	r3, #0
 8003424:	e01b      	b.n	800345e <lfs_dir_fetchmatch+0x6ae>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe fa8b 	bl	8001944 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 800342e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003430:	3301      	adds	r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	bfb8      	it	lt
 800343a:	425b      	neglt	r3, r3
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003442:	4413      	add	r3, r2
 8003444:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800344c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800344e:	3301      	adds	r3, #1
 8003450:	65bb      	str	r3, [r7, #88]	; 0x58
 8003452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003454:	2b01      	cmp	r3, #1
 8003456:	f77f ad57 	ble.w	8002f08 <lfs_dir_fetchmatch+0x158>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800345a:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800345e:	4618      	mov	r0, r3
 8003460:	376c      	adds	r7, #108	; 0x6c
 8003462:	46bd      	mov	sp, r7
 8003464:	bd90      	pop	{r4, r7, pc}
 8003466:	bf00      	nop
 8003468:	000ffc00 	.word	0x000ffc00
 800346c:	7ffffc00 	.word	0x7ffffc00

08003470 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af04      	add	r7, sp, #16
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800347c:	2300      	movs	r3, #0
 800347e:	9303      	str	r3, [sp, #12]
 8003480:	2300      	movs	r3, #0
 8003482:	9302      	str	r3, [sp, #8]
 8003484:	2300      	movs	r3, #0
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	f04f 33ff 	mov.w	r3, #4294967295
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	f04f 33ff 	mov.w	r3, #4294967295
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f7ff fc8a 	bl	8002db0 <lfs_dir_fetchmatch>
 800349c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 80034b4:	f107 0310 	add.w	r3, r7, #16
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	4b12      	ldr	r3, [pc, #72]	; (8003504 <lfs_dir_getgstate+0x5c>)
 80034bc:	4a12      	ldr	r2, [pc, #72]	; (8003508 <lfs_dir_getgstate+0x60>)
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7fe ff19 	bl	80022f8 <lfs_dir_get>
 80034c6:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	da05      	bge.n	80034da <lfs_dir_getgstate+0x32>
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f113 0f02 	cmn.w	r3, #2
 80034d4:	d001      	beq.n	80034da <lfs_dir_getgstate+0x32>
        return res;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	e00f      	b.n	80034fa <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f113 0f02 	cmn.w	r3, #2
 80034e0:	d00a      	beq.n	80034f8 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 80034e2:	f107 0310 	add.w	r3, r7, #16
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fbfd 	bl	8001ce6 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 80034ec:	f107 0310 	add.w	r3, r7, #16
 80034f0:	4619      	mov	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fe fb62 	bl	8001bbc <lfs_gstate_xor>
    }

    return 0;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	7ff0000c 	.word	0x7ff0000c
 8003508:	7ff00000 	.word	0x7ff00000

0800350c <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800350c:	b590      	push	{r4, r7, lr}
 800350e:	b08f      	sub	sp, #60	; 0x3c
 8003510:	af04      	add	r7, sp, #16
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	689c      	ldr	r4, [r3, #8]
 800352a:	68b8      	ldr	r0, [r7, #8]
 800352c:	f7fe fb26 	bl	8001b7c <lfs_tag_size>
 8003530:	4603      	mov	r3, r0
 8003532:	4619      	mov	r1, r3
 8003534:	4620      	mov	r0, r4
 8003536:	f7fd fe0e 	bl	8001156 <lfs_min>
 800353a:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800353c:	6a3c      	ldr	r4, [r7, #32]
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	6852      	ldr	r2, [r2, #4]
 8003546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003548:	6849      	ldr	r1, [r1, #4]
 800354a:	69b8      	ldr	r0, [r7, #24]
 800354c:	9003      	str	r0, [sp, #12]
 800354e:	9102      	str	r1, [sp, #8]
 8003550:	9201      	str	r2, [sp, #4]
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	4622      	mov	r2, r4
 8003558:	2100      	movs	r1, #0
 800355a:	6a38      	ldr	r0, [r7, #32]
 800355c:	f7fe f812 	bl	8001584 <lfs_bd_cmp>
 8003560:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <lfs_dir_find_match+0x60>
        return res;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	e014      	b.n	8003596 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	689c      	ldr	r4, [r3, #8]
 8003570:	68b8      	ldr	r0, [r7, #8]
 8003572:	f7fe fb03 	bl	8001b7c <lfs_tag_size>
 8003576:	4603      	mov	r3, r0
 8003578:	429c      	cmp	r4, r3
 800357a:	d00b      	beq.n	8003594 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	689c      	ldr	r4, [r3, #8]
 8003580:	68b8      	ldr	r0, [r7, #8]
 8003582:	f7fe fafb 	bl	8001b7c <lfs_tag_size>
 8003586:	4603      	mov	r3, r0
 8003588:	429c      	cmp	r4, r3
 800358a:	d201      	bcs.n	8003590 <lfs_dir_find_match+0x84>
 800358c:	2301      	movs	r3, #1
 800358e:	e002      	b.n	8003596 <lfs_dir_find_match+0x8a>
 8003590:	2302      	movs	r3, #2
 8003592:	e000      	b.n	8003596 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	372c      	adds	r7, #44	; 0x2c
 800359a:	46bd      	mov	sp, r7
 800359c:	bd90      	pop	{r4, r7, pc}
	...

080035a0 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b093      	sub	sp, #76	; 0x4c
 80035a4:	af04      	add	r7, sp, #16
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <lfs_dir_find+0x22>
        *id = 0x3ff;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80035c0:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 80035c2:	4b6e      	ldr	r3, [pc, #440]	; (800377c <lfs_dir_find+0x1dc>)
 80035c4:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 80035d6:	496a      	ldr	r1, [pc, #424]	; (8003780 <lfs_dir_find+0x1e0>)
 80035d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035da:	f00a ffa5 	bl	800e528 <strspn>
 80035de:	4602      	mov	r2, r0
 80035e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e2:	4413      	add	r3, r2
 80035e4:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 80035e6:	4966      	ldr	r1, [pc, #408]	; (8003780 <lfs_dir_find+0x1e0>)
 80035e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035ea:	f00a ff8c 	bl	800e506 <strcspn>
 80035ee:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d105      	bne.n	8003602 <lfs_dir_find+0x62>
 80035f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f8:	781a      	ldrb	r2, [r3, #0]
 80035fa:	4b62      	ldr	r3, [pc, #392]	; (8003784 <lfs_dir_find+0x1e4>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d00a      	beq.n	8003618 <lfs_dir_find+0x78>
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	2b02      	cmp	r3, #2
 8003606:	d10c      	bne.n	8003622 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8003608:	2202      	movs	r2, #2
 800360a:	495f      	ldr	r1, [pc, #380]	; (8003788 <lfs_dir_find+0x1e8>)
 800360c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800360e:	f00a fba5 	bl	800dd5c <memcmp>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d104      	bne.n	8003622 <lfs_dir_find+0x82>
            name += namelen;
 8003618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	4413      	add	r3, r2
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8003620:	e7d9      	b.n	80035d6 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8003622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	4413      	add	r3, r2
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800362a:	2301      	movs	r3, #1
 800362c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800362e:	4954      	ldr	r1, [pc, #336]	; (8003780 <lfs_dir_find+0x1e0>)
 8003630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003632:	f00a ff79 	bl	800e528 <strspn>
 8003636:	4602      	mov	r2, r0
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	4413      	add	r3, r2
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 800363e:	4950      	ldr	r1, [pc, #320]	; (8003780 <lfs_dir_find+0x1e0>)
 8003640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003642:	f00a ff60 	bl	800e506 <strcspn>
 8003646:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01d      	beq.n	800368a <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d112      	bne.n	800367a <lfs_dir_find+0xda>
 8003654:	2202      	movs	r2, #2
 8003656:	494c      	ldr	r1, [pc, #304]	; (8003788 <lfs_dir_find+0x1e8>)
 8003658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800365a:	f00a fb7f 	bl	800dd5c <memcmp>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <lfs_dir_find+0xda>
                depth -= 1;
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	3b01      	subs	r3, #1
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 800366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d107      	bne.n	8003680 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8003670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	4413      	add	r3, r2
 8003676:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8003678:	e7ad      	b.n	80035d6 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	3301      	adds	r3, #1
 800367e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8003680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	4413      	add	r3, r2
 8003686:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8003688:	e7d1      	b.n	800362e <lfs_dir_find+0x8e>
                break;
 800368a:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800368c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <lfs_dir_find+0xf8>
            return tag;
 8003694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003696:	e06c      	b.n	8003772 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800369c:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe fa34 	bl	8001b0e <lfs_tag_type3>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d002      	beq.n	80036b2 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 80036ac:	f06f 0313 	mvn.w	r3, #19
 80036b0:	e05f      	b.n	8003772 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fe fa52 	bl	8001b5e <lfs_tag_id>
 80036ba:	4603      	mov	r3, r0
 80036bc:	461a      	mov	r2, r3
 80036be:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d01c      	beq.n	8003700 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe fa48 	bl	8001b5e <lfs_tag_id>
 80036ce:	4603      	mov	r3, r0
 80036d0:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80036d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036d6:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80036de:	9200      	str	r2, [sp, #0]
 80036e0:	4a2a      	ldr	r2, [pc, #168]	; (800378c <lfs_dir_find+0x1ec>)
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f7fe fe07 	bl	80022f8 <lfs_dir_get>
 80036ea:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	da01      	bge.n	80036f6 <lfs_dir_find+0x156>
                return res;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	e03d      	b.n	8003772 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	3318      	adds	r3, #24
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe f9a5 	bl	8001a4a <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8003706:	212f      	movs	r1, #47	; 0x2f
 8003708:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800370a:	f00a feef 	bl	800e4ec <strchr>
 800370e:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <lfs_dir_find+0x178>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	e000      	b.n	800371a <lfs_dir_find+0x17a>
 8003718:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	613a      	str	r2, [r7, #16]
 800371e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003720:	617a      	str	r2, [r7, #20]
 8003722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003724:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003726:	f107 0210 	add.w	r2, r7, #16
 800372a:	9203      	str	r2, [sp, #12]
 800372c:	4a18      	ldr	r2, [pc, #96]	; (8003790 <lfs_dir_find+0x1f0>)
 800372e:	9202      	str	r2, [sp, #8]
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800373a:	4622      	mov	r2, r4
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f7ff fb36 	bl	8002db0 <lfs_dir_fetchmatch>
 8003744:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	2b00      	cmp	r3, #0
 800374a:	da01      	bge.n	8003750 <lfs_dir_find+0x1b0>
                return tag;
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	e010      	b.n	8003772 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	2b00      	cmp	r3, #0
 8003754:	d004      	beq.n	8003760 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8003756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	4413      	add	r3, r2
 800375c:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 800375e:	e73a      	b.n	80035d6 <lfs_dir_find+0x36>
            if (!dir->split) {
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	7ddb      	ldrb	r3, [r3, #23]
 8003764:	f083 0301 	eor.w	r3, r3, #1
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0c8      	beq.n	8003700 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800376e:	f06f 0301 	mvn.w	r3, #1
    }
}
 8003772:	4618      	mov	r0, r3
 8003774:	373c      	adds	r7, #60	; 0x3c
 8003776:	46bd      	mov	sp, r7
 8003778:	bd90      	pop	{r4, r7, pc}
 800377a:	bf00      	nop
 800377c:	002ffc00 	.word	0x002ffc00
 8003780:	0800f22c 	.word	0x0800f22c
 8003784:	0800f230 	.word	0x0800f230
 8003788:	0800f234 	.word	0x0800f234
 800378c:	700ffc00 	.word	0x700ffc00
 8003790:	0800350d 	.word	0x0800350d

08003794 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b08b      	sub	sp, #44	; 0x2c
 8003798:	af04      	add	r7, sp, #16
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f103 0010 	add.w	r0, r3, #16
 80037a8:	68fc      	ldr	r4, [r7, #12]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	6852      	ldr	r2, [r2, #4]
 80037b2:	6839      	ldr	r1, [r7, #0]
 80037b4:	9103      	str	r1, [sp, #12]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	9102      	str	r1, [sp, #8]
 80037ba:	9201      	str	r2, [sp, #4]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	2300      	movs	r3, #0
 80037c0:	4622      	mov	r2, r4
 80037c2:	4601      	mov	r1, r0
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f7fd ffdf 	bl	8001788 <lfs_bd_prog>
 80037ca:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <lfs_dir_commitprog+0x42>
        return err;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	e010      	b.n	80037f8 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4618      	mov	r0, r3
 80037e0:	f003 fd04 	bl	80071ec <lfs_crc>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	60da      	str	r2, [r3, #12]
    commit->off += size;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	441a      	add	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	605a      	str	r2, [r3, #4]
    return 0;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd90      	pop	{r4, r7, pc}

08003800 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b08f      	sub	sp, #60	; 0x3c
 8003804:	af04      	add	r7, sp, #16
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fe f9c0 	bl	8001b94 <lfs_tag_dsize>
 8003814:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	441a      	add	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	429a      	cmp	r2, r3
 8003824:	d902      	bls.n	800382c <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8003826:	f06f 031b 	mvn.w	r3, #27
 800382a:	e065      	b.n	80038f8 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	4053      	eors	r3, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f7fd fd18 	bl	800126e <lfs_tobe32>
 800383e:	4603      	mov	r3, r0
 8003840:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8003842:	f107 0214 	add.w	r2, r7, #20
 8003846:	2304      	movs	r3, #4
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f7ff ffa2 	bl	8003794 <lfs_dir_commitprog>
 8003850:	61f8      	str	r0, [r7, #28]
    if (err) {
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <lfs_dir_commitattr+0x5c>
        return err;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	e04d      	b.n	80038f8 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	db0c      	blt.n	800387c <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	3b04      	subs	r3, #4
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f7ff ff92 	bl	8003794 <lfs_dir_commitprog>
 8003870:	61f8      	str	r0, [r7, #28]
        if (err) {
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d039      	beq.n	80038ec <lfs_dir_commitattr+0xec>
            return err;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	e03d      	b.n	80038f8 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003880:	2300      	movs	r3, #0
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
 8003884:	e02d      	b.n	80038e2 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8003886:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8003888:	6a3a      	ldr	r2, [r7, #32]
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800388e:	1f1c      	subs	r4, r3, #4
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8003898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389a:	440a      	add	r2, r1
 800389c:	2101      	movs	r1, #1
 800389e:	9103      	str	r1, [sp, #12]
 80038a0:	f107 0113 	add.w	r1, r7, #19
 80038a4:	9102      	str	r1, [sp, #8]
 80038a6:	9201      	str	r2, [sp, #4]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	4623      	mov	r3, r4
 80038ac:	4602      	mov	r2, r0
 80038ae:	2100      	movs	r1, #0
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7fd fd23 	bl	80012fc <lfs_bd_read>
 80038b6:	61f8      	str	r0, [r7, #28]
            if (err) {
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <lfs_dir_commitattr+0xc2>
                return err;
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	e01a      	b.n	80038f8 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 80038c2:	f107 0213 	add.w	r2, r7, #19
 80038c6:	2301      	movs	r3, #1
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7ff ff62 	bl	8003794 <lfs_dir_commitprog>
 80038d0:	61f8      	str	r0, [r7, #28]
            if (err) {
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <lfs_dir_commitattr+0xdc>
                return err;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	e00d      	b.n	80038f8 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	3301      	adds	r3, #1
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	3b04      	subs	r3, #4
 80038e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d3cc      	bcc.n	8003886 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	609a      	str	r2, [r3, #8]
    return 0;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	372c      	adds	r7, #44	; 0x2c
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd90      	pop	{r4, r7, pc}

08003900 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b097      	sub	sp, #92	; 0x5c
 8003904:	af04      	add	r7, sp, #16
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	4619      	mov	r1, r3
 800391a:	4610      	mov	r0, r2
 800391c:	f7fd fc3e 	bl	800119c <lfs_alignup>
 8003920:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800392a:	e0a6      	b.n	8003a7a <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	3304      	adds	r3, #4
 8003932:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8003934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd fc09 	bl	8001156 <lfs_min>
 8003944:	4602      	mov	r2, r0
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	4413      	add	r3, r2
 800394a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 800394c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	429a      	cmp	r2, r3
 8003952:	d206      	bcs.n	8003962 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	3b08      	subs	r3, #8
 8003958:	4619      	mov	r1, r3
 800395a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800395c:	f7fd fbfb 	bl	8001156 <lfs_min>
 8003960:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 8003962:	f04f 33ff 	mov.w	r3, #4294967295
 8003966:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2204      	movs	r2, #4
 8003970:	9203      	str	r2, [sp, #12]
 8003972:	f107 0214 	add.w	r2, r7, #20
 8003976:	9202      	str	r2, [sp, #8]
 8003978:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800397a:	9201      	str	r2, [sp, #4]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	2304      	movs	r3, #4
 8003980:	460a      	mov	r2, r1
 8003982:	2100      	movs	r1, #0
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7fd fcb9 	bl	80012fc <lfs_bd_read>
 800398a:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d005      	beq.n	800399e <lfs_dir_commitcrc+0x9e>
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003998:	d001      	beq.n	800399e <lfs_dir_commitcrc+0x9e>
            return err;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	e0e8      	b.n	8003b70 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fd fc59 	bl	8001258 <lfs_frombe32>
 80039a6:	4603      	mov	r3, r0
 80039a8:	43db      	mvns	r3, r3
 80039aa:	0fdb      	lsrs	r3, r3, #31
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf14      	ite	ne
 80039b0:	2301      	movne	r3, #1
 80039b2:	2300      	moveq	r3, #0
 80039b4:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 80039b6:	7efb      	ldrb	r3, [r7, #27]
 80039b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039bc:	051a      	lsls	r2, r3, #20
 80039be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	1acb      	subs	r3, r1, r3
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 80039ca:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80039ce:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	4053      	eors	r3, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fd fc48 	bl	800126e <lfs_tobe32>
 80039de:	4603      	mov	r3, r0
 80039e0:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f107 010c 	add.w	r1, r7, #12
 80039ea:	2204      	movs	r2, #4
 80039ec:	4618      	mov	r0, r3
 80039ee:	f003 fbfd 	bl	80071ec <lfs_crc>
 80039f2:	4602      	mov	r2, r0
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fd fc1f 	bl	8001240 <lfs_tole32>
 8003a02:	4603      	mov	r3, r0
 8003a04:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f103 0010 	add.w	r0, r3, #16
 8003a0c:	687c      	ldr	r4, [r7, #4]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	6852      	ldr	r2, [r2, #4]
 8003a16:	2108      	movs	r1, #8
 8003a18:	9103      	str	r1, [sp, #12]
 8003a1a:	f107 010c 	add.w	r1, r7, #12
 8003a1e:	9102      	str	r1, [sp, #8]
 8003a20:	9201      	str	r2, [sp, #4]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	2300      	movs	r3, #0
 8003a26:	4622      	mov	r2, r4
 8003a28:	4601      	mov	r1, r0
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fd feac 	bl	8001788 <lfs_bd_prog>
 8003a30:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <lfs_dir_commitcrc+0x13c>
            return err;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	e099      	b.n	8003b70 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8003a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe f892 	bl	8001b7c <lfs_tag_size>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	1d1a      	adds	r2, r3, #4
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	441a      	add	r2, r3
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8003a66:	7efb      	ldrb	r3, [r7, #27]
 8003a68:	07da      	lsls	r2, r3, #31
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	405a      	eors	r2, r3
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295
 8003a78:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a80:	429a      	cmp	r2, r3
 8003a82:	f63f af53 	bhi.w	800392c <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f103 0110 	add.w	r1, r3, #16
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7fd fe45 	bl	8001720 <lfs_bd_sync>
 8003a96:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <lfs_dir_commitcrc+0x1a2>
        return err;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	e066      	b.n	8003b70 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 8003aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aaa:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8003aac:	e05b      	b.n	8003b66 <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 8003aae:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab2:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ab8:	e030      	b.n	8003b1c <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 8003aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d106      	bne.n	8003ad0 <lfs_dir_commitcrc+0x1d0>
 8003ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d002      	beq.n	8003ad0 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 8003aca:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003ace:	e04f      	b.n	8003b70 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8003ad0:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 8003ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8003ad8:	1d18      	adds	r0, r3, #4
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	9203      	str	r2, [sp, #12]
 8003ae2:	f107 020b 	add.w	r2, r7, #11
 8003ae6:	9202      	str	r2, [sp, #8]
 8003ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aea:	9201      	str	r2, [sp, #4]
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	4603      	mov	r3, r0
 8003af0:	460a      	mov	r2, r1
 8003af2:	2100      	movs	r1, #0
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7fd fc01 	bl	80012fc <lfs_bd_read>
 8003afa:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <lfs_dir_commitcrc+0x206>
                return err;
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	e034      	b.n	8003b70 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 8003b06:	f107 030b 	add.w	r3, r7, #11
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b10:	f003 fb6c 	bl	80071ec <lfs_crc>
 8003b14:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	3301      	adds	r3, #1
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1e:	3304      	adds	r3, #4
 8003b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d3c9      	bcc.n	8003aba <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 8003b2c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003b30:	e01e      	b.n	8003b70 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 8003b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fd fb0a 	bl	8001156 <lfs_min>
 8003b42:	4602      	mov	r2, r0
 8003b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b46:	4413      	add	r3, r2
 8003b48:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 8003b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d206      	bcs.n	8003b60 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	3b08      	subs	r3, #8
 8003b56:	4619      	mov	r1, r3
 8003b58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b5a:	f7fd fafc 	bl	8001156 <lfs_min>
 8003b5e:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 8003b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b62:	3304      	adds	r3, #4
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8003b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d39f      	bcc.n	8003aae <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	374c      	adds	r7, #76	; 0x4c
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd90      	pop	{r4, r7, pc}

08003b78 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	; 0x28
 8003b7c:	af04      	add	r7, sp, #16
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	e016      	b.n	8003bb6 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	bfb8      	it	lt
 8003b94:	425b      	neglt	r3, r3
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fe fa24 	bl	8001fec <lfs_alloc>
 8003ba4:	60f8      	str	r0, [r7, #12]
        if (err) {
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <lfs_dir_alloc+0x38>
            return err;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	e058      	b.n	8003c62 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	dde5      	ble.n	8003b88 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8003bcc:	2004      	movs	r0, #4
 8003bce:	9003      	str	r0, [sp, #12]
 8003bd0:	9202      	str	r2, [sp, #8]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	9201      	str	r2, [sp, #4]
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	2304      	movs	r3, #4
 8003bda:	460a      	mov	r2, r1
 8003bdc:	2100      	movs	r1, #0
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd fb8c 	bl	80012fc <lfs_bd_read>
 8003be4:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fd fb1e 	bl	800122c <lfs_fromle32>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <lfs_dir_alloc+0x90>
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003c02:	d001      	beq.n	8003c08 <lfs_dir_alloc+0x90>
        return err;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	e02c      	b.n	8003c62 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	dd0e      	ble.n	8003c30 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f7fd fab9 	bl	800119c <lfs_alignup>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2204      	movs	r2, #4
 8003c34:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3c:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2200      	movs	r2, #0
 8003c42:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c52:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2200      	movs	r2, #0
 8003c58:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b092      	sub	sp, #72	; 0x48
 8003c6e:	af04      	add	r7, sp, #16
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8003c78:	f107 0310 	add.w	r3, r7, #16
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f7ff ff7a 	bl	8003b78 <lfs_dir_alloc>
 8003c84:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8003c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <lfs_dir_split+0x26>
        return err;
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	e03c      	b.n	8003d0a <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	7ddb      	ldrb	r3, [r3, #23]
 8003c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8003ca4:	f107 0110 	add.w	r1, r7, #16
 8003ca8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003cac:	9302      	str	r3, [sp, #8]
 8003cae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003cb2:	9301      	str	r3, [sp, #4]
 8003cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f879 	bl	8003db4 <lfs_dir_compact>
 8003cc2:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	da01      	bge.n	8003cce <lfs_dir_split+0x64>
        return res;
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	e01d      	b.n	8003d0a <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3320      	adds	r3, #32
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f7fd fe59 	bl	80019a0 <lfs_pair_cmp>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d109      	bne.n	8003d08 <lfs_dir_split+0x9e>
 8003cf4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3738      	adds	r7, #56	; 0x38
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b086      	sub	sp, #24
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8003d22:	68b8      	ldr	r0, [r7, #8]
 8003d24:	f7fd ff36 	bl	8001b94 <lfs_tag_dsize>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	441a      	add	r2, r3
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	601a      	str	r2, [r3, #0]
    return 0;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	f7ff fd51 	bl	8003800 <lfs_dir_commitattr>
 8003d5e:	4603      	mov	r3, r0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	dd11      	ble.n	8003da0 <lfs_dir_needsrelocation+0x38>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	3301      	adds	r3, #1
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d88:	3201      	adds	r2, #1
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d92:	fb02 f201 	mul.w	r2, r2, r1
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <lfs_dir_needsrelocation+0x38>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <lfs_dir_needsrelocation+0x3a>
 8003da0:	2300      	movs	r3, #0
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	b2db      	uxtb	r3, r3
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr
	...

08003db4 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b0a4      	sub	sp, #144	; 0x90
 8003db8:	af0a      	add	r7, sp, #40	; 0x28
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f7ff ffcc 	bl	8003d68 <lfs_dir_needsrelocation>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8003de0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00e      	beq.n	8003e06 <lfs_dir_compact+0x52>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2200      	movs	r2, #0
 8003dec:	657a      	str	r2, [r7, #84]	; 0x54
 8003dee:	2201      	movs	r2, #1
 8003df0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003df2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fd fdd1 	bl	80019a0 <lfs_pair_cmp>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f040 8155 	bne.w	80040b0 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8003e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	643b      	str	r3, [r7, #64]	; 0x40
 8003e10:	f04f 33ff 	mov.w	r3, #4294967295
 8003e14:	647b      	str	r3, [r7, #68]	; 0x44
 8003e16:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d004      	beq.n	8003e34 <lfs_dir_compact+0x80>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e30:	3b08      	subs	r3, #8
 8003e32:	e003      	b.n	8003e3c <lfs_dir_compact+0x88>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8003e3c:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4619      	mov	r1, r3
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f7fd fd4b 	bl	80018e0 <lfs_bd_erase>
 8003e4a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d006      	beq.n	8003e60 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8003e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e54:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003e58:	f000 812c 	beq.w	80040b4 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8003e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e5e:	e16c      	b.n	800413a <lfs_dir_compact+0x386>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd f9eb 	bl	8001240 <lfs_tole32>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8003e76:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003e7a:	2304      	movs	r3, #4
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff fc89 	bl	8003794 <lfs_dir_commitprog>
 8003e82:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fd f9cf 	bl	800122c <lfs_fromle32>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	609a      	str	r2, [r3, #8]
            if (err) {
 8003e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d006      	beq.n	8003ea8 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8003e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e9c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003ea0:	f000 810a 	beq.w	80040b8 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8003ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea6:	e148      	b.n	800413a <lfs_dir_compact+0x386>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8003ea8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003eac:	425b      	negs	r3, r3
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	637a      	str	r2, [r7, #52]	; 0x34
 8003eb6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003eba:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8003ebc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ec0:	9208      	str	r2, [sp, #32]
 8003ec2:	4aa0      	ldr	r2, [pc, #640]	; (8004144 <lfs_dir_compact+0x390>)
 8003ec4:	9207      	str	r2, [sp, #28]
 8003ec6:	9306      	str	r3, [sp, #24]
 8003ec8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003ecc:	9305      	str	r3, [sp, #20]
 8003ece:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003ed2:	9304      	str	r3, [sp, #16]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	9303      	str	r3, [sp, #12]
 8003ed8:	4b9b      	ldr	r3, [pc, #620]	; (8004148 <lfs_dir_compact+0x394>)
 8003eda:	9302      	str	r3, [sp, #8]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	9301      	str	r3, [sp, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee8:	2200      	movs	r2, #0
 8003eea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f7fe fb55 	bl	800259c <lfs_dir_traverse>
 8003ef2:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8003ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d006      	beq.n	8003f08 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8003efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003f00:	f000 80dc 	beq.w	80040bc <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8003f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f06:	e118      	b.n	800413a <lfs_dir_compact+0x386>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	3318      	adds	r3, #24
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fd fd2d 	bl	800196c <lfs_pair_isnull>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f083 0301 	eor.w	r3, r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d022      	beq.n	8003f64 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	3318      	adds	r3, #24
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fd fdab 	bl	8001a7e <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	7ddb      	ldrb	r3, [r3, #23]
 8003f2c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003f30:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8003f32:	4a86      	ldr	r2, [pc, #536]	; (800414c <lfs_dir_compact+0x398>)
 8003f34:	431a      	orrs	r2, r3
                        dir->tail);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8003f3a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff fc5e 	bl	8003800 <lfs_dir_commitattr>
 8003f44:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	3318      	adds	r3, #24
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fd fd7d 	bl	8001a4a <lfs_pair_fromle32>
                if (err) {
 8003f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d006      	beq.n	8003f64 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8003f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f58:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003f5c:	f000 80b0 	beq.w	80040c0 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f62:	e0ea      	b.n	800413a <lfs_dir_compact+0x386>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8003f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003f70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003f74:	f083 0301 	eor.w	r3, r3, #1
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d011      	beq.n	8003fa2 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003f84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f88:	4611      	mov	r1, r2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd fe16 	bl	8001bbc <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fd fe0d 	bl	8001bbc <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003fa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fac:	4611      	mov	r1, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fd fe04 	bl	8001bbc <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fba:	f023 0303 	bic.w	r3, r3, #3
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003fc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f7ff fa6d 	bl	80034a8 <lfs_dir_getgstate>
 8003fce:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003fd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <lfs_dir_compact+0x226>
                return err;
 8003fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd8:	e0af      	b.n	800413a <lfs_dir_compact+0x386>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8003fda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fd fe10 	bl	8001c04 <lfs_gstate_iszero>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f083 0301 	eor.w	r3, r3, #1
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d016      	beq.n	800401e <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8003ff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fd fe96 	bl	8001d26 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8003ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ffe:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004002:	4a53      	ldr	r2, [pc, #332]	; (8004150 <lfs_dir_compact+0x39c>)
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f7ff fbfb 	bl	8003800 <lfs_dir_commitattr>
 800400a:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800400c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8004012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004014:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004018:	d054      	beq.n	80040c4 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 800401a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800401c:	e08d      	b.n	800413a <lfs_dir_compact+0x386>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800401e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004022:	4619      	mov	r1, r3
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7ff fc6b 	bl	8003900 <lfs_dir_commitcrc>
 800402a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 800402c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8004032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004034:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004038:	d046      	beq.n	80040c8 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 800403a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800403c:	e07d      	b.n	800413a <lfs_dir_compact+0x386>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800403e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004044:	6992      	ldr	r2, [r2, #24]
 8004046:	fbb3 f1f2 	udiv	r1, r3, r2
 800404a:	fb02 f201 	mul.w	r2, r2, r1
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d006      	beq.n	8004062 <lfs_dir_compact+0x2ae>
 8004054:	4b3f      	ldr	r3, [pc, #252]	; (8004154 <lfs_dir_compact+0x3a0>)
 8004056:	4a40      	ldr	r2, [pc, #256]	; (8004158 <lfs_dir_compact+0x3a4>)
 8004058:	f240 714a 	movw	r1, #1866	; 0x74a
 800405c:	483f      	ldr	r0, [pc, #252]	; (800415c <lfs_dir_compact+0x3a8>)
 800405e:	f009 fe13 	bl	800dc88 <__assert_func>
            lfs_pair_swap(dir->pair);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4618      	mov	r0, r3
 8004066:	f7fd fc6d 	bl	8001944 <lfs_pair_swap>
            dir->count = end - begin;
 800406a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800406e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800407a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8004080:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3348      	adds	r3, #72	; 0x48
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	605a      	str	r2, [r3, #4]
 8004090:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8004092:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004096:	f083 0301 	eor.w	r3, r3, #1
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d049      	beq.n	8004134 <lfs_dir_compact+0x380>
                lfs->gdisk = lfs->gstate;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	333c      	adds	r3, #60	; 0x3c
 80040a6:	3230      	adds	r2, #48	; 0x30
 80040a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80040aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 80040ae:	e041      	b.n	8004134 <lfs_dir_compact+0x380>
        goto relocate;
 80040b0:	bf00      	nop
 80040b2:	e00a      	b.n	80040ca <lfs_dir_compact+0x316>
                    goto relocate;
 80040b4:	bf00      	nop
 80040b6:	e008      	b.n	80040ca <lfs_dir_compact+0x316>
                    goto relocate;
 80040b8:	bf00      	nop
 80040ba:	e006      	b.n	80040ca <lfs_dir_compact+0x316>
                    goto relocate;
 80040bc:	bf00      	nop
 80040be:	e004      	b.n	80040ca <lfs_dir_compact+0x316>
                        goto relocate;
 80040c0:	bf00      	nop
 80040c2:	e002      	b.n	80040ca <lfs_dir_compact+0x316>
                        goto relocate;
 80040c4:	bf00      	nop
 80040c6:	e000      	b.n	80040ca <lfs_dir_compact+0x316>
                    goto relocate;
 80040c8:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3310      	adds	r3, #16
 80040d4:	4619      	mov	r1, r3
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f7fd f8ec 	bl	80012b4 <lfs_cache_drop>
        if (!tired) {
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2200      	movs	r2, #0
 80040e0:	617a      	str	r2, [r7, #20]
 80040e2:	2201      	movs	r2, #1
 80040e4:	61ba      	str	r2, [r7, #24]
 80040e6:	f107 0214 	add.w	r2, r7, #20
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fd fc57 	bl	80019a0 <lfs_pair_cmp>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <lfs_dir_compact+0x34a>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 80040f8:	f06f 031b 	mvn.w	r3, #27
 80040fc:	e01d      	b.n	800413a <lfs_dir_compact+0x386>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	3304      	adds	r3, #4
 8004102:	4619      	mov	r1, r3
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7fd ff71 	bl	8001fec <lfs_alloc>
 800410a:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800410c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00c      	beq.n	800412c <lfs_dir_compact+0x378>
 8004112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004114:	f113 0f1c 	cmn.w	r3, #28
 8004118:	d106      	bne.n	8004128 <lfs_dir_compact+0x374>
 800411a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800411e:	f083 0301 	eor.w	r3, r3, #1
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <lfs_dir_compact+0x378>
            return err;
 8004128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800412a:	e006      	b.n	800413a <lfs_dir_compact+0x386>
        }

        tired = false;
 800412c:	2300      	movs	r3, #0
 800412e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 8004132:	e668      	b.n	8003e06 <lfs_dir_compact+0x52>
        break;
 8004134:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8004136:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800413a:	4618      	mov	r0, r3
 800413c:	3768      	adds	r7, #104	; 0x68
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	08003d3f 	.word	0x08003d3f
 8004148:	400ffc00 	.word	0x400ffc00
 800414c:	000ffc08 	.word	0x000ffc08
 8004150:	7ffffc0c 	.word	0x7ffffc0c
 8004154:	0800f238 	.word	0x0800f238
 8004158:	0800f744 	.word	0x0800f744
 800415c:	0800f150 	.word	0x0800f150

08004160 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b097      	sub	sp, #92	; 0x5c
 8004164:	af0a      	add	r7, sp, #40	; 0x28
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 800416e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8004174:	e058      	b.n	8004228 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417c:	b29b      	uxth	r3, r3
 800417e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004180:	b292      	uxth	r2, r2
 8004182:	4252      	negs	r2, r2
 8004184:	b292      	uxth	r2, r2
 8004186:	b212      	sxth	r2, r2
 8004188:	f107 0118 	add.w	r1, r7, #24
 800418c:	9108      	str	r1, [sp, #32]
 800418e:	4969      	ldr	r1, [pc, #420]	; (8004334 <lfs_dir_splittingcompact+0x1d4>)
 8004190:	9107      	str	r1, [sp, #28]
 8004192:	9206      	str	r2, [sp, #24]
 8004194:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004198:	9205      	str	r2, [sp, #20]
 800419a:	9304      	str	r3, [sp, #16]
 800419c:	2300      	movs	r3, #0
 800419e:	9303      	str	r3, [sp, #12]
 80041a0:	4b65      	ldr	r3, [pc, #404]	; (8004338 <lfs_dir_splittingcompact+0x1d8>)
 80041a2:	9302      	str	r3, [sp, #8]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	f04f 33ff 	mov.w	r3, #4294967295
 80041b0:	2200      	movs	r2, #0
 80041b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7fe f9f1 	bl	800259c <lfs_dir_traverse>
 80041ba:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 80041bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <lfs_dir_splittingcompact+0x66>
                return err;
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	e0b2      	b.n	800432c <lfs_dir_splittingcompact+0x1cc>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 80041c6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2bfe      	cmp	r3, #254	; 0xfe
 80041d0:	d822      	bhi.n	8004218 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d004      	beq.n	80041f0 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80041ec:	085b      	lsrs	r3, r3, #1
 80041ee:	e003      	b.n	80041f8 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041f4:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80041f6:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80041fc:	6992      	ldr	r2, [r2, #24]
 80041fe:	4611      	mov	r1, r2
 8004200:	4618      	mov	r0, r3
 8004202:	f7fc ffcb 	bl	800119c <lfs_alignup>
 8004206:	4603      	mov	r3, r0
 8004208:	4619      	mov	r1, r3
 800420a:	4620      	mov	r0, r4
 800420c:	f7fc ffa3 	bl	8001156 <lfs_min>
 8004210:	4602      	mov	r2, r0
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	429a      	cmp	r2, r3
 8004216:	d20e      	bcs.n	8004236 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8004218:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	085b      	lsrs	r3, r3, #1
 8004222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004224:	4413      	add	r3, r2
 8004226:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8004228:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	d8a0      	bhi.n	8004176 <lfs_dir_splittingcompact+0x16>
 8004234:	e000      	b.n	8004238 <lfs_dir_splittingcompact+0xd8>
                break;
 8004236:	bf00      	nop
        }

        if (split == begin) {
 8004238:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800423c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800423e:	429a      	cmp	r2, r3
 8004240:	d01e      	beq.n	8004280 <lfs_dir_splittingcompact+0x120>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8004242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004244:	b29b      	uxth	r3, r3
 8004246:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800424a:	9202      	str	r2, [sp, #8]
 800424c:	9301      	str	r3, [sp, #4]
 800424e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f7ff fd06 	bl	8003c6a <lfs_dir_split>
 800425e:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <lfs_dir_splittingcompact+0x112>
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	f113 0f1c 	cmn.w	r3, #28
 800426c:	d001      	beq.n	8004272 <lfs_dir_splittingcompact+0x112>
            return err;
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	e05c      	b.n	800432c <lfs_dir_splittingcompact+0x1cc>
        }

        if (err) {
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	2b00      	cmp	r3, #0
 8004276:	d105      	bne.n	8004284 <lfs_dir_splittingcompact+0x124>
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
                    dir->pair[0], dir->pair[1]);
            break;
        } else {
            end = split;
 8004278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 800427e:	e776      	b.n	800416e <lfs_dir_splittingcompact+0xe>
            break;
 8004280:	bf00      	nop
 8004282:	e000      	b.n	8004286 <lfs_dir_splittingcompact+0x126>
            break;
 8004284:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7ff fd6d 	bl	8003d68 <lfs_dir_needsrelocation>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d03c      	beq.n	800430e <lfs_dir_splittingcompact+0x1ae>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2200      	movs	r2, #0
 8004298:	613a      	str	r2, [r7, #16]
 800429a:	2201      	movs	r2, #1
 800429c:	617a      	str	r2, [r7, #20]
 800429e:	f107 0210 	add.w	r2, r7, #16
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fd fb7b 	bl	80019a0 <lfs_pair_cmp>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d12e      	bne.n	800430e <lfs_dir_splittingcompact+0x1ae>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f002 fec5 	bl	8007040 <lfs_fs_rawsize>
 80042b6:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	da01      	bge.n	80042c2 <lfs_dir_splittingcompact+0x162>
            return size;
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	e034      	b.n	800432c <lfs_dir_splittingcompact+0x1cc>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	085a      	lsrs	r2, r3, #1
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d91e      	bls.n	800430e <lfs_dir_splittingcompact+0x1ae>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80042d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042d4:	9302      	str	r3, [sp, #8]
 80042d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80042da:	9301      	str	r3, [sp, #4]
 80042dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	68b9      	ldr	r1, [r7, #8]
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7ff fcbf 	bl	8003c6a <lfs_dir_split>
 80042ec:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <lfs_dir_splittingcompact+0x1a0>
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f113 0f1c 	cmn.w	r3, #28
 80042fa:	d001      	beq.n	8004300 <lfs_dir_splittingcompact+0x1a0>
                return err;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	e015      	b.n	800432c <lfs_dir_splittingcompact+0x1cc>
            }

            if (err) {
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d103      	bne.n	800430e <lfs_dir_splittingcompact+0x1ae>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
            } else {
                end = begin;
 8004306:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800430a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 800430e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004312:	9302      	str	r3, [sp, #8]
 8004314:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f7ff fd45 	bl	8003db4 <lfs_dir_compact>
 800432a:	4603      	mov	r3, r0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3734      	adds	r7, #52	; 0x34
 8004330:	46bd      	mov	sp, r7
 8004332:	bd90      	pop	{r4, r7, pc}
 8004334:	08003d13 	.word	0x08003d13
 8004338:	400ffc00 	.word	0x400ffc00

0800433c <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 800433c:	b5b0      	push	{r4, r5, r7, lr}
 800433e:	b0a6      	sub	sp, #152	; 0x98
 8004340:	af0a      	add	r7, sp, #40	; 0x28
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
    int state = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 800434e:	2300      	movs	r3, #0
 8004350:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8004354:	2300      	movs	r3, #0
 8004356:	667b      	str	r3, [r7, #100]	; 0x64
 8004358:	e06d      	b.n	8004436 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800435a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	4413      	add	r3, r2
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f7fd fbd2 	bl	8001b0e <lfs_tag_type3>
 800436a:	4603      	mov	r3, r0
 800436c:	461a      	mov	r2, r3
 800436e:	f240 4301 	movw	r3, #1025	; 0x401
 8004372:	429a      	cmp	r2, r3
 8004374:	d106      	bne.n	8004384 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	8a9b      	ldrh	r3, [r3, #20]
 800437a:	3301      	adds	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	829a      	strh	r2, [r3, #20]
 8004382:	e055      	b.n	8004430 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8004384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	4413      	add	r3, r2
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd fbbd 	bl	8001b0e <lfs_tag_type3>
 8004394:	4603      	mov	r3, r0
 8004396:	461a      	mov	r2, r3
 8004398:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800439c:	429a      	cmp	r2, r3
 800439e:	d114      	bne.n	80043ca <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	8a9b      	ldrh	r3, [r3, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <lfs_dir_relocatingcommit+0x7a>
 80043a8:	4ba4      	ldr	r3, [pc, #656]	; (800463c <lfs_dir_relocatingcommit+0x300>)
 80043aa:	4aa5      	ldr	r2, [pc, #660]	; (8004640 <lfs_dir_relocatingcommit+0x304>)
 80043ac:	f240 71e1 	movw	r1, #2017	; 0x7e1
 80043b0:	48a4      	ldr	r0, [pc, #656]	; (8004644 <lfs_dir_relocatingcommit+0x308>)
 80043b2:	f009 fc69 	bl	800dc88 <__assert_func>
            dir->count -= 1;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	8a9b      	ldrh	r3, [r3, #20]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80043c8:	e032      	b.n	8004430 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 80043ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	4413      	add	r3, r2
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fd fb8b 	bl	8001af0 <lfs_tag_type1>
 80043da:	4603      	mov	r3, r0
 80043dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043e0:	d126      	bne.n	8004430 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 80043e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	4413      	add	r3, r2
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 80043f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	4413      	add	r3, r2
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8004402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	4413      	add	r3, r2
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f7fd fb8d 	bl	8001b2c <lfs_tag_chunk>
 8004412:	4603      	mov	r3, r0
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	bf14      	ite	ne
 800441c:	2301      	movne	r3, #1
 800441e:	2300      	moveq	r3, #0
 8004420:	b2da      	uxtb	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	3318      	adds	r3, #24
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd fb0d 	bl	8001a4a <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8004430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004432:	3301      	adds	r3, #1
 8004434:	667b      	str	r3, [r7, #100]	; 0x64
 8004436:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004438:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800443c:	429a      	cmp	r2, r3
 800443e:	db8c      	blt.n	800435a <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8004440:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8004444:	2b00      	cmp	r3, #0
 8004446:	d02b      	beq.n	80044a0 <lfs_dir_relocatingcommit+0x164>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	8a9b      	ldrh	r3, [r3, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d127      	bne.n	80044a0 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8004450:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004454:	2b00      	cmp	r3, #0
 8004456:	d106      	bne.n	8004466 <lfs_dir_relocatingcommit+0x12a>
 8004458:	4b7b      	ldr	r3, [pc, #492]	; (8004648 <lfs_dir_relocatingcommit+0x30c>)
 800445a:	4a79      	ldr	r2, [pc, #484]	; (8004640 <lfs_dir_relocatingcommit+0x304>)
 800445c:	f240 71ee 	movw	r1, #2030	; 0x7ee
 8004460:	4878      	ldr	r0, [pc, #480]	; (8004644 <lfs_dir_relocatingcommit+0x308>)
 8004462:	f009 fc11 	bl	800dc88 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800446c:	4619      	mov	r1, r3
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f002 faae 	bl	80069d0 <lfs_fs_pred>
 8004474:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8004476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <lfs_dir_relocatingcommit+0x14c>
 800447c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800447e:	f113 0f02 	cmn.w	r3, #2
 8004482:	d001      	beq.n	8004488 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8004484:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004486:	e203      	b.n	8004890 <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8004488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800448a:	f113 0f02 	cmn.w	r3, #2
 800448e:	d007      	beq.n	80044a0 <lfs_dir_relocatingcommit+0x164>
 8004490:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004494:	7ddb      	ldrb	r3, [r3, #23]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 800449a:	2302      	movs	r3, #2
 800449c:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 800449e:	e121      	b.n	80046e4 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	7d9b      	ldrb	r3, [r3, #22]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80fb 	beq.w	80046a0 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 80044ae:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 80044ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80044bc:	f04f 33ff 	mov.w	r3, #4294967295
 80044c0:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80044c6:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d004      	beq.n	80044dc <lfs_dir_relocatingcommit+0x1a0>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d8:	3b08      	subs	r3, #8
 80044da:	e003      	b.n	80044e4 <lfs_dir_relocatingcommit+0x1a8>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 80044e4:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	3318      	adds	r3, #24
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fd fac7 	bl	8001a7e <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80044fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8004502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004506:	9308      	str	r3, [sp, #32]
 8004508:	4b50      	ldr	r3, [pc, #320]	; (800464c <lfs_dir_relocatingcommit+0x310>)
 800450a:	9307      	str	r3, [sp, #28]
 800450c:	2300      	movs	r3, #0
 800450e:	9306      	str	r3, [sp, #24]
 8004510:	2300      	movs	r3, #0
 8004512:	9305      	str	r3, [sp, #20]
 8004514:	2300      	movs	r3, #0
 8004516:	9304      	str	r3, [sp, #16]
 8004518:	2300      	movs	r3, #0
 800451a:	9303      	str	r3, [sp, #12]
 800451c:	2300      	movs	r3, #0
 800451e:	9302      	str	r3, [sp, #8]
 8004520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	460b      	mov	r3, r1
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f7fe f834 	bl	800259c <lfs_dir_traverse>
 8004534:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	3318      	adds	r3, #24
 800453a:	4618      	mov	r0, r3
 800453c:	f7fd fa85 	bl	8001a4a <lfs_pair_fromle32>
        if (err) {
 8004540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00b      	beq.n	800455e <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8004546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004548:	f113 0f1c 	cmn.w	r3, #28
 800454c:	f000 80aa 	beq.w	80046a4 <lfs_dir_relocatingcommit+0x368>
 8004550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004552:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004556:	f000 80a5 	beq.w	80046a4 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 800455a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800455c:	e198      	b.n	8004890 <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800455e:	f107 031c 	add.w	r3, r7, #28
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	605a      	str	r2, [r3, #4]
 8004568:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004570:	f107 031c 	add.w	r3, r7, #28
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f7fd fb20 	bl	8001bbc <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004582:	f107 031c 	add.w	r3, r7, #28
 8004586:	4611      	mov	r1, r2
 8004588:	4618      	mov	r0, r3
 800458a:	f7fd fb17 	bl	8001bbc <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004594:	f107 031c 	add.w	r3, r7, #28
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f7fd fb0e 	bl	8001bbc <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045a6:	f023 0303 	bic.w	r3, r3, #3
 80045aa:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 80045ac:	f107 031c 	add.w	r3, r7, #28
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fd fb27 	bl	8001c04 <lfs_gstate_iszero>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f083 0301 	eor.w	r3, r3, #1
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d027      	beq.n	8004612 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80045c2:	f107 031c 	add.w	r3, r7, #28
 80045c6:	461a      	mov	r2, r3
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f7fe ff6c 	bl	80034a8 <lfs_dir_getgstate>
 80045d0:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 80045d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <lfs_dir_relocatingcommit+0x2a0>
                return err;
 80045d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045da:	e159      	b.n	8004890 <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 80045dc:	f107 031c 	add.w	r3, r7, #28
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fd fba0 	bl	8001d26 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 80045e6:	f107 031c 	add.w	r3, r7, #28
 80045ea:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80045ee:	4a18      	ldr	r2, [pc, #96]	; (8004650 <lfs_dir_relocatingcommit+0x314>)
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7ff f905 	bl	8003800 <lfs_dir_commitattr>
 80045f6:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 80045f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80045fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004600:	f113 0f1c 	cmn.w	r3, #28
 8004604:	d050      	beq.n	80046a8 <lfs_dir_relocatingcommit+0x36c>
 8004606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004608:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800460c:	d04c      	beq.n	80046a8 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 800460e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004610:	e13e      	b.n	8004890 <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8004612:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004616:	4619      	mov	r1, r3
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff f971 	bl	8003900 <lfs_dir_commitcrc>
 800461e:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8004620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004622:	2b00      	cmp	r3, #0
 8004624:	d016      	beq.n	8004654 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8004626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004628:	f113 0f1c 	cmn.w	r3, #28
 800462c:	d03e      	beq.n	80046ac <lfs_dir_relocatingcommit+0x370>
 800462e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004630:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004634:	d03a      	beq.n	80046ac <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8004636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004638:	e12a      	b.n	8004890 <lfs_dir_relocatingcommit+0x554>
 800463a:	bf00      	nop
 800463c:	0800f260 	.word	0x0800f260
 8004640:	0800f754 	.word	0x0800f754
 8004644:	0800f150 	.word	0x0800f150
 8004648:	0800f270 	.word	0x0800f270
 800464c:	08003d3f 	.word	0x08003d3f
 8004650:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8004654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800465a:	6992      	ldr	r2, [r2, #24]
 800465c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004660:	fb02 f201 	mul.w	r2, r2, r1
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d006      	beq.n	8004678 <lfs_dir_relocatingcommit+0x33c>
 800466a:	4b8b      	ldr	r3, [pc, #556]	; (8004898 <lfs_dir_relocatingcommit+0x55c>)
 800466c:	4a8b      	ldr	r2, [pc, #556]	; (800489c <lfs_dir_relocatingcommit+0x560>)
 800466e:	f640 0138 	movw	r1, #2104	; 0x838
 8004672:	488b      	ldr	r0, [pc, #556]	; (80048a0 <lfs_dir_relocatingcommit+0x564>)
 8004674:	f009 fb08 	bl	800dc88 <__assert_func>
        dir->off = commit.off;
 8004678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800467e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	333c      	adds	r3, #60	; 0x3c
 800468a:	3230      	adds	r2, #48	; 0x30
 800468c:	ca07      	ldmia	r2, {r0, r1, r2}
 800468e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3348      	adds	r3, #72	; 0x48
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	605a      	str	r2, [r3, #4]
 800469c:	609a      	str	r2, [r3, #8]
 800469e:	e021      	b.n	80046e4 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 80046a0:	bf00      	nop
 80046a2:	e004      	b.n	80046ae <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80046a4:	bf00      	nop
 80046a6:	e002      	b.n	80046ae <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 80046a8:	bf00      	nop
 80046aa:	e000      	b.n	80046ae <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80046ac:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3310      	adds	r3, #16
 80046b2:	4619      	mov	r1, r3
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f7fc fdfd 	bl	80012b4 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	8a9b      	ldrh	r3, [r3, #20]
 80046be:	9302      	str	r3, [sp, #8]
 80046c0:	2300      	movs	r3, #0
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f7ff fd45 	bl	8004160 <lfs_dir_splittingcompact>
 80046d6:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 80046d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	da01      	bge.n	80046e2 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 80046de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e0:	e0d6      	b.n	8004890 <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 80046e2:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	663b      	str	r3, [r7, #96]	; 0x60
 80046f6:	e0c6      	b.n	8004886 <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 80046f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046fa:	3308      	adds	r3, #8
 80046fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004700:	4611      	mov	r1, r2
 8004702:	4618      	mov	r0, r3
 8004704:	f7fd f94c 	bl	80019a0 <lfs_pair_cmp>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	f040 80b8 	bne.w	8004880 <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8004710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	f103 0408 	add.w	r4, r3, #8
 8004718:	4615      	mov	r5, r2
 800471a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800471c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800471e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8004726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004728:	3308      	adds	r3, #8
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	429a      	cmp	r2, r3
 800472e:	f000 809d 	beq.w	800486c <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 8004732:	2300      	movs	r3, #0
 8004734:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004736:	e07b      	b.n	8004830 <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	4413      	add	r3, r2
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7fd f9e3 	bl	8001b0e <lfs_tag_type3>
 8004748:	4603      	mov	r3, r0
 800474a:	461a      	mov	r2, r3
 800474c:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8004750:	429a      	cmp	r2, r3
 8004752:	d115      	bne.n	8004780 <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8004754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004756:	889c      	ldrh	r4, [r3, #4]
 8004758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	4413      	add	r3, r2
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fd f9fb 	bl	8001b5e <lfs_tag_id>
 8004768:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800476a:	429c      	cmp	r4, r3
 800476c:	d108      	bne.n	8004780 <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 800476e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004770:	f04f 32ff 	mov.w	r2, #4294967295
 8004774:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8004776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004778:	f04f 32ff 	mov.w	r2, #4294967295
 800477c:	60da      	str	r2, [r3, #12]
 800477e:	e054      	b.n	800482a <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	4413      	add	r3, r2
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fd f9bf 	bl	8001b0e <lfs_tag_type3>
 8004790:	4603      	mov	r3, r0
 8004792:	461a      	mov	r2, r3
 8004794:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8004798:	429a      	cmp	r2, r3
 800479a:	d11c      	bne.n	80047d6 <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 800479c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800479e:	889c      	ldrh	r4, [r3, #4]
 80047a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	4413      	add	r3, r2
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fd f9d7 	bl	8001b5e <lfs_tag_id>
 80047b0:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80047b2:	429c      	cmp	r4, r3
 80047b4:	d90f      	bls.n	80047d6 <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 80047b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047b8:	889b      	ldrh	r3, [r3, #4]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c0:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80047c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c4:	799b      	ldrb	r3, [r3, #6]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d12f      	bne.n	800482a <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 80047ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	1e5a      	subs	r2, r3, #1
 80047d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 80047d4:	e029      	b.n	800482a <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80047d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	4413      	add	r3, r2
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fd f994 	bl	8001b0e <lfs_tag_type3>
 80047e6:	4603      	mov	r3, r0
 80047e8:	461a      	mov	r2, r3
 80047ea:	f240 4301 	movw	r3, #1025	; 0x401
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d11b      	bne.n	800482a <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 80047f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047f4:	889c      	ldrh	r4, [r3, #4]
 80047f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	4413      	add	r3, r2
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f7fd f9ac 	bl	8001b5e <lfs_tag_id>
 8004806:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004808:	429c      	cmp	r4, r3
 800480a:	d30e      	bcc.n	800482a <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 800480c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800480e:	889b      	ldrh	r3, [r3, #4]
 8004810:	3301      	adds	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004816:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800481a:	799b      	ldrb	r3, [r3, #6]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d104      	bne.n	800482a <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 8004820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004828:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 800482a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800482c:	3301      	adds	r3, #1
 800482e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004830:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004832:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004836:	429a      	cmp	r2, r3
 8004838:	f6ff af7e 	blt.w	8004738 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 800483c:	e016      	b.n	800486c <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 800483e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004840:	889a      	ldrh	r2, [r3, #4]
 8004842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004844:	8b9b      	ldrh	r3, [r3, #28]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	b29a      	uxth	r2, r3
 800484a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800484c:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800484e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004850:	f103 0108 	add.w	r1, r3, #8
 8004854:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004856:	3320      	adds	r3, #32
 8004858:	461a      	mov	r2, r3
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f7fe fe08 	bl	8003470 <lfs_dir_fetch>
 8004860:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8004862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <lfs_dir_relocatingcommit+0x530>
                    return err;
 8004868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486a:	e011      	b.n	8004890 <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 800486c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800486e:	889a      	ldrh	r2, [r3, #4]
 8004870:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004872:	8b9b      	ldrh	r3, [r3, #28]
 8004874:	429a      	cmp	r2, r3
 8004876:	d303      	bcc.n	8004880 <lfs_dir_relocatingcommit+0x544>
 8004878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800487a:	7fdb      	ldrb	r3, [r3, #31]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1de      	bne.n	800483e <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	663b      	str	r3, [r7, #96]	; 0x60
 8004886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004888:	2b00      	cmp	r3, #0
 800488a:	f47f af35 	bne.w	80046f8 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 800488e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8004890:	4618      	mov	r0, r3
 8004892:	3770      	adds	r7, #112	; 0x70
 8004894:	46bd      	mov	sp, r7
 8004896:	bdb0      	pop	{r4, r5, r7, pc}
 8004898:	0800f238 	.word	0x0800f238
 800489c:	0800f754 	.word	0x0800f754
 80048a0:	0800f150 	.word	0x0800f150

080048a4 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80048a4:	b5b0      	push	{r4, r5, r7, lr}
 80048a6:	b0ba      	sub	sp, #232	; 0xe8
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048ba:	e045      	b.n	8004948 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80048bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048c0:	3308      	adds	r3, #8
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d03a      	beq.n	800493e <lfs_dir_orphaningcommit+0x9a>
 80048c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048cc:	3308      	adds	r3, #8
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fd f864 	bl	80019a0 <lfs_pair_cmp>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d12f      	bne.n	800493e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80048de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e2:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d12a      	bne.n	800493e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80048e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d023      	beq.n	800493e <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80048f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004902:	429a      	cmp	r2, r3
 8004904:	d91b      	bls.n	800493e <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8004906:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 ff92 	bl	8005834 <lfs_file_outline>
 8004910:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8004914:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <lfs_dir_orphaningcommit+0x7e>
                return err;
 800491c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004920:	e274      	b.n	8004e0c <lfs_dir_orphaningcommit+0x568>
            }

            err = lfs_file_flush(lfs, f);
 8004922:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 ffa5 	bl	8005876 <lfs_file_flush>
 800492c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8004930:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <lfs_dir_orphaningcommit+0x9a>
                return err;
 8004938:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800493c:	e266      	b.n	8004e0c <lfs_dir_orphaningcommit+0x568>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800493e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1b5      	bne.n	80048bc <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004966:	461d      	mov	r5, r3
 8004968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800496a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800496c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004970:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800497a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff fcd8 	bl	800433c <lfs_dir_relocatingcommit>
 800498c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8004990:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004994:	2b00      	cmp	r3, #0
 8004996:	da02      	bge.n	800499e <lfs_dir_orphaningcommit+0xfa>
        return state;
 8004998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800499c:	e236      	b.n	8004e0c <lfs_dir_orphaningcommit+0x568>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80049a4:	4611      	mov	r1, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fc fffa 	bl	80019a0 <lfs_pair_cmp>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	461d      	mov	r5, r3
 80049b6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80049ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80049c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 80049c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d14a      	bne.n	8004a64 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3348      	adds	r3, #72	; 0x48
 80049d2:	461a      	mov	r2, r3
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7fe fd66 	bl	80034a8 <lfs_dir_getgstate>
 80049dc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 80049e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <lfs_dir_orphaningcommit+0x14a>
            return err;
 80049e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049ec:	e20e      	b.n	8004e0c <lfs_dir_orphaningcommit+0x568>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 80049ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 80049f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	3318      	adds	r3, #24
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fd f83d 	bl	8001a7e <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	7ddb      	ldrb	r3, [r3, #23]
 8004a08:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004a0c:	051a      	lsls	r2, r3, #20
 8004a0e:	4bc0      	ldr	r3, [pc, #768]	; (8004d10 <lfs_dir_orphaningcommit+0x46c>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	667b      	str	r3, [r7, #100]	; 0x64
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	3318      	adds	r3, #24
 8004a18:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004a1e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004a22:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004a26:	2000      	movs	r0, #0
 8004a28:	9001      	str	r0, [sp, #4]
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	9000      	str	r0, [sp, #0]
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7ff fc84 	bl	800433c <lfs_dir_relocatingcommit>
 8004a34:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	3318      	adds	r3, #24
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fd f804 	bl	8001a4a <lfs_pair_fromle32>
        if (state < 0) {
 8004a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da02      	bge.n	8004a50 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8004a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a4e:	e1dd      	b.n	8004e0c <lfs_dir_orphaningcommit+0x568>
        }

        ldir = pdir;
 8004a50:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004a54:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a5c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8004a64:	2300      	movs	r3, #0
 8004a66:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8004a6a:	e1c3      	b.n	8004df4 <lfs_dir_orphaningcommit+0x550>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f103 0220 	add.w	r2, r3, #32
 8004a78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fc ff8e 	bl	80019a0 <lfs_pair_cmp>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d107      	bne.n	8004a9a <lfs_dir_orphaningcommit+0x1f6>
            lfs->root[0] = ldir.pair[0];
 8004a8a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8004a92:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004aa2:	e037      	b.n	8004b14 <lfs_dir_orphaningcommit+0x270>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8004aa4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004aa8:	f103 0208 	add.w	r2, r3, #8
 8004aac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc ff74 	bl	80019a0 <lfs_pair_cmp>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <lfs_dir_orphaningcommit+0x22e>
                d->m.pair[0] = ldir.pair[0];
 8004abe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004ac2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004ac6:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8004ac8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004acc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004ad0:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8004ad2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004ad6:	799b      	ldrb	r3, [r3, #6]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d116      	bne.n	8004b0a <lfs_dir_orphaningcommit+0x266>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8004adc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004ae0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004ae4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004ae8:	4611      	mov	r1, r2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fc ff58 	bl	80019a0 <lfs_pair_cmp>
 8004af0:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <lfs_dir_orphaningcommit+0x266>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8004af6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004afa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004afe:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8004b00:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004b04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004b0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1c3      	bne.n	8004aa4 <lfs_dir_orphaningcommit+0x200>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8004b1c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004b20:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b24:	4619      	mov	r1, r3
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f001 ffda 	bl	8006ae0 <lfs_fs_parent>
 8004b2c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8004b30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	da07      	bge.n	8004b48 <lfs_dir_orphaningcommit+0x2a4>
 8004b38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b3c:	f113 0f02 	cmn.w	r3, #2
 8004b40:	d002      	beq.n	8004b48 <lfs_dir_orphaningcommit+0x2a4>
            return tag;
 8004b42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b46:	e161      	b.n	8004e0c <lfs_dir_orphaningcommit+0x568>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8004b48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b4c:	f113 0f02 	cmn.w	r3, #2
 8004b50:	bf14      	ite	ne
 8004b52:	2301      	movne	r3, #1
 8004b54:	2300      	moveq	r3, #0
 8004b56:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8004b5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b5e:	f113 0f02 	cmn.w	r3, #2
 8004b62:	f000 808f 	beq.w	8004c84 <lfs_dir_orphaningcommit+0x3e0>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8004b66:	2101      	movs	r1, #1
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f002 f80f 	bl	8006b8c <lfs_fs_preporphans>
 8004b6e:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 8004b72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <lfs_dir_orphaningcommit+0x2dc>
                return err;
 8004b7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b7e:	e145      	b.n	8004e0c <lfs_dir_orphaningcommit+0x568>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004b80:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004b84:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3330      	adds	r3, #48	; 0x30
 8004b8c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004b90:	4611      	mov	r1, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fd f887 	bl	8001ca6 <lfs_gstate_hasmovehere>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01e      	beq.n	8004bdc <lfs_dir_orphaningcommit+0x338>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fc ffdb 	bl	8001b5e <lfs_tag_id>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f002 f823 	bl	8006c00 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8004bba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fc ffcd 	bl	8001b5e <lfs_tag_id>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d205      	bcs.n	8004bdc <lfs_dir_orphaningcommit+0x338>
                    tag -= LFS_MKTAG(0, 1, 0);
 8004bd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bd4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004bd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8004bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bde:	657b      	str	r3, [r7, #84]	; 0x54
 8004be0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004be2:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 8004be4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fc ff48 	bl	8001a7e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8004bee:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004bf2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d007      	beq.n	8004c0a <lfs_dir_orphaningcommit+0x366>
 8004bfa:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004bfe:	029b      	lsls	r3, r3, #10
 8004c00:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004c04:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004c08:	e000      	b.n	8004c0c <lfs_dir_orphaningcommit+0x368>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0e:	2300      	movs	r3, #0
 8004c10:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004c1c:	653b      	str	r3, [r7, #80]	; 0x50
 8004c1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004c22:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004c26:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	9001      	str	r0, [sp, #4]
 8004c2e:	2002      	movs	r0, #2
 8004c30:	9000      	str	r0, [sp, #0]
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f7ff fb82 	bl	800433c <lfs_dir_relocatingcommit>
 8004c38:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004c3c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fc ff02 	bl	8001a4a <lfs_pair_fromle32>
            if (state < 0) {
 8004c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	da02      	bge.n	8004c54 <lfs_dir_orphaningcommit+0x3b0>
                return state;
 8004c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c52:	e0db      	b.n	8004e0c <lfs_dir_orphaningcommit+0x568>
            }

            if (state == LFS_OK_RELOCATED) {
 8004c54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d113      	bne.n	8004c84 <lfs_dir_orphaningcommit+0x3e0>
                lpair[0] = ppair[0];
 8004c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8004c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 8004c68:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004c6c:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004c78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004c82:	e0b7      	b.n	8004df4 <lfs_dir_orphaningcommit+0x550>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8004c84:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004c88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f001 fe9e 	bl	80069d0 <lfs_fs_pred>
 8004c94:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8004c98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d007      	beq.n	8004cb0 <lfs_dir_orphaningcommit+0x40c>
 8004ca0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ca4:	f113 0f02 	cmn.w	r3, #2
 8004ca8:	d002      	beq.n	8004cb0 <lfs_dir_orphaningcommit+0x40c>
            return err;
 8004caa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cae:	e0ad      	b.n	8004e0c <lfs_dir_orphaningcommit+0x568>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8004cb0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00b      	beq.n	8004cd0 <lfs_dir_orphaningcommit+0x42c>
 8004cb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cbc:	f113 0f02 	cmn.w	r3, #2
 8004cc0:	d106      	bne.n	8004cd0 <lfs_dir_orphaningcommit+0x42c>
 8004cc2:	4b14      	ldr	r3, [pc, #80]	; (8004d14 <lfs_dir_orphaningcommit+0x470>)
 8004cc4:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <lfs_dir_orphaningcommit+0x474>)
 8004cc6:	f640 1112 	movw	r1, #2322	; 0x912
 8004cca:	4814      	ldr	r0, [pc, #80]	; (8004d1c <lfs_dir_orphaningcommit+0x478>)
 8004ccc:	f008 ffdc 	bl	800dc88 <__assert_func>

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8004cd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cd4:	f113 0f02 	cmn.w	r3, #2
 8004cd8:	f000 808c 	beq.w	8004df4 <lfs_dir_orphaningcommit+0x550>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3330      	adds	r3, #48	; 0x30
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fc ffab 	bl	8001c3c <lfs_gstate_hasorphans>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d019      	beq.n	8004d20 <lfs_dir_orphaningcommit+0x47c>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8004cec:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004cf0:	425b      	negs	r3, r3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	b25b      	sxtb	r3, r3
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f001 ff47 	bl	8006b8c <lfs_fs_preporphans>
 8004cfe:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8004d02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <lfs_dir_orphaningcommit+0x47c>
                    return err;
 8004d0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d0e:	e07d      	b.n	8004e0c <lfs_dir_orphaningcommit+0x568>
 8004d10:	000ffc08 	.word	0x000ffc08
 8004d14:	0800f278 	.word	0x0800f278
 8004d18:	0800f770 	.word	0x0800f770
 8004d1c:	0800f150 	.word	0x0800f150
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004d20:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004d24:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3330      	adds	r3, #48	; 0x30
 8004d2c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fc ffb7 	bl	8001ca6 <lfs_gstate_hasmovehere>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00d      	beq.n	8004d5a <lfs_dir_orphaningcommit+0x4b6>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fc ff0b 	bl	8001b5e <lfs_tag_id>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f001 ff53 	bl	8006c00 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8004d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8004d60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8004d66:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fc fe87 	bl	8001a7e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004d70:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004d74:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d007      	beq.n	8004d8c <lfs_dir_orphaningcommit+0x4e8>
 8004d7c:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004d80:	029b      	lsls	r3, r3, #10
 8004d82:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004d86:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004d8a:	e000      	b.n	8004d8e <lfs_dir_orphaningcommit+0x4ea>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d90:	2300      	movs	r3, #0
 8004d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d94:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004d98:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004d9c:	051a      	lsls	r2, r3, #20
 8004d9e:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <lfs_dir_orphaningcommit+0x570>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004da4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004da8:	633b      	str	r3, [r7, #48]	; 0x30
 8004daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dae:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004db2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004db6:	2000      	movs	r0, #0
 8004db8:	9001      	str	r0, [sp, #4]
 8004dba:	2002      	movs	r0, #2
 8004dbc:	9000      	str	r0, [sp, #0]
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f7ff fabc 	bl	800433c <lfs_dir_relocatingcommit>
 8004dc4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004dc8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fc fe3c 	bl	8001a4a <lfs_pair_fromle32>
            if (state < 0) {
 8004dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	da02      	bge.n	8004de0 <lfs_dir_orphaningcommit+0x53c>
                return state;
 8004dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dde:	e015      	b.n	8004e0c <lfs_dir_orphaningcommit+0x568>
            }

            ldir = pdir;
 8004de0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004de4:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8004df4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	f43f ae37 	beq.w	8004a6c <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8004dfe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <lfs_dir_orphaningcommit+0x566>
 8004e06:	2303      	movs	r3, #3
 8004e08:	e000      	b.n	8004e0c <lfs_dir_orphaningcommit+0x568>
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	37e0      	adds	r7, #224	; 0xe0
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bdb0      	pop	{r4, r5, r7, pc}
 8004e14:	000ffc08 	.word	0x000ffc08

08004e18 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f7ff fd39 	bl	80048a4 <lfs_dir_orphaningcommit>
 8004e32:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	da01      	bge.n	8004e3e <lfs_dir_commit+0x26>
        return orphans;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	e00d      	b.n	8004e5a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d009      	beq.n	8004e58 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004e44:	2100      	movs	r1, #0
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f001 ff5e 	bl	8006d08 <lfs_fs_deorphan>
 8004e4c:	6138      	str	r0, [r7, #16]
        if (err) {
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <lfs_dir_commit+0x40>
            return err;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	e000      	b.n	8004e5a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8004e62:	b590      	push	{r4, r7, lr}
 8004e64:	b087      	sub	sp, #28
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	3b08      	subs	r3, #8
 8004e7a:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e84:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <lfs_ctz_index+0x2e>
        return 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e01c      	b.n	8004eca <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fc f9b0 	bl	80011fa <lfs_popc>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	1ad2      	subs	r2, r2, r3
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eaa:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	fb02 f303 	mul.w	r3, r2, r3
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	1ad4      	subs	r4, r2, r3
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f7fc f99e 	bl	80011fa <lfs_popc>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	1ae2      	subs	r2, r4, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	601a      	str	r2, [r3, #0]
    return i;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd90      	pop	{r4, r7, pc}

08004ed2 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8004ed2:	b590      	push	{r4, r7, lr}
 8004ed4:	b08f      	sub	sp, #60	; 0x3c
 8004ed6:	af04      	add	r7, sp, #16
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
 8004ede:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d108      	bne.n	8004ef8 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8004ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eec:	601a      	str	r2, [r3, #0]
        *off = 0;
 8004eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
        return 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e053      	b.n	8004fa0 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	3b01      	subs	r3, #1
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	f107 0314 	add.w	r3, r7, #20
 8004f02:	4619      	mov	r1, r3
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f7ff ffac 	bl	8004e62 <lfs_ctz_index>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8004f0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004f12:	4619      	mov	r1, r3
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f7ff ffa4 	bl	8004e62 <lfs_ctz_index>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8004f1e:	e034      	b.n	8004f8a <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8004f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	3301      	adds	r3, #1
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fc f949 	bl	80011c0 <lfs_npw2>
 8004f2e:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8004f30:	1e5c      	subs	r4, r3, #1
 8004f32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f34:	f7fc f953 	bl	80011de <lfs_ctz>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f7fc f90a 	bl	8001156 <lfs_min>
 8004f42:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	0092      	lsls	r2, r2, #2
 8004f4a:	2104      	movs	r1, #4
 8004f4c:	9103      	str	r1, [sp, #12]
 8004f4e:	4639      	mov	r1, r7
 8004f50:	9102      	str	r1, [sp, #8]
 8004f52:	9201      	str	r2, [sp, #4]
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	2304      	movs	r3, #4
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f7fc f9cd 	bl	80012fc <lfs_bd_read>
 8004f62:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fc f960 	bl	800122c <lfs_fromle32>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	603b      	str	r3, [r7, #0]
        if (err) {
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <lfs_ctz_find+0xa8>
            return err;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	e012      	b.n	8004fa0 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d8c6      	bhi.n	8004f20 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f96:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004f98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f9c:	601a      	str	r2, [r3, #0]
    return 0;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	372c      	adds	r7, #44	; 0x2c
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd90      	pop	{r4, r7, pc}

08004fa8 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b092      	sub	sp, #72	; 0x48
 8004fac:	af04      	add	r7, sp, #16
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004fb6:	f107 0320 	add.w	r3, r7, #32
 8004fba:	4619      	mov	r1, r3
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f7fd f815 	bl	8001fec <lfs_alloc>
 8004fc2:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <lfs_ctz_extend+0x26>
            return err;
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fcc:	e0e0      	b.n	8005190 <lfs_ctz_extend+0x1e8>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7fc fc84 	bl	80018e0 <lfs_bd_erase>
 8004fd8:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d006      	beq.n	8004fee <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8004fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004fe6:	f000 80cb 	beq.w	8005180 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	e0d0      	b.n	8005190 <lfs_ctz_extend+0x1e8>
            }

            if (size == 0) {
 8004fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d107      	bne.n	8005004 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8004ff4:	6a3a      	ldr	r2, [r7, #32]
 8004ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff8:	601a      	str	r2, [r3, #0]
                *off = 0;
 8004ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
                return 0;
 8005000:	2300      	movs	r3, #0
 8005002:	e0c5      	b.n	8005190 <lfs_ctz_extend+0x1e8>
            }

            lfs_size_t noff = size - 1;
 8005004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005006:	3b01      	subs	r3, #1
 8005008:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800500a:	f107 031c 	add.w	r3, r7, #28
 800500e:	4619      	mov	r1, r3
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f7ff ff26 	bl	8004e62 <lfs_ctz_index>
 8005016:	4603      	mov	r3, r0
 8005018:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	3301      	adds	r3, #1
 800501e:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005024:	69da      	ldr	r2, [r3, #28]
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	429a      	cmp	r2, r3
 800502a:	d044      	beq.n	80050b6 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 800502c:	2300      	movs	r3, #0
 800502e:	637b      	str	r3, [r7, #52]	; 0x34
 8005030:	e035      	b.n	800509e <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005036:	1ad2      	subs	r2, r2, r3
 8005038:	2301      	movs	r3, #1
 800503a:	9303      	str	r3, [sp, #12]
 800503c:	f107 0317 	add.w	r3, r7, #23
 8005040:	9302      	str	r3, [sp, #8]
 8005042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	2100      	movs	r1, #0
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f7fc f953 	bl	80012fc <lfs_bd_read>
 8005056:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8005058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <lfs_ctz_extend+0xba>
                        return err;
 800505e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005060:	e096      	b.n	8005190 <lfs_ctz_extend+0x1e8>
                    }

                    err = lfs_bd_prog(lfs,
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	2201      	movs	r2, #1
 8005066:	9203      	str	r2, [sp, #12]
 8005068:	f107 0217 	add.w	r2, r7, #23
 800506c:	9202      	str	r2, [sp, #8]
 800506e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005070:	9201      	str	r2, [sp, #4]
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	2301      	movs	r3, #1
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7fc fb84 	bl	8001788 <lfs_bd_prog>
 8005080:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d007      	beq.n	8005098 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8005088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800508e:	d101      	bne.n	8005094 <lfs_ctz_extend+0xec>
                            goto relocate;
 8005090:	bf00      	nop
                    goto relocate;
 8005092:	e075      	b.n	8005180 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8005096:	e07b      	b.n	8005190 <lfs_ctz_extend+0x1e8>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	3301      	adds	r3, #1
 800509c:	637b      	str	r3, [r7, #52]	; 0x34
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d3c5      	bcc.n	8005032 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 80050a6:	6a3a      	ldr	r2, [r7, #32]
 80050a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050aa:	601a      	str	r2, [r3, #0]
                *off = noff;
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050b0:	601a      	str	r2, [r3, #0]
                return 0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	e06c      	b.n	8005190 <lfs_ctz_extend+0x1e8>
            }

            // append block
            index += 1;
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	3301      	adds	r3, #1
 80050ba:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 80050bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050be:	f7fc f88e 	bl	80011de <lfs_ctz>
 80050c2:	4603      	mov	r3, r0
 80050c4:	3301      	adds	r3, #1
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 80050cc:	2300      	movs	r3, #0
 80050ce:	633b      	str	r3, [r7, #48]	; 0x30
 80050d0:	e049      	b.n	8005166 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fc f8b3 	bl	8001240 <lfs_tole32>
 80050da:	4603      	mov	r3, r0
 80050dc:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e2:	0092      	lsls	r2, r2, #2
 80050e4:	2104      	movs	r1, #4
 80050e6:	9103      	str	r1, [sp, #12]
 80050e8:	f107 0118 	add.w	r1, r7, #24
 80050ec:	9102      	str	r1, [sp, #8]
 80050ee:	9201      	str	r2, [sp, #4]
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2301      	movs	r3, #1
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7fc fb45 	bl	8001788 <lfs_bd_prog>
 80050fe:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	4618      	mov	r0, r3
 8005104:	f7fc f892 	bl	800122c <lfs_fromle32>
 8005108:	4603      	mov	r3, r0
 800510a:	61bb      	str	r3, [r7, #24]
                if (err) {
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005114:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005118:	d034      	beq.n	8005184 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	e038      	b.n	8005190 <lfs_ctz_extend+0x1e8>
                }

                if (i != skips-1) {
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	3b01      	subs	r3, #1
 8005122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005124:	429a      	cmp	r2, r3
 8005126:	d01b      	beq.n	8005160 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800512c:	0092      	lsls	r2, r2, #2
 800512e:	2104      	movs	r1, #4
 8005130:	9103      	str	r1, [sp, #12]
 8005132:	f107 0118 	add.w	r1, r7, #24
 8005136:	9102      	str	r1, [sp, #8]
 8005138:	9201      	str	r2, [sp, #4]
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	2304      	movs	r3, #4
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	2100      	movs	r1, #0
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f7fc f8da 	bl	80012fc <lfs_bd_read>
 8005148:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	4618      	mov	r0, r3
 800514e:	f7fc f86d 	bl	800122c <lfs_fromle32>
 8005152:	4603      	mov	r3, r0
 8005154:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <lfs_ctz_extend+0x1b8>
                        return err;
 800515c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515e:	e017      	b.n	8005190 <lfs_ctz_extend+0x1e8>
            for (lfs_off_t i = 0; i < skips; i++) {
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	3301      	adds	r3, #1
 8005164:	633b      	str	r3, [r7, #48]	; 0x30
 8005166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	429a      	cmp	r2, r3
 800516c:	d3b1      	bcc.n	80050d2 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800516e:	6a3a      	ldr	r2, [r7, #32]
 8005170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005172:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	009a      	lsls	r2, r3, #2
 8005178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800517a:	601a      	str	r2, [r3, #0]
            return 0;
 800517c:	2300      	movs	r3, #0
 800517e:	e007      	b.n	8005190 <lfs_ctz_extend+0x1e8>
                    goto relocate;
 8005180:	bf00      	nop
 8005182:	e000      	b.n	8005186 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8005184:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f7fc f893 	bl	80012b4 <lfs_cache_drop>
    while (true) {
 800518e:	e712      	b.n	8004fb6 <lfs_ctz_extend+0xe>
    }
}
 8005190:	4618      	mov	r0, r3
 8005192:	3738      	adds	r7, #56	; 0x38
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b090      	sub	sp, #64	; 0x40
 800519c:	af04      	add	r7, sp, #16
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80051a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <lfs_ctz_traverse+0x18>
        return 0;
 80051ac:	2300      	movs	r3, #0
 80051ae:	e06d      	b.n	800528c <lfs_ctz_traverse+0xf4>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	3b01      	subs	r3, #1
 80051b4:	61fb      	str	r3, [r7, #28]
 80051b6:	f107 031c 	add.w	r3, r7, #28
 80051ba:	4619      	mov	r1, r3
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff fe50 	bl	8004e62 <lfs_ctz_index>
 80051c2:	4603      	mov	r3, r0
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 80051c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80051cc:	4798      	blx	r3
 80051ce:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <lfs_ctz_traverse+0x42>
            return err;
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	e058      	b.n	800528c <lfs_ctz_traverse+0xf4>
        }

        if (index == 0) {
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <lfs_ctz_traverse+0x4c>
            return 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e053      	b.n	800528c <lfs_ctz_traverse+0xf4>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	f1c3 0302 	rsb	r3, r3, #2
 80051ee:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 80051f0:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 80051f2:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 80051f4:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 80051f6:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 80051f8:	9303      	str	r3, [sp, #12]
 80051fa:	f107 0314 	add.w	r3, r7, #20
 80051fe:	9302      	str	r3, [sp, #8]
 8005200:	2300      	movs	r3, #0
 8005202:	9301      	str	r3, [sp, #4]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	4613      	mov	r3, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f7fc f874 	bl	80012fc <lfs_bd_read>
 8005214:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	4618      	mov	r0, r3
 800521a:	f7fc f807 	bl	800122c <lfs_fromle32>
 800521e:	4603      	mov	r3, r0
 8005220:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	4618      	mov	r0, r3
 8005226:	f7fc f801 	bl	800122c <lfs_fromle32>
 800522a:	4603      	mov	r3, r0
 800522c:	61bb      	str	r3, [r7, #24]
        if (err) {
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <lfs_ctz_traverse+0xa0>
            return err;
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	e029      	b.n	800528c <lfs_ctz_traverse+0xf4>
        }

        for (int i = 0; i < count-1; i++) {
 8005238:	2300      	movs	r3, #0
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28
 800523c:	e013      	b.n	8005266 <lfs_ctz_traverse+0xce>
            err = cb(data, heads[i]);
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005246:	4413      	add	r3, r2
 8005248:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800524c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524e:	4611      	mov	r1, r2
 8005250:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005252:	4798      	blx	r3
 8005254:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <lfs_ctz_traverse+0xc8>
                return err;
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	e015      	b.n	800528c <lfs_ctz_traverse+0xf4>
        for (int i = 0; i < count-1; i++) {
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	3301      	adds	r3, #1
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	3b01      	subs	r3, #1
 800526a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800526c:	429a      	cmp	r2, r3
 800526e:	dbe6      	blt.n	800523e <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	3b01      	subs	r3, #1
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800527a:	4413      	add	r3, r2
 800527c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005280:	603b      	str	r3, [r7, #0]
        index -= count;
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 800528a:	e79c      	b.n	80051c6 <lfs_ctz_traverse+0x2e>
    }
}
 800528c:	4618      	mov	r0, r3
 800528e:	3730      	adds	r7, #48	; 0x30
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8005294:	b5b0      	push	{r4, r5, r7, lr}
 8005296:	b09a      	sub	sp, #104	; 0x68
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d008      	beq.n	80052be <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f001 fe99 	bl	8006fe4 <lfs_fs_forceconsistency>
 80052b2:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 80052b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <lfs_file_rawopencfg+0x2a>
            return err;
 80052ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052bc:	e1b0      	b.n	8005620 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80052c2:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2200      	movs	r2, #0
 80052ce:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2200      	movs	r2, #0
 80052d4:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2200      	movs	r2, #0
 80052da:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f103 0108 	add.w	r1, r3, #8
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	3304      	adds	r3, #4
 80052e6:	1d3a      	adds	r2, r7, #4
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f7fe f959 	bl	80035a0 <lfs_dir_find>
 80052ee:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 80052f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	da0c      	bge.n	8005310 <lfs_file_rawopencfg+0x7c>
 80052f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052f8:	f113 0f02 	cmn.w	r3, #2
 80052fc:	d105      	bne.n	800530a <lfs_file_rawopencfg+0x76>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	889b      	ldrh	r3, [r3, #4]
 8005302:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005306:	4293      	cmp	r3, r2
 8005308:	d102      	bne.n	8005310 <lfs_file_rawopencfg+0x7c>
        err = tag;
 800530a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800530c:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800530e:	e17c      	b.n	800560a <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2201      	movs	r2, #1
 8005314:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7fc fe01 	bl	8001f20 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 800531e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005320:	f113 0f02 	cmn.w	r3, #2
 8005324:	d14e      	bne.n	80053c4 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532c:	2b00      	cmp	r3, #0
 800532e:	d103      	bne.n	8005338 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8005330:	f06f 0301 	mvn.w	r3, #1
 8005334:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8005336:	e168      	b.n	800560a <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4618      	mov	r0, r3
 800533c:	f7fa ff06 	bl	800014c <strlen>
 8005340:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005346:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005348:	429a      	cmp	r2, r3
 800534a:	d903      	bls.n	8005354 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 800534c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8005350:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8005352:	e15a      	b.n	800560a <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f103 0108 	add.w	r1, r3, #8
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	889b      	ldrh	r3, [r3, #4]
 800535e:	029b      	lsls	r3, r3, #10
 8005360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800536a:	2300      	movs	r3, #0
 800536c:	633b      	str	r3, [r7, #48]	; 0x30
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	889b      	ldrh	r3, [r3, #4]
 8005372:	029a      	lsls	r2, r3, #10
 8005374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005376:	4313      	orrs	r3, r2
 8005378:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	63bb      	str	r3, [r7, #56]	; 0x38
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	889b      	ldrh	r3, [r3, #4]
 8005386:	029b      	lsls	r3, r3, #10
 8005388:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800538c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005392:	2300      	movs	r3, #0
 8005394:	643b      	str	r3, [r7, #64]	; 0x40
 8005396:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800539a:	2303      	movs	r3, #3
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7ff fd3b 	bl	8004e18 <lfs_dir_commit>
 80053a2:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80053a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053a6:	f113 0f1c 	cmn.w	r3, #28
 80053aa:	d001      	beq.n	80053b0 <lfs_file_rawopencfg+0x11c>
 80053ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ae:	e001      	b.n	80053b4 <lfs_file_rawopencfg+0x120>
 80053b0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80053b4:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 80053b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f040 8125 	bne.w	8005608 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 80053be:	4b9a      	ldr	r3, [pc, #616]	; (8005628 <lfs_file_rawopencfg+0x394>)
 80053c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80053c2:	e044      	b.n	800544e <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 80053ce:	f06f 0310 	mvn.w	r3, #16
 80053d2:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80053d4:	e119      	b.n	800560a <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 80053d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fc fb98 	bl	8001b0e <lfs_tag_type3>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d003      	beq.n	80053ec <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 80053e4:	f06f 0314 	mvn.w	r3, #20
 80053e8:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80053ea:	e10e      	b.n	800560a <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00e      	beq.n	8005414 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	889b      	ldrh	r3, [r3, #4]
 80053fa:	029b      	lsls	r3, r3, #10
 80053fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005404:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	631a      	str	r2, [r3, #48]	; 0x30
 8005412:	e01c      	b.n	800544e <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	889b      	ldrh	r3, [r3, #4]
 800541e:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005420:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005424:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800542c:	9200      	str	r2, [sp, #0]
 800542e:	4a7f      	ldr	r2, [pc, #508]	; (800562c <lfs_file_rawopencfg+0x398>)
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f7fc ff61 	bl	80022f8 <lfs_dir_get>
 8005436:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8005438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800543a:	2b00      	cmp	r3, #0
 800543c:	da02      	bge.n	8005444 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 800543e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005440:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8005442:	e0e2      	b.n	800560a <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	3328      	adds	r3, #40	; 0x28
 8005448:	4618      	mov	r0, r3
 800544a:	f7fc fc8c 	bl	8001d66 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800544e:	2300      	movs	r3, #0
 8005450:	657b      	str	r3, [r7, #84]	; 0x54
 8005452:	e063      	b.n	800551c <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d03c      	beq.n	80054da <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546a:	6859      	ldr	r1, [r3, #4]
 800546c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800546e:	4613      	mov	r3, r2
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800547e:	051a      	lsls	r2, r3, #20
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	889b      	ldrh	r3, [r3, #4]
 8005484:	029b      	lsls	r3, r3, #10
 8005486:	ea42 0103 	orr.w	r1, r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548e:	6858      	ldr	r0, [r3, #4]
 8005490:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005492:	4613      	mov	r3, r2
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4403      	add	r3, r0
 800549c:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800549e:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a6:	6859      	ldr	r1, [r3, #4]
 80054a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054aa:	4613      	mov	r3, r2
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	4603      	mov	r3, r0
 80054ba:	4a5d      	ldr	r2, [pc, #372]	; (8005630 <lfs_file_rawopencfg+0x39c>)
 80054bc:	4621      	mov	r1, r4
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7fc ff1a 	bl	80022f8 <lfs_dir_get>
 80054c4:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 80054c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	da06      	bge.n	80054da <lfs_file_rawopencfg+0x246>
 80054cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ce:	f113 0f02 	cmn.w	r3, #2
 80054d2:	d002      	beq.n	80054da <lfs_file_rawopencfg+0x246>
                err = res;
 80054d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80054d8:	e097      	b.n	800560a <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d017      	beq.n	8005516 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ea:	6859      	ldr	r1, [r3, #4]
 80054ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054ee:	4613      	mov	r3, r2
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054fe:	429a      	cmp	r2, r3
 8005500:	d903      	bls.n	800550a <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8005502:	f06f 031b 	mvn.w	r3, #27
 8005506:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005508:	e07f      	b.n	800560a <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8005516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005518:	3301      	adds	r3, #1
 800551a:	657b      	str	r3, [r7, #84]	; 0x54
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005524:	429a      	cmp	r2, r3
 8005526:	d395      	bcc.n	8005454 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d005      	beq.n	800553e <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	64da      	str	r2, [r3, #76]	; 0x4c
 800553c:	e010      	b.n	8005560 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	4618      	mov	r0, r3
 8005546:	f7fb fe9e 	bl	8001286 <lfs_malloc>
 800554a:	4602      	mov	r2, r0
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d103      	bne.n	8005560 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8005558:	f06f 030b 	mvn.w	r3, #11
 800555c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800555e:	e054      	b.n	800560a <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	3340      	adds	r3, #64	; 0x40
 8005564:	4619      	mov	r1, r3
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f7fb feb2 	bl	80012d0 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800556c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800556e:	4618      	mov	r0, r3
 8005570:	f7fc facd 	bl	8001b0e <lfs_tag_type3>
 8005574:	4603      	mov	r3, r0
 8005576:	461a      	mov	r2, r3
 8005578:	f240 2301 	movw	r3, #513	; 0x201
 800557c:	429a      	cmp	r2, r3
 800557e:	d141      	bne.n	8005604 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f06f 0201 	mvn.w	r2, #1
 8005586:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8005588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800558a:	4618      	mov	r0, r3
 800558c:	f7fc faf6 	bl	8001b7c <lfs_tag_size>
 8005590:	4602      	mov	r2, r0
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2200      	movs	r2, #0
 80055ae:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d020      	beq.n	8005604 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	889b      	ldrh	r3, [r3, #4]
 80055cc:	029c      	lsls	r4, r3, #10
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d2:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fb fdbd 	bl	8001156 <lfs_min>
 80055dc:	4603      	mov	r3, r0
 80055de:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80055e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	4613      	mov	r3, r2
 80055ec:	4a0f      	ldr	r2, [pc, #60]	; (800562c <lfs_file_rawopencfg+0x398>)
 80055ee:	4629      	mov	r1, r5
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f7fc fe81 	bl	80022f8 <lfs_dir_get>
 80055f6:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 80055f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	da02      	bge.n	8005604 <lfs_file_rawopencfg+0x370>
                err = res;
 80055fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005600:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005602:	e002      	b.n	800560a <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8005604:	2300      	movs	r3, #0
 8005606:	e00b      	b.n	8005620 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8005608:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f823 	bl	8005664 <lfs_file_rawclose>
    return err;
 800561e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8005620:	4618      	mov	r0, r3
 8005622:	3760      	adds	r7, #96	; 0x60
 8005624:	46bd      	mov	sp, r7
 8005626:	bdb0      	pop	{r4, r5, r7, pc}
 8005628:	20100000 	.word	0x20100000
 800562c:	700ffc00 	.word	0x700ffc00
 8005630:	7ffffc00 	.word	0x7ffffc00

08005634 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af02      	add	r7, sp, #8
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8005642:	4b07      	ldr	r3, [pc, #28]	; (8005660 <lfs_file_rawopen+0x2c>)
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f7ff fe21 	bl	8005294 <lfs_file_rawopencfg>
 8005652:	6178      	str	r0, [r7, #20]
    return err;
 8005654:	697b      	ldr	r3, [r7, #20]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	0800f788 	.word	0x0800f788

08005664 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 800566e:	6839      	ldr	r1, [r7, #0]
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f9c3 	bl	80059fc <lfs_file_rawsync>
 8005676:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8005678:	6839      	ldr	r1, [r7, #0]
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fc fc2f 	bl	8001ede <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800568e:	4618      	mov	r0, r3
 8005690:	f7fb fe05 	bl	800129e <lfs_free>
    }

    return err;
 8005694:	68fb      	ldr	r3, [r7, #12]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 80056a0:	b590      	push	{r4, r7, lr}
 80056a2:	b08d      	sub	sp, #52	; 0x34
 80056a4:	af06      	add	r7, sp, #24
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80056aa:	f107 030c 	add.w	r3, r7, #12
 80056ae:	4619      	mov	r1, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7fc fc9b 	bl	8001fec <lfs_alloc>
 80056b6:	6138      	str	r0, [r7, #16]
        if (err) {
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <lfs_file_relocate+0x22>
            return err;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	e0b2      	b.n	8005828 <lfs_file_relocate+0x188>
        }

        err = lfs_bd_erase(lfs, nblock);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4619      	mov	r1, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fc f90a 	bl	80018e0 <lfs_bd_erase>
 80056cc:	6138      	str	r0, [r7, #16]
        if (err) {
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d006      	beq.n	80056e2 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80056da:	f000 809b 	beq.w	8005814 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	e0a2      	b.n	8005828 <lfs_file_relocate+0x188>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e069      	b.n	80057bc <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d027      	beq.n	8005744 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	f103 0008 	add.w	r0, r3, #8
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	889b      	ldrh	r3, [r3, #4]
 800570c:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800570e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005716:	2101      	movs	r1, #1
 8005718:	9105      	str	r1, [sp, #20]
 800571a:	f107 010b 	add.w	r1, r7, #11
 800571e:	9104      	str	r1, [sp, #16]
 8005720:	6979      	ldr	r1, [r7, #20]
 8005722:	9103      	str	r1, [sp, #12]
 8005724:	9302      	str	r3, [sp, #8]
 8005726:	4b42      	ldr	r3, [pc, #264]	; (8005830 <lfs_file_relocate+0x190>)
 8005728:	9301      	str	r3, [sp, #4]
 800572a:	9200      	str	r2, [sp, #0]
 800572c:	4623      	mov	r3, r4
 800572e:	2200      	movs	r2, #0
 8005730:	4601      	mov	r1, r0
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fc fdfb 	bl	800232e <lfs_dir_getread>
 8005738:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01e      	beq.n	800577e <lfs_file_relocate+0xde>
                    return err;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	e071      	b.n	8005828 <lfs_file_relocate+0x188>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 800574a:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	1ad4      	subs	r4, r2, r3
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	2201      	movs	r2, #1
 800575a:	9203      	str	r2, [sp, #12]
 800575c:	f107 020b 	add.w	r2, r7, #11
 8005760:	9202      	str	r2, [sp, #8]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	9201      	str	r2, [sp, #4]
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	4623      	mov	r3, r4
 800576a:	4602      	mov	r2, r0
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7fb fdc5 	bl	80012fc <lfs_bd_read>
 8005772:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <lfs_file_relocate+0xde>
                    return err;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	e054      	b.n	8005828 <lfs_file_relocate+0x188>
                }
            }

            err = lfs_bd_prog(lfs,
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f103 0110 	add.w	r1, r3, #16
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	9203      	str	r2, [sp, #12]
 800578c:	f107 020b 	add.w	r2, r7, #11
 8005790:	9202      	str	r2, [sp, #8]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	9201      	str	r2, [sp, #4]
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	2301      	movs	r3, #1
 800579a:	4602      	mov	r2, r0
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7fb fff3 	bl	8001788 <lfs_bd_prog>
 80057a2:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80057b0:	d032      	beq.n	8005818 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	e038      	b.n	8005828 <lfs_file_relocate+0x188>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	3301      	adds	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d390      	bcc.n	80056e8 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69d9      	ldr	r1, [r3, #28]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d4:	461a      	mov	r2, r3
 80057d6:	f008 facf 	bl	800dd78 <memcpy>
        file->cache.block = lfs->pcache.block;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3310      	adds	r3, #16
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7fb fd69 	bl	80012d0 <lfs_cache_zero>

        file->block = nblock;
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8005810:	2300      	movs	r3, #0
 8005812:	e009      	b.n	8005828 <lfs_file_relocate+0x188>
                goto relocate;
 8005814:	bf00      	nop
 8005816:	e000      	b.n	800581a <lfs_file_relocate+0x17a>
                    goto relocate;
 8005818:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3310      	adds	r3, #16
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7fb fd47 	bl	80012b4 <lfs_cache_drop>
    while (true) {
 8005826:	e740      	b.n	80056aa <lfs_file_relocate+0xa>
    }
}
 8005828:	4618      	mov	r0, r3
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	bd90      	pop	{r4, r7, pc}
 8005830:	fff7fc00 	.word	0xfff7fc00

08005834 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fc fbb1 	bl	8001fae <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff ff26 	bl	80056a0 <lfs_file_relocate>
 8005854:	60f8      	str	r0, [r7, #12]
    if (err) {
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <lfs_file_outline+0x2c>
        return err;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	e006      	b.n	800586e <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005864:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8005876:	b590      	push	{r4, r7, lr}
 8005878:	b09d      	sub	sp, #116	; 0x74
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d011      	beq.n	80058b0 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d105      	bne.n	80058a4 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	3340      	adds	r3, #64	; 0x40
 800589c:	4619      	mov	r1, r3
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fb fd08 	bl	80012b4 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 809a 	beq.w	80059f2 <lfs_file_flush+0x17c>
        lfs_off_t pos = file->pos;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c2:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d16c      	bne.n	80059aa <lfs_file_flush+0x134>
            // copy over anything after current branch
            lfs_file_t orig = {
 80058d0:	f107 030c 	add.w	r3, r7, #12
 80058d4:	2254      	movs	r2, #84	; 0x54
 80058d6:	2100      	movs	r1, #0
 80058d8:	4618      	mov	r0, r3
 80058da:	f008 fa5b 	bl	800dd94 <memset>
                .ctz.head = file->ctz.head,
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 80058e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ea:	2301      	movs	r3, #1
 80058ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 80058f2:	643b      	str	r3, [r7, #64]	; 0x40
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80058fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7fb fcd5 	bl	80012b4 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 800590a:	e02b      	b.n	8005964 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800590c:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8005910:	f107 010c 	add.w	r1, r7, #12
 8005914:	2301      	movs	r3, #1
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8fc 	bl	8005b14 <lfs_file_flushedread>
 800591c:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800591e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005920:	2b00      	cmp	r3, #0
 8005922:	da01      	bge.n	8005928 <lfs_file_flush+0xb2>
                    return res;
 8005924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005926:	e065      	b.n	80059f4 <lfs_file_flush+0x17e>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8005928:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800592c:	2301      	movs	r3, #1
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f9c1 	bl	8005cb8 <lfs_file_flushedwrite>
 8005936:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8005938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800593a:	2b00      	cmp	r3, #0
 800593c:	da01      	bge.n	8005942 <lfs_file_flush+0xcc>
                    return res;
 800593e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005940:	e058      	b.n	80059f4 <lfs_file_flush+0x17e>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594a:	d00b      	beq.n	8005964 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800594c:	f107 030c 	add.w	r3, r7, #12
 8005950:	3340      	adds	r3, #64	; 0x40
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fb fcad 	bl	80012b4 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4619      	mov	r1, r3
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fb fca8 	bl	80012b4 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	429a      	cmp	r2, r3
 800596e:	d3cd      	bcc.n	800590c <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	2301      	movs	r3, #1
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fb fe54 	bl	8001628 <lfs_bd_flush>
 8005980:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8005982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005984:	2b00      	cmp	r3, #0
 8005986:	d01c      	beq.n	80059c2 <lfs_file_flush+0x14c>
                    if (err == LFS_ERR_CORRUPT) {
 8005988:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800598a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800598e:	d001      	beq.n	8005994 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8005990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005992:	e02f      	b.n	80059f4 <lfs_file_flush+0x17e>
                        goto relocate;
 8005994:	bf00      	nop

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
                err = lfs_file_relocate(lfs, file);
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff fe81 	bl	80056a0 <lfs_file_relocate>
 800599e:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80059a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0e4      	beq.n	8005970 <lfs_file_flush+0xfa>
                    return err;
 80059a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059a8:	e024      	b.n	80059f4 <lfs_file_flush+0x17e>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f7fb fbbf 	bl	8001138 <lfs_max>
 80059ba:	4602      	mov	r2, r0
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	635a      	str	r2, [r3, #52]	; 0x34
 80059c0:	e000      	b.n	80059c4 <lfs_file_flush+0x14e>
                break;
 80059c2:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059f0:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3774      	adds	r7, #116	; 0x74
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd90      	pop	{r4, r7, pc}

080059fc <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b090      	sub	sp, #64	; 0x40
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e07a      	b.n	8005b0c <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8005a16:	6839      	ldr	r1, [r7, #0]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff ff2c 	bl	8005876 <lfs_file_flush>
 8005a1e:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	e06a      	b.n	8005b0c <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d063      	beq.n	8005b0a <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fb ff90 	bl	800196c <lfs_pair_isnull>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f083 0301 	eor.w	r3, r3, #1
 8005a52:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d058      	beq.n	8005b0a <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d009      	beq.n	8005a78 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8005a64:	f240 2301 	movw	r3, #513	; 0x201
 8005a68:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6e:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
 8005a76:	e014      	b.n	8005aa2 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8005a78:	f240 2302 	movw	r3, #514	; 0x202
 8005a7c:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a84:	3228      	adds	r2, #40	; 0x28
 8005a86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a8a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8005a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fc f97f 	bl	8001d96 <lfs_ctz_tole32>
            buffer = &ctz;
 8005a98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a9c:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	f103 0108 	add.w	r1, r3, #8
 8005aa8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005aaa:	051a      	lsls	r2, r3, #20
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	889b      	ldrh	r3, [r3, #4]
 8005ab0:	029b      	lsls	r3, r3, #10
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abc:	61fb      	str	r3, [r7, #28]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	889b      	ldrh	r3, [r3, #4]
 8005ac2:	029a      	lsls	r2, r3, #10
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8005ad0:	623b      	str	r3, [r7, #32]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8005ada:	f107 0218 	add.w	r2, r7, #24
 8005ade:	2302      	movs	r3, #2
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff f999 	bl	8004e18 <lfs_dir_commit>
 8005ae6:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	e006      	b.n	8005b0c <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3740      	adds	r7, #64	; 0x40
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005b14:	b5b0      	push	{r4, r5, r7, lr}
 8005b16:	b090      	sub	sp, #64	; 0x40
 8005b18:	af06      	add	r7, sp, #24
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d301      	bcc.n	8005b3a <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8005b36:	2300      	movs	r3, #0
 8005b38:	e0b7      	b.n	8005caa <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	4619      	mov	r1, r3
 8005b46:	6838      	ldr	r0, [r7, #0]
 8005b48:	f7fb fb05 	bl	8001156 <lfs_min>
 8005b4c:	6038      	str	r0, [r7, #0]
    nsize = size;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8005b52:	e0a5      	b.n	8005ca0 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d006      	beq.n	8005b6e <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b68:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d130      	bne.n	8005bd0 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d11c      	bne.n	8005bb4 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	3138      	adds	r1, #56	; 0x38
 8005b90:	68b8      	ldr	r0, [r7, #8]
 8005b92:	303c      	adds	r0, #60	; 0x3c
 8005b94:	9003      	str	r0, [sp, #12]
 8005b96:	9102      	str	r1, [sp, #8]
 8005b98:	9201      	str	r2, [sp, #4]
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7ff f995 	bl	8004ed2 <lfs_ctz_find>
 8005ba8:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d009      	beq.n	8005bc4 <lfs_file_flushedread+0xb0>
                    return err;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	e07a      	b.n	8005caa <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f06f 0201 	mvn.w	r2, #1
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6a38      	ldr	r0, [r7, #32]
 8005be0:	f7fb fab9 	bl	8001156 <lfs_min>
 8005be4:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d026      	beq.n	8005c40 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f103 0408 	add.w	r4, r3, #8
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 8005c02:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	889b      	ldrh	r3, [r3, #4]
 8005c08:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8005c0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005c16:	69b8      	ldr	r0, [r7, #24]
 8005c18:	9005      	str	r0, [sp, #20]
 8005c1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c1c:	9004      	str	r0, [sp, #16]
 8005c1e:	9103      	str	r1, [sp, #12]
 8005c20:	9302      	str	r3, [sp, #8]
 8005c22:	4b24      	ldr	r3, [pc, #144]	; (8005cb4 <lfs_file_flushedread+0x1a0>)
 8005c24:	9301      	str	r3, [sp, #4]
 8005c26:	9200      	str	r2, [sp, #0]
 8005c28:	462b      	mov	r3, r5
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f7fc fb7d 	bl	800232e <lfs_dir_getread>
 8005c34:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01d      	beq.n	8005c78 <lfs_file_flushedread+0x164>
                return err;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	e034      	b.n	8005caa <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8005c4a:	69dc      	ldr	r4, [r3, #28]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c54:	69b9      	ldr	r1, [r7, #24]
 8005c56:	9103      	str	r1, [sp, #12]
 8005c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c5a:	9102      	str	r1, [sp, #8]
 8005c5c:	9201      	str	r2, [sp, #4]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	4623      	mov	r3, r4
 8005c62:	4602      	mov	r2, r0
 8005c64:	2100      	movs	r1, #0
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7fb fb48 	bl	80012fc <lfs_bd_read>
 8005c6c:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <lfs_file_flushedread+0x164>
                return err;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	e018      	b.n	8005caa <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	441a      	add	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	441a      	add	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	4413      	add	r3, r2
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8005c98:	6a3a      	ldr	r2, [r7, #32]
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f47f af56 	bne.w	8005b54 <lfs_file_flushedread+0x40>
    }

    return size;
 8005ca8:	683b      	ldr	r3, [r7, #0]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3728      	adds	r7, #40	; 0x28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	fff7fc00 	.word	0xfff7fc00

08005cb8 <lfs_file_flushedwrite>:
}


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005cb8:	b5b0      	push	{r4, r5, r7, lr}
 8005cba:	b090      	sub	sp, #64	; 0x40
 8005cbc:	af04      	add	r7, sp, #16
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 810c 	beq.w	8005ef4 <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	441a      	add	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4610      	mov	r0, r2
 8005cec:	f7fb fa24 	bl	8001138 <lfs_max>
 8005cf0:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 8005cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d004      	beq.n	8005d0c <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8005d08:	08db      	lsrs	r3, r3, #3
 8005d0a:	e003      	b.n	8005d14 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d10:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8005d12:	08db      	lsrs	r3, r3, #3
 8005d14:	4619      	mov	r1, r3
 8005d16:	4610      	mov	r0, r2
 8005d18:	f7fb fa1d 	bl	8001156 <lfs_min>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	4619      	mov	r1, r3
 8005d20:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8005d24:	f7fb fa17 	bl	8001156 <lfs_min>
 8005d28:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8005d2a:	429c      	cmp	r4, r3
 8005d2c:	f240 80e2 	bls.w	8005ef4 <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f7ff fd7e 	bl	8005834 <lfs_file_outline>
 8005d38:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80d9 	beq.w	8005ef4 <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	e0d5      	b.n	8005efe <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d006      	beq.n	8005d6c <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d66:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d16b      	bne.n	8005e44 <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d157      	bne.n	8005e28 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d12d      	bne.n	8005de0 <lfs_file_flushedwrite+0x128>
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d029      	beq.n	8005de0 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005d9e:	3a01      	subs	r2, #1
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	3138      	adds	r1, #56	; 0x38
 8005da4:	68b8      	ldr	r0, [r7, #8]
 8005da6:	303c      	adds	r0, #60	; 0x3c
 8005da8:	9003      	str	r0, [sp, #12]
 8005daa:	9102      	str	r1, [sp, #8]
 8005dac:	9201      	str	r2, [sp, #4]
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	462b      	mov	r3, r5
 8005db2:	4622      	mov	r2, r4
 8005db4:	2100      	movs	r1, #0
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f7ff f88b 	bl	8004ed2 <lfs_ctz_find>
 8005dbc:	6238      	str	r0, [r7, #32]
                    if (err) {
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d007      	beq.n	8005dd4 <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	e094      	b.n	8005efe <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	3340      	adds	r3, #64	; 0x40
 8005dd8:	4619      	mov	r1, r3
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7fb fa78 	bl	80012d0 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f7fc f8e4 	bl	8001fae <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005dec:	68fc      	ldr	r4, [r7, #12]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	3238      	adds	r2, #56	; 0x38
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	313c      	adds	r1, #60	; 0x3c
 8005dfe:	9102      	str	r1, [sp, #8]
 8005e00:	9201      	str	r2, [sp, #4]
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	462b      	mov	r3, r5
 8005e06:	4622      	mov	r2, r4
 8005e08:	4601      	mov	r1, r0
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7ff f8cc 	bl	8004fa8 <lfs_ctz_extend>
 8005e10:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00f      	beq.n	8005e38 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	e06a      	b.n	8005efe <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f06f 0201 	mvn.w	r2, #1
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e48:	69da      	ldr	r2, [r3, #28]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	4619      	mov	r1, r3
 8005e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e54:	f7fb f97f 	bl	8001156 <lfs_min>
 8005e58:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005e60:	68fc      	ldr	r4, [r7, #12]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e6a:	69b9      	ldr	r1, [r7, #24]
 8005e6c:	9103      	str	r1, [sp, #12]
 8005e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e70:	9102      	str	r1, [sp, #8]
 8005e72:	9201      	str	r2, [sp, #4]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	2301      	movs	r3, #1
 8005e78:	4622      	mov	r2, r4
 8005e7a:	4601      	mov	r1, r0
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f7fb fc83 	bl	8001788 <lfs_bd_prog>
 8005e82:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d01c      	beq.n	8005ec4 <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005e90:	d007      	beq.n	8005ea2 <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	e02d      	b.n	8005efe <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8005ea2:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f7ff fbfa 	bl	80056a0 <lfs_file_relocate>
 8005eac:	6178      	str	r0, [r7, #20]
            if (err) {
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0d2      	beq.n	8005e5a <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	e01c      	b.n	8005efe <lfs_file_flushedwrite+0x246>
            break;
 8005ec4:	bf00      	nop
            }
        }

        file->pos += diff;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	441a      	add	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	441a      	add	r2, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8005ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f7fc f85d 	bl	8001fae <lfs_alloc_ack>
    while (nsize > 0) {
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f47f af2b 	bne.w	8005d52 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8005efc:	683b      	ldr	r3, [r7, #0]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3730      	adds	r7, #48	; 0x30
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005f08 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08a      	sub	sp, #40	; 0x28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
 8005f14:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <lfs_file_rawwrite+0x28>
 8005f22:	4b38      	ldr	r3, [pc, #224]	; (8006004 <lfs_file_rawwrite+0xfc>)
 8005f24:	4a38      	ldr	r2, [pc, #224]	; (8006008 <lfs_file_rawwrite+0x100>)
 8005f26:	f640 5157 	movw	r1, #3415	; 0xd57
 8005f2a:	4838      	ldr	r0, [pc, #224]	; (800600c <lfs_file_rawwrite+0x104>)
 8005f2c:	f007 feac 	bl	800dc88 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d009      	beq.n	8005f50 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8005f3c:	68b9      	ldr	r1, [r7, #8]
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f7ff fc99 	bl	8005876 <lfs_file_flush>
 8005f44:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <lfs_file_rawwrite+0x48>
            return err;
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	e055      	b.n	8005ffc <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d009      	beq.n	8005f70 <lfs_file_rawwrite+0x68>
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d203      	bcs.n	8005f70 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	441a      	add	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d902      	bls.n	8005f86 <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8005f80:	f06f 031a 	mvn.w	r3, #26
 8005f84:	e03a      	b.n	8005ffc <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d121      	bne.n	8005fd6 <lfs_file_rawwrite+0xce>
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d91b      	bls.n	8005fd6 <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa2:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8005fac:	e00e      	b.n	8005fcc <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8005fae:	2300      	movs	r3, #0
 8005fb0:	75fb      	strb	r3, [r7, #23]
 8005fb2:	f107 0217 	add.w	r2, r7, #23
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	68b9      	ldr	r1, [r7, #8]
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f7ff fe7c 	bl	8005cb8 <lfs_file_flushedwrite>
 8005fc0:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	da01      	bge.n	8005fcc <lfs_file_rawwrite+0xc4>
                return res;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	e017      	b.n	8005ffc <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd0:	6a3a      	ldr	r2, [r7, #32]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d8eb      	bhi.n	8005fae <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff fe6b 	bl	8005cb8 <lfs_file_flushedwrite>
 8005fe2:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	da01      	bge.n	8005fee <lfs_file_rawwrite+0xe6>
        return nsize;
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	e006      	b.n	8005ffc <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3728      	adds	r7, #40	; 0x28
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	0800f2d0 	.word	0x0800f2d0
 8006008:	0800f794 	.word	0x0800f794
 800600c:	0800f150 	.word	0x0800f150

08006010 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8006010:	b580      	push	{r7, lr}
 8006012:	b08c      	sub	sp, #48	; 0x30
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8006020:	2300      	movs	r3, #0
 8006022:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <lfs_init+0x2c>
 800602e:	4b9f      	ldr	r3, [pc, #636]	; (80062ac <lfs_init+0x29c>)
 8006030:	4a9f      	ldr	r2, [pc, #636]	; (80062b0 <lfs_init+0x2a0>)
 8006032:	f640 7177 	movw	r1, #3959	; 0xf77
 8006036:	489f      	ldr	r0, [pc, #636]	; (80062b4 <lfs_init+0x2a4>)
 8006038:	f007 fe26 	bl	800dc88 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d106      	bne.n	8006054 <lfs_init+0x44>
 8006046:	4b9c      	ldr	r3, [pc, #624]	; (80062b8 <lfs_init+0x2a8>)
 8006048:	4a99      	ldr	r2, [pc, #612]	; (80062b0 <lfs_init+0x2a0>)
 800604a:	f640 7178 	movw	r1, #3960	; 0xf78
 800604e:	4899      	ldr	r0, [pc, #612]	; (80062b4 <lfs_init+0x2a4>)
 8006050:	f007 fe1a 	bl	800dc88 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <lfs_init+0x5c>
 800605e:	4b97      	ldr	r3, [pc, #604]	; (80062bc <lfs_init+0x2ac>)
 8006060:	4a93      	ldr	r2, [pc, #588]	; (80062b0 <lfs_init+0x2a0>)
 8006062:	f640 7179 	movw	r1, #3961	; 0xf79
 8006066:	4893      	ldr	r0, [pc, #588]	; (80062b4 <lfs_init+0x2a4>)
 8006068:	f007 fe0e 	bl	800dc88 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006076:	6952      	ldr	r2, [r2, #20]
 8006078:	fbb3 f1f2 	udiv	r1, r3, r2
 800607c:	fb02 f201 	mul.w	r2, r2, r1
 8006080:	1a9b      	subs	r3, r3, r2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d006      	beq.n	8006094 <lfs_init+0x84>
 8006086:	4b8e      	ldr	r3, [pc, #568]	; (80062c0 <lfs_init+0x2b0>)
 8006088:	4a89      	ldr	r2, [pc, #548]	; (80062b0 <lfs_init+0x2a0>)
 800608a:	f640 717d 	movw	r1, #3965	; 0xf7d
 800608e:	4889      	ldr	r0, [pc, #548]	; (80062b4 <lfs_init+0x2a4>)
 8006090:	f007 fdfa 	bl	800dc88 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800609e:	6992      	ldr	r2, [r2, #24]
 80060a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80060a4:	fb02 f201 	mul.w	r2, r2, r1
 80060a8:	1a9b      	subs	r3, r3, r2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d006      	beq.n	80060bc <lfs_init+0xac>
 80060ae:	4b85      	ldr	r3, [pc, #532]	; (80062c4 <lfs_init+0x2b4>)
 80060b0:	4a7f      	ldr	r2, [pc, #508]	; (80062b0 <lfs_init+0x2a0>)
 80060b2:	f640 717e 	movw	r1, #3966	; 0xf7e
 80060b6:	487f      	ldr	r0, [pc, #508]	; (80062b4 <lfs_init+0x2a4>)
 80060b8:	f007 fde6 	bl	800dc88 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80060c6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80060c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80060cc:	fb02 f201 	mul.w	r2, r2, r1
 80060d0:	1a9b      	subs	r3, r3, r2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d006      	beq.n	80060e4 <lfs_init+0xd4>
 80060d6:	4b7c      	ldr	r3, [pc, #496]	; (80062c8 <lfs_init+0x2b8>)
 80060d8:	4a75      	ldr	r2, [pc, #468]	; (80062b0 <lfs_init+0x2a0>)
 80060da:	f640 717f 	movw	r1, #3967	; 0xf7f
 80060de:	4875      	ldr	r0, [pc, #468]	; (80062b4 <lfs_init+0x2a4>)
 80060e0:	f007 fdd2 	bl	800dc88 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	3b08      	subs	r3, #8
 80060ec:	f04f 32ff 	mov.w	r2, #4294967295
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fb f863 	bl	80011c0 <lfs_npw2>
 80060fa:	4603      	mov	r3, r0
 80060fc:	009a      	lsls	r2, r3, #2
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	429a      	cmp	r2, r3
 8006106:	d906      	bls.n	8006116 <lfs_init+0x106>
 8006108:	4b70      	ldr	r3, [pc, #448]	; (80062cc <lfs_init+0x2bc>)
 800610a:	4a69      	ldr	r2, [pc, #420]	; (80062b0 <lfs_init+0x2a0>)
 800610c:	f640 7182 	movw	r1, #3970	; 0xf82
 8006110:	4868      	ldr	r0, [pc, #416]	; (80062b4 <lfs_init+0x2a4>)
 8006112:	f007 fdb9 	bl	800dc88 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	2b00      	cmp	r3, #0
 800611e:	d106      	bne.n	800612e <lfs_init+0x11e>
 8006120:	4b6b      	ldr	r3, [pc, #428]	; (80062d0 <lfs_init+0x2c0>)
 8006122:	4a63      	ldr	r2, [pc, #396]	; (80062b0 <lfs_init+0x2a0>)
 8006124:	f640 718b 	movw	r1, #3979	; 0xf8b
 8006128:	4862      	ldr	r0, [pc, #392]	; (80062b4 <lfs_init+0x2a4>)
 800612a:	f007 fdad 	bl	800dc88 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006134:	2b00      	cmp	r3, #0
 8006136:	d005      	beq.n	8006144 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800613c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	60da      	str	r2, [r3, #12]
 8006142:	e010      	b.n	8006166 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614a:	4618      	mov	r0, r3
 800614c:	f7fb f89b 	bl	8001286 <lfs_malloc>
 8006150:	4602      	mov	r2, r0
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d103      	bne.n	8006166 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 800615e:	f06f 030b 	mvn.w	r3, #11
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8006164:	e0fe      	b.n	8006364 <lfs_init+0x354>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800616a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	61da      	str	r2, [r3, #28]
 800617a:	e010      	b.n	800619e <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	4618      	mov	r0, r3
 8006184:	f7fb f87f 	bl	8001286 <lfs_malloc>
 8006188:	4602      	mov	r2, r0
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d103      	bne.n	800619e <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8006196:	f06f 030b 	mvn.w	r3, #11
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800619c:	e0e2      	b.n	8006364 <lfs_init+0x354>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fb f894 	bl	80012d0 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3310      	adds	r3, #16
 80061ac:	4619      	mov	r1, r3
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fb f88e 	bl	80012d0 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <lfs_init+0x1bc>
 80061be:	4b45      	ldr	r3, [pc, #276]	; (80062d4 <lfs_init+0x2c4>)
 80061c0:	4a3b      	ldr	r2, [pc, #236]	; (80062b0 <lfs_init+0x2a0>)
 80061c2:	f640 71a9 	movw	r1, #4009	; 0xfa9
 80061c6:	483b      	ldr	r0, [pc, #236]	; (80062b4 <lfs_init+0x2a4>)
 80061c8:	f007 fd5e 	bl	800dc88 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d2:	f003 0307 	and.w	r3, r3, #7
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d106      	bne.n	80061e8 <lfs_init+0x1d8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	f003 0303 	and.w	r3, r3, #3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d006      	beq.n	80061f6 <lfs_init+0x1e6>
 80061e8:	4b3b      	ldr	r3, [pc, #236]	; (80062d8 <lfs_init+0x2c8>)
 80061ea:	4a31      	ldr	r2, [pc, #196]	; (80062b0 <lfs_init+0x2a0>)
 80061ec:	f640 71aa 	movw	r1, #4010	; 0xfaa
 80061f0:	4830      	ldr	r0, [pc, #192]	; (80062b4 <lfs_init+0x2a4>)
 80061f2:	f007 fd49 	bl	800dc88 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	665a      	str	r2, [r3, #100]	; 0x64
 800620a:	e010      	b.n	800622e <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	4618      	mov	r0, r3
 8006214:	f7fb f837 	bl	8001286 <lfs_malloc>
 8006218:	4602      	mov	r2, r0
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006222:	2b00      	cmp	r3, #0
 8006224:	d103      	bne.n	800622e <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 8006226:	f06f 030b 	mvn.w	r3, #11
 800622a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800622c:	e09a      	b.n	8006364 <lfs_init+0x354>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006234:	2bff      	cmp	r3, #255	; 0xff
 8006236:	d906      	bls.n	8006246 <lfs_init+0x236>
 8006238:	4b28      	ldr	r3, [pc, #160]	; (80062dc <lfs_init+0x2cc>)
 800623a:	4a1d      	ldr	r2, [pc, #116]	; (80062b0 <lfs_init+0x2a0>)
 800623c:	f640 71b7 	movw	r1, #4023	; 0xfb7
 8006240:	481c      	ldr	r0, [pc, #112]	; (80062b4 <lfs_init+0x2a4>)
 8006242:	f007 fd21 	bl	800dc88 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800624a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d102      	bne.n	800625e <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	22ff      	movs	r2, #255	; 0xff
 800625c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	2b00      	cmp	r3, #0
 8006266:	da06      	bge.n	8006276 <lfs_init+0x266>
 8006268:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <lfs_init+0x2d0>)
 800626a:	4a11      	ldr	r2, [pc, #68]	; (80062b0 <lfs_init+0x2a0>)
 800626c:	f640 71bd 	movw	r1, #4029	; 0xfbd
 8006270:	4810      	ldr	r0, [pc, #64]	; (80062b4 <lfs_init+0x2a4>)
 8006272:	f007 fd09 	bl	800dc88 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800627a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006284:	2b00      	cmp	r3, #0
 8006286:	d103      	bne.n	8006290 <lfs_init+0x280>
        lfs->file_max = LFS_FILE_MAX;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800628e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006296:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800629a:	4293      	cmp	r3, r2
 800629c:	d924      	bls.n	80062e8 <lfs_init+0x2d8>
 800629e:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <lfs_init+0x2d4>)
 80062a0:	4a03      	ldr	r2, [pc, #12]	; (80062b0 <lfs_init+0x2a0>)
 80062a2:	f640 71c3 	movw	r1, #4035	; 0xfc3
 80062a6:	4803      	ldr	r0, [pc, #12]	; (80062b4 <lfs_init+0x2a4>)
 80062a8:	f007 fcee 	bl	800dc88 <__assert_func>
 80062ac:	0800f300 	.word	0x0800f300
 80062b0:	0800f7a8 	.word	0x0800f7a8
 80062b4:	0800f150 	.word	0x0800f150
 80062b8:	0800f31c 	.word	0x0800f31c
 80062bc:	0800f338 	.word	0x0800f338
 80062c0:	0800f354 	.word	0x0800f354
 80062c4:	0800f384 	.word	0x0800f384
 80062c8:	0800f3b4 	.word	0x0800f3b4
 80062cc:	0800f3e8 	.word	0x0800f3e8
 80062d0:	0800f434 	.word	0x0800f434
 80062d4:	0800f450 	.word	0x0800f450
 80062d8:	0800f470 	.word	0x0800f470
 80062dc:	0800f4c4 	.word	0x0800f4c4
 80062e0:	0800f4e0 	.word	0x0800f4e0
 80062e4:	0800f504 	.word	0x0800f504
    lfs->attr_max = lfs->cfg->attr_max;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d103      	bne.n	8006302 <lfs_init+0x2f2>
        lfs->attr_max = LFS_ATTR_MAX;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8006300:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	429a      	cmp	r2, r3
 8006310:	d906      	bls.n	8006320 <lfs_init+0x310>
 8006312:	4b18      	ldr	r3, [pc, #96]	; (8006374 <lfs_init+0x364>)
 8006314:	4a18      	ldr	r2, [pc, #96]	; (8006378 <lfs_init+0x368>)
 8006316:	f640 71c9 	movw	r1, #4041	; 0xfc9
 800631a:	4818      	ldr	r0, [pc, #96]	; (800637c <lfs_init+0x36c>)
 800631c:	f007 fcb4 	bl	800dc88 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f04f 32ff 	mov.w	r2, #4294967295
 8006326:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f04f 32ff 	mov.w	r2, #4294967295
 800632e:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	333c      	adds	r3, #60	; 0x3c
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	605a      	str	r2, [r3, #4]
 8006346:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3330      	adds	r3, #48	; 0x30
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	605a      	str	r2, [r3, #4]
 8006352:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3348      	adds	r3, #72	; 0x48
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	605a      	str	r2, [r3, #4]
 800635e:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8006360:	2300      	movs	r3, #0
 8006362:	e003      	b.n	800636c <lfs_init+0x35c>

cleanup:
    lfs_deinit(lfs);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f80b 	bl	8006380 <lfs_deinit>
    return err;
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800636c:	4618      	mov	r0, r3
 800636e:	3730      	adds	r7, #48	; 0x30
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	0800f520 	.word	0x0800f520
 8006378:	0800f7a8 	.word	0x0800f7a8
 800637c:	0800f150 	.word	0x0800f150

08006380 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	2b00      	cmp	r3, #0
 8006390:	d104      	bne.n	800639c <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	4618      	mov	r0, r3
 8006398:	f7fa ff81 	bl	800129e <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d104      	bne.n	80063b0 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fa ff77 	bl	800129e <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fa ff6d 	bl	800129e <lfs_free>
    }

    return 0;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b0a0      	sub	sp, #128	; 0x80
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
    int err = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff fe15 	bl	8006010 <lfs_init>
 80063e6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80063e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <lfs_rawformat+0x22>
            return err;
 80063ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063f0:	e082      	b.n	80064f8 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	461a      	mov	r2, r3
 80063fe:	2100      	movs	r1, #0
 8006400:	f007 fcc8 	bl	800dd94 <memset>
        lfs->free.off = 0;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	4619      	mov	r1, r3
 800641a:	4610      	mov	r0, r2
 800641c:	f7fa fe9b 	bl	8001156 <lfs_min>
 8006420:	4602      	mov	r2, r0
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f7fb fdbe 	bl	8001fae <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8006432:	f107 030c 	add.w	r3, r7, #12
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7fd fb9d 	bl	8003b78 <lfs_dir_alloc>
 800643e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8006440:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d14f      	bne.n	80064e6 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 8006446:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800644a:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006450:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8006452:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006458:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 800645a:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8006460:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8006466:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 800646c:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 800646e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006472:	4618      	mov	r0, r3
 8006474:	f7fb fcdf 	bl	8001e36 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8006478:	4b21      	ldr	r3, [pc, #132]	; (8006500 <lfs_rawformat+0x130>)
 800647a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800647c:	2300      	movs	r3, #0
 800647e:	653b      	str	r3, [r7, #80]	; 0x50
 8006480:	4b20      	ldr	r3, [pc, #128]	; (8006504 <lfs_rawformat+0x134>)
 8006482:	657b      	str	r3, [r7, #84]	; 0x54
 8006484:	4b20      	ldr	r3, [pc, #128]	; (8006508 <lfs_rawformat+0x138>)
 8006486:	65bb      	str	r3, [r7, #88]	; 0x58
 8006488:	4b20      	ldr	r3, [pc, #128]	; (800650c <lfs_rawformat+0x13c>)
 800648a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800648c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006490:	663b      	str	r3, [r7, #96]	; 0x60
 8006492:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8006496:	f107 010c 	add.w	r1, r7, #12
 800649a:	2303      	movs	r3, #3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7fe fcbb 	bl	8004e18 <lfs_dir_commit>
 80064a2:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 80064a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d11f      	bne.n	80064ea <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80064b0:	f107 010c 	add.w	r1, r7, #12
 80064b4:	2300      	movs	r3, #0
 80064b6:	2200      	movs	r2, #0
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7fe fcad 	bl	8004e18 <lfs_dir_commit>
 80064be:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80064c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d113      	bne.n	80064ee <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 80064c6:	2300      	movs	r3, #0
 80064c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ca:	2301      	movs	r3, #1
 80064cc:	633b      	str	r3, [r7, #48]	; 0x30
 80064ce:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80064d2:	f107 030c 	add.w	r3, r7, #12
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7fc ffc9 	bl	8003470 <lfs_dir_fetch>
 80064de:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80064e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	e004      	b.n	80064f0 <lfs_rawformat+0x120>
            goto cleanup;
 80064e6:	bf00      	nop
 80064e8:	e002      	b.n	80064f0 <lfs_rawformat+0x120>
            goto cleanup;
 80064ea:	bf00      	nop
 80064ec:	e000      	b.n	80064f0 <lfs_rawformat+0x120>
            goto cleanup;
 80064ee:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ff45 	bl	8006380 <lfs_deinit>
    return err;
 80064f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3780      	adds	r7, #128	; 0x80
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	40100000 	.word	0x40100000
 8006504:	0ff00008 	.word	0x0ff00008
 8006508:	0800f550 	.word	0x0800f550
 800650c:	20100018 	.word	0x20100018

08006510 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8006510:	b580      	push	{r7, lr}
 8006512:	b09c      	sub	sp, #112	; 0x70
 8006514:	af04      	add	r7, sp, #16
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff fd77 	bl	8006010 <lfs_init>
 8006522:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8006524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <lfs_rawmount+0x1e>
        return err;
 800652a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800652c:	e10e      	b.n	800674c <lfs_rawmount+0x23c>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800652e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006532:	2220      	movs	r2, #32
 8006534:	2100      	movs	r1, #0
 8006536:	4618      	mov	r0, r3
 8006538:	f007 fc2c 	bl	800dd94 <memset>
 800653c:	2301      	movs	r3, #1
 800653e:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8006540:	2300      	movs	r3, #0
 8006542:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8006544:	e0b8      	b.n	80066b8 <lfs_rawmount+0x1a8>
        if (cycle >= lfs->cfg->block_count/2) {
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	085b      	lsrs	r3, r3, #1
 800654e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006550:	429a      	cmp	r2, r3
 8006552:	d303      	bcc.n	800655c <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8006554:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006558:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800655a:	e0f3      	b.n	8006744 <lfs_rawmount+0x234>
        }
        cycle += 1;
 800655c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800655e:	3301      	adds	r3, #1
 8006560:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	627b      	str	r3, [r7, #36]	; 0x24
 8006566:	4b7b      	ldr	r3, [pc, #492]	; (8006754 <lfs_rawmount+0x244>)
 8006568:	62bb      	str	r3, [r7, #40]	; 0x28
 800656a:	2308      	movs	r3, #8
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800656e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006572:	f103 0218 	add.w	r2, r3, #24
 8006576:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800657a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800657e:	9303      	str	r3, [sp, #12]
 8006580:	4b75      	ldr	r3, [pc, #468]	; (8006758 <lfs_rawmount+0x248>)
 8006582:	9302      	str	r3, [sp, #8]
 8006584:	2300      	movs	r3, #0
 8006586:	9301      	str	r3, [sp, #4]
 8006588:	4b74      	ldr	r3, [pc, #464]	; (800675c <lfs_rawmount+0x24c>)
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	4b74      	ldr	r3, [pc, #464]	; (8006760 <lfs_rawmount+0x250>)
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fc fc0e 	bl	8002db0 <lfs_dir_fetchmatch>
 8006594:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8006596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006598:	2b00      	cmp	r3, #0
 800659a:	da02      	bge.n	80065a2 <lfs_rawmount+0x92>
            err = tag;
 800659c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800659e:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80065a0:	e0d0      	b.n	8006744 <lfs_rawmount+0x234>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80065a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d07a      	beq.n	800669e <lfs_rawmount+0x18e>
 80065a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fb fa8e 	bl	8001acc <lfs_tag_isdelete>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f083 0301 	eor.w	r3, r3, #1
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d070      	beq.n	800669e <lfs_rawmount+0x18e>
            // update root
            lfs->root[0] = dir.pair[0];
 80065bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 80065c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80065c8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80065cc:	f107 030c 	add.w	r3, r7, #12
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	4b64      	ldr	r3, [pc, #400]	; (8006764 <lfs_rawmount+0x254>)
 80065d4:	4a62      	ldr	r2, [pc, #392]	; (8006760 <lfs_rawmount+0x250>)
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fb fe8e 	bl	80022f8 <lfs_dir_get>
 80065dc:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 80065de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	da02      	bge.n	80065ea <lfs_rawmount+0xda>
                err = tag;
 80065e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80065e8:	e0ac      	b.n	8006744 <lfs_rawmount+0x234>
            }
            lfs_superblock_fromle32(&superblock);
 80065ea:	f107 030c 	add.w	r3, r7, #12
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fb fbe9 	bl	8001dc6 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	0c1b      	lsrs	r3, r3, #16
 80065f8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8006602:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006606:	2b02      	cmp	r3, #2
 8006608:	d103      	bne.n	8006612 <lfs_rawmount+0x102>
 800660a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <lfs_rawmount+0x10a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8006612:	f06f 0315 	mvn.w	r3, #21
 8006616:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006618:	e040      	b.n	800669c <lfs_rawmount+0x18c>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <lfs_rawmount+0x128>
                if (superblock.name_max > lfs->name_max) {
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006626:	429a      	cmp	r2, r3
 8006628:	d903      	bls.n	8006632 <lfs_rawmount+0x122>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800662a:	f06f 0315 	mvn.w	r3, #21
 800662e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8006630:	e034      	b.n	800669c <lfs_rawmount+0x18c>
                }

                lfs->name_max = superblock.name_max;
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00b      	beq.n	8006656 <lfs_rawmount+0x146>
                if (superblock.file_max > lfs->file_max) {
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006644:	429a      	cmp	r2, r3
 8006646:	d903      	bls.n	8006650 <lfs_rawmount+0x140>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8006648:	f06f 0315 	mvn.w	r3, #21
 800664c:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800664e:	e025      	b.n	800669c <lfs_rawmount+0x18c>
                }

                lfs->file_max = superblock.file_max;
 8006650:	69fa      	ldr	r2, [r7, #28]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00b      	beq.n	8006674 <lfs_rawmount+0x164>
                if (superblock.attr_max > lfs->attr_max) {
 800665c:	6a3a      	ldr	r2, [r7, #32]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006662:	429a      	cmp	r2, r3
 8006664:	d903      	bls.n	800666e <lfs_rawmount+0x15e>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8006666:	f06f 0315 	mvn.w	r3, #21
 800666a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800666c:	e016      	b.n	800669c <lfs_rawmount+0x18c>
                }

                lfs->attr_max = superblock.attr_max;
 800666e:	6a3a      	ldr	r2, [r7, #32]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	429a      	cmp	r2, r3
 800667e:	d003      	beq.n	8006688 <lfs_rawmount+0x178>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8006680:	f06f 0315 	mvn.w	r3, #21
 8006684:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006686:	e009      	b.n	800669c <lfs_rawmount+0x18c>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	429a      	cmp	r2, r3
 8006692:	d004      	beq.n	800669e <lfs_rawmount+0x18e>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8006694:	f06f 0315 	mvn.w	r3, #21
 8006698:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800669a:	bf00      	nop
            goto cleanup;
 800669c:	e052      	b.n	8006744 <lfs_rawmount+0x234>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80066a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fc fefc 	bl	80034a8 <lfs_dir_getgstate>
 80066b0:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 80066b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d144      	bne.n	8006742 <lfs_rawmount+0x232>
    while (!lfs_pair_isnull(dir.tail)) {
 80066b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066bc:	3318      	adds	r3, #24
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fb f954 	bl	800196c <lfs_pair_isnull>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f083 0301 	eor.w	r3, r3, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f47f af3a 	bne.w	8006546 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3320      	adds	r3, #32
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fb f948 	bl	800196c <lfs_pair_isnull>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <lfs_rawmount+0x1da>
        err = LFS_ERR_INVAL;
 80066e2:	f06f 0315 	mvn.w	r3, #21
 80066e6:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80066e8:	e02c      	b.n	8006744 <lfs_rawmount+0x234>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3330      	adds	r3, #48	; 0x30
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fb fa88 	bl	8001c04 <lfs_gstate_iszero>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fb f9da 	bl	8001ab2 <lfs_tag_isvalid>
 80066fe:	4603      	mov	r3, r0
 8006700:	f083 0301 	eor.w	r3, r3, #1
 8006704:	b2db      	uxtb	r3, r3
 8006706:	461a      	mov	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	441a      	add	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	333c      	adds	r3, #60	; 0x3c
 8006718:	3230      	adds	r2, #48	; 0x30
 800671a:	ca07      	ldmia	r2, {r0, r1, r2}
 800671c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006728:	6a12      	ldr	r2, [r2, #32]
 800672a:	fbb3 f1f2 	udiv	r1, r3, r2
 800672e:	fb02 f201 	mul.w	r2, r2, r1
 8006732:	1a9a      	subs	r2, r3, r2
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7fb fc46 	bl	8001fca <lfs_alloc_drop>

    return 0;
 800673e:	2300      	movs	r3, #0
 8006740:	e004      	b.n	800674c <lfs_rawmount+0x23c>
            goto cleanup;
 8006742:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f80f 	bl	8006768 <lfs_rawunmount>
    return err;
 800674a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800674c:	4618      	mov	r0, r3
 800674e:	3760      	adds	r7, #96	; 0x60
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	0800f550 	.word	0x0800f550
 8006758:	0800350d 	.word	0x0800350d
 800675c:	0ff00008 	.word	0x0ff00008
 8006760:	7ffffc00 	.word	0x7ffffc00
 8006764:	20100018 	.word	0x20100018

08006768 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff fe05 	bl	8006380 <lfs_deinit>
 8006776:	4603      	mov	r3, r0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8006780:	b590      	push	{r4, r7, lr}
 8006782:	b09d      	sub	sp, #116	; 0x74
 8006784:	af04      	add	r7, sp, #16
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800678e:	f107 0318 	add.w	r3, r7, #24
 8006792:	2220      	movs	r2, #32
 8006794:	2100      	movs	r1, #0
 8006796:	4618      	mov	r0, r3
 8006798:	f007 fafc 	bl	800dd94 <memset>
 800679c:	2301      	movs	r3, #1
 800679e:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 80067a4:	e0a8      	b.n	80068f8 <lfs_fs_rawtraverse+0x178>
        if (cycle >= lfs->cfg->block_count/2) {
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	085b      	lsrs	r3, r3, #1
 80067ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d302      	bcc.n	80067ba <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 80067b4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80067b8:	e103      	b.n	80069c2 <lfs_fs_rawtraverse+0x242>
        }
        cycle += 1;
 80067ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067bc:	3301      	adds	r3, #1
 80067be:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 80067c0:	2300      	movs	r3, #0
 80067c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80067c4:	e014      	b.n	80067f0 <lfs_fs_rawtraverse+0x70>
            int err = cb(data, dir.tail[i]);
 80067c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067c8:	3306      	adds	r3, #6
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80067d0:	4413      	add	r3, r2
 80067d2:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	4611      	mov	r1, r2
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4798      	blx	r3
 80067de:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 80067e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <lfs_fs_rawtraverse+0x6a>
                return err;
 80067e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e8:	e0eb      	b.n	80069c2 <lfs_fs_rawtraverse+0x242>
        for (int i = 0; i < 2; i++) {
 80067ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067ec:	3301      	adds	r3, #1
 80067ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80067f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	dde7      	ble.n	80067c6 <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 80067f6:	f107 0318 	add.w	r3, r7, #24
 80067fa:	f103 0218 	add.w	r2, r3, #24
 80067fe:	f107 0318 	add.w	r3, r7, #24
 8006802:	4619      	mov	r1, r3
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f7fc fe33 	bl	8003470 <lfs_dir_fetch>
 800680a:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 800680c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <lfs_fs_rawtraverse+0x96>
            return err;
 8006812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006814:	e0d5      	b.n	80069c2 <lfs_fs_rawtraverse+0x242>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8006816:	2300      	movs	r3, #0
 8006818:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800681c:	e067      	b.n	80068ee <lfs_fs_rawtraverse+0x16e>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800681e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006822:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006824:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006828:	f043 0308 	orr.w	r3, r3, #8
 800682c:	f107 0118 	add.w	r1, r7, #24
 8006830:	f107 0210 	add.w	r2, r7, #16
 8006834:	9200      	str	r2, [sp, #0]
 8006836:	4a65      	ldr	r2, [pc, #404]	; (80069cc <lfs_fs_rawtraverse+0x24c>)
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f7fb fd5d 	bl	80022f8 <lfs_dir_get>
 800683e:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 8006840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006842:	2b00      	cmp	r3, #0
 8006844:	da05      	bge.n	8006852 <lfs_fs_rawtraverse+0xd2>
                if (tag == LFS_ERR_NOENT) {
 8006846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006848:	f113 0f02 	cmn.w	r3, #2
 800684c:	d049      	beq.n	80068e2 <lfs_fs_rawtraverse+0x162>
                    continue;
                }
                return tag;
 800684e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006850:	e0b7      	b.n	80069c2 <lfs_fs_rawtraverse+0x242>
            }
            lfs_ctz_fromle32(&ctz);
 8006852:	f107 0310 	add.w	r3, r7, #16
 8006856:	4618      	mov	r0, r3
 8006858:	f7fb fa85 	bl	8001d66 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800685c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685e:	4618      	mov	r0, r3
 8006860:	f7fb f955 	bl	8001b0e <lfs_tag_type3>
 8006864:	4603      	mov	r3, r0
 8006866:	461a      	mov	r2, r3
 8006868:	f240 2302 	movw	r3, #514	; 0x202
 800686c:	429a      	cmp	r2, r3
 800686e:	d113      	bne.n	8006898 <lfs_fs_rawtraverse+0x118>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8006870:	68f9      	ldr	r1, [r7, #12]
 8006872:	6938      	ldr	r0, [r7, #16]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	9202      	str	r2, [sp, #8]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	9201      	str	r2, [sp, #4]
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	4603      	mov	r3, r0
 8006882:	460a      	mov	r2, r1
 8006884:	2100      	movs	r1, #0
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f7fe fc86 	bl	8005198 <lfs_ctz_traverse>
 800688c:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 800688e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	d027      	beq.n	80068e4 <lfs_fs_rawtraverse+0x164>
                    return err;
 8006894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006896:	e094      	b.n	80069c2 <lfs_fs_rawtraverse+0x242>
                }
            } else if (includeorphans &&
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d022      	beq.n	80068e4 <lfs_fs_rawtraverse+0x164>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 800689e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fb f934 	bl	8001b0e <lfs_tag_type3>
 80068a6:	4603      	mov	r3, r0
            } else if (includeorphans &&
 80068a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ac:	d11a      	bne.n	80068e4 <lfs_fs_rawtraverse+0x164>
                for (int i = 0; i < 2; i++) {
 80068ae:	2300      	movs	r3, #0
 80068b0:	653b      	str	r3, [r7, #80]	; 0x50
 80068b2:	e012      	b.n	80068da <lfs_fs_rawtraverse+0x15a>
                    err = cb(data, (&ctz.head)[i]);
 80068b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	f107 0210 	add.w	r2, r7, #16
 80068bc:	4413      	add	r3, r2
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4611      	mov	r1, r2
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	4798      	blx	r3
 80068c8:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 80068ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <lfs_fs_rawtraverse+0x154>
                        return err;
 80068d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d2:	e076      	b.n	80069c2 <lfs_fs_rawtraverse+0x242>
                for (int i = 0; i < 2; i++) {
 80068d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d6:	3301      	adds	r3, #1
 80068d8:	653b      	str	r3, [r7, #80]	; 0x50
 80068da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068dc:	2b01      	cmp	r3, #1
 80068de:	dde9      	ble.n	80068b4 <lfs_fs_rawtraverse+0x134>
 80068e0:	e000      	b.n	80068e4 <lfs_fs_rawtraverse+0x164>
                    continue;
 80068e2:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80068e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80068e8:	3301      	adds	r3, #1
 80068ea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80068ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068f0:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d392      	bcc.n	800681e <lfs_fs_rawtraverse+0x9e>
    while (!lfs_pair_isnull(dir.tail)) {
 80068f8:	f107 0318 	add.w	r3, r7, #24
 80068fc:	3318      	adds	r3, #24
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fb f834 	bl	800196c <lfs_pair_isnull>
 8006904:	4603      	mov	r3, r0
 8006906:	f083 0301 	eor.w	r3, r3, #1
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	f47f af4a 	bne.w	80067a6 <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006918:	e04f      	b.n	80069ba <lfs_fs_rawtraverse+0x23a>
        if (f->type != LFS_TYPE_REG) {
 800691a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691c:	799b      	ldrb	r3, [r3, #6]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d147      	bne.n	80069b2 <lfs_fs_rawtraverse+0x232>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8006922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01d      	beq.n	800696a <lfs_fs_rawtraverse+0x1ea>
 800692e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d117      	bne.n	800696a <lfs_fs_rawtraverse+0x1ea>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800693a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006944:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	9202      	str	r2, [sp, #8]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	9201      	str	r2, [sp, #4]
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	4623      	mov	r3, r4
 8006956:	4602      	mov	r2, r0
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7fe fc1d 	bl	8005198 <lfs_ctz_traverse>
 800695e:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8006960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <lfs_fs_rawtraverse+0x1ea>
                return err;
 8006966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006968:	e02b      	b.n	80069c2 <lfs_fs_rawtraverse+0x242>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800696a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01e      	beq.n	80069b4 <lfs_fs_rawtraverse+0x234>
 8006976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d118      	bne.n	80069b4 <lfs_fs_rawtraverse+0x234>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006984:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800698c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800698e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	9202      	str	r2, [sp, #8]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	9201      	str	r2, [sp, #4]
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	4623      	mov	r3, r4
 800699e:	4602      	mov	r2, r0
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f7fe fbf9 	bl	8005198 <lfs_ctz_traverse>
 80069a6:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 80069a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <lfs_fs_rawtraverse+0x234>
                return err;
 80069ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069b0:	e007      	b.n	80069c2 <lfs_fs_rawtraverse+0x242>
            continue;
 80069b2:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80069b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1ac      	bne.n	800691a <lfs_fs_rawtraverse+0x19a>
            }
        }
    }
#endif

    return 0;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3764      	adds	r7, #100	; 0x64
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd90      	pop	{r4, r7, pc}
 80069ca:	bf00      	nop
 80069cc:	700ffc00 	.word	0x700ffc00

080069d0 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 80069ec:	e024      	b.n	8006a38 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	085b      	lsrs	r3, r3, #1
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d302      	bcc.n	8006a02 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 80069fc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006a00:	e027      	b.n	8006a52 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	3301      	adds	r3, #1
 8006a06:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3318      	adds	r3, #24
 8006a0c:	68b9      	ldr	r1, [r7, #8]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fa ffc6 	bl	80019a0 <lfs_pair_cmp>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <lfs_fs_pred+0x4e>
            return 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e019      	b.n	8006a52 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3318      	adds	r3, #24
 8006a22:	461a      	mov	r2, r3
 8006a24:	6879      	ldr	r1, [r7, #4]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7fc fd22 	bl	8003470 <lfs_dir_fetch>
 8006a2c:	6138      	str	r0, [r7, #16]
        if (err) {
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <lfs_fs_pred+0x68>
            return err;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	e00c      	b.n	8006a52 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3318      	adds	r3, #24
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fa ff95 	bl	800196c <lfs_pair_isnull>
 8006a42:	4603      	mov	r3, r0
 8006a44:	f083 0301 	eor.w	r3, r3, #1
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1cf      	bne.n	80069ee <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8006a4e:	f06f 0301 	mvn.w	r3, #1
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006a5a:	b5b0      	push	{r4, r5, r7, lr}
 8006a5c:	b08e      	sub	sp, #56	; 0x38
 8006a5e:	af04      	add	r7, sp, #16
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8006a7a:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 8006a80:	69dd      	ldr	r5, [r3, #28]
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69fa      	ldr	r2, [r7, #28]
 8006a88:	6852      	ldr	r2, [r2, #4]
 8006a8a:	2108      	movs	r1, #8
 8006a8c:	9103      	str	r1, [sp, #12]
 8006a8e:	f107 0110 	add.w	r1, r7, #16
 8006a92:	9102      	str	r1, [sp, #8]
 8006a94:	9201      	str	r2, [sp, #4]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	462b      	mov	r3, r5
 8006a9a:	4622      	mov	r2, r4
 8006a9c:	4601      	mov	r1, r0
 8006a9e:	6a38      	ldr	r0, [r7, #32]
 8006aa0:	f7fa fc2c 	bl	80012fc <lfs_bd_read>
 8006aa4:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <lfs_fs_parent_match+0x56>
        return err;
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	e012      	b.n	8006ad6 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8006ab0:	f107 0310 	add.w	r3, r7, #16
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fa ffc8 	bl	8001a4a <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	1d1a      	adds	r2, r3, #4
 8006abe:	f107 0310 	add.w	r3, r7, #16
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fa ff6b 	bl	80019a0 <lfs_pair_cmp>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bf14      	ite	ne
 8006ad0:	2301      	movne	r3, #1
 8006ad2:	2300      	moveq	r3, #0
 8006ad4:	b2db      	uxtb	r3, r3
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3728      	adds	r7, #40	; 0x28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006ae0 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08e      	sub	sp, #56	; 0x38
 8006ae4:	af04      	add	r7, sp, #16
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 8006afc:	e02f      	b.n	8006b5e <lfs_fs_parent+0x7e>
        if (cycle >= lfs->cfg->block_count/2) {
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	085b      	lsrs	r3, r3, #1
 8006b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d302      	bcc.n	8006b12 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8006b0c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006b10:	e032      	b.n	8006b78 <lfs_fs_parent+0x98>
        }
        cycle += 1;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	3301      	adds	r3, #1
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006b2e:	f107 0314 	add.w	r3, r7, #20
 8006b32:	9303      	str	r3, [sp, #12]
 8006b34:	4b12      	ldr	r3, [pc, #72]	; (8006b80 <lfs_fs_parent+0xa0>)
 8006b36:	9302      	str	r3, [sp, #8]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	9301      	str	r3, [sp, #4]
 8006b3c:	4b11      	ldr	r3, [pc, #68]	; (8006b84 <lfs_fs_parent+0xa4>)
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	4b11      	ldr	r3, [pc, #68]	; (8006b88 <lfs_fs_parent+0xa8>)
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f7fc f933 	bl	8002db0 <lfs_dir_fetchmatch>
 8006b4a:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <lfs_fs_parent+0x7e>
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	f113 0f02 	cmn.w	r3, #2
 8006b58:	d001      	beq.n	8006b5e <lfs_fs_parent+0x7e>
            return tag;
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	e00c      	b.n	8006b78 <lfs_fs_parent+0x98>
    while (!lfs_pair_isnull(parent->tail)) {
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3318      	adds	r3, #24
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fa ff02 	bl	800196c <lfs_pair_isnull>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f083 0301 	eor.w	r3, r3, #1
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1c4      	bne.n	8006afe <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8006b74:	f06f 0301 	mvn.w	r3, #1
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3728      	adds	r7, #40	; 0x28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	08006a5b 	.word	0x08006a5b
 8006b84:	20000008 	.word	0x20000008
 8006b88:	7ff003ff 	.word	0x7ff003ff

08006b8c <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8006b8c:	b590      	push	{r4, r7, lr}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fa ffed 	bl	8001b7c <lfs_tag_size>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <lfs_fs_preporphans+0x32>
 8006ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	da06      	bge.n	8006bbe <lfs_fs_preporphans+0x32>
 8006bb0:	4b10      	ldr	r3, [pc, #64]	; (8006bf4 <lfs_fs_preporphans+0x68>)
 8006bb2:	4a11      	ldr	r2, [pc, #68]	; (8006bf8 <lfs_fs_preporphans+0x6c>)
 8006bb4:	f241 117d 	movw	r1, #4477	; 0x117d
 8006bb8:	4810      	ldr	r0, [pc, #64]	; (8006bfc <lfs_fs_preporphans+0x70>)
 8006bba:	f007 f865 	bl	800dc88 <__assert_func>
    lfs->gstate.tag += orphans;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bc6:	441a      	add	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	3330      	adds	r3, #48	; 0x30
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fb f82f 	bl	8001c3c <lfs_gstate_hasorphans>
 8006bde:	4603      	mov	r3, r0
 8006be0:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006be2:	ea44 0203 	orr.w	r2, r4, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd90      	pop	{r4, r7, pc}
 8006bf4:	0800f55c 	.word	0x0800f55c
 8006bf8:	0800f7b4 	.word	0x0800f7b4
 8006bfc:	0800f150 	.word	0x0800f150

08006c00 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	607a      	str	r2, [r7, #4]
 8006c0c:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c12:	4a17      	ldr	r2, [pc, #92]	; (8006c70 <lfs_fs_prepmove+0x70>)
 8006c14:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8006c16:	897b      	ldrh	r3, [r7, #10]
 8006c18:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006c1c:	428b      	cmp	r3, r1
 8006c1e:	d006      	beq.n	8006c2e <lfs_fs_prepmove+0x2e>
 8006c20:	897b      	ldrh	r3, [r7, #10]
 8006c22:	029b      	lsls	r3, r3, #10
 8006c24:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006c28:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006c2c:	e000      	b.n	8006c30 <lfs_fs_prepmove+0x30>
 8006c2e:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006c30:	431a      	orrs	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8006c36:	897b      	ldrh	r3, [r7, #10]
 8006c38:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d002      	beq.n	8006c46 <lfs_fs_prepmove+0x46>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	e000      	b.n	8006c48 <lfs_fs_prepmove+0x48>
 8006c46:	2300      	movs	r3, #0
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8006c4c:	897b      	ldrh	r3, [r7, #10]
 8006c4e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d003      	beq.n	8006c5e <lfs_fs_prepmove+0x5e>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3304      	adds	r3, #4
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	e000      	b.n	8006c60 <lfs_fs_prepmove+0x60>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006c64:	bf00      	nop
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	800003ff 	.word	0x800003ff

08006c74 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b090      	sub	sp, #64	; 0x40
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	333c      	adds	r3, #60	; 0x3c
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fa fffd 	bl	8001c80 <lfs_gstate_hasmove>
 8006c86:	4603      	mov	r3, r0
 8006c88:	f083 0301 	eor.w	r3, r3, #1
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <lfs_fs_demove+0x22>
        return 0;
 8006c92:	2300      	movs	r3, #0
 8006c94:	e033      	b.n	8006cfe <lfs_fs_demove+0x8a>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006c9c:	f107 0318 	add.w	r3, r7, #24
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fc fbe4 	bl	8003470 <lfs_dir_fetch>
 8006ca8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8006caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <lfs_fs_demove+0x40>
        return err;
 8006cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb2:	e024      	b.n	8006cfe <lfs_fs_demove+0x8a>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fa ff50 	bl	8001b5e <lfs_tag_id>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff ff99 	bl	8006c00 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8006cce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006cd0:	029b      	lsls	r3, r3, #10
 8006cd2:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006cd6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006cda:	613b      	str	r3, [r7, #16]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	f107 0210 	add.w	r2, r7, #16
 8006ce4:	f107 0118 	add.w	r1, r7, #24
 8006ce8:	2301      	movs	r3, #1
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7fe f894 	bl	8004e18 <lfs_dir_commit>
 8006cf0:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <lfs_fs_demove+0x88>
        return err;
 8006cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cfa:	e000      	b.n	8006cfe <lfs_fs_demove+0x8a>
    }

    return 0;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3740      	adds	r7, #64	; 0x40
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8006d08:	b5b0      	push	{r4, r5, r7, lr}
 8006d0a:	b0b0      	sub	sp, #192	; 0xc0
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	460b      	mov	r3, r1
 8006d12:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3330      	adds	r3, #48	; 0x30
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fa ff8f 	bl	8001c3c <lfs_gstate_hasorphans>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f083 0301 	eor.w	r3, r3, #1
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <lfs_fs_deorphan+0x26>
        return 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e14f      	b.n	8006fce <lfs_fs_deorphan+0x2c6>
    }

    int8_t found = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8006d34:	f107 030c 	add.w	r3, r7, #12
 8006d38:	2220      	movs	r2, #32
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f007 f829 	bl	800dd94 <memset>
 8006d42:	2301      	movs	r3, #1
 8006d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d48:	2301      	movs	r3, #1
 8006d4a:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8006d4c:	e11b      	b.n	8006f86 <lfs_fs_deorphan+0x27e>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8006d4e:	f107 030c 	add.w	r3, r7, #12
 8006d52:	f103 0218 	add.w	r2, r3, #24
 8006d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7fc fb87 	bl	8003470 <lfs_dir_fetch>
 8006d62:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 8006d66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <lfs_fs_deorphan+0x6c>
                return err;
 8006d6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d72:	e12c      	b.n	8006fce <lfs_fs_deorphan+0x2c6>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8006d74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d78:	f083 0301 	eor.w	r3, r3, #1
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 80f7 	beq.w	8006f72 <lfs_fs_deorphan+0x26a>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8006d84:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8006d88:	f107 030c 	add.w	r3, r7, #12
 8006d8c:	3318      	adds	r3, #24
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff fea5 	bl	8006ae0 <lfs_fs_parent>
 8006d96:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	da07      	bge.n	8006db2 <lfs_fs_deorphan+0xaa>
 8006da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006da6:	f113 0f02 	cmn.w	r3, #2
 8006daa:	d002      	beq.n	8006db2 <lfs_fs_deorphan+0xaa>
                    return tag;
 8006dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006db0:	e10d      	b.n	8006fce <lfs_fs_deorphan+0x2c6>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 8006db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006db6:	f113 0f02 	cmn.w	r3, #2
 8006dba:	d14b      	bne.n	8006e54 <lfs_fs_deorphan+0x14c>
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d048      	beq.n	8006e54 <lfs_fs_deorphan+0x14c>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fc fb6a 	bl	80034a8 <lfs_dir_getgstate>
 8006dd4:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 8006dd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <lfs_fs_deorphan+0xde>
                        return err;
 8006de0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006de4:	e0f3      	b.n	8006fce <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8006de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006dea:	3318      	adds	r3, #24
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fa fe46 	bl	8001a7e <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006df2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006df6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006dfa:	051a      	lsls	r2, r3, #20
 8006dfc:	4b76      	ldr	r3, [pc, #472]	; (8006fd8 <lfs_fs_deorphan+0x2d0>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e08:	3318      	adds	r3, #24
 8006e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e0e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8006e12:	f107 010c 	add.w	r1, r7, #12
 8006e16:	2301      	movs	r3, #1
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7fd fd43 	bl	80048a4 <lfs_dir_orphaningcommit>
 8006e1e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8006e22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e26:	3318      	adds	r3, #24
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fa fe0e 	bl	8001a4a <lfs_pair_fromle32>
                    if (state < 0) {
 8006e2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	da02      	bge.n	8006e3c <lfs_fs_deorphan+0x134>
                        return state;
 8006e36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 8006e3a:	e0c8      	b.n	8006fce <lfs_fs_deorphan+0x2c6>
                    }

                    found += 1;
 8006e3c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006e40:	3301      	adds	r3, #1
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8006e48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e4c:	2b03      	cmp	r3, #3
 8006e4e:	f040 808e 	bne.w	8006f6e <lfs_fs_deorphan+0x266>
                        goto restart;
 8006e52:	e76f      	b.n	8006d34 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 8006e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e58:	f113 0f02 	cmn.w	r3, #2
 8006e5c:	f000 8089 	beq.w	8006f72 <lfs_fs_deorphan+0x26a>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8006e60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e64:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8006e68:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	4a5a      	ldr	r2, [pc, #360]	; (8006fdc <lfs_fs_deorphan+0x2d4>)
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fb fa40 	bl	80022f8 <lfs_dir_get>
 8006e78:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8006e7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	da02      	bge.n	8006e8a <lfs_fs_deorphan+0x182>
                        return state;
 8006e84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e88:	e0a1      	b.n	8006fce <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 8006e8a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fa fddb 	bl	8001a4a <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 8006e94:	f107 030c 	add.w	r3, r7, #12
 8006e98:	f103 0218 	add.w	r2, r3, #24
 8006e9c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fa fda5 	bl	80019f2 <lfs_pair_sync>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	f083 0301 	eor.w	r3, r3, #1
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d05e      	beq.n	8006f72 <lfs_fs_deorphan+0x26a>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8006eb4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006eb8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3330      	adds	r3, #48	; 0x30
 8006ec0:	f107 020c 	add.w	r2, r7, #12
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fa feed 	bl	8001ca6 <lfs_gstate_hasmovehere>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00d      	beq.n	8006eee <lfs_fs_deorphan+0x1e6>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fa fe41 	bl	8001b5e <lfs_tag_id>
 8006edc:	4603      	mov	r3, r0
 8006ede:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7ff fe89 	bl	8006c00 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8006eee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fa fdc3 	bl	8001a7e <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006ef8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006efc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d007      	beq.n	8006f14 <lfs_fs_deorphan+0x20c>
 8006f04:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006f08:	029b      	lsls	r3, r3, #10
 8006f0a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006f0e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006f12:	e000      	b.n	8006f16 <lfs_fs_deorphan+0x20e>
 8006f14:	2300      	movs	r3, #0
 8006f16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f18:	2300      	movs	r3, #0
 8006f1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f1e:	4b30      	ldr	r3, [pc, #192]	; (8006fe0 <lfs_fs_deorphan+0x2d8>)
 8006f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f24:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006f28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f2c:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8006f30:	f107 010c 	add.w	r1, r7, #12
 8006f34:	2302      	movs	r3, #2
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7fd fcb4 	bl	80048a4 <lfs_dir_orphaningcommit>
 8006f3c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8006f40:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fa fd80 	bl	8001a4a <lfs_pair_fromle32>
                        if (state < 0) {
 8006f4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	da02      	bge.n	8006f58 <lfs_fs_deorphan+0x250>
                            return state;
 8006f52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8006f56:	e03a      	b.n	8006fce <lfs_fs_deorphan+0x2c6>
                        }

                        found += 1;
 8006f58:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8006f64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d10c      	bne.n	8006f86 <lfs_fs_deorphan+0x27e>
 8006f6c:	e6e2      	b.n	8006d34 <lfs_fs_deorphan+0x2c>
                    continue;
 8006f6e:	bf00      	nop
 8006f70:	e009      	b.n	8006f86 <lfs_fs_deorphan+0x27e>
                        continue;
                    }
                }
            }

            pdir = dir;
 8006f72:	f107 040c 	add.w	r4, r7, #12
 8006f76:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8006f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f7e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006f82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8006f86:	f107 030c 	add.w	r3, r7, #12
 8006f8a:	3318      	adds	r3, #24
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fa fced 	bl	800196c <lfs_pair_isnull>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f083 0301 	eor.w	r3, r3, #1
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f47f aed7 	bne.w	8006d4e <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3330      	adds	r3, #48	; 0x30
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fa fe5c 	bl	8001c62 <lfs_gstate_getorphans>
 8006faa:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 8006fac:	461a      	mov	r2, r3
 8006fae:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f7fa f8ce 	bl	8001156 <lfs_min>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	425b      	negs	r3, r3
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	b25b      	sxtb	r3, r3
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff fde0 	bl	8006b8c <lfs_fs_preporphans>
 8006fcc:	4603      	mov	r3, r0
            found));
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	37b8      	adds	r7, #184	; 0xb8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	000ffc08 	.word	0x000ffc08
 8006fdc:	7ffffc00 	.word	0x7ffffc00
 8006fe0:	600ffc08 	.word	0x600ffc08

08006fe4 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff fe41 	bl	8006c74 <lfs_fs_demove>
 8006ff2:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <lfs_fs_forceconsistency+0x1a>
        return err;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	e00a      	b.n	8007014 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 8006ffe:	2101      	movs	r1, #1
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff fe81 	bl	8006d08 <lfs_fs_deorphan>
 8007006:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <lfs_fs_forceconsistency+0x2e>
        return err;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	e000      	b.n	8007014 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	601a      	str	r2, [r3, #0]
    return 0;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	bc80      	pop	{r7}
 800703e:	4770      	bx	lr

08007040 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 800704c:	f107 0208 	add.w	r2, r7, #8
 8007050:	2300      	movs	r3, #0
 8007052:	4907      	ldr	r1, [pc, #28]	; (8007070 <lfs_fs_rawsize+0x30>)
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff fb93 	bl	8006780 <lfs_fs_rawtraverse>
 800705a:	60f8      	str	r0, [r7, #12]
    if (err) {
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <lfs_fs_rawsize+0x26>
        return err;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	e000      	b.n	8007068 <lfs_fs_rawsize+0x28>
    }

    return size;
 8007066:	68bb      	ldr	r3, [r7, #8]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	0800701d 	.word	0x0800701d

08007074 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <lfs_format+0x18>
        return err;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	e005      	b.n	8007098 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff f99e 	bl	80063d0 <lfs_rawformat>
 8007094:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8007096:	68fb      	ldr	r3, [r7, #12]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
    if (err) {
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <lfs_mount+0x18>
        return err;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	e005      	b.n	80070c4 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7ff fa28 	bl	8006510 <lfs_rawmount>
 80070c0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80070c2:	68fb      	ldr	r3, [r7, #12]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80070da:	2300      	movs	r3, #0
 80070dc:	617b      	str	r3, [r7, #20]
    if (err) {
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <lfs_file_open+0x1c>
        return err;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	e01a      	b.n	800711e <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ec:	68b9      	ldr	r1, [r7, #8]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fa fed9 	bl	8001ea6 <lfs_mlist_isopen>
 80070f4:	4603      	mov	r3, r0
 80070f6:	f083 0301 	eor.w	r3, r3, #1
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d106      	bne.n	800710e <lfs_file_open+0x42>
 8007100:	4b09      	ldr	r3, [pc, #36]	; (8007128 <lfs_file_open+0x5c>)
 8007102:	4a0a      	ldr	r2, [pc, #40]	; (800712c <lfs_file_open+0x60>)
 8007104:	f241 5197 	movw	r1, #5527	; 0x1597
 8007108:	4809      	ldr	r0, [pc, #36]	; (8007130 <lfs_file_open+0x64>)
 800710a:	f006 fdbd 	bl	800dc88 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7fe fa8d 	bl	8005634 <lfs_file_rawopen>
 800711a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800711c:	697b      	ldr	r3, [r7, #20]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	0800f590 	.word	0x0800f590
 800712c:	0800f7c8 	.word	0x0800f7c8
 8007130:	0800f150 	.word	0x0800f150

08007134 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <lfs_file_close+0x18>
        return err;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	e015      	b.n	8007178 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	4618      	mov	r0, r3
 8007154:	f7fa fea7 	bl	8001ea6 <lfs_mlist_isopen>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <lfs_file_close+0x38>
 800715e:	4b08      	ldr	r3, [pc, #32]	; (8007180 <lfs_file_close+0x4c>)
 8007160:	4a08      	ldr	r2, [pc, #32]	; (8007184 <lfs_file_close+0x50>)
 8007162:	f241 51bb 	movw	r1, #5563	; 0x15bb
 8007166:	4808      	ldr	r0, [pc, #32]	; (8007188 <lfs_file_close+0x54>)
 8007168:	f006 fd8e 	bl	800dc88 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fe fa78 	bl	8005664 <lfs_file_rawclose>
 8007174:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007176:	68fb      	ldr	r3, [r7, #12]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	0800f5c8 	.word	0x0800f5c8
 8007184:	0800f7d8 	.word	0x0800f7d8
 8007188:	0800f150 	.word	0x0800f150

0800718c <lfs_file_write>:
    return res;
}

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800719a:	2300      	movs	r3, #0
 800719c:	617b      	str	r3, [r7, #20]
    if (err) {
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <lfs_file_write+0x1c>
        return err;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	e017      	b.n	80071d8 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ac:	68b9      	ldr	r1, [r7, #8]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fa fe79 	bl	8001ea6 <lfs_mlist_isopen>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d106      	bne.n	80071c8 <lfs_file_write+0x3c>
 80071ba:	4b09      	ldr	r3, [pc, #36]	; (80071e0 <lfs_file_write+0x54>)
 80071bc:	4a09      	ldr	r2, [pc, #36]	; (80071e4 <lfs_file_write+0x58>)
 80071be:	f241 51ef 	movw	r1, #5615	; 0x15ef
 80071c2:	4809      	ldr	r0, [pc, #36]	; (80071e8 <lfs_file_write+0x5c>)
 80071c4:	f006 fd60 	bl	800dc88 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7fe fe9a 	bl	8005f08 <lfs_file_rawwrite>
 80071d4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 80071d6:	693b      	ldr	r3, [r7, #16]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	0800f5c8 	.word	0x0800f5c8
 80071e4:	0800f7e8 	.word	0x0800f7e8
 80071e8:	0800f150 	.word	0x0800f150

080071ec <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 80071fc:	2300      	movs	r3, #0
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	e024      	b.n	800724c <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	091a      	lsrs	r2, r3, #4
 8007206:	6939      	ldr	r1, [r7, #16]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	440b      	add	r3, r1
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	4619      	mov	r1, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	404b      	eors	r3, r1
 8007214:	f003 030f 	and.w	r3, r3, #15
 8007218:	4911      	ldr	r1, [pc, #68]	; (8007260 <lfs_crc+0x74>)
 800721a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800721e:	4053      	eors	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	091a      	lsrs	r2, r3, #4
 8007226:	6939      	ldr	r1, [r7, #16]
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	440b      	add	r3, r1
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	091b      	lsrs	r3, r3, #4
 8007230:	b2db      	uxtb	r3, r3
 8007232:	4619      	mov	r1, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	404b      	eors	r3, r1
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	4908      	ldr	r1, [pc, #32]	; (8007260 <lfs_crc+0x74>)
 800723e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007242:	4053      	eors	r3, r2
 8007244:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	3301      	adds	r3, #1
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	429a      	cmp	r2, r3
 8007252:	d3d6      	bcc.n	8007202 <lfs_crc+0x16>
    }

    return crc;
 8007254:	68fb      	ldr	r3, [r7, #12]
}
 8007256:	4618      	mov	r0, r3
 8007258:	371c      	adds	r7, #28
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr
 8007260:	0800f7f8 	.word	0x0800f7f8

08007264 <nor_delay_us>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
	DmaEnd = 1;
}

void nor_delay_us(uint32_t us){
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 800726c:	2001      	movs	r0, #1
 800726e:	f001 fbd7 	bl	8008a20 <HAL_Delay>
}
 8007272:	bf00      	nop
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <nor_cs_assert>:

void nor_cs_assert(){
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_FLASH_MEMORY_PORT, CS_FLASH_MEMORY_PIN, GPIO_PIN_RESET);
 8007280:	2200      	movs	r2, #0
 8007282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007286:	4802      	ldr	r0, [pc, #8]	; (8007290 <nor_cs_assert+0x14>)
 8007288:	f001 fef8 	bl	800907c <HAL_GPIO_WritePin>
}
 800728c:	bf00      	nop
 800728e:	bd80      	pop	{r7, pc}
 8007290:	40010c00 	.word	0x40010c00

08007294 <nor_cs_deassert>:

void nor_cs_deassert(){
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_FLASH_MEMORY_PORT, CS_FLASH_MEMORY_PIN, GPIO_PIN_SET);
 8007298:	2201      	movs	r2, #1
 800729a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800729e:	4802      	ldr	r0, [pc, #8]	; (80072a8 <nor_cs_deassert+0x14>)
 80072a0:	f001 feec 	bl	800907c <HAL_GPIO_WritePin>
}
 80072a4:	bf00      	nop
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40010c00 	.word	0x40010c00

080072ac <nor_spi_tx>:

void nor_spi_tx(uint8_t *pData, uint32_t Size){
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
	DmaEnd = 0;
 80072b6:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <nor_spi_tx+0x28>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&SPI_PIN_FLASH, pData, Size, 1000);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	b29a      	uxth	r2, r3
 80072c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	4804      	ldr	r0, [pc, #16]	; (80072d8 <nor_spi_tx+0x2c>)
 80072c8:	f004 f9b2 	bl	800b630 <HAL_SPI_Transmit>

}
 80072cc:	bf00      	nop
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20000174 	.word	0x20000174
 80072d8:	20000660 	.word	0x20000660

080072dc <nor_spi_rx>:

void nor_spi_rx(uint8_t *pData, uint32_t Size){
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
	DmaEnd = 0;
 80072e6:	4b07      	ldr	r3, [pc, #28]	; (8007304 <nor_spi_rx+0x28>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&SPI_PIN_FLASH, pData, Size, 1000);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4804      	ldr	r0, [pc, #16]	; (8007308 <nor_spi_rx+0x2c>)
 80072f8:	f004 fade 	bl	800b8b8 <HAL_SPI_Receive>

}
 80072fc:	bf00      	nop
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	20000174 	.word	0x20000174
 8007308:	20000660 	.word	0x20000660

0800730c <__init_nor>:

void __init_nor(){
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
	Nor.config.CsAssert = nor_cs_assert;
 8007310:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <__init_nor+0x38>)
 8007312:	4a0d      	ldr	r2, [pc, #52]	; (8007348 <__init_nor+0x3c>)
 8007314:	609a      	str	r2, [r3, #8]
	Nor.config.CsDeassert = nor_cs_deassert;
 8007316:	4b0b      	ldr	r3, [pc, #44]	; (8007344 <__init_nor+0x38>)
 8007318:	4a0c      	ldr	r2, [pc, #48]	; (800734c <__init_nor+0x40>)
 800731a:	60da      	str	r2, [r3, #12]
	Nor.config.DelayUs = nor_delay_us;
 800731c:	4b09      	ldr	r3, [pc, #36]	; (8007344 <__init_nor+0x38>)
 800731e:	4a0c      	ldr	r2, [pc, #48]	; (8007350 <__init_nor+0x44>)
 8007320:	611a      	str	r2, [r3, #16]
	Nor.config.SpiRxFxn = nor_spi_rx;
 8007322:	4b08      	ldr	r3, [pc, #32]	; (8007344 <__init_nor+0x38>)
 8007324:	4a0b      	ldr	r2, [pc, #44]	; (8007354 <__init_nor+0x48>)
 8007326:	605a      	str	r2, [r3, #4]
	Nor.config.SpiTxFxn = nor_spi_tx;
 8007328:	4b06      	ldr	r3, [pc, #24]	; (8007344 <__init_nor+0x38>)
 800732a:	4a0b      	ldr	r2, [pc, #44]	; (8007358 <__init_nor+0x4c>)
 800732c:	601a      	str	r2, [r3, #0]

	if (NOR_Init(&Nor) != NOR_OK){ //NOR_Init
 800732e:	4805      	ldr	r0, [pc, #20]	; (8007344 <__init_nor+0x38>)
 8007330:	f000 fd3e 	bl	8007db0 <NOR_Init>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <__init_nor+0x32>
		Error_Handler();
 800733a:	f000 fbc5 	bl	8007ac8 <Error_Handler>
	}
}
 800733e:	bf00      	nop
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20000580 	.word	0x20000580
 8007348:	0800727d 	.word	0x0800727d
 800734c:	08007295 	.word	0x08007295
 8007350:	08007265 	.word	0x08007265
 8007354:	080072dd 	.word	0x080072dd
 8007358:	080072ad 	.word	0x080072ad

0800735c <_fs_read>:

/** Start LittleFs **/

int _fs_read(const struct lfs_config *c, lfs_block_t block,
            lfs_off_t off, void *buffer, lfs_size_t size){
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af02      	add	r7, sp, #8
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	603b      	str	r3, [r7, #0]

	if (NOR_ReadSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	4806      	ldr	r0, [pc, #24]	; (8007390 <_fs_read+0x34>)
 8007376:	f000 ff6d 	bl	8008254 <NOR_ReadSector>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <_fs_read+0x28>
		return 0;
 8007380:	2300      	movs	r3, #0
 8007382:	e001      	b.n	8007388 <_fs_read+0x2c>
	}

	return LFS_ERR_IO;
 8007384:	f06f 0304 	mvn.w	r3, #4
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	20000580 	.word	0x20000580

08007394 <_fs_write>:

int _fs_write(const struct lfs_config *c, lfs_block_t block,
        lfs_off_t off, const void *buffer, lfs_size_t size){
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af02      	add	r7, sp, #8
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]

	if (NOR_WriteSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	4806      	ldr	r0, [pc, #24]	; (80073c8 <_fs_write+0x34>)
 80073ae:	f000 feab 	bl	8008108 <NOR_WriteSector>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <_fs_write+0x28>
		return 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	e001      	b.n	80073c0 <_fs_write+0x2c>
	}

	return LFS_ERR_IO;
 80073bc:	f06f 0304 	mvn.w	r3, #4
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20000580 	.word	0x20000580

080073cc <_fs_erase>:

int _fs_erase(const struct lfs_config *c, lfs_block_t block){
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
	if (NOR_EraseSector(&Nor, block) == NOR_OK){
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	4806      	ldr	r0, [pc, #24]	; (80073f4 <_fs_erase+0x28>)
 80073da:	f000 fe01 	bl	8007fe0 <NOR_EraseSector>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <_fs_erase+0x1c>
		return 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	e001      	b.n	80073ec <_fs_erase+0x20>
	}

	return LFS_ERR_IO;
 80073e8:	f06f 0304 	mvn.w	r3, #4
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	20000580 	.word	0x20000580

080073f8 <_fs_sync>:

int _fs_sync(const struct lfs_config *c){
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
	return 0;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr

0800740c <__init_littefs>:
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
}
void __init_littefs(){
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
	// because of static qualifier, this variable
	// will have a dedicated address
		int Error;

		LfsConfig.read_size = 256;
 8007412:	4b3e      	ldr	r3, [pc, #248]	; (800750c <__init_littefs+0x100>)
 8007414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007418:	615a      	str	r2, [r3, #20]
		LfsConfig.prog_size = 256;
 800741a:	4b3c      	ldr	r3, [pc, #240]	; (800750c <__init_littefs+0x100>)
 800741c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007420:	619a      	str	r2, [r3, #24]
		LfsConfig.block_size = Nor.info.u16SectorSize;
 8007422:	4b3b      	ldr	r3, [pc, #236]	; (8007510 <__init_littefs+0x104>)
 8007424:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007426:	461a      	mov	r2, r3
 8007428:	4b38      	ldr	r3, [pc, #224]	; (800750c <__init_littefs+0x100>)
 800742a:	61da      	str	r2, [r3, #28]
		LfsConfig.block_count =  16384;//Nor.info.u32SectorCount;
 800742c:	4b37      	ldr	r3, [pc, #220]	; (800750c <__init_littefs+0x100>)
 800742e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007432:	621a      	str	r2, [r3, #32]
		LfsConfig.cache_size = Nor.info.u16PageSize;
 8007434:	4b36      	ldr	r3, [pc, #216]	; (8007510 <__init_littefs+0x104>)
 8007436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007438:	461a      	mov	r2, r3
 800743a:	4b34      	ldr	r3, [pc, #208]	; (800750c <__init_littefs+0x100>)
 800743c:	629a      	str	r2, [r3, #40]	; 0x28
		LfsConfig.lookahead_size = 15000;//Nor.info.u32SectorCount/8;
 800743e:	4b33      	ldr	r3, [pc, #204]	; (800750c <__init_littefs+0x100>)
 8007440:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007444:	62da      	str	r2, [r3, #44]	; 0x2c
		LfsConfig.block_cycles = 100;
 8007446:	4b31      	ldr	r3, [pc, #196]	; (800750c <__init_littefs+0x100>)
 8007448:	2264      	movs	r2, #100	; 0x64
 800744a:	625a      	str	r2, [r3, #36]	; 0x24
		LfsConfig.context = (void*) (40* 16384 * Nor.info.u16SectorSize);
 800744c:	4b30      	ldr	r3, [pc, #192]	; (8007510 <__init_littefs+0x104>)
 800744e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007450:	461a      	mov	r2, r3
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	045b      	lsls	r3, r3, #17
 800745a:	461a      	mov	r2, r3
 800745c:	4b2b      	ldr	r3, [pc, #172]	; (800750c <__init_littefs+0x100>)
 800745e:	601a      	str	r2, [r3, #0]

		LfsConfig.read = _fs_read;
 8007460:	4b2a      	ldr	r3, [pc, #168]	; (800750c <__init_littefs+0x100>)
 8007462:	4a2c      	ldr	r2, [pc, #176]	; (8007514 <__init_littefs+0x108>)
 8007464:	605a      	str	r2, [r3, #4]
		LfsConfig.prog = _fs_write;
 8007466:	4b29      	ldr	r3, [pc, #164]	; (800750c <__init_littefs+0x100>)
 8007468:	4a2b      	ldr	r2, [pc, #172]	; (8007518 <__init_littefs+0x10c>)
 800746a:	609a      	str	r2, [r3, #8]
		LfsConfig.erase = _fs_erase;
 800746c:	4b27      	ldr	r3, [pc, #156]	; (800750c <__init_littefs+0x100>)
 800746e:	4a2b      	ldr	r2, [pc, #172]	; (800751c <__init_littefs+0x110>)
 8007470:	60da      	str	r2, [r3, #12]
		LfsConfig.sync = _fs_sync;
 8007472:	4b26      	ldr	r3, [pc, #152]	; (800750c <__init_littefs+0x100>)
 8007474:	4a2a      	ldr	r2, [pc, #168]	; (8007520 <__init_littefs+0x114>)
 8007476:	611a      	str	r2, [r3, #16]

		Error = lfs_mount(&Lfs, &LfsConfig);
 8007478:	4924      	ldr	r1, [pc, #144]	; (800750c <__init_littefs+0x100>)
 800747a:	482a      	ldr	r0, [pc, #168]	; (8007524 <__init_littefs+0x118>)
 800747c:	f7ff fe10 	bl	80070a0 <lfs_mount>
 8007480:	6078      	str	r0, [r7, #4]
		if (Error != LFS_ERR_OK){
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00d      	beq.n	80074a4 <__init_littefs+0x98>
			lfs_format(&Lfs, &LfsConfig);
 8007488:	4920      	ldr	r1, [pc, #128]	; (800750c <__init_littefs+0x100>)
 800748a:	4826      	ldr	r0, [pc, #152]	; (8007524 <__init_littefs+0x118>)
 800748c:	f7ff fdf2 	bl	8007074 <lfs_format>
			Error = lfs_mount(&Lfs, &LfsConfig);
 8007490:	491e      	ldr	r1, [pc, #120]	; (800750c <__init_littefs+0x100>)
 8007492:	4824      	ldr	r0, [pc, #144]	; (8007524 <__init_littefs+0x118>)
 8007494:	f7ff fe04 	bl	80070a0 <lfs_mount>
 8007498:	6078      	str	r0, [r7, #4]
			if (Error != LFS_ERR_OK){
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <__init_littefs+0x98>
				Error_Handler();
 80074a0:	f000 fb12 	bl	8007ac8 <Error_Handler>
			}
		}


		LfsConfig2.read_size = 256;
 80074a4:	4b20      	ldr	r3, [pc, #128]	; (8007528 <__init_littefs+0x11c>)
 80074a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074aa:	615a      	str	r2, [r3, #20]
		LfsConfig2.prog_size = 256;
 80074ac:	4b1e      	ldr	r3, [pc, #120]	; (8007528 <__init_littefs+0x11c>)
 80074ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074b2:	619a      	str	r2, [r3, #24]
		LfsConfig2.block_size = Nor.info.u16SectorSize;
 80074b4:	4b16      	ldr	r3, [pc, #88]	; (8007510 <__init_littefs+0x104>)
 80074b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80074b8:	461a      	mov	r2, r3
 80074ba:	4b1b      	ldr	r3, [pc, #108]	; (8007528 <__init_littefs+0x11c>)
 80074bc:	61da      	str	r2, [r3, #28]
		LfsConfig2.block_count =  16384;//Nor.info.u32SectorCount;
 80074be:	4b1a      	ldr	r3, [pc, #104]	; (8007528 <__init_littefs+0x11c>)
 80074c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80074c4:	621a      	str	r2, [r3, #32]
		LfsConfig2.cache_size = Nor.info.u16PageSize;//1024
 80074c6:	4b12      	ldr	r3, [pc, #72]	; (8007510 <__init_littefs+0x104>)
 80074c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ca:	461a      	mov	r2, r3
 80074cc:	4b16      	ldr	r3, [pc, #88]	; (8007528 <__init_littefs+0x11c>)
 80074ce:	629a      	str	r2, [r3, #40]	; 0x28
		LfsConfig2.lookahead_size = 5256;//Nor.info.u32SectorCount/8;
 80074d0:	4b15      	ldr	r3, [pc, #84]	; (8007528 <__init_littefs+0x11c>)
 80074d2:	f241 4288 	movw	r2, #5256	; 0x1488
 80074d6:	62da      	str	r2, [r3, #44]	; 0x2c
		LfsConfig2.block_cycles = 100;
 80074d8:	4b13      	ldr	r3, [pc, #76]	; (8007528 <__init_littefs+0x11c>)
 80074da:	2264      	movs	r2, #100	; 0x64
 80074dc:	625a      	str	r2, [r3, #36]	; 0x24

		LfsConfig2.read = _fs_read;
 80074de:	4b12      	ldr	r3, [pc, #72]	; (8007528 <__init_littefs+0x11c>)
 80074e0:	4a0c      	ldr	r2, [pc, #48]	; (8007514 <__init_littefs+0x108>)
 80074e2:	605a      	str	r2, [r3, #4]
		LfsConfig2.prog = _fs_write;
 80074e4:	4b10      	ldr	r3, [pc, #64]	; (8007528 <__init_littefs+0x11c>)
 80074e6:	4a0c      	ldr	r2, [pc, #48]	; (8007518 <__init_littefs+0x10c>)
 80074e8:	609a      	str	r2, [r3, #8]
		LfsConfig2.erase = _fs_erase;
 80074ea:	4b0f      	ldr	r3, [pc, #60]	; (8007528 <__init_littefs+0x11c>)
 80074ec:	4a0b      	ldr	r2, [pc, #44]	; (800751c <__init_littefs+0x110>)
 80074ee:	60da      	str	r2, [r3, #12]
		LfsConfig2.sync = _fs_sync;
 80074f0:	4b0d      	ldr	r3, [pc, #52]	; (8007528 <__init_littefs+0x11c>)
 80074f2:	4a0b      	ldr	r2, [pc, #44]	; (8007520 <__init_littefs+0x114>)
 80074f4:	611a      	str	r2, [r3, #16]

		LfsConfig2.context = (void*) (4* 16384 * Nor.info.u16SectorSize);
 80074f6:	4b06      	ldr	r3, [pc, #24]	; (8007510 <__init_littefs+0x104>)
 80074f8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80074fa:	041b      	lsls	r3, r3, #16
 80074fc:	461a      	mov	r2, r3
 80074fe:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <__init_littefs+0x11c>)
 8007500:	601a      	str	r2, [r3, #0]
//					if (Error != LFS_ERR_OK){
//						Error_Handler();
//					}
//				}

}
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	200000dc 	.word	0x200000dc
 8007510:	20000580 	.word	0x20000580
 8007514:	0800735d 	.word	0x0800735d
 8007518:	08007395 	.word	0x08007395
 800751c:	080073cd 	.word	0x080073cd
 8007520:	080073f9 	.word	0x080073f9
 8007524:	200005d0 	.word	0x200005d0
 8007528:	20000128 	.word	0x20000128

0800752c <__init_storage>:
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
}
void __init_storage(){
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
	__init_nor();
 8007530:	f7ff feec 	bl	800730c <__init_nor>
	__init_littefs();
 8007534:	f7ff ff6a 	bl	800740c <__init_littefs>
}
 8007538:	bf00      	nop
 800753a:	bd80      	pop	{r7, pc}

0800753c <write_to_file>:

void write_to_file(char *filename, uint8_t *data, uint32_t data_length){
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]

//	  list_directories_with_file_count(&Lfs,"");
	  lfs_file_open(&Lfs, &File, filename, LFS_O_CREAT | LFS_O_RDWR  | LFS_O_APPEND );
 8007548:	f640 1303 	movw	r3, #2307	; 0x903
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	4909      	ldr	r1, [pc, #36]	; (8007574 <write_to_file+0x38>)
 8007550:	4809      	ldr	r0, [pc, #36]	; (8007578 <write_to_file+0x3c>)
 8007552:	f7ff fdbb 	bl	80070cc <lfs_file_open>
	  lfs_file_write(&Lfs, &File, data, data_length);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	4906      	ldr	r1, [pc, #24]	; (8007574 <write_to_file+0x38>)
 800755c:	4806      	ldr	r0, [pc, #24]	; (8007578 <write_to_file+0x3c>)
 800755e:	f7ff fe15 	bl	800718c <lfs_file_write>
	  lfs_file_close(&Lfs, &File);
 8007562:	4904      	ldr	r1, [pc, #16]	; (8007574 <write_to_file+0x38>)
 8007564:	4804      	ldr	r0, [pc, #16]	; (8007578 <write_to_file+0x3c>)
 8007566:	f7ff fde5 	bl	8007134 <lfs_file_close>
//	  lfs_unmount(&Lfs);
}
 800756a:	bf00      	nop
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	200004b0 	.word	0x200004b0
 8007578:	200005d0 	.word	0x200005d0

0800757c <OBC_HANDSHAKE>:
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_RTC_Init(void);
static void MX_USB_PCD_Init(void);
/* USER CODE BEGIN PFP */
uint8_t OBC_HANDSHAKE(){
 800757c:	b580      	push	{r7, lr}
 800757e:	af00      	add	r7, sp, #0
	memset(OBC_HANDSHAKE_RX, '\0', sizeof(OBC_HANDSHAKE_RX));
 8007580:	2207      	movs	r2, #7
 8007582:	2100      	movs	r1, #0
 8007584:	4818      	ldr	r0, [pc, #96]	; (80075e8 <OBC_HANDSHAKE+0x6c>)
 8007586:	f006 fc05 	bl	800dd94 <memset>
	memset(OBC_HANDSHAKE_TX, '\0', sizeof(OBC_HANDSHAKE_TX));
 800758a:	2207      	movs	r2, #7
 800758c:	2100      	movs	r1, #0
 800758e:	4817      	ldr	r0, [pc, #92]	; (80075ec <OBC_HANDSHAKE+0x70>)
 8007590:	f006 fc00 	bl	800dd94 <memset>
	OBC_HANDSHAKE_SUCESS = 0;
 8007594:	4b16      	ldr	r3, [pc, #88]	; (80075f0 <OBC_HANDSHAKE+0x74>)
 8007596:	2200      	movs	r2, #0
 8007598:	701a      	strb	r2, [r3, #0]
	do{
	if(HAL_UART_Receive(&huart2, OBC_HANDSHAKE_RX, sizeof(OBC_HANDSHAKE_RX),1000)==HAL_OK){
 800759a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800759e:	2207      	movs	r2, #7
 80075a0:	4911      	ldr	r1, [pc, #68]	; (80075e8 <OBC_HANDSHAKE+0x6c>)
 80075a2:	4814      	ldr	r0, [pc, #80]	; (80075f4 <OBC_HANDSHAKE+0x78>)
 80075a4:	f004 ff34 	bl	800c410 <HAL_UART_Receive>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d114      	bne.n	80075d8 <OBC_HANDSHAKE+0x5c>
		if(HAL_UART_Transmit(&huart2, OBC_HANDSHAKE_RX, sizeof(OBC_HANDSHAKE_RX), 3000)==HAL_OK){
 80075ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80075b2:	2207      	movs	r2, #7
 80075b4:	490c      	ldr	r1, [pc, #48]	; (80075e8 <OBC_HANDSHAKE+0x6c>)
 80075b6:	480f      	ldr	r0, [pc, #60]	; (80075f4 <OBC_HANDSHAKE+0x78>)
 80075b8:	f004 fe9f 	bl	800c2fa <HAL_UART_Transmit>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10a      	bne.n	80075d8 <OBC_HANDSHAKE+0x5c>
			OBC_HANDSHAKE_SUCESS = 1;
 80075c2:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <OBC_HANDSHAKE+0x74>)
 80075c4:	2201      	movs	r2, #1
 80075c6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, "HANDSHAKE SUCCESSFULLY\n", "HANDSHAKE SUCCESSFULLY", 1000);
 80075c8:	4b0b      	ldr	r3, [pc, #44]	; (80075f8 <OBC_HANDSHAKE+0x7c>)
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075d0:	490a      	ldr	r1, [pc, #40]	; (80075fc <OBC_HANDSHAKE+0x80>)
 80075d2:	480b      	ldr	r0, [pc, #44]	; (8007600 <OBC_HANDSHAKE+0x84>)
 80075d4:	f004 fe91 	bl	800c2fa <HAL_UART_Transmit>
		}
	}
	}while(!OBC_HANDSHAKE_SUCESS);
 80075d8:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <OBC_HANDSHAKE+0x74>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0dc      	beq.n	800759a <OBC_HANDSHAKE+0x1e>
	return OBC_HANDSHAKE_SUCESS;
 80075e0:	4b03      	ldr	r3, [pc, #12]	; (80075f0 <OBC_HANDSHAKE+0x74>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20000178 	.word	0x20000178
 80075ec:	20000180 	.word	0x20000180
 80075f0:	2000065c 	.word	0x2000065c
 80075f4:	20000898 	.word	0x20000898
 80075f8:	0800f638 	.word	0x0800f638
 80075fc:	0800f650 	.word	0x0800f650
 8007600:	200006b8 	.word	0x200006b8

08007604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b08a      	sub	sp, #40	; 0x28
 8007608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800760a:	f001 f9a7 	bl	800895c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800760e:	f000 f89b 	bl	8007748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007612:	f000 f9f7 	bl	8007a04 <MX_GPIO_Init>
  MX_SPI1_Init();
 8007616:	f000 f913 	bl	8007840 <MX_SPI1_Init>
  MX_SPI2_Init();
 800761a:	f000 f947 	bl	80078ac <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800761e:	f000 f97b 	bl	8007918 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8007622:	f000 f9a3 	bl	800796c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8007626:	f000 f8ef 	bl	8007808 <MX_RTC_Init>
  MX_USB_PCD_Init();
 800762a:	f000 f9c9 	bl	80079c0 <MX_USB_PCD_Init>
//for(int i=0;i<6;i++){
//
// 	 write_to_file("/epdm_re.txt", "tet sfm test\n", sizeof("tet sfm test\n"));
// 	 HAL_Delay(10000);
//}
  HAL_UART_Transmit(&huart1, "*****************EPDM starting**************\n",sizeof("*****************EPDM starting**************\n"),1000);
 800762e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007632:	222e      	movs	r2, #46	; 0x2e
 8007634:	493d      	ldr	r1, [pc, #244]	; (800772c <main+0x128>)
 8007636:	483e      	ldr	r0, [pc, #248]	; (8007730 <main+0x12c>)
 8007638:	f004 fe5f 	bl	800c2fa <HAL_UART_Transmit>

  OBC_HANDSHAKE();
 800763c:	f7ff ff9e 	bl	800757c <OBC_HANDSHAKE>
//  OBC_COMMAND();
  HAL_GPIO_WritePin(GPIOB, MSN_EN1_Pin, SET); // Set PB9 high
 8007640:	2201      	movs	r2, #1
 8007642:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007646:	483b      	ldr	r0, [pc, #236]	; (8007734 <main+0x130>)
 8007648:	f001 fd18 	bl	800907c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN2_Pin, SET); // Set PB8 high
 800764c:	2201      	movs	r2, #1
 800764e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007652:	4838      	ldr	r0, [pc, #224]	; (8007734 <main+0x130>)
 8007654:	f001 fd12 	bl	800907c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN3_Pin, SET); // Set PA15 high
 8007658:	2201      	movs	r2, #1
 800765a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800765e:	4835      	ldr	r0, [pc, #212]	; (8007734 <main+0x130>)
 8007660:	f001 fd0c 	bl	800907c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN4_Pin, SET); // Set PA8 high
 8007664:	2201      	movs	r2, #1
 8007666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800766a:	4832      	ldr	r0, [pc, #200]	; (8007734 <main+0x130>)
 800766c:	f001 fd06 	bl	800907c <HAL_GPIO_WritePin>
  uint8_t data[20];
  while(1){
	  Read_ID(&hspi2, GPIOB, GPIO_PIN_12, data);
 8007670:	f107 0308 	add.w	r3, r7, #8
 8007674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007678:	492e      	ldr	r1, [pc, #184]	; (8007734 <main+0x130>)
 800767a:	482f      	ldr	r0, [pc, #188]	; (8007738 <main+0x134>)
 800767c:	f000 fa2a 	bl	8007ad4 <Read_ID>
	  if(data[0] == 32){
 8007680:	7a3b      	ldrb	r3, [r7, #8]
 8007682:	2b20      	cmp	r3, #32
 8007684:	d004      	beq.n	8007690 <main+0x8c>
		  break;
	  }
	  HAL_Delay(10000);
 8007686:	f242 7010 	movw	r0, #10000	; 0x2710
 800768a:	f001 f9c9 	bl	8008a20 <HAL_Delay>
  while(1){
 800768e:	e7ef      	b.n	8007670 <main+0x6c>
		  break;
 8007690:	bf00      	nop
  }

    for(int i=0;i<4;i++){
 8007692:	2300      	movs	r3, #0
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
 8007696:	e00b      	b.n	80076b0 <main+0xac>
    	SET_COUNT(i);
 8007698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800769a:	f7f9 f9b3 	bl	8000a04 <SET_COUNT>
    	Continuous_Mode(i);
 800769e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076a0:	f7f9 fa22 	bl	8000ae8 <Continuous_Mode>
    	 TMRC_Mode(i);
 80076a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076a6:	f7f9 fa63 	bl	8000b70 <TMRC_Mode>
    for(int i=0;i<4;i++){
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	3301      	adds	r3, #1
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	ddf0      	ble.n	8007698 <main+0x94>
    }
    int count=0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	623b      	str	r3, [r7, #32]
//    while(count < 290)
//    {
//
//    		  }
    __init_storage();
 80076ba:	f7ff ff37 	bl	800752c <__init_storage>
    uint8_t eom[]={0xff,0xd9,'\0'};
 80076be:	4a1f      	ldr	r2, [pc, #124]	; (800773c <main+0x138>)
 80076c0:	1d3b      	adds	r3, r7, #4
 80076c2:	6812      	ldr	r2, [r2, #0]
 80076c4:	4611      	mov	r1, r2
 80076c6:	8019      	strh	r1, [r3, #0]
 80076c8:	3302      	adds	r3, #2
 80076ca:	0c12      	lsrs	r2, r2, #16
 80076cc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { time_counter +=1;
 80076ce:	4b1c      	ldr	r3, [pc, #112]	; (8007740 <main+0x13c>)
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	3301      	adds	r3, #1
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	4b1a      	ldr	r3, [pc, #104]	; (8007740 <main+0x13c>)
 80076d8:	801a      	strh	r2, [r3, #0]
	  if(time_counter <= 3000){
 80076da:	4b19      	ldr	r3, [pc, #100]	; (8007740 <main+0x13c>)
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d815      	bhi.n	8007712 <main+0x10e>
		  for(int i=0;i<4;i++){
 80076e6:	2300      	movs	r3, #0
 80076e8:	61fb      	str	r3, [r7, #28]
 80076ea:	e00b      	b.n	8007704 <main+0x100>

		  		  Mea_Result(i);
 80076ec:	69f8      	ldr	r0, [r7, #28]
 80076ee:	f7f9 fa83 	bl	8000bf8 <Mea_Result>
		  		  Comb_measurement(i);
 80076f2:	69f8      	ldr	r0, [r7, #28]
 80076f4:	f7f9 fb1e 	bl	8000d34 <Comb_measurement>
		  	      count++;
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	3301      	adds	r3, #1
 80076fc:	623b      	str	r3, [r7, #32]
		  for(int i=0;i<4;i++){
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	3301      	adds	r3, #1
 8007702:	61fb      	str	r3, [r7, #28]
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	2b03      	cmp	r3, #3
 8007708:	ddf0      	ble.n	80076ec <main+0xe8>
		  	      }
//		  HAL_UART_Transmit(&huart1, "\n",1,1000);
//		      sprintf(tx,"\t\tTime counter value: %d\n\r\0",time_counter);
//		      HAL_UART_Transmit(&huart1,tx, strlen(tx),1000);
		  	  HAL_Delay(100);
 800770a:	2064      	movs	r0, #100	; 0x64
 800770c:	f001 f988 	bl	8008a20 <HAL_Delay>
 8007710:	e7dd      	b.n	80076ce <main+0xca>
	  }
	  else{
		  HAL_UART_Transmit(&huart2, eom, sizeof(eom),1000);
 8007712:	1d39      	adds	r1, r7, #4
 8007714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007718:	2203      	movs	r2, #3
 800771a:	480a      	ldr	r0, [pc, #40]	; (8007744 <main+0x140>)
 800771c:	f004 fded 	bl	800c2fa <HAL_UART_Transmit>
		  HAL_Delay(60000);
 8007720:	f64e 2060 	movw	r0, #60000	; 0xea60
 8007724:	f001 f97c 	bl	8008a20 <HAL_Delay>
  { time_counter +=1;
 8007728:	e7d1      	b.n	80076ce <main+0xca>
 800772a:	bf00      	nop
 800772c:	0800f698 	.word	0x0800f698
 8007730:	200006b8 	.word	0x200006b8
 8007734:	40010c00 	.word	0x40010c00
 8007738:	20000660 	.word	0x20000660
 800773c:	0800f6c8 	.word	0x0800f6c8
 8007740:	20000176 	.word	0x20000176
 8007744:	20000898 	.word	0x20000898

08007748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b094      	sub	sp, #80	; 0x50
 800774c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800774e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007752:	2228      	movs	r2, #40	; 0x28
 8007754:	2100      	movs	r1, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f006 fb1c 	bl	800dd94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800775c:	f107 0314 	add.w	r3, r7, #20
 8007760:	2200      	movs	r2, #0
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	605a      	str	r2, [r3, #4]
 8007766:	609a      	str	r2, [r3, #8]
 8007768:	60da      	str	r2, [r3, #12]
 800776a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800776c:	1d3b      	adds	r3, r7, #4
 800776e:	2200      	movs	r2, #0
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	605a      	str	r2, [r3, #4]
 8007774:	609a      	str	r2, [r3, #8]
 8007776:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8007778:	2309      	movs	r3, #9
 800777a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800777c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007780:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007782:	2300      	movs	r3, #0
 8007784:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007786:	2301      	movs	r3, #1
 8007788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800778a:	2301      	movs	r3, #1
 800778c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800778e:	2302      	movs	r3, #2
 8007790:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8007798:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800779c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800779e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077a2:	4618      	mov	r0, r3
 80077a4:	f002 fff4 	bl	800a790 <HAL_RCC_OscConfig>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80077ae:	f000 f98b 	bl	8007ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80077b2:	230f      	movs	r3, #15
 80077b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80077b6:	2302      	movs	r3, #2
 80077b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80077ba:	2300      	movs	r3, #0
 80077bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80077be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80077c4:	2300      	movs	r3, #0
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80077c8:	f107 0314 	add.w	r3, r7, #20
 80077cc:	2101      	movs	r1, #1
 80077ce:	4618      	mov	r0, r3
 80077d0:	f003 fa5e 	bl	800ac90 <HAL_RCC_ClockConfig>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80077da:	f000 f975 	bl	8007ac8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80077de:	2311      	movs	r3, #17
 80077e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80077e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80077e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80077ec:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80077ee:	1d3b      	adds	r3, r7, #4
 80077f0:	4618      	mov	r0, r3
 80077f2:	f003 fbdb 	bl	800afac <HAL_RCCEx_PeriphCLKConfig>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80077fc:	f000 f964 	bl	8007ac8 <Error_Handler>
  }
}
 8007800:	bf00      	nop
 8007802:	3750      	adds	r7, #80	; 0x50
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800780c:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <MX_RTC_Init+0x30>)
 800780e:	4a0b      	ldr	r2, [pc, #44]	; (800783c <MX_RTC_Init+0x34>)
 8007810:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8007812:	4b09      	ldr	r3, [pc, #36]	; (8007838 <MX_RTC_Init+0x30>)
 8007814:	f04f 32ff 	mov.w	r2, #4294967295
 8007818:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800781a:	4b07      	ldr	r3, [pc, #28]	; (8007838 <MX_RTC_Init+0x30>)
 800781c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007820:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007822:	4805      	ldr	r0, [pc, #20]	; (8007838 <MX_RTC_Init+0x30>)
 8007824:	f003 fd2e 	bl	800b284 <HAL_RTC_Init>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800782e:	f000 f94b 	bl	8007ac8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007832:	bf00      	nop
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20000818 	.word	0x20000818
 800783c:	40002800 	.word	0x40002800

08007840 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007844:	4b17      	ldr	r3, [pc, #92]	; (80078a4 <MX_SPI1_Init+0x64>)
 8007846:	4a18      	ldr	r2, [pc, #96]	; (80078a8 <MX_SPI1_Init+0x68>)
 8007848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800784a:	4b16      	ldr	r3, [pc, #88]	; (80078a4 <MX_SPI1_Init+0x64>)
 800784c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007852:	4b14      	ldr	r3, [pc, #80]	; (80078a4 <MX_SPI1_Init+0x64>)
 8007854:	2200      	movs	r2, #0
 8007856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007858:	4b12      	ldr	r3, [pc, #72]	; (80078a4 <MX_SPI1_Init+0x64>)
 800785a:	2200      	movs	r2, #0
 800785c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800785e:	4b11      	ldr	r3, [pc, #68]	; (80078a4 <MX_SPI1_Init+0x64>)
 8007860:	2200      	movs	r2, #0
 8007862:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007864:	4b0f      	ldr	r3, [pc, #60]	; (80078a4 <MX_SPI1_Init+0x64>)
 8007866:	2200      	movs	r2, #0
 8007868:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800786a:	4b0e      	ldr	r3, [pc, #56]	; (80078a4 <MX_SPI1_Init+0x64>)
 800786c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007870:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8007872:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <MX_SPI1_Init+0x64>)
 8007874:	2228      	movs	r2, #40	; 0x28
 8007876:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007878:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <MX_SPI1_Init+0x64>)
 800787a:	2200      	movs	r2, #0
 800787c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800787e:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <MX_SPI1_Init+0x64>)
 8007880:	2200      	movs	r2, #0
 8007882:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007884:	4b07      	ldr	r3, [pc, #28]	; (80078a4 <MX_SPI1_Init+0x64>)
 8007886:	2200      	movs	r2, #0
 8007888:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800788a:	4b06      	ldr	r3, [pc, #24]	; (80078a4 <MX_SPI1_Init+0x64>)
 800788c:	220a      	movs	r2, #10
 800788e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007890:	4804      	ldr	r0, [pc, #16]	; (80078a4 <MX_SPI1_Init+0x64>)
 8007892:	f003 fe49 	bl	800b528 <HAL_SPI_Init>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800789c:	f000 f914 	bl	8007ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80078a0:	bf00      	nop
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	20000840 	.word	0x20000840
 80078a8:	40013000 	.word	0x40013000

080078ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80078b0:	4b17      	ldr	r3, [pc, #92]	; (8007910 <MX_SPI2_Init+0x64>)
 80078b2:	4a18      	ldr	r2, [pc, #96]	; (8007914 <MX_SPI2_Init+0x68>)
 80078b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80078b6:	4b16      	ldr	r3, [pc, #88]	; (8007910 <MX_SPI2_Init+0x64>)
 80078b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80078bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80078be:	4b14      	ldr	r3, [pc, #80]	; (8007910 <MX_SPI2_Init+0x64>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80078c4:	4b12      	ldr	r3, [pc, #72]	; (8007910 <MX_SPI2_Init+0x64>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80078ca:	4b11      	ldr	r3, [pc, #68]	; (8007910 <MX_SPI2_Init+0x64>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80078d0:	4b0f      	ldr	r3, [pc, #60]	; (8007910 <MX_SPI2_Init+0x64>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80078d6:	4b0e      	ldr	r3, [pc, #56]	; (8007910 <MX_SPI2_Init+0x64>)
 80078d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80078de:	4b0c      	ldr	r3, [pc, #48]	; (8007910 <MX_SPI2_Init+0x64>)
 80078e0:	2220      	movs	r2, #32
 80078e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80078e4:	4b0a      	ldr	r3, [pc, #40]	; (8007910 <MX_SPI2_Init+0x64>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80078ea:	4b09      	ldr	r3, [pc, #36]	; (8007910 <MX_SPI2_Init+0x64>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078f0:	4b07      	ldr	r3, [pc, #28]	; (8007910 <MX_SPI2_Init+0x64>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80078f6:	4b06      	ldr	r3, [pc, #24]	; (8007910 <MX_SPI2_Init+0x64>)
 80078f8:	220a      	movs	r2, #10
 80078fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80078fc:	4804      	ldr	r0, [pc, #16]	; (8007910 <MX_SPI2_Init+0x64>)
 80078fe:	f003 fe13 	bl	800b528 <HAL_SPI_Init>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007908:	f000 f8de 	bl	8007ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800790c:	bf00      	nop
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20000660 	.word	0x20000660
 8007914:	40003800 	.word	0x40003800

08007918 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800791c:	4b11      	ldr	r3, [pc, #68]	; (8007964 <MX_USART1_UART_Init+0x4c>)
 800791e:	4a12      	ldr	r2, [pc, #72]	; (8007968 <MX_USART1_UART_Init+0x50>)
 8007920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007922:	4b10      	ldr	r3, [pc, #64]	; (8007964 <MX_USART1_UART_Init+0x4c>)
 8007924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800792a:	4b0e      	ldr	r3, [pc, #56]	; (8007964 <MX_USART1_UART_Init+0x4c>)
 800792c:	2200      	movs	r2, #0
 800792e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007930:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <MX_USART1_UART_Init+0x4c>)
 8007932:	2200      	movs	r2, #0
 8007934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007936:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <MX_USART1_UART_Init+0x4c>)
 8007938:	2200      	movs	r2, #0
 800793a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800793c:	4b09      	ldr	r3, [pc, #36]	; (8007964 <MX_USART1_UART_Init+0x4c>)
 800793e:	220c      	movs	r2, #12
 8007940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007942:	4b08      	ldr	r3, [pc, #32]	; (8007964 <MX_USART1_UART_Init+0x4c>)
 8007944:	2200      	movs	r2, #0
 8007946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007948:	4b06      	ldr	r3, [pc, #24]	; (8007964 <MX_USART1_UART_Init+0x4c>)
 800794a:	2200      	movs	r2, #0
 800794c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800794e:	4805      	ldr	r0, [pc, #20]	; (8007964 <MX_USART1_UART_Init+0x4c>)
 8007950:	f004 fc83 	bl	800c25a <HAL_UART_Init>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800795a:	f000 f8b5 	bl	8007ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800795e:	bf00      	nop
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	200006b8 	.word	0x200006b8
 8007968:	40013800 	.word	0x40013800

0800796c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007970:	4b11      	ldr	r3, [pc, #68]	; (80079b8 <MX_USART2_UART_Init+0x4c>)
 8007972:	4a12      	ldr	r2, [pc, #72]	; (80079bc <MX_USART2_UART_Init+0x50>)
 8007974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007976:	4b10      	ldr	r3, [pc, #64]	; (80079b8 <MX_USART2_UART_Init+0x4c>)
 8007978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800797c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800797e:	4b0e      	ldr	r3, [pc, #56]	; (80079b8 <MX_USART2_UART_Init+0x4c>)
 8007980:	2200      	movs	r2, #0
 8007982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007984:	4b0c      	ldr	r3, [pc, #48]	; (80079b8 <MX_USART2_UART_Init+0x4c>)
 8007986:	2200      	movs	r2, #0
 8007988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800798a:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <MX_USART2_UART_Init+0x4c>)
 800798c:	2200      	movs	r2, #0
 800798e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007990:	4b09      	ldr	r3, [pc, #36]	; (80079b8 <MX_USART2_UART_Init+0x4c>)
 8007992:	220c      	movs	r2, #12
 8007994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007996:	4b08      	ldr	r3, [pc, #32]	; (80079b8 <MX_USART2_UART_Init+0x4c>)
 8007998:	2200      	movs	r2, #0
 800799a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800799c:	4b06      	ldr	r3, [pc, #24]	; (80079b8 <MX_USART2_UART_Init+0x4c>)
 800799e:	2200      	movs	r2, #0
 80079a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80079a2:	4805      	ldr	r0, [pc, #20]	; (80079b8 <MX_USART2_UART_Init+0x4c>)
 80079a4:	f004 fc59 	bl	800c25a <HAL_UART_Init>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80079ae:	f000 f88b 	bl	8007ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80079b2:	bf00      	nop
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000898 	.word	0x20000898
 80079bc:	40004400 	.word	0x40004400

080079c0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80079c4:	4b0d      	ldr	r3, [pc, #52]	; (80079fc <MX_USB_PCD_Init+0x3c>)
 80079c6:	4a0e      	ldr	r2, [pc, #56]	; (8007a00 <MX_USB_PCD_Init+0x40>)
 80079c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80079ca:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <MX_USB_PCD_Init+0x3c>)
 80079cc:	2208      	movs	r2, #8
 80079ce:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80079d0:	4b0a      	ldr	r3, [pc, #40]	; (80079fc <MX_USB_PCD_Init+0x3c>)
 80079d2:	2202      	movs	r2, #2
 80079d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80079d6:	4b09      	ldr	r3, [pc, #36]	; (80079fc <MX_USB_PCD_Init+0x3c>)
 80079d8:	2200      	movs	r2, #0
 80079da:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80079dc:	4b07      	ldr	r3, [pc, #28]	; (80079fc <MX_USB_PCD_Init+0x3c>)
 80079de:	2200      	movs	r2, #0
 80079e0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80079e2:	4b06      	ldr	r3, [pc, #24]	; (80079fc <MX_USB_PCD_Init+0x3c>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80079e8:	4804      	ldr	r0, [pc, #16]	; (80079fc <MX_USB_PCD_Init+0x3c>)
 80079ea:	f001 fb5f 	bl	80090ac <HAL_PCD_Init>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80079f4:	f000 f868 	bl	8007ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80079f8:	bf00      	nop
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	200008e0 	.word	0x200008e0
 8007a00:	40005c00 	.word	0x40005c00

08007a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a0a:	f107 0310 	add.w	r3, r7, #16
 8007a0e:	2200      	movs	r2, #0
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	605a      	str	r2, [r3, #4]
 8007a14:	609a      	str	r2, [r3, #8]
 8007a16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a18:	4b28      	ldr	r3, [pc, #160]	; (8007abc <MX_GPIO_Init+0xb8>)
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	4a27      	ldr	r2, [pc, #156]	; (8007abc <MX_GPIO_Init+0xb8>)
 8007a1e:	f043 0320 	orr.w	r3, r3, #32
 8007a22:	6193      	str	r3, [r2, #24]
 8007a24:	4b25      	ldr	r3, [pc, #148]	; (8007abc <MX_GPIO_Init+0xb8>)
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	f003 0320 	and.w	r3, r3, #32
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a30:	4b22      	ldr	r3, [pc, #136]	; (8007abc <MX_GPIO_Init+0xb8>)
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	4a21      	ldr	r2, [pc, #132]	; (8007abc <MX_GPIO_Init+0xb8>)
 8007a36:	f043 0304 	orr.w	r3, r3, #4
 8007a3a:	6193      	str	r3, [r2, #24]
 8007a3c:	4b1f      	ldr	r3, [pc, #124]	; (8007abc <MX_GPIO_Init+0xb8>)
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	60bb      	str	r3, [r7, #8]
 8007a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a48:	4b1c      	ldr	r3, [pc, #112]	; (8007abc <MX_GPIO_Init+0xb8>)
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	4a1b      	ldr	r2, [pc, #108]	; (8007abc <MX_GPIO_Init+0xb8>)
 8007a4e:	f043 0308 	orr.w	r3, r3, #8
 8007a52:	6193      	str	r3, [r2, #24]
 8007a54:	4b19      	ldr	r3, [pc, #100]	; (8007abc <MX_GPIO_Init+0xb8>)
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	f003 0308 	and.w	r3, r3, #8
 8007a5c:	607b      	str	r3, [r7, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 8007a60:	2200      	movs	r2, #0
 8007a62:	f241 717f 	movw	r1, #6015	; 0x177f
 8007a66:	4816      	ldr	r0, [pc, #88]	; (8007ac0 <MX_GPIO_Init+0xbc>)
 8007a68:	f001 fb08 	bl	800907c <HAL_GPIO_WritePin>
                          |CS_FM_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin|MSN_EN3_Pin|MSN_EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MSN_EN4_Pin|MSN_EN2_Pin, GPIO_PIN_RESET);
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8007a72:	4814      	ldr	r0, [pc, #80]	; (8007ac4 <MX_GPIO_Init+0xc0>)
 8007a74:	f001 fb02 	bl	800907c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SS1_Pin SS2_Pin SS3_Pin SS4_Pin
                           CS_FM_Pin DRDY4_Pin DRDY3_Pin DRDY2_Pin
                           DRDY1_Pin MSN_EN3_Pin MSN_EN1_Pin */
  GPIO_InitStruct.Pin = SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 8007a78:	f241 737f 	movw	r3, #6015	; 0x177f
 8007a7c:	613b      	str	r3, [r7, #16]
                          |CS_FM_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin|MSN_EN3_Pin|MSN_EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a86:	2302      	movs	r3, #2
 8007a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a8a:	f107 0310 	add.w	r3, r7, #16
 8007a8e:	4619      	mov	r1, r3
 8007a90:	480b      	ldr	r0, [pc, #44]	; (8007ac0 <MX_GPIO_Init+0xbc>)
 8007a92:	f001 f96f 	bl	8008d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSN_EN4_Pin MSN_EN2_Pin */
  GPIO_InitStruct.Pin = MSN_EN4_Pin|MSN_EN2_Pin;
 8007a96:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8007a9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aa8:	f107 0310 	add.w	r3, r7, #16
 8007aac:	4619      	mov	r1, r3
 8007aae:	4805      	ldr	r0, [pc, #20]	; (8007ac4 <MX_GPIO_Init+0xc0>)
 8007ab0:	f001 f960 	bl	8008d74 <HAL_GPIO_Init>

}
 8007ab4:	bf00      	nop
 8007ab6:	3720      	adds	r7, #32
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	40021000 	.word	0x40021000
 8007ac0:	40010c00 	.word	0x40010c00
 8007ac4:	40010800 	.word	0x40010800

08007ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007acc:	b672      	cpsid	i
}
 8007ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007ad0:	e7fe      	b.n	8007ad0 <Error_Handler+0x8>
	...

08007ad4 <Read_ID>:
	_SELECT_SR1,
	_SELECT_SR2,
	_SELECT_SR3,
};

void Read_ID(SPI_HandleTypeDef *SPI, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t *data) {
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	603b      	str	r3, [r7, #0]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	80fb      	strh	r3, [r7, #6]
	uint8_t cmd = 0x9E;
 8007ae4:	239e      	movs	r3, #158	; 0x9e
 8007ae6:	75fb      	strb	r3, [r7, #23]
//	uint8_t data[20];
	int i;
	HAL_GPIO_WritePin(GPIOx,GPIO_Pin, GPIO_PIN_RESET);
 8007ae8:	88fb      	ldrh	r3, [r7, #6]
 8007aea:	2200      	movs	r2, #0
 8007aec:	4619      	mov	r1, r3
 8007aee:	68b8      	ldr	r0, [r7, #8]
 8007af0:	f001 fac4 	bl	800907c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8007af4:	2064      	movs	r0, #100	; 0x64
 8007af6:	f000 ff93 	bl	8008a20 <HAL_Delay>
	HAL_SPI_Transmit(SPI, &cmd, 1, 300);
 8007afa:	f107 0117 	add.w	r1, r7, #23
 8007afe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007b02:	2201      	movs	r2, #1
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f003 fd93 	bl	800b630 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, data, 20, 1000);
 8007b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b0e:	2214      	movs	r2, #20
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f003 fed0 	bl	800b8b8 <HAL_SPI_Receive>
	HAL_Delay(100);
 8007b18:	2064      	movs	r0, #100	; 0x64
 8007b1a:	f000 ff81 	bl	8008a20 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOx,GPIO_Pin, GPIO_PIN_SET);
 8007b1e:	88fb      	ldrh	r3, [r7, #6]
 8007b20:	2201      	movs	r2, #1
 8007b22:	4619      	mov	r1, r3
 8007b24:	68b8      	ldr	r0, [r7, #8]
 8007b26:	f001 faa9 	bl	800907c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8007b2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b2e:	f000 ff77 	bl	8008a20 <HAL_Delay>
//	buff.EXT_ID = data[4];
//	buff.DEV_INFO = data[5];
//	for (i = 6; i < 20; i++) {
//		buff.UID[i] = data[i];
//	}
	HAL_UART_Transmit(&huart2, data, sizeof(data), 1000);
 8007b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b36:	2204      	movs	r2, #4
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	4807      	ldr	r0, [pc, #28]	; (8007b58 <Read_ID+0x84>)
 8007b3c:	f004 fbdd 	bl	800c2fa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "Data received\n--------------", sizeof("Data received-----------\n"), 1000);
 8007b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b44:	221a      	movs	r2, #26
 8007b46:	4905      	ldr	r1, [pc, #20]	; (8007b5c <Read_ID+0x88>)
 8007b48:	4803      	ldr	r0, [pc, #12]	; (8007b58 <Read_ID+0x84>)
 8007b4a:	f004 fbd6 	bl	800c2fa <HAL_UART_Transmit>

//	*rxData = buff;
	return;
 8007b4e:	bf00      	nop
}
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20000898 	.word	0x20000898
 8007b5c:	0800f6cc 	.word	0x0800f6cc

08007b60 <_nor_cs_assert>:
/* Functions */

static void _nor_cs_assert(nor_t *nor){
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
	nor->config.CsAssert();
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
}
 8007b6e:	bf00      	nop
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <_nor_cs_deassert>:

static void _nor_cs_deassert(nor_t *nor){
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b082      	sub	sp, #8
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
	nor->config.CsDeassert();
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
}
 8007b84:	bf00      	nop
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <_nor_spi_tx>:

static void _nor_spi_tx(nor_t *nor, uint8_t *txBuf, uint32_t size){
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
	nor->config.SpiTxFxn(txBuf, size);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6879      	ldr	r1, [r7, #4]
 8007b9e:	68b8      	ldr	r0, [r7, #8]
 8007ba0:	4798      	blx	r3
}
 8007ba2:	bf00      	nop
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <_nor_spi_rx>:

static void _nor_spi_rx(nor_t *nor, uint8_t *rxBuf, uint32_t size){
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b084      	sub	sp, #16
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	60f8      	str	r0, [r7, #12]
 8007bb2:	60b9      	str	r1, [r7, #8]
 8007bb4:	607a      	str	r2, [r7, #4]
	nor->config.SpiRxFxn(rxBuf, size);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	68b8      	ldr	r0, [r7, #8]
 8007bbe:	4798      	blx	r3
}
 8007bc0:	bf00      	nop
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <_nor_delay_us>:

static void _nor_delay_us(nor_t *nor, uint32_t us){
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
	nor->config.DelayUs(us);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	6838      	ldr	r0, [r7, #0]
 8007bd8:	4798      	blx	r3
}
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <_nor_ReadID>:

static uint32_t _nor_ReadID(nor_t *nor)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
	uint8_t JedecIdCmd = NOR_JEDEC_ID;
 8007bea:	239e      	movs	r3, #158	; 0x9e
 8007bec:	73fb      	strb	r3, [r7, #15]
	uint32_t ID = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60bb      	str	r3, [r7, #8]

	_nor_cs_assert(nor);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7ff ffb4 	bl	8007b60 <_nor_cs_assert>
	_nor_spi_tx(nor, &JedecIdCmd, sizeof(JedecIdCmd));
 8007bf8:	f107 030f 	add.w	r3, r7, #15
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff ffc3 	bl	8007b8c <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&ID, 3);
 8007c06:	f107 0308 	add.w	r3, r7, #8
 8007c0a:	2203      	movs	r2, #3
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff ffcb 	bl	8007baa <_nor_spi_rx>
	_nor_cs_deassert(nor);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7ff ffae 	bl	8007b76 <_nor_cs_deassert>

	return ID;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <_nor_ReadUniqID>:

static uint64_t _nor_ReadUniqID(nor_t *nor)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b088      	sub	sp, #32
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
	uint8_t UniqueIdCmd = NOR_UNIQUE_ID;
 8007c2c:	234b      	movs	r3, #75	; 0x4b
 8007c2e:	77fb      	strb	r3, [r7, #31]
	uint64_t UniqueId = 0;
 8007c30:	f04f 0200 	mov.w	r2, #0
 8007c34:	f04f 0300 	mov.w	r3, #0
 8007c38:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint32_t DummyU32 = (~0UL);
 8007c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c40:	60fb      	str	r3, [r7, #12]

	_nor_cs_assert(nor);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff ff8c 	bl	8007b60 <_nor_cs_assert>
	_nor_spi_tx(nor, &UniqueIdCmd, sizeof(UniqueIdCmd));
 8007c48:	f107 031f 	add.w	r3, r7, #31
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7ff ff9b 	bl	8007b8c <_nor_spi_tx>
	// this if the 4 dummy byte
	_nor_spi_tx(nor, (uint8_t*)&DummyU32, 4);
 8007c56:	f107 030c 	add.w	r3, r7, #12
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff ff94 	bl	8007b8c <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&UniqueId, sizeof(UniqueId));
 8007c64:	f107 0310 	add.w	r3, r7, #16
 8007c68:	2208      	movs	r2, #8
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff ff9c 	bl	8007baa <_nor_spi_rx>
	_nor_cs_deassert(nor);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff ff7f 	bl	8007b76 <_nor_cs_deassert>

	return UniqueId;
 8007c78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4619      	mov	r1, r3
 8007c80:	3720      	adds	r7, #32
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <_nor_WriteEnable>:

static void _nor_WriteEnable(nor_t *nor)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
	uint8_t WriteEnCmd = NOR_CMD_WRITE_EN;
 8007c8e:	2306      	movs	r3, #6
 8007c90:	73fb      	strb	r3, [r7, #15]

	_nor_cs_assert(nor);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7ff ff64 	bl	8007b60 <_nor_cs_assert>
	_nor_spi_tx(nor, &WriteEnCmd, sizeof(WriteEnCmd));
 8007c98:	f107 030f 	add.w	r3, r7, #15
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff ff73 	bl	8007b8c <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff ff65 	bl	8007b76 <_nor_cs_deassert>
	// TODO Check if a delay was needed here
}
 8007cac:	bf00      	nop
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <_nor_ReadStatusRegister>:
	_nor_spi_tx(nor, &WriteDisCmd, sizeof(WriteDisCmd));
	_nor_cs_deassert(nor);
}

uint8_t _nor_ReadStatusRegister(nor_t *nor, enum _nor_sr_select_e SelectSR)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0, ReadSRCmd;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	72fb      	strb	r3, [r7, #11]
	uint8_t *SrUpdateHandler;

	switch (SelectSR){
 8007cc4:	78fb      	ldrb	r3, [r7, #3]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d012      	beq.n	8007cf0 <_nor_ReadStatusRegister+0x3c>
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	dc16      	bgt.n	8007cfc <_nor_ReadStatusRegister+0x48>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <_nor_ReadStatusRegister+0x24>
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d006      	beq.n	8007ce4 <_nor_ReadStatusRegister+0x30>
 8007cd6:	e011      	b.n	8007cfc <_nor_ReadStatusRegister+0x48>
	case _SELECT_SR1:
		ReadSRCmd = NOR_READ_SR1;
 8007cd8:	2305      	movs	r3, #5
 8007cda:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	3342      	adds	r3, #66	; 0x42
 8007ce0:	60fb      	str	r3, [r7, #12]
		break;
 8007ce2:	e00d      	b.n	8007d00 <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR2:
		ReadSRCmd = NOR_READ_SR2;
 8007ce4:	2370      	movs	r3, #112	; 0x70
 8007ce6:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3342      	adds	r3, #66	; 0x42
 8007cec:	60fb      	str	r3, [r7, #12]
		break;
 8007cee:	e007      	b.n	8007d00 <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR3:
		ReadSRCmd = NOR_READ_SR3;
 8007cf0:	2315      	movs	r3, #21
 8007cf2:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3342      	adds	r3, #66	; 0x42
 8007cf8:	60fb      	str	r3, [r7, #12]
		break;
 8007cfa:	e001      	b.n	8007d00 <_nor_ReadStatusRegister+0x4c>
	default:
		return 0xFF;
 8007cfc:	23ff      	movs	r3, #255	; 0xff
 8007cfe:	e017      	b.n	8007d30 <_nor_ReadStatusRegister+0x7c>
	}
	_nor_cs_assert(nor);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff ff2d 	bl	8007b60 <_nor_cs_assert>
	_nor_spi_tx(nor, &ReadSRCmd, sizeof(ReadSRCmd));
 8007d06:	f107 030a 	add.w	r3, r7, #10
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff ff3c 	bl	8007b8c <_nor_spi_tx>
	_nor_spi_rx(nor, &status, sizeof(status));
 8007d14:	f107 030b 	add.w	r3, r7, #11
 8007d18:	2201      	movs	r2, #1
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff ff44 	bl	8007baa <_nor_spi_rx>
	_nor_cs_deassert(nor);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff ff27 	bl	8007b76 <_nor_cs_deassert>

	*SrUpdateHandler = status;
 8007d28:	7afa      	ldrb	r2, [r7, #11]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	701a      	strb	r2, [r3, #0]

	return status;
 8007d2e:	7afb      	ldrb	r3, [r7, #11]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <_nor_WaitForWriteEnd>:
	_nor_spi_tx(nor, WriteSR, sizeof(WriteSR));
	_nor_cs_deassert(nor);
}

nor_err_e _nor_WaitForWriteEnd(nor_t *nor, uint32_t msTimeout)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
	uint8_t ReadSr1Cmd = NOR_READ_SR1;
 8007d42:	2305      	movs	r3, #5
 8007d44:	73fb      	strb	r3, [r7, #15]

	// multply timeout for 10, we must run a delay of 100us on each iteraction
	msTimeout *= 10;
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	005b      	lsls	r3, r3, #1
 8007d50:	603b      	str	r3, [r7, #0]
	_nor_cs_assert(nor);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff ff04 	bl	8007b60 <_nor_cs_assert>
	_nor_spi_tx(nor, (uint8_t*)&ReadSr1Cmd, sizeof(ReadSr1Cmd));
 8007d58:	f107 030f 	add.w	r3, r7, #15
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff ff13 	bl	8007b8c <_nor_spi_tx>
	do{
		_nor_spi_rx(nor, &nor->_internal.u8StatusReg1, sizeof(uint8_t));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3342      	adds	r3, #66	; 0x42
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7ff ff1b 	bl	8007baa <_nor_spi_rx>
		_nor_delay_us(nor, 100);
 8007d74:	2164      	movs	r1, #100	; 0x64
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7ff ff26 	bl	8007bc8 <_nor_delay_us>
		msTimeout -= 100;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	3b64      	subs	r3, #100	; 0x64
 8007d80:	603b      	str	r3, [r7, #0]
	}while ((nor->_internal.u8StatusReg1 & SR1_BUSY_BIT) && (msTimeout > 0));
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <_nor_WaitForWriteEnd+0x5e>
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e7      	bne.n	8007d66 <_nor_WaitForWriteEnd+0x2e>
	_nor_cs_deassert(nor);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7ff feed 	bl	8007b76 <_nor_cs_deassert>

	if (msTimeout == 0){
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <_nor_WaitForWriteEnd+0x6e>
		return NOR_FAIL;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e000      	b.n	8007da8 <_nor_WaitForWriteEnd+0x70>
	}
	return NOR_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <NOR_Init>:

/*
 * Publics
 */

nor_err_e NOR_Init(nor_t *nor){
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
	uint8_t ExitPDCmd = NOR_RELEASE_PD;
 8007db8:	23ab      	movs	r3, #171	; 0xab
 8007dba:	73fb      	strb	r3, [r7, #15]

	if (nor == NULL || nor->config.CsAssert == NULL ||
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d013      	beq.n	8007dea <NOR_Init+0x3a>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00f      	beq.n	8007dea <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68db      	ldr	r3, [r3, #12]
	if (nor == NULL || nor->config.CsAssert == NULL ||
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00b      	beq.n	8007dea <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d007      	beq.n	8007dea <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <NOR_Init+0x3e>
		NOR_PRINTF("ERROR: Invalid Parameters on %s function\n", __func__);
		return NOR_INVALID_PARAMS;
 8007dea:	2302      	movs	r3, #2
 8007dec:	e09a      	b.n	8007f24 <NOR_Init+0x174>
	}
	if (nor->_internal.u16Initialized == NOR_INITIALIZED_FLAG){
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007df4:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d101      	bne.n	8007e00 <NOR_Init+0x50>
		// the flash instance is already initialized
		NOR_PRINTF("Warning: Flash is already initialized.\n");
		return NOR_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	e091      	b.n	8007f24 <NOR_Init+0x174>
	}
	// we must have sure that the NOR has your CS pin deasserted
	_nor_cs_deassert(nor);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7ff feb8 	bl	8007b76 <_nor_cs_deassert>
	_nor_delay_us(nor, 100);
 8007e06:	2164      	movs	r1, #100	; 0x64
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff fedd 	bl	8007bc8 <_nor_delay_us>

	// we are assuming, on startup, that the Flash is on Power Down State
	nor->_internal.u8PdCount = 0;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	nor->pdState = NOR_IN_IDLE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	_nor_cs_assert(nor);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7ff fe9e 	bl	8007b60 <_nor_cs_assert>
	_nor_spi_tx(nor, &ExitPDCmd, sizeof(ExitPDCmd));
 8007e24:	f107 030f 	add.w	r3, r7, #15
 8007e28:	2201      	movs	r2, #1
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff fead 	bl	8007b8c <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7ff fe9f 	bl	8007b76 <_nor_cs_deassert>

	nor->info.u32JedecID = _nor_ReadID(nor);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff fed2 	bl	8007be2 <_nor_ReadID>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	621a      	str	r2, [r3, #32]
	if (nor->info.u32JedecID == 0x000000 || nor->info.u32JedecID == 0xFFFFFF){
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <NOR_Init+0xa8>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d101      	bne.n	8007e5c <NOR_Init+0xac>
		// invalid Id, I thing we don't has any flash on SPI
		NOR_PRINTF("ERROR: Flash memory bus fault.\n");
		return NOR_NO_MEMORY_FOUND;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e063      	b.n	8007f24 <NOR_Init+0x174>
	}
	nor->Manufacturer = NOR_IDS_Interpret_Manufacturer(nor->info.u32JedecID);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 fa2f 	bl	80082c4 <NOR_IDS_Interpret_Manufacturer>
 8007e66:	4603      	mov	r3, r0
 8007e68:	461a      	mov	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	nor->Model = NOR_IDS_Interpret_Model(nor->info.u32JedecID);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 fa30 	bl	80082da <NOR_IDS_Interpret_Model>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	if (nor->Model == NOR_MODEL_UNKNOWN){
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d101      	bne.n	8007e96 <NOR_Init+0xe6>
		NOR_PRINTF("ERROR: The flash memory model wasn't reconignized.\n"
				"You can, yet, start with NOR_Init_wo_ID to ignore the Flash ID.");
		return NOR_UNKNOWN_DEVICE;
 8007e92:	2304      	movs	r3, #4
 8007e94:	e046      	b.n	8007f24 <NOR_Init+0x174>
	}

	nor->info.u64UniqueId = _nor_ReadUniqID(nor);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7ff fec4 	bl	8007c24 <_nor_ReadUniqID>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	nor->info.u32BlockCount = NOR_IDS_GetQtdBlocks(nor->info.u32JedecID);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fa39 	bl	8008322 <NOR_IDS_GetQtdBlocks>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	63da      	str	r2, [r3, #60]	; 0x3c

	nor->info.u16PageSize = NOR_PAGE_SIZE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ebc:	851a      	strh	r2, [r3, #40]	; 0x28
	nor->info.u16SectorSize = NOR_SECTOR_SIZE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ec4:	861a      	strh	r2, [r3, #48]	; 0x30
	nor->info.u32BlockSize = NOR_BLOCK_SIZE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007ecc:	639a      	str	r2, [r3, #56]	; 0x38
	nor->info.u32SectorCount = nor->info.u32BlockCount * (NOR_BLOCK_SIZE / NOR_SECTOR_SIZE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed2:	011a      	lsls	r2, r3, #4
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	635a      	str	r2, [r3, #52]	; 0x34
	nor->info.u32PageCount = (nor->info.u32SectorCount * nor->info.u16SectorSize) / nor->info.u16PageSize;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8007ee0:	fb02 f303 	mul.w	r3, r2, r3
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007ee8:	fbb3 f2f2 	udiv	r2, r3, r2
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	62da      	str	r2, [r3, #44]	; 0x2c
	nor->info.u32Size = (nor->info.u32SectorCount * nor->info.u16SectorSize);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8007ef8:	fb02 f203 	mul.w	r2, r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	625a      	str	r2, [r3, #36]	; 0x24

	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8007f00:	2100      	movs	r1, #0
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7ff fed6 	bl	8007cb4 <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8007f08:	2100      	movs	r1, #0
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff fed2 	bl	8007cb4 <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 8007f10:	2100      	movs	r1, #0
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7ff fece 	bl	8007cb4 <_nor_ReadStatusRegister>

	nor->_internal.u16Initialized = NOR_INITIALIZED_FLAG;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007f1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	NOR_PRINTF(" Sector Count | %d Sectors\n", (uint)nor->info.u32SectorCount);
	NOR_PRINTF(" Block Count  | %d Blocks\n", (uint)nor->info.u32BlockCount);
	NOR_PRINTF(" Capacity     | %d %d KB\n", nor->info.u32Size,(uint)(nor->info.u32Size/1024));
	NOR_PRINTF(" == NOR Initialization Done ==\n");

	return NOR_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <NOR_EraseAddress>:
	}
	NOR_PRINTF("Done!\n");
	return err;
}

nor_err_e NOR_EraseAddress(nor_t *nor, uint32_t Address, nor_erase_method_e method){
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b088      	sub	sp, #32
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	4613      	mov	r3, r2
 8007f38:	71fb      	strb	r3, [r7, #7]
	uint8_t EraseChipCmd[4];
	uint32_t expectedTimeoutUs;
	nor_err_e err;

	_SANITY_CHECK(nor);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <NOR_EraseAddress+0x18>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e043      	b.n	8007fcc <NOR_EraseAddress+0xa0>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f4a:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d001      	beq.n	8007f56 <NOR_EraseAddress+0x2a>
 8007f52:	2306      	movs	r3, #6
 8007f54:	e03a      	b.n	8007fcc <NOR_EraseAddress+0xa0>

	switch (method){
 8007f56:	79fb      	ldrb	r3, [r7, #7]
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d010      	beq.n	8007f7e <NOR_EraseAddress+0x52>
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	dc13      	bgt.n	8007f88 <NOR_EraseAddress+0x5c>
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <NOR_EraseAddress+0x3e>
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d005      	beq.n	8007f74 <NOR_EraseAddress+0x48>
 8007f68:	e00e      	b.n	8007f88 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_4K:
		NOR_PRINTF("Erasing 4K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_4K;
 8007f6a:	2320      	movs	r3, #32
 8007f6c:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_4K_ERASE_TIME;
 8007f6e:	4b19      	ldr	r3, [pc, #100]	; (8007fd4 <NOR_EraseAddress+0xa8>)
 8007f70:	61fb      	str	r3, [r7, #28]
		break;
 8007f72:	e009      	b.n	8007f88 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_32K:
		NOR_PRINTF("Erasing 32K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_32K;
 8007f74:	2352      	movs	r3, #82	; 0x52
 8007f76:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_32K_ERASE_TIME;
 8007f78:	4b17      	ldr	r3, [pc, #92]	; (8007fd8 <NOR_EraseAddress+0xac>)
 8007f7a:	61fb      	str	r3, [r7, #28]
		break;
 8007f7c:	e004      	b.n	8007f88 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_64K:
		NOR_PRINTF("Erasing 64K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_64K;
 8007f7e:	23d8      	movs	r3, #216	; 0xd8
 8007f80:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_64K_ERASE_TIME;
 8007f82:	4b16      	ldr	r3, [pc, #88]	; (8007fdc <NOR_EraseAddress+0xb0>)
 8007f84:	61fb      	str	r3, [r7, #28]
		break;
 8007f86:	bf00      	nop
	}
	EraseChipCmd[1] = ((Address >> 16) & 0xFF);
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	0c1b      	lsrs	r3, r3, #16
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	757b      	strb	r3, [r7, #21]
	EraseChipCmd[2] = ((Address >> 8) & 0xFF);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	0a1b      	lsrs	r3, r3, #8
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	75bb      	strb	r3, [r7, #22]
	EraseChipCmd[3] = ((Address) & 0xFF);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	75fb      	strb	r3, [r7, #23]

	_nor_WriteEnable(nor);
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f7ff fe71 	bl	8007c86 <_nor_WriteEnable>
	_nor_cs_assert(nor);
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f7ff fddb 	bl	8007b60 <_nor_cs_assert>
	_nor_spi_tx(nor, EraseChipCmd, sizeof(EraseChipCmd));
 8007faa:	f107 0314 	add.w	r3, r7, #20
 8007fae:	2204      	movs	r2, #4
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f7ff fdea 	bl	8007b8c <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f7ff fddc 	bl	8007b76 <_nor_cs_deassert>
	err = _nor_WaitForWriteEnd(nor, expectedTimeoutUs);
 8007fbe:	69f9      	ldr	r1, [r7, #28]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f7ff feb9 	bl	8007d38 <_nor_WaitForWriteEnd>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	76fb      	strb	r3, [r7, #27]
	if (err != NOR_OK){
		NOR_PRINTF("ERROR: Failed to erase flash\n");
	}
	NOR_PRINTF("Done!\n");

	return err;
 8007fca:	7efb      	ldrb	r3, [r7, #27]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3720      	adds	r7, #32
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	00061a80 	.word	0x00061a80
 8007fd8:	00186a00 	.word	0x00186a00
 8007fdc:	001e8480 	.word	0x001e8480

08007fe0 <NOR_EraseSector>:

nor_err_e NOR_EraseSector(nor_t *nor, uint32_t SectorAddr){
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <NOR_EraseSector+0x14>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	e015      	b.n	8008020 <NOR_EraseSector+0x40>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007ffa:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d001      	beq.n	8008006 <NOR_EraseSector+0x26>
 8008002:	2306      	movs	r3, #6
 8008004:	e00c      	b.n	8008020 <NOR_EraseSector+0x40>

	Address = SectorAddr * nor->info.u16SectorSize;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800800a:	461a      	mov	r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	fb02 f303 	mul.w	r3, r2, r3
 8008012:	60fb      	str	r3, [r7, #12]
	return NOR_EraseAddress(nor, Address, NOR_ERASE_4K);
 8008014:	2200      	movs	r2, #0
 8008016:	68f9      	ldr	r1, [r7, #12]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7ff ff87 	bl	8007f2c <NOR_EraseAddress>
 800801e:	4603      	mov	r3, r0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <NOR_WriteBytes>:

	ActAddress = (nor->info.u32BlockSize * BlockAddr) + Offset;
	return NOR_IsEmptyAddress(nor, ActAddress, NumBytesToCheck);
}

nor_err_e NOR_WriteBytes(nor_t *nor, uint8_t *pBuffer, uint32_t WriteAddr, uint32_t NumBytesToWrite){
 8008028:	b580      	push	{r7, lr}
 800802a:	b088      	sub	sp, #32
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
	uint8_t WriteCmd[4];
	uint32_t _BytesToWrite;

	_SANITY_CHECK(nor);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <NOR_WriteBytes+0x18>
 800803c:	2302      	movs	r3, #2
 800803e:	e05f      	b.n	8008100 <NOR_WriteBytes+0xd8>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008046:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 800804a:	4293      	cmp	r3, r2
 800804c:	d001      	beq.n	8008052 <NOR_WriteBytes+0x2a>
 800804e:	2306      	movs	r3, #6
 8008050:	e056      	b.n	8008100 <NOR_WriteBytes+0xd8>

	if (NumBytesToWrite == 0){
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <NOR_WriteBytes+0x34>
		NOR_PRINTF("ERROR: Invalid parameters on NOR_WriteBytes\n");
		return NOR_INVALID_PARAMS;
 8008058:	2302      	movs	r3, #2
 800805a:	e051      	b.n	8008100 <NOR_WriteBytes+0xd8>
	}
	// TODO check if Address is not grater than the Flash size
	NOR_PRINTF("Writing %d bytes into Address %08X.\n", (uint)NumBytesToWrite, (uint)WriteAddr);
	NOR_PRINTF("Buffer to Write into Flash:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < NumBytesToWrite; i++)
 800805c:	2300      	movs	r3, #0
 800805e:	61bb      	str	r3, [r7, #24]
 8008060:	e002      	b.n	8008068 <NOR_WriteBytes+0x40>
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	3301      	adds	r3, #1
 8008066:	61bb      	str	r3, [r7, #24]
 8008068:	69ba      	ldr	r2, [r7, #24]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	429a      	cmp	r2, r3
 800806e:	d3f8      	bcc.n	8008062 <NOR_WriteBytes+0x3a>
		}
		NOR_PRINTF("%02X ", pBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	do{
		if (((WriteAddr%nor->info.u16PageSize)+NumBytesToWrite) > nor->info.u16PageSize){
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008074:	461a      	mov	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	fbb3 f1f2 	udiv	r1, r3, r2
 800807c:	fb02 f201 	mul.w	r2, r2, r1
 8008080:	1a9a      	subs	r2, r3, r2
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	4413      	add	r3, r2
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800808a:	4293      	cmp	r3, r2
 800808c:	d903      	bls.n	8008096 <NOR_WriteBytes+0x6e>
			_BytesToWrite = nor->info.u16PageSize;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008092:	61fb      	str	r3, [r7, #28]
 8008094:	e001      	b.n	800809a <NOR_WriteBytes+0x72>
		}
		else{
			_BytesToWrite = NumBytesToWrite;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	61fb      	str	r3, [r7, #28]
		}
		_nor_WriteEnable(nor);
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f7ff fdf3 	bl	8007c86 <_nor_WriteEnable>
		WriteCmd[0] = NOR_PAGE_PROGRAM;
 80080a0:	2302      	movs	r3, #2
 80080a2:	753b      	strb	r3, [r7, #20]
		WriteCmd[1] = ((WriteAddr >> 16) & 0xFF);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	0c1b      	lsrs	r3, r3, #16
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	757b      	strb	r3, [r7, #21]
		WriteCmd[2] = ((WriteAddr >> 8) & 0xFF);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	0a1b      	lsrs	r3, r3, #8
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	75bb      	strb	r3, [r7, #22]
		WriteCmd[3] = ((WriteAddr) & 0xFF);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	75fb      	strb	r3, [r7, #23]
		_nor_cs_assert(nor);
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff fd50 	bl	8007b60 <_nor_cs_assert>
		_nor_spi_tx(nor, WriteCmd, sizeof(WriteCmd));
 80080c0:	f107 0314 	add.w	r3, r7, #20
 80080c4:	2204      	movs	r2, #4
 80080c6:	4619      	mov	r1, r3
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f7ff fd5f 	bl	8007b8c <_nor_spi_tx>
		_nor_spi_tx(nor, pBuffer, _BytesToWrite);
 80080ce:	69fa      	ldr	r2, [r7, #28]
 80080d0:	68b9      	ldr	r1, [r7, #8]
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f7ff fd5a 	bl	8007b8c <_nor_spi_tx>
		_nor_cs_deassert(nor);
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f7ff fd4c 	bl	8007b76 <_nor_cs_deassert>
		_nor_WaitForWriteEnd(nor, NOR_EXPECT_PAGE_PROG_TIME);
 80080de:	f242 7110 	movw	r1, #10000	; 0x2710
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7ff fe28 	bl	8007d38 <_nor_WaitForWriteEnd>
		pBuffer += _BytesToWrite;
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	4413      	add	r3, r2
 80080ee:	60bb      	str	r3, [r7, #8]
		NumBytesToWrite -= _BytesToWrite;
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	603b      	str	r3, [r7, #0]
	}while (NumBytesToWrite > 0);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1b8      	bne.n	8008070 <NOR_WriteBytes+0x48>
	NOR_PRINTF("Write done.!\n");

	return NOR_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3720      	adds	r7, #32
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <NOR_WriteSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_WriteSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumBytesToWrite){
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <NOR_WriteSector+0x18>
 800811c:	2302      	movs	r3, #2
 800811e:	e027      	b.n	8008170 <NOR_WriteSector+0x68>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008126:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 800812a:	4293      	cmp	r3, r2
 800812c:	d00a      	beq.n	8008144 <NOR_WriteSector+0x3c>
 800812e:	2306      	movs	r3, #6
 8008130:	e01e      	b.n	8008170 <NOR_WriteSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3301      	adds	r3, #1
 8008136:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800813c:	461a      	mov	r2, r3
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	1a9b      	subs	r3, r3, r2
 8008142:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008148:	461a      	mov	r2, r3
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	4293      	cmp	r3, r2
 800814e:	d2f0      	bcs.n	8008132 <NOR_WriteSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008154:	461a      	mov	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	fb03 f302 	mul.w	r3, r3, r2
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	4413      	add	r3, r2
 8008160:	617b      	str	r3, [r7, #20]
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	68b9      	ldr	r1, [r7, #8]
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff ff5d 	bl	8008028 <NOR_WriteBytes>
 800816e:	4603      	mov	r3, r0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <NOR_ReadBytes>:

	Address = (BlockAddr * nor->info.u32BlockSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_ReadBytes(nor_t *nor, uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead){
 8008178:	b580      	push	{r7, lr}
 800817a:	b08a      	sub	sp, #40	; 0x28
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
	uint8_t ReadCmd[5];
	uint32_t _BytesToRead;
	uint8_t *originalBuffer;
	uint32_t originalNumBytes;

	_SANITY_CHECK(nor);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <NOR_ReadBytes+0x18>
 800818c:	2302      	movs	r3, #2
 800818e:	e05d      	b.n	800824c <NOR_ReadBytes+0xd4>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008196:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 800819a:	4293      	cmp	r3, r2
 800819c:	d001      	beq.n	80081a2 <NOR_ReadBytes+0x2a>
 800819e:	2306      	movs	r3, #6
 80081a0:	e054      	b.n	800824c <NOR_ReadBytes+0xd4>

	if (NumByteToRead == 0){
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <NOR_ReadBytes+0x34>
		return NOR_INVALID_PARAMS;
 80081a8:	2302      	movs	r3, #2
 80081aa:	e04f      	b.n	800824c <NOR_ReadBytes+0xd4>
	}
	// TODO check if Address is not grater than the Flash size

	originalBuffer = pBuffer;
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	61fb      	str	r3, [r7, #28]
	originalNumBytes = NumByteToRead;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	61bb      	str	r3, [r7, #24]
	NOR_PRINTF("Reading %d bytes on the Address %08X.\n", (uint)NumByteToRead, (uint)ReadAddr);
	do{
		if (((ReadAddr%nor->info.u16PageSize)+NumByteToRead) > nor->info.u16PageSize){
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b8:	461a      	mov	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80081c0:	fb02 f201 	mul.w	r2, r2, r1
 80081c4:	1a9a      	subs	r2, r3, r2
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	4413      	add	r3, r2
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d903      	bls.n	80081da <NOR_ReadBytes+0x62>
			_BytesToRead = nor->info.u16PageSize;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081d6:	627b      	str	r3, [r7, #36]	; 0x24
 80081d8:	e001      	b.n	80081de <NOR_ReadBytes+0x66>
		}
		else{
			_BytesToRead = NumByteToRead;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		ReadCmd[0] = NOR_READ_FAST_DATA;
 80081de:	230b      	movs	r3, #11
 80081e0:	743b      	strb	r3, [r7, #16]
		ReadCmd[1] = ((ReadAddr >> 16) & 0xFF);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	0c1b      	lsrs	r3, r3, #16
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	747b      	strb	r3, [r7, #17]
		ReadCmd[2] = ((ReadAddr >> 8) & 0xFF);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	0a1b      	lsrs	r3, r3, #8
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	74bb      	strb	r3, [r7, #18]
		ReadCmd[3] = ((ReadAddr) & 0xFF);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	74fb      	strb	r3, [r7, #19]
		ReadCmd[4] = 0x00;
 80081f8:	2300      	movs	r3, #0
 80081fa:	753b      	strb	r3, [r7, #20]
		_nor_cs_assert(nor);
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f7ff fcaf 	bl	8007b60 <_nor_cs_assert>
		_nor_spi_tx(nor, ReadCmd, sizeof(ReadCmd));
 8008202:	f107 0310 	add.w	r3, r7, #16
 8008206:	2205      	movs	r2, #5
 8008208:	4619      	mov	r1, r3
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7ff fcbe 	bl	8007b8c <_nor_spi_tx>
		_nor_spi_rx(nor, pBuffer, _BytesToRead);
 8008210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008212:	68b9      	ldr	r1, [r7, #8]
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f7ff fcc8 	bl	8007baa <_nor_spi_rx>
		_nor_cs_deassert(nor);
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f7ff fcab 	bl	8007b76 <_nor_cs_deassert>
		pBuffer += _BytesToRead;
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	4413      	add	r3, r2
 8008226:	60bb      	str	r3, [r7, #8]
		NumByteToRead -= _BytesToRead;
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	603b      	str	r3, [r7, #0]
	}while(NumByteToRead > 0);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1be      	bne.n	80081b4 <NOR_ReadBytes+0x3c>

	NOR_PRINTF("Buffer readed from NOR:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < originalNumBytes; i++)
 8008236:	2300      	movs	r3, #0
 8008238:	623b      	str	r3, [r7, #32]
 800823a:	e002      	b.n	8008242 <NOR_ReadBytes+0xca>
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	3301      	adds	r3, #1
 8008240:	623b      	str	r3, [r7, #32]
 8008242:	6a3a      	ldr	r2, [r7, #32]
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	429a      	cmp	r2, r3
 8008248:	d3f8      	bcc.n	800823c <NOR_ReadBytes+0xc4>
		NOR_PRINTF("%02X ", originalBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	NOR_PRINTF("mt25qxx ReadBytes done.\n");

	return NOR_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3728      	adds	r7, #40	; 0x28
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <NOR_ReadSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
}

nor_err_e NOR_ReadSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumByteToRead){
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <NOR_ReadSector+0x18>
 8008268:	2302      	movs	r3, #2
 800826a:	e027      	b.n	80082bc <NOR_ReadSector+0x68>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008272:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8008276:	4293      	cmp	r3, r2
 8008278:	d00a      	beq.n	8008290 <NOR_ReadSector+0x3c>
 800827a:	2306      	movs	r3, #6
 800827c:	e01e      	b.n	80082bc <NOR_ReadSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3301      	adds	r3, #1
 8008282:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008288:	461a      	mov	r2, r3
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	1a9b      	subs	r3, r3, r2
 800828e:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008294:	461a      	mov	r2, r3
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	4293      	cmp	r3, r2
 800829a:	d2f0      	bcs.n	800827e <NOR_ReadSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80082a0:	461a      	mov	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	fb03 f302 	mul.w	r3, r3, r2
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	4413      	add	r3, r2
 80082ac:	617b      	str	r3, [r7, #20]
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	68b9      	ldr	r1, [r7, #8]
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f7ff ff5f 	bl	8008178 <NOR_ReadBytes>
 80082ba:	4603      	mov	r3, r0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <NOR_IDS_Interpret_Manufacturer>:
 *      Author: Sangam
 */

#include "nor_ids.h"

nor_manuf_e NOR_IDS_Interpret_Manufacturer (uint32_t JedecID){
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
	return (nor_manuf_e)(JedecID & 0xFF);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	b2db      	uxtb	r3, r3
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bc80      	pop	{r7}
 80082d8:	4770      	bx	lr

080082da <NOR_IDS_Interpret_Model>:

nor_model_e NOR_IDS_Interpret_Model (uint32_t JedecID){
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7ff ffee 	bl	80082c4 <NOR_IDS_Interpret_Manufacturer>
 80082e8:	4603      	mov	r3, r0
 80082ea:	73fb      	strb	r3, [r7, #15]

	switch (Manuf){
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	2bef      	cmp	r3, #239	; 0xef
 80082f0:	d00e      	beq.n	8008310 <NOR_IDS_Interpret_Model+0x36>
 80082f2:	2bef      	cmp	r3, #239	; 0xef
 80082f4:	dc03      	bgt.n	80082fe <NOR_IDS_Interpret_Model+0x24>
 80082f6:	2b20      	cmp	r3, #32
 80082f8:	d00e      	beq.n	8008318 <NOR_IDS_Interpret_Model+0x3e>
 80082fa:	2bc2      	cmp	r3, #194	; 0xc2
 80082fc:	d002      	beq.n	8008304 <NOR_IDS_Interpret_Model+0x2a>
	case	MANUF_PUYA:
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	default:
		return NOR_MODEL_UNKNOWN;
 80082fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008302:	e00a      	b.n	800831a <NOR_IDS_Interpret_Model+0x40>
	case 	MANUF_MXIC:
		return ((JedecID >> 16) & 0xFF);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	0c1b      	lsrs	r3, r3, #16
 8008308:	b29b      	uxth	r3, r3
 800830a:	b2db      	uxtb	r3, r3
 800830c:	b29b      	uxth	r3, r3
 800830e:	e004      	b.n	800831a <NOR_IDS_Interpret_Model+0x40>
		break;
	case	MANUF_WINBOND:
		return ((JedecID >> 8) & 0xFFFF);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	0a1b      	lsrs	r3, r3, #8
 8008314:	b29b      	uxth	r3, r3
 8008316:	e000      	b.n	800831a <NOR_IDS_Interpret_Model+0x40>
		break;

	case    MANUF_MT25QL: return MANUF_MT25QL; break;
 8008318:	2320      	movs	r3, #32
	}
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <NOR_IDS_GetQtdBlocks>:

uint32_t NOR_IDS_GetQtdBlocks(uint32_t JedecID){
 8008322:	b580      	push	{r7, lr}
 8008324:	b086      	sub	sp, #24
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7ff ffca 	bl	80082c4 <NOR_IDS_Interpret_Manufacturer>
 8008330:	4603      	mov	r3, r0
 8008332:	73fb      	strb	r3, [r7, #15]
	uint8_t density, i;
	uint32_t blocks;

	switch (Manuf){
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	2bef      	cmp	r3, #239	; 0xef
 8008338:	d008      	beq.n	800834c <NOR_IDS_GetQtdBlocks+0x2a>
 800833a:	2bef      	cmp	r3, #239	; 0xef
 800833c:	dc03      	bgt.n	8008346 <NOR_IDS_GetQtdBlocks+0x24>
 800833e:	2b85      	cmp	r3, #133	; 0x85
 8008340:	d004      	beq.n	800834c <NOR_IDS_GetQtdBlocks+0x2a>
 8008342:	2bc2      	cmp	r3, #194	; 0xc2
 8008344:	d002      	beq.n	800834c <NOR_IDS_GetQtdBlocks+0x2a>
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	default:
		blocks = 0;
 8008346:	2300      	movs	r3, #0
 8008348:	613b      	str	r3, [r7, #16]
		break;
 800834a:	e015      	b.n	8008378 <NOR_IDS_GetQtdBlocks+0x56>
	case	MANUF_PUYA:
	case 	MANUF_MXIC:
	case	MANUF_WINBOND:
		density = ((JedecID >> 16) & 0xFF);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	0c1b      	lsrs	r3, r3, #16
 8008350:	73bb      	strb	r3, [r7, #14]
		density -= 0x11;
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	3b11      	subs	r3, #17
 8008356:	73bb      	strb	r3, [r7, #14]
		blocks = 2;
 8008358:	2302      	movs	r3, #2
 800835a:	613b      	str	r3, [r7, #16]
		// yes, I'm doing this only to prevent the use of math lib
		for (i=0 ; i<density ; i++){
 800835c:	2300      	movs	r3, #0
 800835e:	75fb      	strb	r3, [r7, #23]
 8008360:	e005      	b.n	800836e <NOR_IDS_GetQtdBlocks+0x4c>
			blocks *= 2;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	613b      	str	r3, [r7, #16]
		for (i=0 ; i<density ; i++){
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	3301      	adds	r3, #1
 800836c:	75fb      	strb	r3, [r7, #23]
 800836e:	7dfa      	ldrb	r2, [r7, #23]
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	429a      	cmp	r2, r3
 8008374:	d3f5      	bcc.n	8008362 <NOR_IDS_GetQtdBlocks+0x40>
		}
		break;
 8008376:	bf00      	nop
	}

	return blocks;
 8008378:	693b      	ldr	r3, [r7, #16]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800838a:	4b15      	ldr	r3, [pc, #84]	; (80083e0 <HAL_MspInit+0x5c>)
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	4a14      	ldr	r2, [pc, #80]	; (80083e0 <HAL_MspInit+0x5c>)
 8008390:	f043 0301 	orr.w	r3, r3, #1
 8008394:	6193      	str	r3, [r2, #24]
 8008396:	4b12      	ldr	r3, [pc, #72]	; (80083e0 <HAL_MspInit+0x5c>)
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	60bb      	str	r3, [r7, #8]
 80083a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80083a2:	4b0f      	ldr	r3, [pc, #60]	; (80083e0 <HAL_MspInit+0x5c>)
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	4a0e      	ldr	r2, [pc, #56]	; (80083e0 <HAL_MspInit+0x5c>)
 80083a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ac:	61d3      	str	r3, [r2, #28]
 80083ae:	4b0c      	ldr	r3, [pc, #48]	; (80083e0 <HAL_MspInit+0x5c>)
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083b6:	607b      	str	r3, [r7, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80083ba:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <HAL_MspInit+0x60>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	4a04      	ldr	r2, [pc, #16]	; (80083e4 <HAL_MspInit+0x60>)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083d6:	bf00      	nop
 80083d8:	3714      	adds	r7, #20
 80083da:	46bd      	mov	sp, r7
 80083dc:	bc80      	pop	{r7}
 80083de:	4770      	bx	lr
 80083e0:	40021000 	.word	0x40021000
 80083e4:	40010000 	.word	0x40010000

080083e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a0f      	ldr	r2, [pc, #60]	; (8008434 <HAL_RTC_MspInit+0x4c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d118      	bne.n	800842c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80083fa:	f002 f9bd 	bl	800a778 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80083fe:	4b0e      	ldr	r3, [pc, #56]	; (8008438 <HAL_RTC_MspInit+0x50>)
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	4a0d      	ldr	r2, [pc, #52]	; (8008438 <HAL_RTC_MspInit+0x50>)
 8008404:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008408:	61d3      	str	r3, [r2, #28]
 800840a:	4b0b      	ldr	r3, [pc, #44]	; (8008438 <HAL_RTC_MspInit+0x50>)
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008416:	4b09      	ldr	r3, [pc, #36]	; (800843c <HAL_RTC_MspInit+0x54>)
 8008418:	2201      	movs	r2, #1
 800841a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800841c:	2200      	movs	r2, #0
 800841e:	2100      	movs	r1, #0
 8008420:	2003      	movs	r0, #3
 8008422:	f000 fbf8 	bl	8008c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8008426:	2003      	movs	r0, #3
 8008428:	f000 fc11 	bl	8008c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800842c:	bf00      	nop
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	40002800 	.word	0x40002800
 8008438:	40021000 	.word	0x40021000
 800843c:	4242043c 	.word	0x4242043c

08008440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b08a      	sub	sp, #40	; 0x28
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008448:	f107 0318 	add.w	r3, r7, #24
 800844c:	2200      	movs	r2, #0
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	605a      	str	r2, [r3, #4]
 8008452:	609a      	str	r2, [r3, #8]
 8008454:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a3f      	ldr	r2, [pc, #252]	; (8008558 <HAL_SPI_MspInit+0x118>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d138      	bne.n	80084d2 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008460:	4b3e      	ldr	r3, [pc, #248]	; (800855c <HAL_SPI_MspInit+0x11c>)
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	4a3d      	ldr	r2, [pc, #244]	; (800855c <HAL_SPI_MspInit+0x11c>)
 8008466:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800846a:	6193      	str	r3, [r2, #24]
 800846c:	4b3b      	ldr	r3, [pc, #236]	; (800855c <HAL_SPI_MspInit+0x11c>)
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008474:	617b      	str	r3, [r7, #20]
 8008476:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008478:	4b38      	ldr	r3, [pc, #224]	; (800855c <HAL_SPI_MspInit+0x11c>)
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	4a37      	ldr	r2, [pc, #220]	; (800855c <HAL_SPI_MspInit+0x11c>)
 800847e:	f043 0304 	orr.w	r3, r3, #4
 8008482:	6193      	str	r3, [r2, #24]
 8008484:	4b35      	ldr	r3, [pc, #212]	; (800855c <HAL_SPI_MspInit+0x11c>)
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	613b      	str	r3, [r7, #16]
 800848e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8008490:	23a0      	movs	r3, #160	; 0xa0
 8008492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008494:	2302      	movs	r3, #2
 8008496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008498:	2303      	movs	r3, #3
 800849a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800849c:	f107 0318 	add.w	r3, r7, #24
 80084a0:	4619      	mov	r1, r3
 80084a2:	482f      	ldr	r0, [pc, #188]	; (8008560 <HAL_SPI_MspInit+0x120>)
 80084a4:	f000 fc66 	bl	8008d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80084a8:	2340      	movs	r3, #64	; 0x40
 80084aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084ac:	2300      	movs	r3, #0
 80084ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084b0:	2300      	movs	r3, #0
 80084b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084b4:	f107 0318 	add.w	r3, r7, #24
 80084b8:	4619      	mov	r1, r3
 80084ba:	4829      	ldr	r0, [pc, #164]	; (8008560 <HAL_SPI_MspInit+0x120>)
 80084bc:	f000 fc5a 	bl	8008d74 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80084c0:	2200      	movs	r2, #0
 80084c2:	2100      	movs	r1, #0
 80084c4:	2023      	movs	r0, #35	; 0x23
 80084c6:	f000 fba6 	bl	8008c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80084ca:	2023      	movs	r0, #35	; 0x23
 80084cc:	f000 fbbf 	bl	8008c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80084d0:	e03e      	b.n	8008550 <HAL_SPI_MspInit+0x110>
  else if(hspi->Instance==SPI2)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a23      	ldr	r2, [pc, #140]	; (8008564 <HAL_SPI_MspInit+0x124>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d139      	bne.n	8008550 <HAL_SPI_MspInit+0x110>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80084dc:	4b1f      	ldr	r3, [pc, #124]	; (800855c <HAL_SPI_MspInit+0x11c>)
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	4a1e      	ldr	r2, [pc, #120]	; (800855c <HAL_SPI_MspInit+0x11c>)
 80084e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084e6:	61d3      	str	r3, [r2, #28]
 80084e8:	4b1c      	ldr	r3, [pc, #112]	; (800855c <HAL_SPI_MspInit+0x11c>)
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084f4:	4b19      	ldr	r3, [pc, #100]	; (800855c <HAL_SPI_MspInit+0x11c>)
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	4a18      	ldr	r2, [pc, #96]	; (800855c <HAL_SPI_MspInit+0x11c>)
 80084fa:	f043 0308 	orr.w	r3, r3, #8
 80084fe:	6193      	str	r3, [r2, #24]
 8008500:	4b16      	ldr	r3, [pc, #88]	; (800855c <HAL_SPI_MspInit+0x11c>)
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	f003 0308 	and.w	r3, r3, #8
 8008508:	60bb      	str	r3, [r7, #8]
 800850a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800850c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8008510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008512:	2302      	movs	r3, #2
 8008514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008516:	2303      	movs	r3, #3
 8008518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800851a:	f107 0318 	add.w	r3, r7, #24
 800851e:	4619      	mov	r1, r3
 8008520:	4811      	ldr	r0, [pc, #68]	; (8008568 <HAL_SPI_MspInit+0x128>)
 8008522:	f000 fc27 	bl	8008d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8008526:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800852a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800852c:	2300      	movs	r3, #0
 800852e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008530:	2300      	movs	r3, #0
 8008532:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008534:	f107 0318 	add.w	r3, r7, #24
 8008538:	4619      	mov	r1, r3
 800853a:	480b      	ldr	r0, [pc, #44]	; (8008568 <HAL_SPI_MspInit+0x128>)
 800853c:	f000 fc1a 	bl	8008d74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8008540:	2200      	movs	r2, #0
 8008542:	2100      	movs	r1, #0
 8008544:	2024      	movs	r0, #36	; 0x24
 8008546:	f000 fb66 	bl	8008c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800854a:	2024      	movs	r0, #36	; 0x24
 800854c:	f000 fb7f 	bl	8008c4e <HAL_NVIC_EnableIRQ>
}
 8008550:	bf00      	nop
 8008552:	3728      	adds	r7, #40	; 0x28
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	40013000 	.word	0x40013000
 800855c:	40021000 	.word	0x40021000
 8008560:	40010800 	.word	0x40010800
 8008564:	40003800 	.word	0x40003800
 8008568:	40010c00 	.word	0x40010c00

0800856c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08a      	sub	sp, #40	; 0x28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008574:	f107 0318 	add.w	r3, r7, #24
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]
 800857c:	605a      	str	r2, [r3, #4]
 800857e:	609a      	str	r2, [r3, #8]
 8008580:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a37      	ldr	r2, [pc, #220]	; (8008664 <HAL_UART_MspInit+0xf8>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d132      	bne.n	80085f2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800858c:	4b36      	ldr	r3, [pc, #216]	; (8008668 <HAL_UART_MspInit+0xfc>)
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	4a35      	ldr	r2, [pc, #212]	; (8008668 <HAL_UART_MspInit+0xfc>)
 8008592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008596:	6193      	str	r3, [r2, #24]
 8008598:	4b33      	ldr	r3, [pc, #204]	; (8008668 <HAL_UART_MspInit+0xfc>)
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085a0:	617b      	str	r3, [r7, #20]
 80085a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085a4:	4b30      	ldr	r3, [pc, #192]	; (8008668 <HAL_UART_MspInit+0xfc>)
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	4a2f      	ldr	r2, [pc, #188]	; (8008668 <HAL_UART_MspInit+0xfc>)
 80085aa:	f043 0304 	orr.w	r3, r3, #4
 80085ae:	6193      	str	r3, [r2, #24]
 80085b0:	4b2d      	ldr	r3, [pc, #180]	; (8008668 <HAL_UART_MspInit+0xfc>)
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	f003 0304 	and.w	r3, r3, #4
 80085b8:	613b      	str	r3, [r7, #16]
 80085ba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80085bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085c2:	2302      	movs	r3, #2
 80085c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085c6:	2303      	movs	r3, #3
 80085c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085ca:	f107 0318 	add.w	r3, r7, #24
 80085ce:	4619      	mov	r1, r3
 80085d0:	4826      	ldr	r0, [pc, #152]	; (800866c <HAL_UART_MspInit+0x100>)
 80085d2:	f000 fbcf 	bl	8008d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80085d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085dc:	2300      	movs	r3, #0
 80085de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e0:	2300      	movs	r3, #0
 80085e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085e4:	f107 0318 	add.w	r3, r7, #24
 80085e8:	4619      	mov	r1, r3
 80085ea:	4820      	ldr	r0, [pc, #128]	; (800866c <HAL_UART_MspInit+0x100>)
 80085ec:	f000 fbc2 	bl	8008d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80085f0:	e034      	b.n	800865c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a1e      	ldr	r2, [pc, #120]	; (8008670 <HAL_UART_MspInit+0x104>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d12f      	bne.n	800865c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80085fc:	4b1a      	ldr	r3, [pc, #104]	; (8008668 <HAL_UART_MspInit+0xfc>)
 80085fe:	69db      	ldr	r3, [r3, #28]
 8008600:	4a19      	ldr	r2, [pc, #100]	; (8008668 <HAL_UART_MspInit+0xfc>)
 8008602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008606:	61d3      	str	r3, [r2, #28]
 8008608:	4b17      	ldr	r3, [pc, #92]	; (8008668 <HAL_UART_MspInit+0xfc>)
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008610:	60fb      	str	r3, [r7, #12]
 8008612:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008614:	4b14      	ldr	r3, [pc, #80]	; (8008668 <HAL_UART_MspInit+0xfc>)
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	4a13      	ldr	r2, [pc, #76]	; (8008668 <HAL_UART_MspInit+0xfc>)
 800861a:	f043 0304 	orr.w	r3, r3, #4
 800861e:	6193      	str	r3, [r2, #24]
 8008620:	4b11      	ldr	r3, [pc, #68]	; (8008668 <HAL_UART_MspInit+0xfc>)
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	60bb      	str	r3, [r7, #8]
 800862a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800862c:	2304      	movs	r3, #4
 800862e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008630:	2302      	movs	r3, #2
 8008632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008634:	2303      	movs	r3, #3
 8008636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008638:	f107 0318 	add.w	r3, r7, #24
 800863c:	4619      	mov	r1, r3
 800863e:	480b      	ldr	r0, [pc, #44]	; (800866c <HAL_UART_MspInit+0x100>)
 8008640:	f000 fb98 	bl	8008d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008644:	2308      	movs	r3, #8
 8008646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008648:	2300      	movs	r3, #0
 800864a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800864c:	2300      	movs	r3, #0
 800864e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008650:	f107 0318 	add.w	r3, r7, #24
 8008654:	4619      	mov	r1, r3
 8008656:	4805      	ldr	r0, [pc, #20]	; (800866c <HAL_UART_MspInit+0x100>)
 8008658:	f000 fb8c 	bl	8008d74 <HAL_GPIO_Init>
}
 800865c:	bf00      	nop
 800865e:	3728      	adds	r7, #40	; 0x28
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	40013800 	.word	0x40013800
 8008668:	40021000 	.word	0x40021000
 800866c:	40010800 	.word	0x40010800
 8008670:	40004400 	.word	0x40004400

08008674 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a11      	ldr	r2, [pc, #68]	; (80086c8 <HAL_PCD_MspInit+0x54>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d11b      	bne.n	80086be <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008686:	4b11      	ldr	r3, [pc, #68]	; (80086cc <HAL_PCD_MspInit+0x58>)
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	4a10      	ldr	r2, [pc, #64]	; (80086cc <HAL_PCD_MspInit+0x58>)
 800868c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008690:	61d3      	str	r3, [r2, #28]
 8008692:	4b0e      	ldr	r3, [pc, #56]	; (80086cc <HAL_PCD_MspInit+0x58>)
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800869a:	60fb      	str	r3, [r7, #12]
 800869c:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800869e:	2200      	movs	r2, #0
 80086a0:	2100      	movs	r1, #0
 80086a2:	2013      	movs	r0, #19
 80086a4:	f000 fab7 	bl	8008c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80086a8:	2013      	movs	r0, #19
 80086aa:	f000 fad0 	bl	8008c4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80086ae:	2200      	movs	r2, #0
 80086b0:	2100      	movs	r1, #0
 80086b2:	2014      	movs	r0, #20
 80086b4:	f000 faaf 	bl	8008c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80086b8:	2014      	movs	r0, #20
 80086ba:	f000 fac8 	bl	8008c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80086be:	bf00      	nop
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	40005c00 	.word	0x40005c00
 80086cc:	40021000 	.word	0x40021000

080086d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80086d0:	b480      	push	{r7}
 80086d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80086d4:	e7fe      	b.n	80086d4 <NMI_Handler+0x4>

080086d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80086d6:	b480      	push	{r7}
 80086d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80086da:	e7fe      	b.n	80086da <HardFault_Handler+0x4>

080086dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80086e0:	e7fe      	b.n	80086e0 <MemManage_Handler+0x4>

080086e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80086e2:	b480      	push	{r7}
 80086e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80086e6:	e7fe      	b.n	80086e6 <BusFault_Handler+0x4>

080086e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80086e8:	b480      	push	{r7}
 80086ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80086ec:	e7fe      	b.n	80086ec <UsageFault_Handler+0x4>

080086ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80086ee:	b480      	push	{r7}
 80086f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80086f2:	bf00      	nop
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr

080086fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80086fa:	b480      	push	{r7}
 80086fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80086fe:	bf00      	nop
 8008700:	46bd      	mov	sp, r7
 8008702:	bc80      	pop	{r7}
 8008704:	4770      	bx	lr

08008706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008706:	b480      	push	{r7}
 8008708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800870a:	bf00      	nop
 800870c:	46bd      	mov	sp, r7
 800870e:	bc80      	pop	{r7}
 8008710:	4770      	bx	lr

08008712 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008716:	f000 f967 	bl	80089e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800871a:	bf00      	nop
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8008724:	4802      	ldr	r0, [pc, #8]	; (8008730 <RTC_IRQHandler+0x10>)
 8008726:	f002 feb6 	bl	800b496 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800872a:	bf00      	nop
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20000818 	.word	0x20000818

08008734 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008738:	4802      	ldr	r0, [pc, #8]	; (8008744 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800873a:	f000 fdad 	bl	8009298 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800873e:	bf00      	nop
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	200008e0 	.word	0x200008e0

08008748 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800874c:	4802      	ldr	r0, [pc, #8]	; (8008758 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800874e:	f000 fda3 	bl	8009298 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8008752:	bf00      	nop
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	200008e0 	.word	0x200008e0

0800875c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008760:	4802      	ldr	r0, [pc, #8]	; (800876c <SPI1_IRQHandler+0x10>)
 8008762:	f003 fb6b 	bl	800be3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8008766:	bf00      	nop
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20000840 	.word	0x20000840

08008770 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008774:	4802      	ldr	r0, [pc, #8]	; (8008780 <SPI2_IRQHandler+0x10>)
 8008776:	f003 fb61 	bl	800be3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800877a:	bf00      	nop
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000660 	.word	0x20000660

08008784 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
	return 1;
 8008788:	2301      	movs	r3, #1
}
 800878a:	4618      	mov	r0, r3
 800878c:	46bd      	mov	sp, r7
 800878e:	bc80      	pop	{r7}
 8008790:	4770      	bx	lr

08008792 <_kill>:

int _kill(int pid, int sig)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800879c:	f005 fa92 	bl	800dcc4 <__errno>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2216      	movs	r2, #22
 80087a4:	601a      	str	r2, [r3, #0]
	return -1;
 80087a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <_exit>:

void _exit (int status)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80087ba:	f04f 31ff 	mov.w	r1, #4294967295
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7ff ffe7 	bl	8008792 <_kill>
	while (1) {}		/* Make sure we hang here */
 80087c4:	e7fe      	b.n	80087c4 <_exit+0x12>

080087c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b086      	sub	sp, #24
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	60b9      	str	r1, [r7, #8]
 80087d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087d2:	2300      	movs	r3, #0
 80087d4:	617b      	str	r3, [r7, #20]
 80087d6:	e00a      	b.n	80087ee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80087d8:	f3af 8000 	nop.w
 80087dc:	4601      	mov	r1, r0
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	60ba      	str	r2, [r7, #8]
 80087e4:	b2ca      	uxtb	r2, r1
 80087e6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	3301      	adds	r3, #1
 80087ec:	617b      	str	r3, [r7, #20]
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	dbf0      	blt.n	80087d8 <_read+0x12>
	}

return len;
 80087f6:	687b      	ldr	r3, [r7, #4]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800880c:	2300      	movs	r3, #0
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	e009      	b.n	8008826 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	60ba      	str	r2, [r7, #8]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	4618      	mov	r0, r3
 800881c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	3301      	adds	r3, #1
 8008824:	617b      	str	r3, [r7, #20]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	429a      	cmp	r2, r3
 800882c:	dbf1      	blt.n	8008812 <_write+0x12>
	}
	return len;
 800882e:	687b      	ldr	r3, [r7, #4]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <_close>:

int _close(int file)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
	return -1;
 8008840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	bc80      	pop	{r7}
 800884c:	4770      	bx	lr

0800884e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800885e:	605a      	str	r2, [r3, #4]
	return 0;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr

0800886c <_isatty>:

int _isatty(int file)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
	return 1;
 8008874:	2301      	movs	r3, #1
}
 8008876:	4618      	mov	r0, r3
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	bc80      	pop	{r7}
 800887e:	4770      	bx	lr

08008880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
	return 0;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	bc80      	pop	{r7}
 8008896:	4770      	bx	lr

08008898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80088a0:	4a14      	ldr	r2, [pc, #80]	; (80088f4 <_sbrk+0x5c>)
 80088a2:	4b15      	ldr	r3, [pc, #84]	; (80088f8 <_sbrk+0x60>)
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80088ac:	4b13      	ldr	r3, [pc, #76]	; (80088fc <_sbrk+0x64>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d102      	bne.n	80088ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80088b4:	4b11      	ldr	r3, [pc, #68]	; (80088fc <_sbrk+0x64>)
 80088b6:	4a12      	ldr	r2, [pc, #72]	; (8008900 <_sbrk+0x68>)
 80088b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80088ba:	4b10      	ldr	r3, [pc, #64]	; (80088fc <_sbrk+0x64>)
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4413      	add	r3, r2
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d207      	bcs.n	80088d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80088c8:	f005 f9fc 	bl	800dcc4 <__errno>
 80088cc:	4603      	mov	r3, r0
 80088ce:	220c      	movs	r2, #12
 80088d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80088d2:	f04f 33ff 	mov.w	r3, #4294967295
 80088d6:	e009      	b.n	80088ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80088d8:	4b08      	ldr	r3, [pc, #32]	; (80088fc <_sbrk+0x64>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80088de:	4b07      	ldr	r3, [pc, #28]	; (80088fc <_sbrk+0x64>)
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4413      	add	r3, r2
 80088e6:	4a05      	ldr	r2, [pc, #20]	; (80088fc <_sbrk+0x64>)
 80088e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80088ea:	68fb      	ldr	r3, [r7, #12]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	20005000 	.word	0x20005000
 80088f8:	00000400 	.word	0x00000400
 80088fc:	20000188 	.word	0x20000188
 8008900:	20000bd0 	.word	0x20000bd0

08008904 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008904:	b480      	push	{r7}
 8008906:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008908:	bf00      	nop
 800890a:	46bd      	mov	sp, r7
 800890c:	bc80      	pop	{r7}
 800890e:	4770      	bx	lr

08008910 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008910:	f7ff fff8 	bl	8008904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008914:	480b      	ldr	r0, [pc, #44]	; (8008944 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8008916:	490c      	ldr	r1, [pc, #48]	; (8008948 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008918:	4a0c      	ldr	r2, [pc, #48]	; (800894c <LoopFillZerobss+0x16>)
  movs r3, #0
 800891a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800891c:	e002      	b.n	8008924 <LoopCopyDataInit>

0800891e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800891e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008922:	3304      	adds	r3, #4

08008924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008928:	d3f9      	bcc.n	800891e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800892a:	4a09      	ldr	r2, [pc, #36]	; (8008950 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800892c:	4c09      	ldr	r4, [pc, #36]	; (8008954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800892e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008930:	e001      	b.n	8008936 <LoopFillZerobss>

08008932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008934:	3204      	adds	r2, #4

08008936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008938:	d3fb      	bcc.n	8008932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800893a:	f005 f9db 	bl	800dcf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800893e:	f7fe fe61 	bl	8007604 <main>
  bx lr
 8008942:	4770      	bx	lr
  ldr r0, =_sdata
 8008944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008948:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800894c:	0800f954 	.word	0x0800f954
  ldr r2, =_sbss
 8008950:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8008954:	20000bcc 	.word	0x20000bcc

08008958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008958:	e7fe      	b.n	8008958 <ADC1_2_IRQHandler>
	...

0800895c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008960:	4b08      	ldr	r3, [pc, #32]	; (8008984 <HAL_Init+0x28>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a07      	ldr	r2, [pc, #28]	; (8008984 <HAL_Init+0x28>)
 8008966:	f043 0310 	orr.w	r3, r3, #16
 800896a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800896c:	2003      	movs	r0, #3
 800896e:	f000 f947 	bl	8008c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008972:	200f      	movs	r0, #15
 8008974:	f000 f808 	bl	8008988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008978:	f7ff fd04 	bl	8008384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	40022000 	.word	0x40022000

08008988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008990:	4b12      	ldr	r3, [pc, #72]	; (80089dc <HAL_InitTick+0x54>)
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	4b12      	ldr	r3, [pc, #72]	; (80089e0 <HAL_InitTick+0x58>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	4619      	mov	r1, r3
 800899a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800899e:	fbb3 f3f1 	udiv	r3, r3, r1
 80089a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 f95f 	bl	8008c6a <HAL_SYSTICK_Config>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e00e      	b.n	80089d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b0f      	cmp	r3, #15
 80089ba:	d80a      	bhi.n	80089d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80089bc:	2200      	movs	r2, #0
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	f04f 30ff 	mov.w	r0, #4294967295
 80089c4:	f000 f927 	bl	8008c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80089c8:	4a06      	ldr	r2, [pc, #24]	; (80089e4 <HAL_InitTick+0x5c>)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	e000      	b.n	80089d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20000040 	.word	0x20000040
 80089e0:	20000048 	.word	0x20000048
 80089e4:	20000044 	.word	0x20000044

080089e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80089e8:	b480      	push	{r7}
 80089ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80089ec:	4b05      	ldr	r3, [pc, #20]	; (8008a04 <HAL_IncTick+0x1c>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	461a      	mov	r2, r3
 80089f2:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <HAL_IncTick+0x20>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4413      	add	r3, r2
 80089f8:	4a03      	ldr	r2, [pc, #12]	; (8008a08 <HAL_IncTick+0x20>)
 80089fa:	6013      	str	r3, [r2, #0]
}
 80089fc:	bf00      	nop
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bc80      	pop	{r7}
 8008a02:	4770      	bx	lr
 8008a04:	20000048 	.word	0x20000048
 8008a08:	20000bb8 	.word	0x20000bb8

08008a0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8008a10:	4b02      	ldr	r3, [pc, #8]	; (8008a1c <HAL_GetTick+0x10>)
 8008a12:	681b      	ldr	r3, [r3, #0]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bc80      	pop	{r7}
 8008a1a:	4770      	bx	lr
 8008a1c:	20000bb8 	.word	0x20000bb8

08008a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008a28:	f7ff fff0 	bl	8008a0c <HAL_GetTick>
 8008a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a38:	d005      	beq.n	8008a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008a3a:	4b0a      	ldr	r3, [pc, #40]	; (8008a64 <HAL_Delay+0x44>)
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	4413      	add	r3, r2
 8008a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008a46:	bf00      	nop
 8008a48:	f7ff ffe0 	bl	8008a0c <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d8f7      	bhi.n	8008a48 <HAL_Delay+0x28>
  {
  }
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000048 	.word	0x20000048

08008a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a78:	4b0c      	ldr	r3, [pc, #48]	; (8008aac <__NVIC_SetPriorityGrouping+0x44>)
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a84:	4013      	ands	r3, r2
 8008a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a9a:	4a04      	ldr	r2, [pc, #16]	; (8008aac <__NVIC_SetPriorityGrouping+0x44>)
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	60d3      	str	r3, [r2, #12]
}
 8008aa0:	bf00      	nop
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bc80      	pop	{r7}
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	e000ed00 	.word	0xe000ed00

08008ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ab4:	4b04      	ldr	r3, [pc, #16]	; (8008ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	0a1b      	lsrs	r3, r3, #8
 8008aba:	f003 0307 	and.w	r3, r3, #7
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bc80      	pop	{r7}
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	e000ed00 	.word	0xe000ed00

08008acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	db0b      	blt.n	8008af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ade:	79fb      	ldrb	r3, [r7, #7]
 8008ae0:	f003 021f 	and.w	r2, r3, #31
 8008ae4:	4906      	ldr	r1, [pc, #24]	; (8008b00 <__NVIC_EnableIRQ+0x34>)
 8008ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aea:	095b      	lsrs	r3, r3, #5
 8008aec:	2001      	movs	r0, #1
 8008aee:	fa00 f202 	lsl.w	r2, r0, r2
 8008af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008af6:	bf00      	nop
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bc80      	pop	{r7}
 8008afe:	4770      	bx	lr
 8008b00:	e000e100 	.word	0xe000e100

08008b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	6039      	str	r1, [r7, #0]
 8008b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	db0a      	blt.n	8008b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	490c      	ldr	r1, [pc, #48]	; (8008b50 <__NVIC_SetPriority+0x4c>)
 8008b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b22:	0112      	lsls	r2, r2, #4
 8008b24:	b2d2      	uxtb	r2, r2
 8008b26:	440b      	add	r3, r1
 8008b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008b2c:	e00a      	b.n	8008b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	4908      	ldr	r1, [pc, #32]	; (8008b54 <__NVIC_SetPriority+0x50>)
 8008b34:	79fb      	ldrb	r3, [r7, #7]
 8008b36:	f003 030f 	and.w	r3, r3, #15
 8008b3a:	3b04      	subs	r3, #4
 8008b3c:	0112      	lsls	r2, r2, #4
 8008b3e:	b2d2      	uxtb	r2, r2
 8008b40:	440b      	add	r3, r1
 8008b42:	761a      	strb	r2, [r3, #24]
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc80      	pop	{r7}
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	e000e100 	.word	0xe000e100
 8008b54:	e000ed00 	.word	0xe000ed00

08008b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b089      	sub	sp, #36	; 0x24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	f1c3 0307 	rsb	r3, r3, #7
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	bf28      	it	cs
 8008b76:	2304      	movcs	r3, #4
 8008b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	2b06      	cmp	r3, #6
 8008b80:	d902      	bls.n	8008b88 <NVIC_EncodePriority+0x30>
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	3b03      	subs	r3, #3
 8008b86:	e000      	b.n	8008b8a <NVIC_EncodePriority+0x32>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	fa02 f303 	lsl.w	r3, r2, r3
 8008b96:	43da      	mvns	r2, r3
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	401a      	ands	r2, r3
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8008baa:	43d9      	mvns	r1, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bb0:	4313      	orrs	r3, r2
         );
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3724      	adds	r7, #36	; 0x24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bc80      	pop	{r7}
 8008bba:	4770      	bx	lr

08008bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008bcc:	d301      	bcc.n	8008bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e00f      	b.n	8008bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008bd2:	4a0a      	ldr	r2, [pc, #40]	; (8008bfc <SysTick_Config+0x40>)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008bda:	210f      	movs	r1, #15
 8008bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008be0:	f7ff ff90 	bl	8008b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008be4:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <SysTick_Config+0x40>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008bea:	4b04      	ldr	r3, [pc, #16]	; (8008bfc <SysTick_Config+0x40>)
 8008bec:	2207      	movs	r2, #7
 8008bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	e000e010 	.word	0xe000e010

08008c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff ff2d 	bl	8008a68 <__NVIC_SetPriorityGrouping>
}
 8008c0e:	bf00      	nop
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b086      	sub	sp, #24
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	60b9      	str	r1, [r7, #8]
 8008c20:	607a      	str	r2, [r7, #4]
 8008c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c28:	f7ff ff42 	bl	8008ab0 <__NVIC_GetPriorityGrouping>
 8008c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	68b9      	ldr	r1, [r7, #8]
 8008c32:	6978      	ldr	r0, [r7, #20]
 8008c34:	f7ff ff90 	bl	8008b58 <NVIC_EncodePriority>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c3e:	4611      	mov	r1, r2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff ff5f 	bl	8008b04 <__NVIC_SetPriority>
}
 8008c46:	bf00      	nop
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	4603      	mov	r3, r0
 8008c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7ff ff35 	bl	8008acc <__NVIC_EnableIRQ>
}
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7ff ffa2 	bl	8008bbc <SysTick_Config>
 8008c78:	4603      	mov	r3, r0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
	...

08008c84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d005      	beq.n	8008ca8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2204      	movs	r2, #4
 8008ca0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	73fb      	strb	r3, [r7, #15]
 8008ca6:	e051      	b.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f022 020e 	bic.w	r2, r2, #14
 8008cb6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0201 	bic.w	r2, r2, #1
 8008cc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a22      	ldr	r2, [pc, #136]	; (8008d58 <HAL_DMA_Abort_IT+0xd4>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d029      	beq.n	8008d26 <HAL_DMA_Abort_IT+0xa2>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a21      	ldr	r2, [pc, #132]	; (8008d5c <HAL_DMA_Abort_IT+0xd8>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d022      	beq.n	8008d22 <HAL_DMA_Abort_IT+0x9e>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a1f      	ldr	r2, [pc, #124]	; (8008d60 <HAL_DMA_Abort_IT+0xdc>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d01a      	beq.n	8008d1c <HAL_DMA_Abort_IT+0x98>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a1e      	ldr	r2, [pc, #120]	; (8008d64 <HAL_DMA_Abort_IT+0xe0>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d012      	beq.n	8008d16 <HAL_DMA_Abort_IT+0x92>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a1c      	ldr	r2, [pc, #112]	; (8008d68 <HAL_DMA_Abort_IT+0xe4>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d00a      	beq.n	8008d10 <HAL_DMA_Abort_IT+0x8c>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a1b      	ldr	r2, [pc, #108]	; (8008d6c <HAL_DMA_Abort_IT+0xe8>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d102      	bne.n	8008d0a <HAL_DMA_Abort_IT+0x86>
 8008d04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008d08:	e00e      	b.n	8008d28 <HAL_DMA_Abort_IT+0xa4>
 8008d0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d0e:	e00b      	b.n	8008d28 <HAL_DMA_Abort_IT+0xa4>
 8008d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d14:	e008      	b.n	8008d28 <HAL_DMA_Abort_IT+0xa4>
 8008d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d1a:	e005      	b.n	8008d28 <HAL_DMA_Abort_IT+0xa4>
 8008d1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d20:	e002      	b.n	8008d28 <HAL_DMA_Abort_IT+0xa4>
 8008d22:	2310      	movs	r3, #16
 8008d24:	e000      	b.n	8008d28 <HAL_DMA_Abort_IT+0xa4>
 8008d26:	2301      	movs	r3, #1
 8008d28:	4a11      	ldr	r2, [pc, #68]	; (8008d70 <HAL_DMA_Abort_IT+0xec>)
 8008d2a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d003      	beq.n	8008d4c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	4798      	blx	r3
    } 
  }
  return status;
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	40020008 	.word	0x40020008
 8008d5c:	4002001c 	.word	0x4002001c
 8008d60:	40020030 	.word	0x40020030
 8008d64:	40020044 	.word	0x40020044
 8008d68:	40020058 	.word	0x40020058
 8008d6c:	4002006c 	.word	0x4002006c
 8008d70:	40020000 	.word	0x40020000

08008d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b08b      	sub	sp, #44	; 0x2c
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008d82:	2300      	movs	r3, #0
 8008d84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d86:	e169      	b.n	800905c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008d88:	2201      	movs	r2, #1
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	69fa      	ldr	r2, [r7, #28]
 8008d98:	4013      	ands	r3, r2
 8008d9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	f040 8158 	bne.w	8009056 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	4a9a      	ldr	r2, [pc, #616]	; (8009014 <HAL_GPIO_Init+0x2a0>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d05e      	beq.n	8008e6e <HAL_GPIO_Init+0xfa>
 8008db0:	4a98      	ldr	r2, [pc, #608]	; (8009014 <HAL_GPIO_Init+0x2a0>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d875      	bhi.n	8008ea2 <HAL_GPIO_Init+0x12e>
 8008db6:	4a98      	ldr	r2, [pc, #608]	; (8009018 <HAL_GPIO_Init+0x2a4>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d058      	beq.n	8008e6e <HAL_GPIO_Init+0xfa>
 8008dbc:	4a96      	ldr	r2, [pc, #600]	; (8009018 <HAL_GPIO_Init+0x2a4>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d86f      	bhi.n	8008ea2 <HAL_GPIO_Init+0x12e>
 8008dc2:	4a96      	ldr	r2, [pc, #600]	; (800901c <HAL_GPIO_Init+0x2a8>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d052      	beq.n	8008e6e <HAL_GPIO_Init+0xfa>
 8008dc8:	4a94      	ldr	r2, [pc, #592]	; (800901c <HAL_GPIO_Init+0x2a8>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d869      	bhi.n	8008ea2 <HAL_GPIO_Init+0x12e>
 8008dce:	4a94      	ldr	r2, [pc, #592]	; (8009020 <HAL_GPIO_Init+0x2ac>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d04c      	beq.n	8008e6e <HAL_GPIO_Init+0xfa>
 8008dd4:	4a92      	ldr	r2, [pc, #584]	; (8009020 <HAL_GPIO_Init+0x2ac>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d863      	bhi.n	8008ea2 <HAL_GPIO_Init+0x12e>
 8008dda:	4a92      	ldr	r2, [pc, #584]	; (8009024 <HAL_GPIO_Init+0x2b0>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d046      	beq.n	8008e6e <HAL_GPIO_Init+0xfa>
 8008de0:	4a90      	ldr	r2, [pc, #576]	; (8009024 <HAL_GPIO_Init+0x2b0>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d85d      	bhi.n	8008ea2 <HAL_GPIO_Init+0x12e>
 8008de6:	2b12      	cmp	r3, #18
 8008de8:	d82a      	bhi.n	8008e40 <HAL_GPIO_Init+0xcc>
 8008dea:	2b12      	cmp	r3, #18
 8008dec:	d859      	bhi.n	8008ea2 <HAL_GPIO_Init+0x12e>
 8008dee:	a201      	add	r2, pc, #4	; (adr r2, 8008df4 <HAL_GPIO_Init+0x80>)
 8008df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df4:	08008e6f 	.word	0x08008e6f
 8008df8:	08008e49 	.word	0x08008e49
 8008dfc:	08008e5b 	.word	0x08008e5b
 8008e00:	08008e9d 	.word	0x08008e9d
 8008e04:	08008ea3 	.word	0x08008ea3
 8008e08:	08008ea3 	.word	0x08008ea3
 8008e0c:	08008ea3 	.word	0x08008ea3
 8008e10:	08008ea3 	.word	0x08008ea3
 8008e14:	08008ea3 	.word	0x08008ea3
 8008e18:	08008ea3 	.word	0x08008ea3
 8008e1c:	08008ea3 	.word	0x08008ea3
 8008e20:	08008ea3 	.word	0x08008ea3
 8008e24:	08008ea3 	.word	0x08008ea3
 8008e28:	08008ea3 	.word	0x08008ea3
 8008e2c:	08008ea3 	.word	0x08008ea3
 8008e30:	08008ea3 	.word	0x08008ea3
 8008e34:	08008ea3 	.word	0x08008ea3
 8008e38:	08008e51 	.word	0x08008e51
 8008e3c:	08008e65 	.word	0x08008e65
 8008e40:	4a79      	ldr	r2, [pc, #484]	; (8009028 <HAL_GPIO_Init+0x2b4>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d013      	beq.n	8008e6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008e46:	e02c      	b.n	8008ea2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	623b      	str	r3, [r7, #32]
          break;
 8008e4e:	e029      	b.n	8008ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	3304      	adds	r3, #4
 8008e56:	623b      	str	r3, [r7, #32]
          break;
 8008e58:	e024      	b.n	8008ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	3308      	adds	r3, #8
 8008e60:	623b      	str	r3, [r7, #32]
          break;
 8008e62:	e01f      	b.n	8008ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	330c      	adds	r3, #12
 8008e6a:	623b      	str	r3, [r7, #32]
          break;
 8008e6c:	e01a      	b.n	8008ea4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d102      	bne.n	8008e7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008e76:	2304      	movs	r3, #4
 8008e78:	623b      	str	r3, [r7, #32]
          break;
 8008e7a:	e013      	b.n	8008ea4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d105      	bne.n	8008e90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008e84:	2308      	movs	r3, #8
 8008e86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	611a      	str	r2, [r3, #16]
          break;
 8008e8e:	e009      	b.n	8008ea4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008e90:	2308      	movs	r3, #8
 8008e92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	69fa      	ldr	r2, [r7, #28]
 8008e98:	615a      	str	r2, [r3, #20]
          break;
 8008e9a:	e003      	b.n	8008ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	623b      	str	r3, [r7, #32]
          break;
 8008ea0:	e000      	b.n	8008ea4 <HAL_GPIO_Init+0x130>
          break;
 8008ea2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	2bff      	cmp	r3, #255	; 0xff
 8008ea8:	d801      	bhi.n	8008eae <HAL_GPIO_Init+0x13a>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	e001      	b.n	8008eb2 <HAL_GPIO_Init+0x13e>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	2bff      	cmp	r3, #255	; 0xff
 8008eb8:	d802      	bhi.n	8008ec0 <HAL_GPIO_Init+0x14c>
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	e002      	b.n	8008ec6 <HAL_GPIO_Init+0x152>
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	3b08      	subs	r3, #8
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	210f      	movs	r1, #15
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed4:	43db      	mvns	r3, r3
 8008ed6:	401a      	ands	r2, r3
 8008ed8:	6a39      	ldr	r1, [r7, #32]
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee0:	431a      	orrs	r2, r3
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 80b1 	beq.w	8009056 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008ef4:	4b4d      	ldr	r3, [pc, #308]	; (800902c <HAL_GPIO_Init+0x2b8>)
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	4a4c      	ldr	r2, [pc, #304]	; (800902c <HAL_GPIO_Init+0x2b8>)
 8008efa:	f043 0301 	orr.w	r3, r3, #1
 8008efe:	6193      	str	r3, [r2, #24]
 8008f00:	4b4a      	ldr	r3, [pc, #296]	; (800902c <HAL_GPIO_Init+0x2b8>)
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	f003 0301 	and.w	r3, r3, #1
 8008f08:	60bb      	str	r3, [r7, #8]
 8008f0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008f0c:	4a48      	ldr	r2, [pc, #288]	; (8009030 <HAL_GPIO_Init+0x2bc>)
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	089b      	lsrs	r3, r3, #2
 8008f12:	3302      	adds	r3, #2
 8008f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	f003 0303 	and.w	r3, r3, #3
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	220f      	movs	r2, #15
 8008f24:	fa02 f303 	lsl.w	r3, r2, r3
 8008f28:	43db      	mvns	r3, r3
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a40      	ldr	r2, [pc, #256]	; (8009034 <HAL_GPIO_Init+0x2c0>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d013      	beq.n	8008f60 <HAL_GPIO_Init+0x1ec>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a3f      	ldr	r2, [pc, #252]	; (8009038 <HAL_GPIO_Init+0x2c4>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d00d      	beq.n	8008f5c <HAL_GPIO_Init+0x1e8>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a3e      	ldr	r2, [pc, #248]	; (800903c <HAL_GPIO_Init+0x2c8>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d007      	beq.n	8008f58 <HAL_GPIO_Init+0x1e4>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a3d      	ldr	r2, [pc, #244]	; (8009040 <HAL_GPIO_Init+0x2cc>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d101      	bne.n	8008f54 <HAL_GPIO_Init+0x1e0>
 8008f50:	2303      	movs	r3, #3
 8008f52:	e006      	b.n	8008f62 <HAL_GPIO_Init+0x1ee>
 8008f54:	2304      	movs	r3, #4
 8008f56:	e004      	b.n	8008f62 <HAL_GPIO_Init+0x1ee>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e002      	b.n	8008f62 <HAL_GPIO_Init+0x1ee>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e000      	b.n	8008f62 <HAL_GPIO_Init+0x1ee>
 8008f60:	2300      	movs	r3, #0
 8008f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f64:	f002 0203 	and.w	r2, r2, #3
 8008f68:	0092      	lsls	r2, r2, #2
 8008f6a:	4093      	lsls	r3, r2
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008f72:	492f      	ldr	r1, [pc, #188]	; (8009030 <HAL_GPIO_Init+0x2bc>)
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	089b      	lsrs	r3, r3, #2
 8008f78:	3302      	adds	r3, #2
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d006      	beq.n	8008f9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008f8c:	4b2d      	ldr	r3, [pc, #180]	; (8009044 <HAL_GPIO_Init+0x2d0>)
 8008f8e:	689a      	ldr	r2, [r3, #8]
 8008f90:	492c      	ldr	r1, [pc, #176]	; (8009044 <HAL_GPIO_Init+0x2d0>)
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	608b      	str	r3, [r1, #8]
 8008f98:	e006      	b.n	8008fa8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008f9a:	4b2a      	ldr	r3, [pc, #168]	; (8009044 <HAL_GPIO_Init+0x2d0>)
 8008f9c:	689a      	ldr	r2, [r3, #8]
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	43db      	mvns	r3, r3
 8008fa2:	4928      	ldr	r1, [pc, #160]	; (8009044 <HAL_GPIO_Init+0x2d0>)
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d006      	beq.n	8008fc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008fb4:	4b23      	ldr	r3, [pc, #140]	; (8009044 <HAL_GPIO_Init+0x2d0>)
 8008fb6:	68da      	ldr	r2, [r3, #12]
 8008fb8:	4922      	ldr	r1, [pc, #136]	; (8009044 <HAL_GPIO_Init+0x2d0>)
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60cb      	str	r3, [r1, #12]
 8008fc0:	e006      	b.n	8008fd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008fc2:	4b20      	ldr	r3, [pc, #128]	; (8009044 <HAL_GPIO_Init+0x2d0>)
 8008fc4:	68da      	ldr	r2, [r3, #12]
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	43db      	mvns	r3, r3
 8008fca:	491e      	ldr	r1, [pc, #120]	; (8009044 <HAL_GPIO_Init+0x2d0>)
 8008fcc:	4013      	ands	r3, r2
 8008fce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d006      	beq.n	8008fea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008fdc:	4b19      	ldr	r3, [pc, #100]	; (8009044 <HAL_GPIO_Init+0x2d0>)
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	4918      	ldr	r1, [pc, #96]	; (8009044 <HAL_GPIO_Init+0x2d0>)
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	604b      	str	r3, [r1, #4]
 8008fe8:	e006      	b.n	8008ff8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008fea:	4b16      	ldr	r3, [pc, #88]	; (8009044 <HAL_GPIO_Init+0x2d0>)
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	43db      	mvns	r3, r3
 8008ff2:	4914      	ldr	r1, [pc, #80]	; (8009044 <HAL_GPIO_Init+0x2d0>)
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d021      	beq.n	8009048 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009004:	4b0f      	ldr	r3, [pc, #60]	; (8009044 <HAL_GPIO_Init+0x2d0>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	490e      	ldr	r1, [pc, #56]	; (8009044 <HAL_GPIO_Init+0x2d0>)
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	4313      	orrs	r3, r2
 800900e:	600b      	str	r3, [r1, #0]
 8009010:	e021      	b.n	8009056 <HAL_GPIO_Init+0x2e2>
 8009012:	bf00      	nop
 8009014:	10320000 	.word	0x10320000
 8009018:	10310000 	.word	0x10310000
 800901c:	10220000 	.word	0x10220000
 8009020:	10210000 	.word	0x10210000
 8009024:	10120000 	.word	0x10120000
 8009028:	10110000 	.word	0x10110000
 800902c:	40021000 	.word	0x40021000
 8009030:	40010000 	.word	0x40010000
 8009034:	40010800 	.word	0x40010800
 8009038:	40010c00 	.word	0x40010c00
 800903c:	40011000 	.word	0x40011000
 8009040:	40011400 	.word	0x40011400
 8009044:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009048:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <HAL_GPIO_Init+0x304>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	43db      	mvns	r3, r3
 8009050:	4909      	ldr	r1, [pc, #36]	; (8009078 <HAL_GPIO_Init+0x304>)
 8009052:	4013      	ands	r3, r2
 8009054:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	3301      	adds	r3, #1
 800905a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	fa22 f303 	lsr.w	r3, r2, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	f47f ae8e 	bne.w	8008d88 <HAL_GPIO_Init+0x14>
  }
}
 800906c:	bf00      	nop
 800906e:	bf00      	nop
 8009070:	372c      	adds	r7, #44	; 0x2c
 8009072:	46bd      	mov	sp, r7
 8009074:	bc80      	pop	{r7}
 8009076:	4770      	bx	lr
 8009078:	40010400 	.word	0x40010400

0800907c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	807b      	strh	r3, [r7, #2]
 8009088:	4613      	mov	r3, r2
 800908a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800908c:	787b      	ldrb	r3, [r7, #1]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009092:	887a      	ldrh	r2, [r7, #2]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009098:	e003      	b.n	80090a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800909a:	887b      	ldrh	r3, [r7, #2]
 800909c:	041a      	lsls	r2, r3, #16
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	611a      	str	r2, [r3, #16]
}
 80090a2:	bf00      	nop
 80090a4:	370c      	adds	r7, #12
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bc80      	pop	{r7}
 80090aa:	4770      	bx	lr

080090ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e0e8      	b.n	8009290 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d106      	bne.n	80090d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f7ff face 	bl	8008674 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2203      	movs	r2, #3
 80090dc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f003 fb7d 	bl	800c7ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	3304      	adds	r3, #4
 80090f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090fa:	f003 fb69 	bl	800c7d0 <USB_CoreInit>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d005      	beq.n	8009110 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2202      	movs	r2, #2
 8009108:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e0bf      	b.n	8009290 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2100      	movs	r1, #0
 8009116:	4618      	mov	r0, r3
 8009118:	f003 fb81 	bl	800c81e <USB_SetCurrentMode>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d005      	beq.n	800912e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2202      	movs	r2, #2
 8009126:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e0b0      	b.n	8009290 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800912e:	2300      	movs	r3, #0
 8009130:	73fb      	strb	r3, [r7, #15]
 8009132:	e03e      	b.n	80091b2 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009134:	7bfa      	ldrb	r2, [r7, #15]
 8009136:	6879      	ldr	r1, [r7, #4]
 8009138:	4613      	mov	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	440b      	add	r3, r1
 8009142:	3311      	adds	r3, #17
 8009144:	2201      	movs	r2, #1
 8009146:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009148:	7bfa      	ldrb	r2, [r7, #15]
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	4613      	mov	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	440b      	add	r3, r1
 8009156:	3310      	adds	r3, #16
 8009158:	7bfa      	ldrb	r2, [r7, #15]
 800915a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800915c:	7bfa      	ldrb	r2, [r7, #15]
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	4613      	mov	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	440b      	add	r3, r1
 800916a:	3313      	adds	r3, #19
 800916c:	2200      	movs	r2, #0
 800916e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009170:	7bfa      	ldrb	r2, [r7, #15]
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	4613      	mov	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	440b      	add	r3, r1
 800917e:	3320      	adds	r3, #32
 8009180:	2200      	movs	r2, #0
 8009182:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009184:	7bfa      	ldrb	r2, [r7, #15]
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	440b      	add	r3, r1
 8009192:	3324      	adds	r3, #36	; 0x24
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009198:	7bfb      	ldrb	r3, [r7, #15]
 800919a:	6879      	ldr	r1, [r7, #4]
 800919c:	1c5a      	adds	r2, r3, #1
 800919e:	4613      	mov	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	00db      	lsls	r3, r3, #3
 80091a6:	440b      	add	r3, r1
 80091a8:	2200      	movs	r2, #0
 80091aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
 80091ae:	3301      	adds	r3, #1
 80091b0:	73fb      	strb	r3, [r7, #15]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	791b      	ldrb	r3, [r3, #4]
 80091b6:	7bfa      	ldrb	r2, [r7, #15]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d3bb      	bcc.n	8009134 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091bc:	2300      	movs	r3, #0
 80091be:	73fb      	strb	r3, [r7, #15]
 80091c0:	e044      	b.n	800924c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80091c2:	7bfa      	ldrb	r2, [r7, #15]
 80091c4:	6879      	ldr	r1, [r7, #4]
 80091c6:	4613      	mov	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4413      	add	r3, r2
 80091cc:	00db      	lsls	r3, r3, #3
 80091ce:	440b      	add	r3, r1
 80091d0:	f203 1351 	addw	r3, r3, #337	; 0x151
 80091d4:	2200      	movs	r2, #0
 80091d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80091d8:	7bfa      	ldrb	r2, [r7, #15]
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	440b      	add	r3, r1
 80091e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091ea:	7bfa      	ldrb	r2, [r7, #15]
 80091ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80091ee:	7bfa      	ldrb	r2, [r7, #15]
 80091f0:	6879      	ldr	r1, [r7, #4]
 80091f2:	4613      	mov	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	440b      	add	r3, r1
 80091fc:	f203 1353 	addw	r3, r3, #339	; 0x153
 8009200:	2200      	movs	r2, #0
 8009202:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009204:	7bfa      	ldrb	r2, [r7, #15]
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	4613      	mov	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	00db      	lsls	r3, r3, #3
 8009210:	440b      	add	r3, r1
 8009212:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800921a:	7bfa      	ldrb	r2, [r7, #15]
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	4613      	mov	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	00db      	lsls	r3, r3, #3
 8009226:	440b      	add	r3, r1
 8009228:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800922c:	2200      	movs	r2, #0
 800922e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009230:	7bfa      	ldrb	r2, [r7, #15]
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	440b      	add	r3, r1
 800923e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009242:	2200      	movs	r2, #0
 8009244:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	3301      	adds	r3, #1
 800924a:	73fb      	strb	r3, [r7, #15]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	791b      	ldrb	r3, [r3, #4]
 8009250:	7bfa      	ldrb	r2, [r7, #15]
 8009252:	429a      	cmp	r2, r3
 8009254:	d3b5      	bcc.n	80091c2 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6818      	ldr	r0, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	3304      	adds	r3, #4
 800925e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009260:	f003 fae9 	bl	800c836 <USB_DevInit>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d005      	beq.n	8009276 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2202      	movs	r2, #2
 800926e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e00c      	b.n	8009290 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4618      	mov	r0, r3
 800928a:	f004 fc50 	bl	800db2e <USB_DevDisconnect>

  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b088      	sub	sp, #32
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f004 fc4c 	bl	800db42 <USB_ReadInterrupts>
 80092aa:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d003      	beq.n	80092be <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f987 	bl	80095ca <PCD_EP_ISR_Handler>

    return;
 80092bc:	e11b      	b.n	80094f6 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d013      	beq.n	80092f0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092da:	b292      	uxth	r2, r2
 80092dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f933 	bl	800954c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80092e6:	2100      	movs	r1, #0
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f94a 	bl	8009582 <HAL_PCD_SetAddress>

    return;
 80092ee:	e102      	b.n	80094f6 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00c      	beq.n	8009314 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009302:	b29a      	uxth	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800930c:	b292      	uxth	r2, r2
 800930e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009312:	e0f0      	b.n	80094f6 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00c      	beq.n	8009338 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009326:	b29a      	uxth	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009330:	b292      	uxth	r2, r2
 8009332:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009336:	e0de      	b.n	80094f6 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800933e:	2b00      	cmp	r3, #0
 8009340:	d027      	beq.n	8009392 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800934a:	b29a      	uxth	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f022 0204 	bic.w	r2, r2, #4
 8009354:	b292      	uxth	r2, r2
 8009356:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009362:	b29a      	uxth	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 0208 	bic.w	r2, r2, #8
 800936c:	b292      	uxth	r2, r2
 800936e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f8fc 	bl	8009570 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009380:	b29a      	uxth	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800938a:	b292      	uxth	r2, r2
 800938c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009390:	e0b1      	b.n	80094f6 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 8085 	beq.w	80094a8 <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800939e:	2300      	movs	r3, #0
 80093a0:	77fb      	strb	r3, [r7, #31]
 80093a2:	e011      	b.n	80093c8 <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	461a      	mov	r2, r3
 80093aa:	7ffb      	ldrb	r3, [r7, #31]
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	441a      	add	r2, r3
 80093b0:	7ffb      	ldrb	r3, [r7, #31]
 80093b2:	8812      	ldrh	r2, [r2, #0]
 80093b4:	b292      	uxth	r2, r2
 80093b6:	005b      	lsls	r3, r3, #1
 80093b8:	f107 0120 	add.w	r1, r7, #32
 80093bc:	440b      	add	r3, r1
 80093be:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80093c2:	7ffb      	ldrb	r3, [r7, #31]
 80093c4:	3301      	adds	r3, #1
 80093c6:	77fb      	strb	r3, [r7, #31]
 80093c8:	7ffb      	ldrb	r3, [r7, #31]
 80093ca:	2b07      	cmp	r3, #7
 80093cc:	d9ea      	bls.n	80093a4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f042 0201 	orr.w	r2, r2, #1
 80093e0:	b292      	uxth	r2, r2
 80093e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f022 0201 	bic.w	r2, r2, #1
 80093f8:	b292      	uxth	r2, r2
 80093fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80093fe:	bf00      	nop
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009408:	b29b      	uxth	r3, r3
 800940a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0f6      	beq.n	8009400 <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800941a:	b29a      	uxth	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009424:	b292      	uxth	r2, r2
 8009426:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800942a:	2300      	movs	r3, #0
 800942c:	77fb      	strb	r3, [r7, #31]
 800942e:	e010      	b.n	8009452 <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8009430:	7ffb      	ldrb	r3, [r7, #31]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	6812      	ldr	r2, [r2, #0]
 8009436:	4611      	mov	r1, r2
 8009438:	7ffa      	ldrb	r2, [r7, #31]
 800943a:	0092      	lsls	r2, r2, #2
 800943c:	440a      	add	r2, r1
 800943e:	005b      	lsls	r3, r3, #1
 8009440:	f107 0120 	add.w	r1, r7, #32
 8009444:	440b      	add	r3, r1
 8009446:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800944a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800944c:	7ffb      	ldrb	r3, [r7, #31]
 800944e:	3301      	adds	r3, #1
 8009450:	77fb      	strb	r3, [r7, #31]
 8009452:	7ffb      	ldrb	r3, [r7, #31]
 8009454:	2b07      	cmp	r3, #7
 8009456:	d9eb      	bls.n	8009430 <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009460:	b29a      	uxth	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f042 0208 	orr.w	r2, r2, #8
 800946a:	b292      	uxth	r2, r2
 800946c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009478:	b29a      	uxth	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009482:	b292      	uxth	r2, r2
 8009484:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009490:	b29a      	uxth	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f042 0204 	orr.w	r2, r2, #4
 800949a:	b292      	uxth	r2, r2
 800949c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f85c 	bl	800955e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80094a6:	e026      	b.n	80094f6 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00f      	beq.n	80094d2 <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80094c4:	b292      	uxth	r2, r2
 80094c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f835 	bl	800953a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80094d0:	e011      	b.n	80094f6 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00c      	beq.n	80094f6 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094ee:	b292      	uxth	r2, r2
 80094f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80094f4:	bf00      	nop
  }
}
 80094f6:	3720      	adds	r7, #32
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	460b      	mov	r3, r1
 8009506:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	bc80      	pop	{r7}
 8009510:	4770      	bx	lr

08009512 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	460b      	mov	r3, r1
 800951c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800951e:	bf00      	nop
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	bc80      	pop	{r7}
 8009526:	4770      	bx	lr

08009528 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	bc80      	pop	{r7}
 8009538:	4770      	bx	lr

0800953a <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800953a:	b480      	push	{r7}
 800953c:	b083      	sub	sp, #12
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8009542:	bf00      	nop
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	bc80      	pop	{r7}
 800954a:	4770      	bx	lr

0800954c <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	bc80      	pop	{r7}
 800955c:	4770      	bx	lr

0800955e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800955e:	b480      	push	{r7}
 8009560:	b083      	sub	sp, #12
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8009566:	bf00      	nop
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	bc80      	pop	{r7}
 800956e:	4770      	bx	lr

08009570 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	bc80      	pop	{r7}
 8009580:	4770      	bx	lr

08009582 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b082      	sub	sp, #8
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	460b      	mov	r3, r1
 800958c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009594:	2b01      	cmp	r3, #1
 8009596:	d101      	bne.n	800959c <HAL_PCD_SetAddress+0x1a>
 8009598:	2302      	movs	r3, #2
 800959a:	e012      	b.n	80095c2 <HAL_PCD_SetAddress+0x40>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	78fa      	ldrb	r2, [r7, #3]
 80095b0:	4611      	mov	r1, r2
 80095b2:	4618      	mov	r0, r3
 80095b4:	f004 faa8 	bl	800db08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b096      	sub	sp, #88	; 0x58
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80095d2:	e3bc      	b.n	8009d4e <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80095dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80095e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	f003 030f 	and.w	r3, r3, #15
 80095ea:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80095ee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f040 8176 	bne.w	80098e4 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80095f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80095fc:	f003 0310 	and.w	r3, r3, #16
 8009600:	2b00      	cmp	r3, #0
 8009602:	d14f      	bne.n	80096a4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	b29b      	uxth	r3, r3
 800960c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009614:	81fb      	strh	r3, [r7, #14]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	89fb      	ldrh	r3, [r7, #14]
 800961c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009624:	b29b      	uxth	r3, r3
 8009626:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	3310      	adds	r3, #16
 800962c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009636:	b29b      	uxth	r3, r3
 8009638:	461a      	mov	r2, r3
 800963a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	4413      	add	r3, r2
 8009642:	3302      	adds	r3, #2
 8009644:	005b      	lsls	r3, r3, #1
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	6812      	ldr	r2, [r2, #0]
 800964a:	4413      	add	r3, r2
 800964c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009658:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800965a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800965c:	695a      	ldr	r2, [r3, #20]
 800965e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009660:	69db      	ldr	r3, [r3, #28]
 8009662:	441a      	add	r2, r3
 8009664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009666:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009668:	2100      	movs	r1, #0
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7ff ff51 	bl	8009512 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	7b5b      	ldrb	r3, [r3, #13]
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 8369 	beq.w	8009d4e <PCD_EP_ISR_Handler+0x784>
 800967c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	2b00      	cmp	r3, #0
 8009682:	f040 8364 	bne.w	8009d4e <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	7b5b      	ldrb	r3, [r3, #13]
 800968a:	b2db      	uxtb	r3, r3
 800968c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009690:	b2da      	uxtb	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	b292      	uxth	r2, r2
 8009698:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	735a      	strb	r2, [r3, #13]
 80096a2:	e354      	b.n	8009d4e <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096aa:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80096b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80096ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d034      	beq.n	800972c <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	461a      	mov	r2, r3
 80096ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	00db      	lsls	r3, r3, #3
 80096d4:	4413      	add	r3, r2
 80096d6:	3306      	adds	r3, #6
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	6812      	ldr	r2, [r2, #0]
 80096de:	4413      	add	r3, r2
 80096e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80096ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80096f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80096fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009700:	b29b      	uxth	r3, r3
 8009702:	f004 fa72 	bl	800dbea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	881b      	ldrh	r3, [r3, #0]
 800970c:	b29a      	uxth	r2, r3
 800970e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009712:	4013      	ands	r3, r2
 8009714:	823b      	strh	r3, [r7, #16]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	8a3a      	ldrh	r2, [r7, #16]
 800971c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009720:	b292      	uxth	r2, r2
 8009722:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7ff feff 	bl	8009528 <HAL_PCD_SetupStageCallback>
 800972a:	e310      	b.n	8009d4e <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800972c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009730:	2b00      	cmp	r3, #0
 8009732:	f280 830c 	bge.w	8009d4e <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	b29a      	uxth	r2, r3
 800973e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009742:	4013      	ands	r3, r2
 8009744:	83fb      	strh	r3, [r7, #30]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	8bfa      	ldrh	r2, [r7, #30]
 800974c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009750:	b292      	uxth	r2, r2
 8009752:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800975c:	b29b      	uxth	r3, r3
 800975e:	461a      	mov	r2, r3
 8009760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	00db      	lsls	r3, r3, #3
 8009766:	4413      	add	r3, r2
 8009768:	3306      	adds	r3, #6
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	6812      	ldr	r2, [r2, #0]
 8009770:	4413      	add	r3, r2
 8009772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009776:	881b      	ldrh	r3, [r3, #0]
 8009778:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800977c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800977e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009782:	69db      	ldr	r3, [r3, #28]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d019      	beq.n	80097bc <PCD_EP_ISR_Handler+0x1f2>
 8009788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d015      	beq.n	80097bc <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6818      	ldr	r0, [r3, #0]
 8009794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009796:	6959      	ldr	r1, [r3, #20]
 8009798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800979a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800979c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800979e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	f004 fa22 	bl	800dbea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80097a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097a8:	695a      	ldr	r2, [r3, #20]
 80097aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	441a      	add	r2, r3
 80097b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097b2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80097b4:	2100      	movs	r1, #0
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7ff fea0 	bl	80094fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	881b      	ldrh	r3, [r3, #0]
 80097c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80097c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80097ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f040 82bd 	bne.w	8009d4e <PCD_EP_ISR_Handler+0x784>
 80097d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80097d8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80097dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097e0:	f000 82b5 	beq.w	8009d4e <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	61bb      	str	r3, [r7, #24]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	461a      	mov	r2, r3
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	4413      	add	r3, r2
 80097fa:	61bb      	str	r3, [r7, #24]
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009802:	617b      	str	r3, [r7, #20]
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	881b      	ldrh	r3, [r3, #0]
 8009808:	b29b      	uxth	r3, r3
 800980a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800980e:	b29a      	uxth	r2, r3
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	801a      	strh	r2, [r3, #0]
 8009814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	2b3e      	cmp	r3, #62	; 0x3e
 800981a:	d91d      	bls.n	8009858 <PCD_EP_ISR_Handler+0x28e>
 800981c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	095b      	lsrs	r3, r3, #5
 8009822:	647b      	str	r3, [r7, #68]	; 0x44
 8009824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	f003 031f 	and.w	r3, r3, #31
 800982c:	2b00      	cmp	r3, #0
 800982e:	d102      	bne.n	8009836 <PCD_EP_ISR_Handler+0x26c>
 8009830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009832:	3b01      	subs	r3, #1
 8009834:	647b      	str	r3, [r7, #68]	; 0x44
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	881b      	ldrh	r3, [r3, #0]
 800983a:	b29a      	uxth	r2, r3
 800983c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800983e:	b29b      	uxth	r3, r3
 8009840:	029b      	lsls	r3, r3, #10
 8009842:	b29b      	uxth	r3, r3
 8009844:	4313      	orrs	r3, r2
 8009846:	b29b      	uxth	r3, r3
 8009848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800984c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009850:	b29a      	uxth	r2, r3
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	801a      	strh	r2, [r3, #0]
 8009856:	e026      	b.n	80098a6 <PCD_EP_ISR_Handler+0x2dc>
 8009858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10a      	bne.n	8009876 <PCD_EP_ISR_Handler+0x2ac>
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	b29b      	uxth	r3, r3
 8009866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800986a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800986e:	b29a      	uxth	r2, r3
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	801a      	strh	r2, [r3, #0]
 8009874:	e017      	b.n	80098a6 <PCD_EP_ISR_Handler+0x2dc>
 8009876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	085b      	lsrs	r3, r3, #1
 800987c:	647b      	str	r3, [r7, #68]	; 0x44
 800987e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	2b00      	cmp	r3, #0
 8009888:	d002      	beq.n	8009890 <PCD_EP_ISR_Handler+0x2c6>
 800988a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800988c:	3301      	adds	r3, #1
 800988e:	647b      	str	r3, [r7, #68]	; 0x44
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	b29a      	uxth	r2, r3
 8009896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009898:	b29b      	uxth	r3, r3
 800989a:	029b      	lsls	r3, r3, #10
 800989c:	b29b      	uxth	r3, r3
 800989e:	4313      	orrs	r3, r2
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	881b      	ldrh	r3, [r3, #0]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098b6:	827b      	strh	r3, [r7, #18]
 80098b8:	8a7b      	ldrh	r3, [r7, #18]
 80098ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80098be:	827b      	strh	r3, [r7, #18]
 80098c0:	8a7b      	ldrh	r3, [r7, #18]
 80098c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80098c6:	827b      	strh	r3, [r7, #18]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	8a7b      	ldrh	r3, [r7, #18]
 80098ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098de:	b29b      	uxth	r3, r3
 80098e0:	8013      	strh	r3, [r2, #0]
 80098e2:	e234      	b.n	8009d4e <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	461a      	mov	r2, r3
 80098ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	4413      	add	r3, r2
 80098f2:	881b      	ldrh	r3, [r3, #0]
 80098f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80098f8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f280 80fc 	bge.w	8009afa <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	b29a      	uxth	r2, r3
 8009914:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009918:	4013      	ands	r3, r2
 800991a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8009930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009934:	b292      	uxth	r2, r2
 8009936:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009938:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800993c:	4613      	mov	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	00db      	lsls	r3, r3, #3
 8009944:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	4413      	add	r3, r2
 800994c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800994e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009950:	7b1b      	ldrb	r3, [r3, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d125      	bne.n	80099a2 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800995e:	b29b      	uxth	r3, r3
 8009960:	461a      	mov	r2, r3
 8009962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	00db      	lsls	r3, r3, #3
 8009968:	4413      	add	r3, r2
 800996a:	3306      	adds	r3, #6
 800996c:	005b      	lsls	r3, r3, #1
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	6812      	ldr	r2, [r2, #0]
 8009972:	4413      	add	r3, r2
 8009974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800997e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8009982:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009986:	2b00      	cmp	r3, #0
 8009988:	f000 8092 	beq.w	8009ab0 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6818      	ldr	r0, [r3, #0]
 8009990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009992:	6959      	ldr	r1, [r3, #20]
 8009994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009996:	88da      	ldrh	r2, [r3, #6]
 8009998:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800999c:	f004 f925 	bl	800dbea <USB_ReadPMA>
 80099a0:	e086      	b.n	8009ab0 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80099a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099a4:	78db      	ldrb	r3, [r3, #3]
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d10a      	bne.n	80099c0 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80099aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80099ae:	461a      	mov	r2, r3
 80099b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f9d9 	bl	8009d6a <HAL_PCD_EP_DB_Receive>
 80099b8:	4603      	mov	r3, r0
 80099ba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80099be:	e077      	b.n	8009ab0 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	461a      	mov	r2, r3
 80099c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	4413      	add	r3, r2
 80099ce:	881b      	ldrh	r3, [r3, #0]
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099da:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	441a      	add	r2, r3
 80099ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80099f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d024      	beq.n	8009a68 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	461a      	mov	r2, r3
 8009a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	00db      	lsls	r3, r3, #3
 8009a30:	4413      	add	r3, r2
 8009a32:	3302      	adds	r3, #2
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	6812      	ldr	r2, [r2, #0]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a40:	881b      	ldrh	r3, [r3, #0]
 8009a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a46:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8009a4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d02e      	beq.n	8009ab0 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6818      	ldr	r0, [r3, #0]
 8009a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a58:	6959      	ldr	r1, [r3, #20]
 8009a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a5c:	891a      	ldrh	r2, [r3, #8]
 8009a5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009a62:	f004 f8c2 	bl	800dbea <USB_ReadPMA>
 8009a66:	e023      	b.n	8009ab0 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	461a      	mov	r2, r3
 8009a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	00db      	lsls	r3, r3, #3
 8009a7a:	4413      	add	r3, r2
 8009a7c:	3306      	adds	r3, #6
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	6812      	ldr	r2, [r2, #0]
 8009a84:	4413      	add	r3, r2
 8009a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a8a:	881b      	ldrh	r3, [r3, #0]
 8009a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a90:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8009a94:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d009      	beq.n	8009ab0 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6818      	ldr	r0, [r3, #0]
 8009aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aa2:	6959      	ldr	r1, [r3, #20]
 8009aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aa6:	895a      	ldrh	r2, [r3, #10]
 8009aa8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009aac:	f004 f89d 	bl	800dbea <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ab2:	69da      	ldr	r2, [r3, #28]
 8009ab4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009ab8:	441a      	add	r2, r3
 8009aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009abc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ac0:	695a      	ldr	r2, [r3, #20]
 8009ac2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009ac6:	441a      	add	r2, r3
 8009ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d005      	beq.n	8009ae0 <PCD_EP_ISR_Handler+0x516>
 8009ad4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8009ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d206      	bcs.n	8009aee <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff fd08 	bl	80094fc <HAL_PCD_DataOutStageCallback>
 8009aec:	e005      	b.n	8009afa <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009af4:	4618      	mov	r0, r3
 8009af6:	f002 febb 	bl	800c870 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009afa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 8123 	beq.w	8009d4e <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8009b08:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	00db      	lsls	r3, r3, #3
 8009b14:	3310      	adds	r3, #16
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	4413      	add	r3, r2
 8009b1a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	461a      	mov	r2, r3
 8009b22:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	881b      	ldrh	r3, [r3, #0]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	441a      	add	r2, r3
 8009b48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b5a:	78db      	ldrb	r3, [r3, #3]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	f040 80a2 	bne.w	8009ca6 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 8009b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b64:	2200      	movs	r2, #0
 8009b66:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b6a:	7b1b      	ldrb	r3, [r3, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 8093 	beq.w	8009c98 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009b72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d046      	beq.n	8009c0c <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b80:	785b      	ldrb	r3, [r3, #1]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d126      	bne.n	8009bd4 <PCD_EP_ISR_Handler+0x60a>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	461a      	mov	r2, r3
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	4413      	add	r3, r2
 8009b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	011a      	lsls	r2, r3, #4
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009bac:	623b      	str	r3, [r7, #32]
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	801a      	strh	r2, [r3, #0]
 8009bbe:	6a3b      	ldr	r3, [r7, #32]
 8009bc0:	881b      	ldrh	r3, [r3, #0]
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	801a      	strh	r2, [r3, #0]
 8009bd2:	e061      	b.n	8009c98 <PCD_EP_ISR_Handler+0x6ce>
 8009bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bd6:	785b      	ldrb	r3, [r3, #1]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d15d      	bne.n	8009c98 <PCD_EP_ISR_Handler+0x6ce>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	461a      	mov	r2, r3
 8009bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf0:	4413      	add	r3, r2
 8009bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	011a      	lsls	r2, r3, #4
 8009bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c06:	2200      	movs	r2, #0
 8009c08:	801a      	strh	r2, [r3, #0]
 8009c0a:	e045      	b.n	8009c98 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c14:	785b      	ldrb	r3, [r3, #1]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d126      	bne.n	8009c68 <PCD_EP_ISR_Handler+0x69e>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2e:	4413      	add	r3, r2
 8009c30:	637b      	str	r3, [r7, #52]	; 0x34
 8009c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	011a      	lsls	r2, r3, #4
 8009c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c40:	633b      	str	r3, [r7, #48]	; 0x30
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c50:	801a      	strh	r2, [r3, #0]
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	801a      	strh	r2, [r3, #0]
 8009c66:	e017      	b.n	8009c98 <PCD_EP_ISR_Handler+0x6ce>
 8009c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c6a:	785b      	ldrb	r3, [r3, #1]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d113      	bne.n	8009c98 <PCD_EP_ISR_Handler+0x6ce>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c7e:	4413      	add	r3, r2
 8009c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	011a      	lsls	r2, r3, #4
 8009c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c94:	2200      	movs	r2, #0
 8009c96:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7ff fc37 	bl	8009512 <HAL_PCD_DataInStageCallback>
 8009ca4:	e053      	b.n	8009d4e <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009ca6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d146      	bne.n	8009d40 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	4413      	add	r3, r2
 8009cc6:	3302      	adds	r3, #2
 8009cc8:	005b      	lsls	r3, r3, #1
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	6812      	ldr	r2, [r2, #0]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cd4:	881b      	ldrh	r3, [r3, #0]
 8009cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8009cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ce0:	699a      	ldr	r2, [r3, #24]
 8009ce2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d907      	bls.n	8009cfa <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8009cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cec:	699a      	ldr	r2, [r3, #24]
 8009cee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009cf2:	1ad2      	subs	r2, r2, r3
 8009cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cf6:	619a      	str	r2, [r3, #24]
 8009cf8:	e002      	b.n	8009d00 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8009cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8009d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d106      	bne.n	8009d16 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7ff fbff 	bl	8009512 <HAL_PCD_DataInStageCallback>
 8009d14:	e01b      	b.n	8009d4e <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d18:	695a      	ldr	r2, [r3, #20]
 8009d1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d1e:	441a      	add	r2, r3
 8009d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d22:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d26:	69da      	ldr	r2, [r3, #28]
 8009d28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d2c:	441a      	add	r2, r3
 8009d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d30:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f002 fd99 	bl	800c870 <USB_EPStartXfer>
 8009d3e:	e006      	b.n	8009d4e <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009d40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009d44:	461a      	mov	r2, r3
 8009d46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f91b 	bl	8009f84 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	b21b      	sxth	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f6ff ac3a 	blt.w	80095d4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3758      	adds	r7, #88	; 0x58
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b088      	sub	sp, #32
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	4613      	mov	r3, r2
 8009d76:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009d78:	88fb      	ldrh	r3, [r7, #6]
 8009d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d07e      	beq.n	8009e80 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	00db      	lsls	r3, r3, #3
 8009d94:	4413      	add	r3, r2
 8009d96:	3302      	adds	r3, #2
 8009d98:	005b      	lsls	r3, r3, #1
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	6812      	ldr	r2, [r2, #0]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009daa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	699a      	ldr	r2, [r3, #24]
 8009db0:	8b7b      	ldrh	r3, [r7, #26]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d306      	bcc.n	8009dc4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	699a      	ldr	r2, [r3, #24]
 8009dba:	8b7b      	ldrh	r3, [r7, #26]
 8009dbc:	1ad2      	subs	r2, r2, r3
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	619a      	str	r2, [r3, #24]
 8009dc2:	e002      	b.n	8009dca <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d123      	bne.n	8009e1a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4413      	add	r3, r2
 8009de0:	881b      	ldrh	r3, [r3, #0]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dec:	833b      	strh	r3, [r7, #24]
 8009dee:	8b3b      	ldrh	r3, [r7, #24]
 8009df0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009df4:	833b      	strh	r3, [r7, #24]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	441a      	add	r2, r3
 8009e04:	8b3b      	ldrh	r3, [r7, #24]
 8009e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009e1a:	88fb      	ldrh	r3, [r7, #6]
 8009e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d01f      	beq.n	8009e64 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	4413      	add	r3, r2
 8009e32:	881b      	ldrh	r3, [r3, #0]
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e3e:	82fb      	strh	r3, [r7, #22]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	461a      	mov	r2, r3
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	441a      	add	r2, r3
 8009e4e:	8afb      	ldrh	r3, [r7, #22]
 8009e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009e64:	8b7b      	ldrh	r3, [r7, #26]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f000 8087 	beq.w	8009f7a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6818      	ldr	r0, [r3, #0]
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	6959      	ldr	r1, [r3, #20]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	891a      	ldrh	r2, [r3, #8]
 8009e78:	8b7b      	ldrh	r3, [r7, #26]
 8009e7a:	f003 feb6 	bl	800dbea <USB_ReadPMA>
 8009e7e:	e07c      	b.n	8009f7a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	00db      	lsls	r3, r3, #3
 8009e92:	4413      	add	r3, r2
 8009e94:	3306      	adds	r3, #6
 8009e96:	005b      	lsls	r3, r3, #1
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	6812      	ldr	r2, [r2, #0]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ea8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	699a      	ldr	r2, [r3, #24]
 8009eae:	8b7b      	ldrh	r3, [r7, #26]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d306      	bcc.n	8009ec2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	699a      	ldr	r2, [r3, #24]
 8009eb8:	8b7b      	ldrh	r3, [r7, #26]
 8009eba:	1ad2      	subs	r2, r2, r3
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	619a      	str	r2, [r3, #24]
 8009ec0:	e002      	b.n	8009ec8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d123      	bne.n	8009f18 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eea:	83fb      	strh	r3, [r7, #30]
 8009eec:	8bfb      	ldrh	r3, [r7, #30]
 8009eee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ef2:	83fb      	strh	r3, [r7, #30]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	441a      	add	r2, r3
 8009f02:	8bfb      	ldrh	r3, [r7, #30]
 8009f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009f18:	88fb      	ldrh	r3, [r7, #6]
 8009f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d11f      	bne.n	8009f62 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	461a      	mov	r2, r3
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	4413      	add	r3, r2
 8009f30:	881b      	ldrh	r3, [r3, #0]
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f3c:	83bb      	strh	r3, [r7, #28]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	461a      	mov	r2, r3
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	441a      	add	r2, r3
 8009f4c:	8bbb      	ldrh	r3, [r7, #28]
 8009f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009f62:	8b7b      	ldrh	r3, [r7, #26]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d008      	beq.n	8009f7a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6818      	ldr	r0, [r3, #0]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	6959      	ldr	r1, [r3, #20]
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	895a      	ldrh	r2, [r3, #10]
 8009f74:	8b7b      	ldrh	r3, [r7, #26]
 8009f76:	f003 fe38 	bl	800dbea <USB_ReadPMA>
    }
  }

  return count;
 8009f7a:	8b7b      	ldrh	r3, [r7, #26]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3720      	adds	r7, #32
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b0a4      	sub	sp, #144	; 0x90
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009f92:	88fb      	ldrh	r3, [r7, #6]
 8009f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 81dd 	beq.w	800a358 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	461a      	mov	r2, r3
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	00db      	lsls	r3, r3, #3
 8009fb0:	4413      	add	r3, r2
 8009fb2:	3302      	adds	r3, #2
 8009fb4:	005b      	lsls	r3, r3, #1
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	6812      	ldr	r2, [r2, #0]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fc6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	699a      	ldr	r2, [r3, #24]
 8009fce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d907      	bls.n	8009fe6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	699a      	ldr	r2, [r3, #24]
 8009fda:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009fde:	1ad2      	subs	r2, r2, r3
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	619a      	str	r2, [r3, #24]
 8009fe4:	e002      	b.n	8009fec <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f040 80b9 	bne.w	800a168 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	785b      	ldrb	r3, [r3, #1]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d126      	bne.n	800a04c <HAL_PCD_EP_DB_Transmit+0xc8>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	461a      	mov	r2, r3
 800a010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a012:	4413      	add	r3, r2
 800a014:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	011a      	lsls	r2, r3, #4
 800a01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01e:	4413      	add	r3, r2
 800a020:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a024:	62bb      	str	r3, [r7, #40]	; 0x28
 800a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a030:	b29a      	uxth	r2, r3
 800a032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a034:	801a      	strh	r2, [r3, #0]
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	881b      	ldrh	r3, [r3, #0]
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a044:	b29a      	uxth	r2, r3
 800a046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a048:	801a      	strh	r2, [r3, #0]
 800a04a:	e01a      	b.n	800a082 <HAL_PCD_EP_DB_Transmit+0xfe>
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	785b      	ldrb	r3, [r3, #1]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d116      	bne.n	800a082 <HAL_PCD_EP_DB_Transmit+0xfe>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	637b      	str	r3, [r7, #52]	; 0x34
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a062:	b29b      	uxth	r3, r3
 800a064:	461a      	mov	r2, r3
 800a066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a068:	4413      	add	r3, r2
 800a06a:	637b      	str	r3, [r7, #52]	; 0x34
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	011a      	lsls	r2, r3, #4
 800a072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a074:	4413      	add	r3, r2
 800a076:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a07a:	633b      	str	r3, [r7, #48]	; 0x30
 800a07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07e:	2200      	movs	r2, #0
 800a080:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	627b      	str	r3, [r7, #36]	; 0x24
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	785b      	ldrb	r3, [r3, #1]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d126      	bne.n	800a0de <HAL_PCD_EP_DB_Transmit+0x15a>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	61fb      	str	r3, [r7, #28]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	61fb      	str	r3, [r7, #28]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	011a      	lsls	r2, r3, #4
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a0b6:	61bb      	str	r3, [r7, #24]
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	881b      	ldrh	r3, [r3, #0]
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	801a      	strh	r2, [r3, #0]
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	881b      	ldrh	r3, [r3, #0]
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	801a      	strh	r2, [r3, #0]
 800a0dc:	e017      	b.n	800a10e <HAL_PCD_EP_DB_Transmit+0x18a>
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	785b      	ldrb	r3, [r3, #1]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d113      	bne.n	800a10e <HAL_PCD_EP_DB_Transmit+0x18a>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f4:	4413      	add	r3, r2
 800a0f6:	627b      	str	r3, [r7, #36]	; 0x24
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	011a      	lsls	r2, r3, #4
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a100:	4413      	add	r3, r2
 800a102:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a106:	623b      	str	r3, [r7, #32]
 800a108:	6a3b      	ldr	r3, [r7, #32]
 800a10a:	2200      	movs	r2, #0
 800a10c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	4619      	mov	r1, r3
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f7ff f9fc 	bl	8009512 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a11a:	88fb      	ldrh	r3, [r7, #6]
 800a11c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 82fc 	beq.w	800a71e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	461a      	mov	r2, r3
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	4413      	add	r3, r2
 800a134:	881b      	ldrh	r3, [r3, #0]
 800a136:	b29b      	uxth	r3, r3
 800a138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a13c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a140:	82fb      	strh	r3, [r7, #22]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	441a      	add	r2, r3
 800a150:	8afb      	ldrh	r3, [r7, #22]
 800a152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a15a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a162:	b29b      	uxth	r3, r3
 800a164:	8013      	strh	r3, [r2, #0]
 800a166:	e2da      	b.n	800a71e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a168:	88fb      	ldrh	r3, [r7, #6]
 800a16a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d021      	beq.n	800a1b6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	461a      	mov	r2, r3
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	4413      	add	r3, r2
 800a180:	881b      	ldrh	r3, [r3, #0]
 800a182:	b29b      	uxth	r3, r3
 800a184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a18c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	461a      	mov	r2, r3
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	441a      	add	r2, r3
 800a19e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a1a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	f040 82ae 	bne.w	800a71e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	695a      	ldr	r2, [r3, #20]
 800a1c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a1ca:	441a      	add	r2, r3
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	69da      	ldr	r2, [r3, #28]
 800a1d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a1d8:	441a      	add	r2, r3
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	6a1a      	ldr	r2, [r3, #32]
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d30b      	bcc.n	800a202 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	6a1a      	ldr	r2, [r3, #32]
 800a1f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1fa:	1ad2      	subs	r2, r2, r3
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	621a      	str	r2, [r3, #32]
 800a200:	e017      	b.n	800a232 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d108      	bne.n	800a21c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800a20a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a20e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a21a:	e00a      	b.n	800a232 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2200      	movs	r2, #0
 800a220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	6a1b      	ldr	r3, [r3, #32]
 800a228:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	2200      	movs	r2, #0
 800a230:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	785b      	ldrb	r3, [r3, #1]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d165      	bne.n	800a306 <HAL_PCD_EP_DB_Transmit+0x382>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a248:	b29b      	uxth	r3, r3
 800a24a:	461a      	mov	r2, r3
 800a24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a24e:	4413      	add	r3, r2
 800a250:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	011a      	lsls	r2, r3, #4
 800a258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25a:	4413      	add	r3, r2
 800a25c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a260:	63bb      	str	r3, [r7, #56]	; 0x38
 800a262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a264:	881b      	ldrh	r3, [r3, #0]
 800a266:	b29b      	uxth	r3, r3
 800a268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a270:	801a      	strh	r2, [r3, #0]
 800a272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a276:	2b3e      	cmp	r3, #62	; 0x3e
 800a278:	d91d      	bls.n	800a2b6 <HAL_PCD_EP_DB_Transmit+0x332>
 800a27a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a27e:	095b      	lsrs	r3, r3, #5
 800a280:	64bb      	str	r3, [r7, #72]	; 0x48
 800a282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a286:	f003 031f 	and.w	r3, r3, #31
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d102      	bne.n	800a294 <HAL_PCD_EP_DB_Transmit+0x310>
 800a28e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a290:	3b01      	subs	r3, #1
 800a292:	64bb      	str	r3, [r7, #72]	; 0x48
 800a294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	b29a      	uxth	r2, r3
 800a29a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	029b      	lsls	r3, r3, #10
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b2:	801a      	strh	r2, [r3, #0]
 800a2b4:	e044      	b.n	800a340 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a2b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10a      	bne.n	800a2d4 <HAL_PCD_EP_DB_Transmit+0x350>
 800a2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c0:	881b      	ldrh	r3, [r3, #0]
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d0:	801a      	strh	r2, [r3, #0]
 800a2d2:	e035      	b.n	800a340 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a2d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2d8:	085b      	lsrs	r3, r3, #1
 800a2da:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2e0:	f003 0301 	and.w	r3, r3, #1
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d002      	beq.n	800a2ee <HAL_PCD_EP_DB_Transmit+0x36a>
 800a2e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	029b      	lsls	r3, r3, #10
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a302:	801a      	strh	r2, [r3, #0]
 800a304:	e01c      	b.n	800a340 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	785b      	ldrb	r3, [r3, #1]
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d118      	bne.n	800a340 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	647b      	str	r3, [r7, #68]	; 0x44
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	461a      	mov	r2, r3
 800a320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a322:	4413      	add	r3, r2
 800a324:	647b      	str	r3, [r7, #68]	; 0x44
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	011a      	lsls	r2, r3, #4
 800a32c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a32e:	4413      	add	r3, r2
 800a330:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a334:	643b      	str	r3, [r7, #64]	; 0x40
 800a336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a33e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6818      	ldr	r0, [r3, #0]
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	6959      	ldr	r1, [r3, #20]
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	891a      	ldrh	r2, [r3, #8]
 800a34c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a350:	b29b      	uxth	r3, r3
 800a352:	f003 fc05 	bl	800db60 <USB_WritePMA>
 800a356:	e1e2      	b.n	800a71e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a360:	b29b      	uxth	r3, r3
 800a362:	461a      	mov	r2, r3
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	00db      	lsls	r3, r3, #3
 800a36a:	4413      	add	r3, r2
 800a36c:	3306      	adds	r3, #6
 800a36e:	005b      	lsls	r3, r3, #1
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	6812      	ldr	r2, [r2, #0]
 800a374:	4413      	add	r3, r2
 800a376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a380:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	699a      	ldr	r2, [r3, #24]
 800a388:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d307      	bcc.n	800a3a0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	699a      	ldr	r2, [r3, #24]
 800a394:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a398:	1ad2      	subs	r2, r2, r3
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	619a      	str	r2, [r3, #24]
 800a39e:	e002      	b.n	800a3a6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f040 80c0 	bne.w	800a530 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	785b      	ldrb	r3, [r3, #1]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d126      	bne.n	800a406 <HAL_PCD_EP_DB_Transmit+0x482>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a3cc:	4413      	add	r3, r2
 800a3ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	011a      	lsls	r2, r3, #4
 800a3d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a3d8:	4413      	add	r3, r2
 800a3da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a3de:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3ee:	801a      	strh	r2, [r3, #0]
 800a3f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3f2:	881b      	ldrh	r3, [r3, #0]
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a402:	801a      	strh	r2, [r3, #0]
 800a404:	e01a      	b.n	800a43c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	785b      	ldrb	r3, [r3, #1]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d116      	bne.n	800a43c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	667b      	str	r3, [r7, #100]	; 0x64
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	461a      	mov	r2, r3
 800a420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a422:	4413      	add	r3, r2
 800a424:	667b      	str	r3, [r7, #100]	; 0x64
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	011a      	lsls	r2, r3, #4
 800a42c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a42e:	4413      	add	r3, r2
 800a430:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a434:	663b      	str	r3, [r7, #96]	; 0x60
 800a436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a438:	2200      	movs	r2, #0
 800a43a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	677b      	str	r3, [r7, #116]	; 0x74
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	785b      	ldrb	r3, [r3, #1]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d12b      	bne.n	800a4a2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a458:	b29b      	uxth	r3, r3
 800a45a:	461a      	mov	r2, r3
 800a45c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a45e:	4413      	add	r3, r2
 800a460:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	011a      	lsls	r2, r3, #4
 800a468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a46a:	4413      	add	r3, r2
 800a46c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a470:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a474:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a478:	881b      	ldrh	r3, [r3, #0]
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a480:	b29a      	uxth	r2, r3
 800a482:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a486:	801a      	strh	r2, [r3, #0]
 800a488:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a48c:	881b      	ldrh	r3, [r3, #0]
 800a48e:	b29b      	uxth	r3, r3
 800a490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a498:	b29a      	uxth	r2, r3
 800a49a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a49e:	801a      	strh	r2, [r3, #0]
 800a4a0:	e017      	b.n	800a4d2 <HAL_PCD_EP_DB_Transmit+0x54e>
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	785b      	ldrb	r3, [r3, #1]
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d113      	bne.n	800a4d2 <HAL_PCD_EP_DB_Transmit+0x54e>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4b8:	4413      	add	r3, r2
 800a4ba:	677b      	str	r3, [r7, #116]	; 0x74
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	011a      	lsls	r2, r3, #4
 800a4c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a4ca:	673b      	str	r3, [r7, #112]	; 0x70
 800a4cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f7ff f81a 	bl	8009512 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a4de:	88fb      	ldrh	r3, [r7, #6]
 800a4e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f040 811a 	bne.w	800a71e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	4413      	add	r3, r2
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a504:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	461a      	mov	r2, r3
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	441a      	add	r2, r3
 800a516:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800a51a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a51e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	8013      	strh	r3, [r2, #0]
 800a52e:	e0f6      	b.n	800a71e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a530:	88fb      	ldrh	r3, [r7, #6]
 800a532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a536:	2b00      	cmp	r3, #0
 800a538:	d121      	bne.n	800a57e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	461a      	mov	r2, r3
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	4413      	add	r3, r2
 800a548:	881b      	ldrh	r3, [r3, #0]
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a554:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	461a      	mov	r2, r3
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	441a      	add	r2, r3
 800a566:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a56a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a56e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a584:	2b01      	cmp	r3, #1
 800a586:	f040 80ca 	bne.w	800a71e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	695a      	ldr	r2, [r3, #20]
 800a58e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a592:	441a      	add	r2, r3
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	69da      	ldr	r2, [r3, #28]
 800a59c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a5a0:	441a      	add	r2, r3
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	6a1a      	ldr	r2, [r3, #32]
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d30b      	bcc.n	800a5ca <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	6a1a      	ldr	r2, [r3, #32]
 800a5be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5c2:	1ad2      	subs	r2, r2, r3
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	621a      	str	r2, [r3, #32]
 800a5c8:	e017      	b.n	800a5fa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d108      	bne.n	800a5e4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800a5d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a5d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a5e2:	e00a      	b.n	800a5fa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	6a1b      	ldr	r3, [r3, #32]
 800a5e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	657b      	str	r3, [r7, #84]	; 0x54
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	785b      	ldrb	r3, [r3, #1]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d165      	bne.n	800a6d4 <HAL_PCD_EP_DB_Transmit+0x750>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a616:	b29b      	uxth	r3, r3
 800a618:	461a      	mov	r2, r3
 800a61a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a61c:	4413      	add	r3, r2
 800a61e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	011a      	lsls	r2, r3, #4
 800a626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a628:	4413      	add	r3, r2
 800a62a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a62e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a632:	881b      	ldrh	r3, [r3, #0]
 800a634:	b29b      	uxth	r3, r3
 800a636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a63e:	801a      	strh	r2, [r3, #0]
 800a640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a644:	2b3e      	cmp	r3, #62	; 0x3e
 800a646:	d91d      	bls.n	800a684 <HAL_PCD_EP_DB_Transmit+0x700>
 800a648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a64c:	095b      	lsrs	r3, r3, #5
 800a64e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a650:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a654:	f003 031f 	and.w	r3, r3, #31
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d102      	bne.n	800a662 <HAL_PCD_EP_DB_Transmit+0x6de>
 800a65c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a65e:	3b01      	subs	r3, #1
 800a660:	66bb      	str	r3, [r7, #104]	; 0x68
 800a662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a664:	881b      	ldrh	r3, [r3, #0]
 800a666:	b29a      	uxth	r2, r3
 800a668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	029b      	lsls	r3, r3, #10
 800a66e:	b29b      	uxth	r3, r3
 800a670:	4313      	orrs	r3, r2
 800a672:	b29b      	uxth	r3, r3
 800a674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a680:	801a      	strh	r2, [r3, #0]
 800a682:	e041      	b.n	800a708 <HAL_PCD_EP_DB_Transmit+0x784>
 800a684:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10a      	bne.n	800a6a2 <HAL_PCD_EP_DB_Transmit+0x71e>
 800a68c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a68e:	881b      	ldrh	r3, [r3, #0]
 800a690:	b29b      	uxth	r3, r3
 800a692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a69e:	801a      	strh	r2, [r3, #0]
 800a6a0:	e032      	b.n	800a708 <HAL_PCD_EP_DB_Transmit+0x784>
 800a6a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6a6:	085b      	lsrs	r3, r3, #1
 800a6a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6ae:	f003 0301 	and.w	r3, r3, #1
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d002      	beq.n	800a6bc <HAL_PCD_EP_DB_Transmit+0x738>
 800a6b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6be:	881b      	ldrh	r3, [r3, #0]
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	029b      	lsls	r3, r3, #10
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6d0:	801a      	strh	r2, [r3, #0]
 800a6d2:	e019      	b.n	800a708 <HAL_PCD_EP_DB_Transmit+0x784>
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	785b      	ldrb	r3, [r3, #1]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d115      	bne.n	800a708 <HAL_PCD_EP_DB_Transmit+0x784>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ea:	4413      	add	r3, r2
 800a6ec:	657b      	str	r3, [r7, #84]	; 0x54
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	011a      	lsls	r2, r3, #4
 800a6f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a6fc:	653b      	str	r3, [r7, #80]	; 0x50
 800a6fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a702:	b29a      	uxth	r2, r3
 800a704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a706:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6818      	ldr	r0, [r3, #0]
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	6959      	ldr	r1, [r3, #20]
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	895a      	ldrh	r2, [r3, #10]
 800a714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a718:	b29b      	uxth	r3, r3
 800a71a:	f003 fa21 	bl	800db60 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	461a      	mov	r2, r3
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	4413      	add	r3, r2
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	b29b      	uxth	r3, r3
 800a730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a738:	82bb      	strh	r3, [r7, #20]
 800a73a:	8abb      	ldrh	r3, [r7, #20]
 800a73c:	f083 0310 	eor.w	r3, r3, #16
 800a740:	82bb      	strh	r3, [r7, #20]
 800a742:	8abb      	ldrh	r3, [r7, #20]
 800a744:	f083 0320 	eor.w	r3, r3, #32
 800a748:	82bb      	strh	r3, [r7, #20]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	461a      	mov	r2, r3
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	441a      	add	r2, r3
 800a758:	8abb      	ldrh	r3, [r7, #20]
 800a75a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a75e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3790      	adds	r7, #144	; 0x90
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a778:	b480      	push	{r7}
 800a77a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800a77c:	4b03      	ldr	r3, [pc, #12]	; (800a78c <HAL_PWR_EnableBkUpAccess+0x14>)
 800a77e:	2201      	movs	r2, #1
 800a780:	601a      	str	r2, [r3, #0]
}
 800a782:	bf00      	nop
 800a784:	46bd      	mov	sp, r7
 800a786:	bc80      	pop	{r7}
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop
 800a78c:	420e0020 	.word	0x420e0020

0800a790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e26c      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 0301 	and.w	r3, r3, #1
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f000 8087 	beq.w	800a8be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a7b0:	4b92      	ldr	r3, [pc, #584]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	f003 030c 	and.w	r3, r3, #12
 800a7b8:	2b04      	cmp	r3, #4
 800a7ba:	d00c      	beq.n	800a7d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a7bc:	4b8f      	ldr	r3, [pc, #572]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	f003 030c 	and.w	r3, r3, #12
 800a7c4:	2b08      	cmp	r3, #8
 800a7c6:	d112      	bne.n	800a7ee <HAL_RCC_OscConfig+0x5e>
 800a7c8:	4b8c      	ldr	r3, [pc, #560]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7d4:	d10b      	bne.n	800a7ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7d6:	4b89      	ldr	r3, [pc, #548]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d06c      	beq.n	800a8bc <HAL_RCC_OscConfig+0x12c>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d168      	bne.n	800a8bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e246      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f6:	d106      	bne.n	800a806 <HAL_RCC_OscConfig+0x76>
 800a7f8:	4b80      	ldr	r3, [pc, #512]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a7f      	ldr	r2, [pc, #508]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a7fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a802:	6013      	str	r3, [r2, #0]
 800a804:	e02e      	b.n	800a864 <HAL_RCC_OscConfig+0xd4>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10c      	bne.n	800a828 <HAL_RCC_OscConfig+0x98>
 800a80e:	4b7b      	ldr	r3, [pc, #492]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a7a      	ldr	r2, [pc, #488]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a818:	6013      	str	r3, [r2, #0]
 800a81a:	4b78      	ldr	r3, [pc, #480]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a77      	ldr	r2, [pc, #476]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a824:	6013      	str	r3, [r2, #0]
 800a826:	e01d      	b.n	800a864 <HAL_RCC_OscConfig+0xd4>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a830:	d10c      	bne.n	800a84c <HAL_RCC_OscConfig+0xbc>
 800a832:	4b72      	ldr	r3, [pc, #456]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a71      	ldr	r2, [pc, #452]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a83c:	6013      	str	r3, [r2, #0]
 800a83e:	4b6f      	ldr	r3, [pc, #444]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a6e      	ldr	r2, [pc, #440]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a848:	6013      	str	r3, [r2, #0]
 800a84a:	e00b      	b.n	800a864 <HAL_RCC_OscConfig+0xd4>
 800a84c:	4b6b      	ldr	r3, [pc, #428]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a6a      	ldr	r2, [pc, #424]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	4b68      	ldr	r3, [pc, #416]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a67      	ldr	r2, [pc, #412]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a85e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a862:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d013      	beq.n	800a894 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a86c:	f7fe f8ce 	bl	8008a0c <HAL_GetTick>
 800a870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a872:	e008      	b.n	800a886 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a874:	f7fe f8ca 	bl	8008a0c <HAL_GetTick>
 800a878:	4602      	mov	r2, r0
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	2b64      	cmp	r3, #100	; 0x64
 800a880:	d901      	bls.n	800a886 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a882:	2303      	movs	r3, #3
 800a884:	e1fa      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a886:	4b5d      	ldr	r3, [pc, #372]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d0f0      	beq.n	800a874 <HAL_RCC_OscConfig+0xe4>
 800a892:	e014      	b.n	800a8be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a894:	f7fe f8ba 	bl	8008a0c <HAL_GetTick>
 800a898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a89a:	e008      	b.n	800a8ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a89c:	f7fe f8b6 	bl	8008a0c <HAL_GetTick>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	2b64      	cmp	r3, #100	; 0x64
 800a8a8:	d901      	bls.n	800a8ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	e1e6      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8ae:	4b53      	ldr	r3, [pc, #332]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1f0      	bne.n	800a89c <HAL_RCC_OscConfig+0x10c>
 800a8ba:	e000      	b.n	800a8be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0302 	and.w	r3, r3, #2
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d063      	beq.n	800a992 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a8ca:	4b4c      	ldr	r3, [pc, #304]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f003 030c 	and.w	r3, r3, #12
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00b      	beq.n	800a8ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a8d6:	4b49      	ldr	r3, [pc, #292]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	f003 030c 	and.w	r3, r3, #12
 800a8de:	2b08      	cmp	r3, #8
 800a8e0:	d11c      	bne.n	800a91c <HAL_RCC_OscConfig+0x18c>
 800a8e2:	4b46      	ldr	r3, [pc, #280]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d116      	bne.n	800a91c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8ee:	4b43      	ldr	r3, [pc, #268]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0302 	and.w	r3, r3, #2
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d005      	beq.n	800a906 <HAL_RCC_OscConfig+0x176>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d001      	beq.n	800a906 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e1ba      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a906:	4b3d      	ldr	r3, [pc, #244]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	695b      	ldr	r3, [r3, #20]
 800a912:	00db      	lsls	r3, r3, #3
 800a914:	4939      	ldr	r1, [pc, #228]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a916:	4313      	orrs	r3, r2
 800a918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a91a:	e03a      	b.n	800a992 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d020      	beq.n	800a966 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a924:	4b36      	ldr	r3, [pc, #216]	; (800aa00 <HAL_RCC_OscConfig+0x270>)
 800a926:	2201      	movs	r2, #1
 800a928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a92a:	f7fe f86f 	bl	8008a0c <HAL_GetTick>
 800a92e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a930:	e008      	b.n	800a944 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a932:	f7fe f86b 	bl	8008a0c <HAL_GetTick>
 800a936:	4602      	mov	r2, r0
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d901      	bls.n	800a944 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a940:	2303      	movs	r3, #3
 800a942:	e19b      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a944:	4b2d      	ldr	r3, [pc, #180]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0302 	and.w	r3, r3, #2
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d0f0      	beq.n	800a932 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a950:	4b2a      	ldr	r3, [pc, #168]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	00db      	lsls	r3, r3, #3
 800a95e:	4927      	ldr	r1, [pc, #156]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a960:	4313      	orrs	r3, r2
 800a962:	600b      	str	r3, [r1, #0]
 800a964:	e015      	b.n	800a992 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a966:	4b26      	ldr	r3, [pc, #152]	; (800aa00 <HAL_RCC_OscConfig+0x270>)
 800a968:	2200      	movs	r2, #0
 800a96a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a96c:	f7fe f84e 	bl	8008a0c <HAL_GetTick>
 800a970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a972:	e008      	b.n	800a986 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a974:	f7fe f84a 	bl	8008a0c <HAL_GetTick>
 800a978:	4602      	mov	r2, r0
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	1ad3      	subs	r3, r2, r3
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d901      	bls.n	800a986 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a982:	2303      	movs	r3, #3
 800a984:	e17a      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a986:	4b1d      	ldr	r3, [pc, #116]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 0302 	and.w	r3, r3, #2
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1f0      	bne.n	800a974 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0308 	and.w	r3, r3, #8
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d03a      	beq.n	800aa14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d019      	beq.n	800a9da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9a6:	4b17      	ldr	r3, [pc, #92]	; (800aa04 <HAL_RCC_OscConfig+0x274>)
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9ac:	f7fe f82e 	bl	8008a0c <HAL_GetTick>
 800a9b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9b2:	e008      	b.n	800a9c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9b4:	f7fe f82a 	bl	8008a0c <HAL_GetTick>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	d901      	bls.n	800a9c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a9c2:	2303      	movs	r3, #3
 800a9c4:	e15a      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a9c6:	4b0d      	ldr	r3, [pc, #52]	; (800a9fc <HAL_RCC_OscConfig+0x26c>)
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ca:	f003 0302 	and.w	r3, r3, #2
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d0f0      	beq.n	800a9b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a9d2:	2001      	movs	r0, #1
 800a9d4:	f000 facc 	bl	800af70 <RCC_Delay>
 800a9d8:	e01c      	b.n	800aa14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a9da:	4b0a      	ldr	r3, [pc, #40]	; (800aa04 <HAL_RCC_OscConfig+0x274>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9e0:	f7fe f814 	bl	8008a0c <HAL_GetTick>
 800a9e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a9e6:	e00f      	b.n	800aa08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9e8:	f7fe f810 	bl	8008a0c <HAL_GetTick>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d908      	bls.n	800aa08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e140      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
 800a9fa:	bf00      	nop
 800a9fc:	40021000 	.word	0x40021000
 800aa00:	42420000 	.word	0x42420000
 800aa04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa08:	4b9e      	ldr	r3, [pc, #632]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aa0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0c:	f003 0302 	and.w	r3, r3, #2
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1e9      	bne.n	800a9e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 0304 	and.w	r3, r3, #4
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 80a6 	beq.w	800ab6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa22:	2300      	movs	r3, #0
 800aa24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa26:	4b97      	ldr	r3, [pc, #604]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aa28:	69db      	ldr	r3, [r3, #28]
 800aa2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10d      	bne.n	800aa4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa32:	4b94      	ldr	r3, [pc, #592]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aa34:	69db      	ldr	r3, [r3, #28]
 800aa36:	4a93      	ldr	r2, [pc, #588]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aa38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa3c:	61d3      	str	r3, [r2, #28]
 800aa3e:	4b91      	ldr	r3, [pc, #580]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aa40:	69db      	ldr	r3, [r3, #28]
 800aa42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa46:	60bb      	str	r3, [r7, #8]
 800aa48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa4e:	4b8e      	ldr	r3, [pc, #568]	; (800ac88 <HAL_RCC_OscConfig+0x4f8>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d118      	bne.n	800aa8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aa5a:	4b8b      	ldr	r3, [pc, #556]	; (800ac88 <HAL_RCC_OscConfig+0x4f8>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a8a      	ldr	r2, [pc, #552]	; (800ac88 <HAL_RCC_OscConfig+0x4f8>)
 800aa60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa66:	f7fd ffd1 	bl	8008a0c <HAL_GetTick>
 800aa6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa6c:	e008      	b.n	800aa80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa6e:	f7fd ffcd 	bl	8008a0c <HAL_GetTick>
 800aa72:	4602      	mov	r2, r0
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	1ad3      	subs	r3, r2, r3
 800aa78:	2b64      	cmp	r3, #100	; 0x64
 800aa7a:	d901      	bls.n	800aa80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	e0fd      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa80:	4b81      	ldr	r3, [pc, #516]	; (800ac88 <HAL_RCC_OscConfig+0x4f8>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d0f0      	beq.n	800aa6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d106      	bne.n	800aaa2 <HAL_RCC_OscConfig+0x312>
 800aa94:	4b7b      	ldr	r3, [pc, #492]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aa96:	6a1b      	ldr	r3, [r3, #32]
 800aa98:	4a7a      	ldr	r2, [pc, #488]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aa9a:	f043 0301 	orr.w	r3, r3, #1
 800aa9e:	6213      	str	r3, [r2, #32]
 800aaa0:	e02d      	b.n	800aafe <HAL_RCC_OscConfig+0x36e>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10c      	bne.n	800aac4 <HAL_RCC_OscConfig+0x334>
 800aaaa:	4b76      	ldr	r3, [pc, #472]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	4a75      	ldr	r2, [pc, #468]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aab0:	f023 0301 	bic.w	r3, r3, #1
 800aab4:	6213      	str	r3, [r2, #32]
 800aab6:	4b73      	ldr	r3, [pc, #460]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aab8:	6a1b      	ldr	r3, [r3, #32]
 800aaba:	4a72      	ldr	r2, [pc, #456]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aabc:	f023 0304 	bic.w	r3, r3, #4
 800aac0:	6213      	str	r3, [r2, #32]
 800aac2:	e01c      	b.n	800aafe <HAL_RCC_OscConfig+0x36e>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	2b05      	cmp	r3, #5
 800aaca:	d10c      	bne.n	800aae6 <HAL_RCC_OscConfig+0x356>
 800aacc:	4b6d      	ldr	r3, [pc, #436]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aace:	6a1b      	ldr	r3, [r3, #32]
 800aad0:	4a6c      	ldr	r2, [pc, #432]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aad2:	f043 0304 	orr.w	r3, r3, #4
 800aad6:	6213      	str	r3, [r2, #32]
 800aad8:	4b6a      	ldr	r3, [pc, #424]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aada:	6a1b      	ldr	r3, [r3, #32]
 800aadc:	4a69      	ldr	r2, [pc, #420]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aade:	f043 0301 	orr.w	r3, r3, #1
 800aae2:	6213      	str	r3, [r2, #32]
 800aae4:	e00b      	b.n	800aafe <HAL_RCC_OscConfig+0x36e>
 800aae6:	4b67      	ldr	r3, [pc, #412]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	4a66      	ldr	r2, [pc, #408]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aaec:	f023 0301 	bic.w	r3, r3, #1
 800aaf0:	6213      	str	r3, [r2, #32]
 800aaf2:	4b64      	ldr	r3, [pc, #400]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aaf4:	6a1b      	ldr	r3, [r3, #32]
 800aaf6:	4a63      	ldr	r2, [pc, #396]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800aaf8:	f023 0304 	bic.w	r3, r3, #4
 800aafc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d015      	beq.n	800ab32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab06:	f7fd ff81 	bl	8008a0c <HAL_GetTick>
 800ab0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab0c:	e00a      	b.n	800ab24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab0e:	f7fd ff7d 	bl	8008a0c <HAL_GetTick>
 800ab12:	4602      	mov	r2, r0
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d901      	bls.n	800ab24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e0ab      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab24:	4b57      	ldr	r3, [pc, #348]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800ab26:	6a1b      	ldr	r3, [r3, #32]
 800ab28:	f003 0302 	and.w	r3, r3, #2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0ee      	beq.n	800ab0e <HAL_RCC_OscConfig+0x37e>
 800ab30:	e014      	b.n	800ab5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab32:	f7fd ff6b 	bl	8008a0c <HAL_GetTick>
 800ab36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab38:	e00a      	b.n	800ab50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab3a:	f7fd ff67 	bl	8008a0c <HAL_GetTick>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	1ad3      	subs	r3, r2, r3
 800ab44:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d901      	bls.n	800ab50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	e095      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab50:	4b4c      	ldr	r3, [pc, #304]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800ab52:	6a1b      	ldr	r3, [r3, #32]
 800ab54:	f003 0302 	and.w	r3, r3, #2
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1ee      	bne.n	800ab3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d105      	bne.n	800ab6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab62:	4b48      	ldr	r3, [pc, #288]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800ab64:	69db      	ldr	r3, [r3, #28]
 800ab66:	4a47      	ldr	r2, [pc, #284]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800ab68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	69db      	ldr	r3, [r3, #28]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f000 8081 	beq.w	800ac7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab78:	4b42      	ldr	r3, [pc, #264]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	f003 030c 	and.w	r3, r3, #12
 800ab80:	2b08      	cmp	r3, #8
 800ab82:	d061      	beq.n	800ac48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	69db      	ldr	r3, [r3, #28]
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d146      	bne.n	800ac1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab8c:	4b3f      	ldr	r3, [pc, #252]	; (800ac8c <HAL_RCC_OscConfig+0x4fc>)
 800ab8e:	2200      	movs	r2, #0
 800ab90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab92:	f7fd ff3b 	bl	8008a0c <HAL_GetTick>
 800ab96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab98:	e008      	b.n	800abac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab9a:	f7fd ff37 	bl	8008a0c <HAL_GetTick>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	1ad3      	subs	r3, r2, r3
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d901      	bls.n	800abac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800aba8:	2303      	movs	r3, #3
 800abaa:	e067      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800abac:	4b35      	ldr	r3, [pc, #212]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1f0      	bne.n	800ab9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a1b      	ldr	r3, [r3, #32]
 800abbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abc0:	d108      	bne.n	800abd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800abc2:	4b30      	ldr	r3, [pc, #192]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	492d      	ldr	r1, [pc, #180]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800abd0:	4313      	orrs	r3, r2
 800abd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abd4:	4b2b      	ldr	r3, [pc, #172]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a19      	ldr	r1, [r3, #32]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe4:	430b      	orrs	r3, r1
 800abe6:	4927      	ldr	r1, [pc, #156]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800abe8:	4313      	orrs	r3, r2
 800abea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800abec:	4b27      	ldr	r3, [pc, #156]	; (800ac8c <HAL_RCC_OscConfig+0x4fc>)
 800abee:	2201      	movs	r2, #1
 800abf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abf2:	f7fd ff0b 	bl	8008a0c <HAL_GetTick>
 800abf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800abf8:	e008      	b.n	800ac0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abfa:	f7fd ff07 	bl	8008a0c <HAL_GetTick>
 800abfe:	4602      	mov	r2, r0
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d901      	bls.n	800ac0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	e037      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ac0c:	4b1d      	ldr	r3, [pc, #116]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d0f0      	beq.n	800abfa <HAL_RCC_OscConfig+0x46a>
 800ac18:	e02f      	b.n	800ac7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac1a:	4b1c      	ldr	r3, [pc, #112]	; (800ac8c <HAL_RCC_OscConfig+0x4fc>)
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac20:	f7fd fef4 	bl	8008a0c <HAL_GetTick>
 800ac24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac26:	e008      	b.n	800ac3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac28:	f7fd fef0 	bl	8008a0c <HAL_GetTick>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	1ad3      	subs	r3, r2, r3
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d901      	bls.n	800ac3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ac36:	2303      	movs	r3, #3
 800ac38:	e020      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac3a:	4b12      	ldr	r3, [pc, #72]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1f0      	bne.n	800ac28 <HAL_RCC_OscConfig+0x498>
 800ac46:	e018      	b.n	800ac7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	69db      	ldr	r3, [r3, #28]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d101      	bne.n	800ac54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800ac50:	2301      	movs	r3, #1
 800ac52:	e013      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ac54:	4b0b      	ldr	r3, [pc, #44]	; (800ac84 <HAL_RCC_OscConfig+0x4f4>)
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a1b      	ldr	r3, [r3, #32]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d106      	bne.n	800ac76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d001      	beq.n	800ac7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e000      	b.n	800ac7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3718      	adds	r7, #24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	40021000 	.word	0x40021000
 800ac88:	40007000 	.word	0x40007000
 800ac8c:	42420060 	.word	0x42420060

0800ac90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d101      	bne.n	800aca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e0d0      	b.n	800ae46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aca4:	4b6a      	ldr	r3, [pc, #424]	; (800ae50 <HAL_RCC_ClockConfig+0x1c0>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 0307 	and.w	r3, r3, #7
 800acac:	683a      	ldr	r2, [r7, #0]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d910      	bls.n	800acd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acb2:	4b67      	ldr	r3, [pc, #412]	; (800ae50 <HAL_RCC_ClockConfig+0x1c0>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f023 0207 	bic.w	r2, r3, #7
 800acba:	4965      	ldr	r1, [pc, #404]	; (800ae50 <HAL_RCC_ClockConfig+0x1c0>)
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acc2:	4b63      	ldr	r3, [pc, #396]	; (800ae50 <HAL_RCC_ClockConfig+0x1c0>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 0307 	and.w	r3, r3, #7
 800acca:	683a      	ldr	r2, [r7, #0]
 800accc:	429a      	cmp	r2, r3
 800acce:	d001      	beq.n	800acd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e0b8      	b.n	800ae46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f003 0302 	and.w	r3, r3, #2
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d020      	beq.n	800ad22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 0304 	and.w	r3, r3, #4
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d005      	beq.n	800acf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800acec:	4b59      	ldr	r3, [pc, #356]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	4a58      	ldr	r2, [pc, #352]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800acf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800acf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0308 	and.w	r3, r3, #8
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d005      	beq.n	800ad10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad04:	4b53      	ldr	r3, [pc, #332]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	4a52      	ldr	r2, [pc, #328]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800ad0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ad0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad10:	4b50      	ldr	r3, [pc, #320]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	494d      	ldr	r1, [pc, #308]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 0301 	and.w	r3, r3, #1
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d040      	beq.n	800adb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d107      	bne.n	800ad46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad36:	4b47      	ldr	r3, [pc, #284]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d115      	bne.n	800ad6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e07f      	b.n	800ae46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	d107      	bne.n	800ad5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad4e:	4b41      	ldr	r3, [pc, #260]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d109      	bne.n	800ad6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e073      	b.n	800ae46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad5e:	4b3d      	ldr	r3, [pc, #244]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0302 	and.w	r3, r3, #2
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e06b      	b.n	800ae46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad6e:	4b39      	ldr	r3, [pc, #228]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	f023 0203 	bic.w	r2, r3, #3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	4936      	ldr	r1, [pc, #216]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ad80:	f7fd fe44 	bl	8008a0c <HAL_GetTick>
 800ad84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad86:	e00a      	b.n	800ad9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad88:	f7fd fe40 	bl	8008a0c <HAL_GetTick>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d901      	bls.n	800ad9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	e053      	b.n	800ae46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad9e:	4b2d      	ldr	r3, [pc, #180]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	f003 020c 	and.w	r2, r3, #12
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	429a      	cmp	r2, r3
 800adae:	d1eb      	bne.n	800ad88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800adb0:	4b27      	ldr	r3, [pc, #156]	; (800ae50 <HAL_RCC_ClockConfig+0x1c0>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 0307 	and.w	r3, r3, #7
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d210      	bcs.n	800ade0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adbe:	4b24      	ldr	r3, [pc, #144]	; (800ae50 <HAL_RCC_ClockConfig+0x1c0>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f023 0207 	bic.w	r2, r3, #7
 800adc6:	4922      	ldr	r1, [pc, #136]	; (800ae50 <HAL_RCC_ClockConfig+0x1c0>)
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	4313      	orrs	r3, r2
 800adcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adce:	4b20      	ldr	r3, [pc, #128]	; (800ae50 <HAL_RCC_ClockConfig+0x1c0>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f003 0307 	and.w	r3, r3, #7
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	429a      	cmp	r2, r3
 800adda:	d001      	beq.n	800ade0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e032      	b.n	800ae46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 0304 	and.w	r3, r3, #4
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d008      	beq.n	800adfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800adec:	4b19      	ldr	r3, [pc, #100]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	4916      	ldr	r1, [pc, #88]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800adfa:	4313      	orrs	r3, r2
 800adfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 0308 	and.w	r3, r3, #8
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d009      	beq.n	800ae1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ae0a:	4b12      	ldr	r3, [pc, #72]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	00db      	lsls	r3, r3, #3
 800ae18:	490e      	ldr	r1, [pc, #56]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ae1e:	f000 f821 	bl	800ae64 <HAL_RCC_GetSysClockFreq>
 800ae22:	4602      	mov	r2, r0
 800ae24:	4b0b      	ldr	r3, [pc, #44]	; (800ae54 <HAL_RCC_ClockConfig+0x1c4>)
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	091b      	lsrs	r3, r3, #4
 800ae2a:	f003 030f 	and.w	r3, r3, #15
 800ae2e:	490a      	ldr	r1, [pc, #40]	; (800ae58 <HAL_RCC_ClockConfig+0x1c8>)
 800ae30:	5ccb      	ldrb	r3, [r1, r3]
 800ae32:	fa22 f303 	lsr.w	r3, r2, r3
 800ae36:	4a09      	ldr	r2, [pc, #36]	; (800ae5c <HAL_RCC_ClockConfig+0x1cc>)
 800ae38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ae3a:	4b09      	ldr	r3, [pc, #36]	; (800ae60 <HAL_RCC_ClockConfig+0x1d0>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fd fda2 	bl	8008988 <HAL_InitTick>

  return HAL_OK;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	40022000 	.word	0x40022000
 800ae54:	40021000 	.word	0x40021000
 800ae58:	0800f838 	.word	0x0800f838
 800ae5c:	20000040 	.word	0x20000040
 800ae60:	20000044 	.word	0x20000044

0800ae64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b087      	sub	sp, #28
 800ae68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	60fb      	str	r3, [r7, #12]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	60bb      	str	r3, [r7, #8]
 800ae72:	2300      	movs	r3, #0
 800ae74:	617b      	str	r3, [r7, #20]
 800ae76:	2300      	movs	r3, #0
 800ae78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ae7e:	4b1e      	ldr	r3, [pc, #120]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x94>)
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f003 030c 	and.w	r3, r3, #12
 800ae8a:	2b04      	cmp	r3, #4
 800ae8c:	d002      	beq.n	800ae94 <HAL_RCC_GetSysClockFreq+0x30>
 800ae8e:	2b08      	cmp	r3, #8
 800ae90:	d003      	beq.n	800ae9a <HAL_RCC_GetSysClockFreq+0x36>
 800ae92:	e027      	b.n	800aee4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ae94:	4b19      	ldr	r3, [pc, #100]	; (800aefc <HAL_RCC_GetSysClockFreq+0x98>)
 800ae96:	613b      	str	r3, [r7, #16]
      break;
 800ae98:	e027      	b.n	800aeea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	0c9b      	lsrs	r3, r3, #18
 800ae9e:	f003 030f 	and.w	r3, r3, #15
 800aea2:	4a17      	ldr	r2, [pc, #92]	; (800af00 <HAL_RCC_GetSysClockFreq+0x9c>)
 800aea4:	5cd3      	ldrb	r3, [r2, r3]
 800aea6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d010      	beq.n	800aed4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aeb2:	4b11      	ldr	r3, [pc, #68]	; (800aef8 <HAL_RCC_GetSysClockFreq+0x94>)
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	0c5b      	lsrs	r3, r3, #17
 800aeb8:	f003 0301 	and.w	r3, r3, #1
 800aebc:	4a11      	ldr	r2, [pc, #68]	; (800af04 <HAL_RCC_GetSysClockFreq+0xa0>)
 800aebe:	5cd3      	ldrb	r3, [r2, r3]
 800aec0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4a0d      	ldr	r2, [pc, #52]	; (800aefc <HAL_RCC_GetSysClockFreq+0x98>)
 800aec6:	fb02 f203 	mul.w	r2, r2, r3
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed0:	617b      	str	r3, [r7, #20]
 800aed2:	e004      	b.n	800aede <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a0c      	ldr	r2, [pc, #48]	; (800af08 <HAL_RCC_GetSysClockFreq+0xa4>)
 800aed8:	fb02 f303 	mul.w	r3, r2, r3
 800aedc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	613b      	str	r3, [r7, #16]
      break;
 800aee2:	e002      	b.n	800aeea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800aee4:	4b05      	ldr	r3, [pc, #20]	; (800aefc <HAL_RCC_GetSysClockFreq+0x98>)
 800aee6:	613b      	str	r3, [r7, #16]
      break;
 800aee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aeea:	693b      	ldr	r3, [r7, #16]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	371c      	adds	r7, #28
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bc80      	pop	{r7}
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	40021000 	.word	0x40021000
 800aefc:	007a1200 	.word	0x007a1200
 800af00:	0800f850 	.word	0x0800f850
 800af04:	0800f860 	.word	0x0800f860
 800af08:	003d0900 	.word	0x003d0900

0800af0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af0c:	b480      	push	{r7}
 800af0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af10:	4b02      	ldr	r3, [pc, #8]	; (800af1c <HAL_RCC_GetHCLKFreq+0x10>)
 800af12:	681b      	ldr	r3, [r3, #0]
}
 800af14:	4618      	mov	r0, r3
 800af16:	46bd      	mov	sp, r7
 800af18:	bc80      	pop	{r7}
 800af1a:	4770      	bx	lr
 800af1c:	20000040 	.word	0x20000040

0800af20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af24:	f7ff fff2 	bl	800af0c <HAL_RCC_GetHCLKFreq>
 800af28:	4602      	mov	r2, r0
 800af2a:	4b05      	ldr	r3, [pc, #20]	; (800af40 <HAL_RCC_GetPCLK1Freq+0x20>)
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	0a1b      	lsrs	r3, r3, #8
 800af30:	f003 0307 	and.w	r3, r3, #7
 800af34:	4903      	ldr	r1, [pc, #12]	; (800af44 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af36:	5ccb      	ldrb	r3, [r1, r3]
 800af38:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	40021000 	.word	0x40021000
 800af44:	0800f848 	.word	0x0800f848

0800af48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800af4c:	f7ff ffde 	bl	800af0c <HAL_RCC_GetHCLKFreq>
 800af50:	4602      	mov	r2, r0
 800af52:	4b05      	ldr	r3, [pc, #20]	; (800af68 <HAL_RCC_GetPCLK2Freq+0x20>)
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	0adb      	lsrs	r3, r3, #11
 800af58:	f003 0307 	and.w	r3, r3, #7
 800af5c:	4903      	ldr	r1, [pc, #12]	; (800af6c <HAL_RCC_GetPCLK2Freq+0x24>)
 800af5e:	5ccb      	ldrb	r3, [r1, r3]
 800af60:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af64:	4618      	mov	r0, r3
 800af66:	bd80      	pop	{r7, pc}
 800af68:	40021000 	.word	0x40021000
 800af6c:	0800f848 	.word	0x0800f848

0800af70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800af78:	4b0a      	ldr	r3, [pc, #40]	; (800afa4 <RCC_Delay+0x34>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a0a      	ldr	r2, [pc, #40]	; (800afa8 <RCC_Delay+0x38>)
 800af7e:	fba2 2303 	umull	r2, r3, r2, r3
 800af82:	0a5b      	lsrs	r3, r3, #9
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	fb02 f303 	mul.w	r3, r2, r3
 800af8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800af8c:	bf00      	nop
  }
  while (Delay --);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	1e5a      	subs	r2, r3, #1
 800af92:	60fa      	str	r2, [r7, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1f9      	bne.n	800af8c <RCC_Delay+0x1c>
}
 800af98:	bf00      	nop
 800af9a:	bf00      	nop
 800af9c:	3714      	adds	r7, #20
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bc80      	pop	{r7}
 800afa2:	4770      	bx	lr
 800afa4:	20000040 	.word	0x20000040
 800afa8:	10624dd3 	.word	0x10624dd3

0800afac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800afb4:	2300      	movs	r3, #0
 800afb6:	613b      	str	r3, [r7, #16]
 800afb8:	2300      	movs	r3, #0
 800afba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d07d      	beq.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800afc8:	2300      	movs	r3, #0
 800afca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800afcc:	4b4f      	ldr	r3, [pc, #316]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afce:	69db      	ldr	r3, [r3, #28]
 800afd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d10d      	bne.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800afd8:	4b4c      	ldr	r3, [pc, #304]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afda:	69db      	ldr	r3, [r3, #28]
 800afdc:	4a4b      	ldr	r2, [pc, #300]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afe2:	61d3      	str	r3, [r2, #28]
 800afe4:	4b49      	ldr	r3, [pc, #292]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afe6:	69db      	ldr	r3, [r3, #28]
 800afe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afec:	60bb      	str	r3, [r7, #8]
 800afee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aff0:	2301      	movs	r3, #1
 800aff2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aff4:	4b46      	ldr	r3, [pc, #280]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800affc:	2b00      	cmp	r3, #0
 800affe:	d118      	bne.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b000:	4b43      	ldr	r3, [pc, #268]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a42      	ldr	r2, [pc, #264]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b00a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b00c:	f7fd fcfe 	bl	8008a0c <HAL_GetTick>
 800b010:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b012:	e008      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b014:	f7fd fcfa 	bl	8008a0c <HAL_GetTick>
 800b018:	4602      	mov	r2, r0
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	2b64      	cmp	r3, #100	; 0x64
 800b020:	d901      	bls.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	e06d      	b.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b026:	4b3a      	ldr	r3, [pc, #232]	; (800b110 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0f0      	beq.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b032:	4b36      	ldr	r3, [pc, #216]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b03a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d02e      	beq.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d027      	beq.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b050:	4b2e      	ldr	r3, [pc, #184]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b052:	6a1b      	ldr	r3, [r3, #32]
 800b054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b058:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b05a:	4b2e      	ldr	r3, [pc, #184]	; (800b114 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b05c:	2201      	movs	r2, #1
 800b05e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b060:	4b2c      	ldr	r3, [pc, #176]	; (800b114 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b062:	2200      	movs	r2, #0
 800b064:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800b066:	4a29      	ldr	r2, [pc, #164]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f003 0301 	and.w	r3, r3, #1
 800b072:	2b00      	cmp	r3, #0
 800b074:	d014      	beq.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b076:	f7fd fcc9 	bl	8008a0c <HAL_GetTick>
 800b07a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b07c:	e00a      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b07e:	f7fd fcc5 	bl	8008a0c <HAL_GetTick>
 800b082:	4602      	mov	r2, r0
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	f241 3288 	movw	r2, #5000	; 0x1388
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d901      	bls.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800b090:	2303      	movs	r3, #3
 800b092:	e036      	b.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b094:	4b1d      	ldr	r3, [pc, #116]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b096:	6a1b      	ldr	r3, [r3, #32]
 800b098:	f003 0302 	and.w	r3, r3, #2
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d0ee      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b0a0:	4b1a      	ldr	r3, [pc, #104]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b0a2:	6a1b      	ldr	r3, [r3, #32]
 800b0a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	4917      	ldr	r1, [pc, #92]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b0b2:	7dfb      	ldrb	r3, [r7, #23]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d105      	bne.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b0b8:	4b14      	ldr	r3, [pc, #80]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b0ba:	69db      	ldr	r3, [r3, #28]
 800b0bc:	4a13      	ldr	r2, [pc, #76]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b0be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 0302 	and.w	r3, r3, #2
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d008      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b0d0:	4b0e      	ldr	r3, [pc, #56]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	490b      	ldr	r1, [pc, #44]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f003 0310 	and.w	r3, r3, #16
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d008      	beq.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b0ee:	4b07      	ldr	r3, [pc, #28]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	4904      	ldr	r1, [pc, #16]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3718      	adds	r7, #24
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	40021000 	.word	0x40021000
 800b110:	40007000 	.word	0x40007000
 800b114:	42420440 	.word	0x42420440

0800b118 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b088      	sub	sp, #32
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800b120:	2300      	movs	r3, #0
 800b122:	617b      	str	r3, [r7, #20]
 800b124:	2300      	movs	r3, #0
 800b126:	61fb      	str	r3, [r7, #28]
 800b128:	2300      	movs	r3, #0
 800b12a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800b12c:	2300      	movs	r3, #0
 800b12e:	60fb      	str	r3, [r7, #12]
 800b130:	2300      	movs	r3, #0
 800b132:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b10      	cmp	r3, #16
 800b138:	d00a      	beq.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b10      	cmp	r3, #16
 800b13e:	f200 808a 	bhi.w	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2b01      	cmp	r3, #1
 800b146:	d045      	beq.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d075      	beq.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800b14e:	e082      	b.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800b150:	4b46      	ldr	r3, [pc, #280]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800b156:	4b45      	ldr	r3, [pc, #276]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d07b      	beq.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	0c9b      	lsrs	r3, r3, #18
 800b166:	f003 030f 	and.w	r3, r3, #15
 800b16a:	4a41      	ldr	r2, [pc, #260]	; (800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800b16c:	5cd3      	ldrb	r3, [r2, r3]
 800b16e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b176:	2b00      	cmp	r3, #0
 800b178:	d015      	beq.n	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b17a:	4b3c      	ldr	r3, [pc, #240]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	0c5b      	lsrs	r3, r3, #17
 800b180:	f003 0301 	and.w	r3, r3, #1
 800b184:	4a3b      	ldr	r2, [pc, #236]	; (800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800b186:	5cd3      	ldrb	r3, [r2, r3]
 800b188:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00d      	beq.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800b194:	4a38      	ldr	r2, [pc, #224]	; (800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	fbb2 f2f3 	udiv	r2, r2, r3
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	fb02 f303 	mul.w	r3, r2, r3
 800b1a2:	61fb      	str	r3, [r7, #28]
 800b1a4:	e004      	b.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	4a34      	ldr	r2, [pc, #208]	; (800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800b1aa:	fb02 f303 	mul.w	r3, r2, r3
 800b1ae:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800b1b0:	4b2e      	ldr	r3, [pc, #184]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1bc:	d102      	bne.n	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	61bb      	str	r3, [r7, #24]
      break;
 800b1c2:	e04a      	b.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	005b      	lsls	r3, r3, #1
 800b1c8:	4a2d      	ldr	r2, [pc, #180]	; (800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800b1ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ce:	085b      	lsrs	r3, r3, #1
 800b1d0:	61bb      	str	r3, [r7, #24]
      break;
 800b1d2:	e042      	b.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800b1d4:	4b25      	ldr	r3, [pc, #148]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b1d6:	6a1b      	ldr	r3, [r3, #32]
 800b1d8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1e4:	d108      	bne.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f003 0302 	and.w	r3, r3, #2
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d003      	beq.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800b1f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1f4:	61bb      	str	r3, [r7, #24]
 800b1f6:	e01f      	b.n	800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b202:	d109      	bne.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800b204:	4b19      	ldr	r3, [pc, #100]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b208:	f003 0302 	and.w	r3, r3, #2
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d003      	beq.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800b210:	f649 4340 	movw	r3, #40000	; 0x9c40
 800b214:	61bb      	str	r3, [r7, #24]
 800b216:	e00f      	b.n	800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b21e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b222:	d11c      	bne.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800b224:	4b11      	ldr	r3, [pc, #68]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d016      	beq.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800b230:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b234:	61bb      	str	r3, [r7, #24]
      break;
 800b236:	e012      	b.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800b238:	e011      	b.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800b23a:	f7ff fe85 	bl	800af48 <HAL_RCC_GetPCLK2Freq>
 800b23e:	4602      	mov	r2, r0
 800b240:	4b0a      	ldr	r3, [pc, #40]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	0b9b      	lsrs	r3, r3, #14
 800b246:	f003 0303 	and.w	r3, r3, #3
 800b24a:	3301      	adds	r3, #1
 800b24c:	005b      	lsls	r3, r3, #1
 800b24e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b252:	61bb      	str	r3, [r7, #24]
      break;
 800b254:	e004      	b.n	800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800b256:	bf00      	nop
 800b258:	e002      	b.n	800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800b25a:	bf00      	nop
 800b25c:	e000      	b.n	800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800b25e:	bf00      	nop
    }
  }
  return (frequency);
 800b260:	69bb      	ldr	r3, [r7, #24]
}
 800b262:	4618      	mov	r0, r3
 800b264:	3720      	adds	r7, #32
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	40021000 	.word	0x40021000
 800b270:	0800f864 	.word	0x0800f864
 800b274:	0800f874 	.word	0x0800f874
 800b278:	007a1200 	.word	0x007a1200
 800b27c:	003d0900 	.word	0x003d0900
 800b280:	aaaaaaab 	.word	0xaaaaaaab

0800b284 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800b28c:	2300      	movs	r3, #0
 800b28e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d101      	bne.n	800b29a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	e07a      	b.n	800b390 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	7c5b      	ldrb	r3, [r3, #17]
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d105      	bne.n	800b2b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7fd f89c 	bl	80083e8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f870 	bl	800b39c <HAL_RTC_WaitForSynchro>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d004      	beq.n	800b2cc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2204      	movs	r2, #4
 800b2c6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e061      	b.n	800b390 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f892 	bl	800b3f6 <RTC_EnterInitMode>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d004      	beq.n	800b2e2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2204      	movs	r2, #4
 800b2dc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e056      	b.n	800b390 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	685a      	ldr	r2, [r3, #4]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f022 0207 	bic.w	r2, r2, #7
 800b2f0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d005      	beq.n	800b306 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800b2fa:	4b27      	ldr	r3, [pc, #156]	; (800b398 <HAL_RTC_Init+0x114>)
 800b2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fe:	4a26      	ldr	r2, [pc, #152]	; (800b398 <HAL_RTC_Init+0x114>)
 800b300:	f023 0301 	bic.w	r3, r3, #1
 800b304:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800b306:	4b24      	ldr	r3, [pc, #144]	; (800b398 <HAL_RTC_Init+0x114>)
 800b308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	4921      	ldr	r1, [pc, #132]	; (800b398 <HAL_RTC_Init+0x114>)
 800b314:	4313      	orrs	r3, r2
 800b316:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b320:	d003      	beq.n	800b32a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	60fb      	str	r3, [r7, #12]
 800b328:	e00e      	b.n	800b348 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800b32a:	2001      	movs	r0, #1
 800b32c:	f7ff fef4 	bl	800b118 <HAL_RCCEx_GetPeriphCLKFreq>
 800b330:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d104      	bne.n	800b342 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2204      	movs	r2, #4
 800b33c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800b33e:	2301      	movs	r3, #1
 800b340:	e026      	b.n	800b390 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	3b01      	subs	r3, #1
 800b346:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	0c1a      	lsrs	r2, r3, #16
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f002 020f 	and.w	r2, r2, #15
 800b354:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	b292      	uxth	r2, r2
 800b35e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 f870 	bl	800b446 <RTC_ExitInitMode>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d004      	beq.n	800b376 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2204      	movs	r2, #4
 800b370:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	e00c      	b.n	800b390 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2201      	movs	r2, #1
 800b386:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800b38e:	2300      	movs	r3, #0
  }
}
 800b390:	4618      	mov	r0, r3
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	40006c00 	.word	0x40006c00

0800b39c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d101      	bne.n	800b3b2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e01d      	b.n	800b3ee <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	685a      	ldr	r2, [r3, #4]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f022 0208 	bic.w	r2, r2, #8
 800b3c0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800b3c2:	f7fd fb23 	bl	8008a0c <HAL_GetTick>
 800b3c6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800b3c8:	e009      	b.n	800b3de <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800b3ca:	f7fd fb1f 	bl	8008a0c <HAL_GetTick>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3d8:	d901      	bls.n	800b3de <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800b3da:	2303      	movs	r3, #3
 800b3dc:	e007      	b.n	800b3ee <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	f003 0308 	and.w	r3, r3, #8
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d0ee      	beq.n	800b3ca <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b084      	sub	sp, #16
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800b402:	f7fd fb03 	bl	8008a0c <HAL_GetTick>
 800b406:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b408:	e009      	b.n	800b41e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800b40a:	f7fd faff 	bl	8008a0c <HAL_GetTick>
 800b40e:	4602      	mov	r2, r0
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b418:	d901      	bls.n	800b41e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800b41a:	2303      	movs	r3, #3
 800b41c:	e00f      	b.n	800b43e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	f003 0320 	and.w	r3, r3, #32
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d0ee      	beq.n	800b40a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	685a      	ldr	r2, [r3, #4]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f042 0210 	orr.w	r2, r2, #16
 800b43a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b084      	sub	sp, #16
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b44e:	2300      	movs	r3, #0
 800b450:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	685a      	ldr	r2, [r3, #4]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f022 0210 	bic.w	r2, r2, #16
 800b460:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800b462:	f7fd fad3 	bl	8008a0c <HAL_GetTick>
 800b466:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b468:	e009      	b.n	800b47e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800b46a:	f7fd facf 	bl	8008a0c <HAL_GetTick>
 800b46e:	4602      	mov	r2, r0
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b478:	d901      	bls.n	800b47e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800b47a:	2303      	movs	r3, #3
 800b47c:	e007      	b.n	800b48e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	f003 0320 	and.w	r3, r3, #32
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d0ee      	beq.n	800b46a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b082      	sub	sp, #8
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 0301 	and.w	r3, r3, #1
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d027      	beq.n	800b4fc <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	f003 0301 	and.w	r3, r3, #1
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d020      	beq.n	800b4fc <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	f003 0304 	and.w	r3, r3, #4
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00b      	beq.n	800b4e0 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 f824 	bl	800b516 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f06f 0204 	mvn.w	r2, #4
 800b4d6:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2204      	movs	r2, #4
 800b4dc:	745a      	strb	r2, [r3, #17]
 800b4de:	e005      	b.n	800b4ec <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f80f 	bl	800b504 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	685a      	ldr	r2, [r3, #4]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f022 0201 	bic.w	r2, r2, #1
 800b4fa:	605a      	str	r2, [r3, #4]
    }
  }
}
 800b4fc:	bf00      	nop
 800b4fe:	3708      	adds	r7, #8
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 800b50c:	bf00      	nop
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	bc80      	pop	{r7}
 800b514:	4770      	bx	lr

0800b516 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800b516:	b480      	push	{r7}
 800b518:	b083      	sub	sp, #12
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 800b51e:	bf00      	nop
 800b520:	370c      	adds	r7, #12
 800b522:	46bd      	mov	sp, r7
 800b524:	bc80      	pop	{r7}
 800b526:	4770      	bx	lr

0800b528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e076      	b.n	800b628 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d108      	bne.n	800b554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b54a:	d009      	beq.n	800b560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	61da      	str	r2, [r3, #28]
 800b552:	e005      	b.n	800b560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d106      	bne.n	800b580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f7fc ff60 	bl	8008440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2202      	movs	r2, #2
 800b584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b596:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b5a8:	431a      	orrs	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5b2:	431a      	orrs	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	f003 0302 	and.w	r3, r3, #2
 800b5bc:	431a      	orrs	r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	695b      	ldr	r3, [r3, #20]
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	431a      	orrs	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5d0:	431a      	orrs	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	69db      	ldr	r3, [r3, #28]
 800b5d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5da:	431a      	orrs	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a1b      	ldr	r3, [r3, #32]
 800b5e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5e4:	ea42 0103 	orr.w	r1, r2, r3
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	430a      	orrs	r2, r1
 800b5f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	0c1a      	lsrs	r2, r3, #16
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f002 0204 	and.w	r2, r2, #4
 800b606:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	69da      	ldr	r2, [r3, #28]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b616:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b088      	sub	sp, #32
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	603b      	str	r3, [r7, #0]
 800b63c:	4613      	mov	r3, r2
 800b63e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b640:	f7fd f9e4 	bl	8008a0c <HAL_GetTick>
 800b644:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800b646:	88fb      	ldrh	r3, [r7, #6]
 800b648:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b650:	b2db      	uxtb	r3, r3
 800b652:	2b01      	cmp	r3, #1
 800b654:	d001      	beq.n	800b65a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800b656:	2302      	movs	r3, #2
 800b658:	e12a      	b.n	800b8b0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <HAL_SPI_Transmit+0x36>
 800b660:	88fb      	ldrh	r3, [r7, #6]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d101      	bne.n	800b66a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	e122      	b.n	800b8b0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b670:	2b01      	cmp	r3, #1
 800b672:	d101      	bne.n	800b678 <HAL_SPI_Transmit+0x48>
 800b674:	2302      	movs	r3, #2
 800b676:	e11b      	b.n	800b8b0 <HAL_SPI_Transmit+0x280>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2203      	movs	r2, #3
 800b684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	68ba      	ldr	r2, [r7, #8]
 800b692:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	88fa      	ldrh	r2, [r7, #6]
 800b698:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	88fa      	ldrh	r2, [r7, #6]
 800b69e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6c6:	d10f      	bne.n	800b6e8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b6e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f2:	2b40      	cmp	r3, #64	; 0x40
 800b6f4:	d007      	beq.n	800b706 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b704:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b70e:	d152      	bne.n	800b7b6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d002      	beq.n	800b71e <HAL_SPI_Transmit+0xee>
 800b718:	8b7b      	ldrh	r3, [r7, #26]
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d145      	bne.n	800b7aa <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b722:	881a      	ldrh	r2, [r3, #0]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72e:	1c9a      	adds	r2, r3, #2
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b738:	b29b      	uxth	r3, r3
 800b73a:	3b01      	subs	r3, #1
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b742:	e032      	b.n	800b7aa <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	f003 0302 	and.w	r3, r3, #2
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d112      	bne.n	800b778 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b756:	881a      	ldrh	r2, [r3, #0]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b762:	1c9a      	adds	r2, r3, #2
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	3b01      	subs	r3, #1
 800b770:	b29a      	uxth	r2, r3
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	86da      	strh	r2, [r3, #54]	; 0x36
 800b776:	e018      	b.n	800b7aa <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b778:	f7fd f948 	bl	8008a0c <HAL_GetTick>
 800b77c:	4602      	mov	r2, r0
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	429a      	cmp	r2, r3
 800b786:	d803      	bhi.n	800b790 <HAL_SPI_Transmit+0x160>
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b78e:	d102      	bne.n	800b796 <HAL_SPI_Transmit+0x166>
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d109      	bne.n	800b7aa <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	e082      	b.n	800b8b0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1c7      	bne.n	800b744 <HAL_SPI_Transmit+0x114>
 800b7b4:	e053      	b.n	800b85e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d002      	beq.n	800b7c4 <HAL_SPI_Transmit+0x194>
 800b7be:	8b7b      	ldrh	r3, [r7, #26]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d147      	bne.n	800b854 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	330c      	adds	r3, #12
 800b7ce:	7812      	ldrb	r2, [r2, #0]
 800b7d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d6:	1c5a      	adds	r2, r3, #1
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b7ea:	e033      	b.n	800b854 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	f003 0302 	and.w	r3, r3, #2
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d113      	bne.n	800b822 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	330c      	adds	r3, #12
 800b804:	7812      	ldrb	r2, [r2, #0]
 800b806:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80c:	1c5a      	adds	r2, r3, #1
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b816:	b29b      	uxth	r3, r3
 800b818:	3b01      	subs	r3, #1
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	86da      	strh	r2, [r3, #54]	; 0x36
 800b820:	e018      	b.n	800b854 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b822:	f7fd f8f3 	bl	8008a0c <HAL_GetTick>
 800b826:	4602      	mov	r2, r0
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	683a      	ldr	r2, [r7, #0]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d803      	bhi.n	800b83a <HAL_SPI_Transmit+0x20a>
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b838:	d102      	bne.n	800b840 <HAL_SPI_Transmit+0x210>
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d109      	bne.n	800b854 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2200      	movs	r2, #0
 800b84c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800b850:	2303      	movs	r3, #3
 800b852:	e02d      	b.n	800b8b0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b858:	b29b      	uxth	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1c6      	bne.n	800b7ec <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b85e:	69fa      	ldr	r2, [r7, #28]
 800b860:	6839      	ldr	r1, [r7, #0]
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f000 fcc8 	bl	800c1f8 <SPI_EndRxTxTransaction>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d002      	beq.n	800b874 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2220      	movs	r2, #32
 800b872:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d10a      	bne.n	800b892 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b87c:	2300      	movs	r3, #0
 800b87e:	617b      	str	r3, [r7, #20]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	617b      	str	r3, [r7, #20]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	617b      	str	r3, [r7, #20]
 800b890:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e000      	b.n	800b8b0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800b8ae:	2300      	movs	r3, #0
  }
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3720      	adds	r7, #32
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b088      	sub	sp, #32
 800b8bc:	af02      	add	r7, sp, #8
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	603b      	str	r3, [r7, #0]
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d001      	beq.n	800b8d8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800b8d4:	2302      	movs	r3, #2
 800b8d6:	e104      	b.n	800bae2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b8e0:	d112      	bne.n	800b908 <HAL_SPI_Receive+0x50>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10e      	bne.n	800b908 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2204      	movs	r2, #4
 800b8ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b8f2:	88fa      	ldrh	r2, [r7, #6]
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	68b9      	ldr	r1, [r7, #8]
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f000 f8f3 	bl	800baea <HAL_SPI_TransmitReceive>
 800b904:	4603      	mov	r3, r0
 800b906:	e0ec      	b.n	800bae2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b908:	f7fd f880 	bl	8008a0c <HAL_GetTick>
 800b90c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d002      	beq.n	800b91a <HAL_SPI_Receive+0x62>
 800b914:	88fb      	ldrh	r3, [r7, #6]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d101      	bne.n	800b91e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e0e1      	b.n	800bae2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b924:	2b01      	cmp	r3, #1
 800b926:	d101      	bne.n	800b92c <HAL_SPI_Receive+0x74>
 800b928:	2302      	movs	r3, #2
 800b92a:	e0da      	b.n	800bae2 <HAL_SPI_Receive+0x22a>
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2204      	movs	r2, #4
 800b938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	68ba      	ldr	r2, [r7, #8]
 800b946:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	88fa      	ldrh	r2, [r7, #6]
 800b94c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	88fa      	ldrh	r2, [r7, #6]
 800b952:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2200      	movs	r2, #0
 800b970:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b97a:	d10f      	bne.n	800b99c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b98a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b99a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a6:	2b40      	cmp	r3, #64	; 0x40
 800b9a8:	d007      	beq.n	800b9ba <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d170      	bne.n	800baa4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b9c2:	e035      	b.n	800ba30 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	f003 0301 	and.w	r3, r3, #1
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d115      	bne.n	800b9fe <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f103 020c 	add.w	r2, r3, #12
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9de:	7812      	ldrb	r2, [r2, #0]
 800b9e0:	b2d2      	uxtb	r2, r2
 800b9e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	3b01      	subs	r3, #1
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b9fc:	e018      	b.n	800ba30 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9fe:	f7fd f805 	bl	8008a0c <HAL_GetTick>
 800ba02:	4602      	mov	r2, r0
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	1ad3      	subs	r3, r2, r3
 800ba08:	683a      	ldr	r2, [r7, #0]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d803      	bhi.n	800ba16 <HAL_SPI_Receive+0x15e>
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba14:	d102      	bne.n	800ba1c <HAL_SPI_Receive+0x164>
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d109      	bne.n	800ba30 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	e058      	b.n	800bae2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1c4      	bne.n	800b9c4 <HAL_SPI_Receive+0x10c>
 800ba3a:	e038      	b.n	800baae <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	f003 0301 	and.w	r3, r3, #1
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d113      	bne.n	800ba72 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68da      	ldr	r2, [r3, #12]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba54:	b292      	uxth	r2, r2
 800ba56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba5c:	1c9a      	adds	r2, r3, #2
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	b29a      	uxth	r2, r3
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ba70:	e018      	b.n	800baa4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba72:	f7fc ffcb 	bl	8008a0c <HAL_GetTick>
 800ba76:	4602      	mov	r2, r0
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	1ad3      	subs	r3, r2, r3
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d803      	bhi.n	800ba8a <HAL_SPI_Receive+0x1d2>
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba88:	d102      	bne.n	800ba90 <HAL_SPI_Receive+0x1d8>
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d109      	bne.n	800baa4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800baa0:	2303      	movs	r3, #3
 800baa2:	e01e      	b.n	800bae2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d1c6      	bne.n	800ba3c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	6839      	ldr	r1, [r7, #0]
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f000 fb4e 	bl	800c154 <SPI_EndRxTransaction>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b00      	cmp	r3, #0
 800babc:	d002      	beq.n	800bac4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2220      	movs	r2, #32
 800bac2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800badc:	2301      	movs	r3, #1
 800bade:	e000      	b.n	800bae2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800bae0:	2300      	movs	r3, #0
  }
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b08a      	sub	sp, #40	; 0x28
 800baee:	af00      	add	r7, sp, #0
 800baf0:	60f8      	str	r0, [r7, #12]
 800baf2:	60b9      	str	r1, [r7, #8]
 800baf4:	607a      	str	r2, [r7, #4]
 800baf6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800baf8:	2301      	movs	r3, #1
 800bafa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bafc:	f7fc ff86 	bl	8008a0c <HAL_GetTick>
 800bb00:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bb08:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800bb10:	887b      	ldrh	r3, [r7, #2]
 800bb12:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bb14:	7ffb      	ldrb	r3, [r7, #31]
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d00c      	beq.n	800bb34 <HAL_SPI_TransmitReceive+0x4a>
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb20:	d106      	bne.n	800bb30 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d102      	bne.n	800bb30 <HAL_SPI_TransmitReceive+0x46>
 800bb2a:	7ffb      	ldrb	r3, [r7, #31]
 800bb2c:	2b04      	cmp	r3, #4
 800bb2e:	d001      	beq.n	800bb34 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800bb30:	2302      	movs	r3, #2
 800bb32:	e17f      	b.n	800be34 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d005      	beq.n	800bb46 <HAL_SPI_TransmitReceive+0x5c>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <HAL_SPI_TransmitReceive+0x5c>
 800bb40:	887b      	ldrh	r3, [r7, #2]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d101      	bne.n	800bb4a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	e174      	b.n	800be34 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d101      	bne.n	800bb58 <HAL_SPI_TransmitReceive+0x6e>
 800bb54:	2302      	movs	r3, #2
 800bb56:	e16d      	b.n	800be34 <HAL_SPI_TransmitReceive+0x34a>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	2b04      	cmp	r3, #4
 800bb6a:	d003      	beq.n	800bb74 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2205      	movs	r2, #5
 800bb70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	887a      	ldrh	r2, [r7, #2]
 800bb84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	887a      	ldrh	r2, [r7, #2]
 800bb8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	887a      	ldrh	r2, [r7, #2]
 800bb96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	887a      	ldrh	r2, [r7, #2]
 800bb9c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2200      	movs	r2, #0
 800bba2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2200      	movs	r2, #0
 800bba8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbb4:	2b40      	cmp	r3, #64	; 0x40
 800bbb6:	d007      	beq.n	800bbc8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bbc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbd0:	d17e      	bne.n	800bcd0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d002      	beq.n	800bbe0 <HAL_SPI_TransmitReceive+0xf6>
 800bbda:	8afb      	ldrh	r3, [r7, #22]
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d16c      	bne.n	800bcba <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe4:	881a      	ldrh	r2, [r3, #0]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf0:	1c9a      	adds	r2, r3, #2
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	b29a      	uxth	r2, r3
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc04:	e059      	b.n	800bcba <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	f003 0302 	and.w	r3, r3, #2
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d11b      	bne.n	800bc4c <HAL_SPI_TransmitReceive+0x162>
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d016      	beq.n	800bc4c <HAL_SPI_TransmitReceive+0x162>
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d113      	bne.n	800bc4c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc28:	881a      	ldrh	r2, [r3, #0]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc34:	1c9a      	adds	r2, r3, #2
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	3b01      	subs	r3, #1
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	f003 0301 	and.w	r3, r3, #1
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d119      	bne.n	800bc8e <HAL_SPI_TransmitReceive+0x1a4>
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d014      	beq.n	800bc8e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68da      	ldr	r2, [r3, #12]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6e:	b292      	uxth	r2, r2
 800bc70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc76:	1c9a      	adds	r2, r3, #2
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	3b01      	subs	r3, #1
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bc8e:	f7fc febd 	bl	8008a0c <HAL_GetTick>
 800bc92:	4602      	mov	r2, r0
 800bc94:	6a3b      	ldr	r3, [r7, #32]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d80d      	bhi.n	800bcba <HAL_SPI_TransmitReceive+0x1d0>
 800bc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca4:	d009      	beq.n	800bcba <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e0bc      	b.n	800be34 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d1a0      	bne.n	800bc06 <HAL_SPI_TransmitReceive+0x11c>
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d19b      	bne.n	800bc06 <HAL_SPI_TransmitReceive+0x11c>
 800bcce:	e082      	b.n	800bdd6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d002      	beq.n	800bcde <HAL_SPI_TransmitReceive+0x1f4>
 800bcd8:	8afb      	ldrh	r3, [r7, #22]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d171      	bne.n	800bdc2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	330c      	adds	r3, #12
 800bce8:	7812      	ldrb	r2, [r2, #0]
 800bcea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf0:	1c5a      	adds	r2, r3, #1
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bd04:	e05d      	b.n	800bdc2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	f003 0302 	and.w	r3, r3, #2
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d11c      	bne.n	800bd4e <HAL_SPI_TransmitReceive+0x264>
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d017      	beq.n	800bd4e <HAL_SPI_TransmitReceive+0x264>
 800bd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d114      	bne.n	800bd4e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	330c      	adds	r3, #12
 800bd2e:	7812      	ldrb	r2, [r2, #0]
 800bd30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd36:	1c5a      	adds	r2, r3, #1
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	3b01      	subs	r3, #1
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	f003 0301 	and.w	r3, r3, #1
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d119      	bne.n	800bd90 <HAL_SPI_TransmitReceive+0x2a6>
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d014      	beq.n	800bd90 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68da      	ldr	r2, [r3, #12]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd70:	b2d2      	uxtb	r2, r2
 800bd72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd78:	1c5a      	adds	r2, r3, #1
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	3b01      	subs	r3, #1
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bd90:	f7fc fe3c 	bl	8008a0c <HAL_GetTick>
 800bd94:	4602      	mov	r2, r0
 800bd96:	6a3b      	ldr	r3, [r7, #32]
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d803      	bhi.n	800bda8 <HAL_SPI_TransmitReceive+0x2be>
 800bda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda6:	d102      	bne.n	800bdae <HAL_SPI_TransmitReceive+0x2c4>
 800bda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d109      	bne.n	800bdc2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800bdbe:	2303      	movs	r3, #3
 800bdc0:	e038      	b.n	800be34 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d19c      	bne.n	800bd06 <HAL_SPI_TransmitReceive+0x21c>
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d197      	bne.n	800bd06 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bdd6:	6a3a      	ldr	r2, [r7, #32]
 800bdd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 fa0c 	bl	800c1f8 <SPI_EndRxTxTransaction>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d008      	beq.n	800bdf8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2220      	movs	r2, #32
 800bdea:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e01d      	b.n	800be34 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d10a      	bne.n	800be16 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be00:	2300      	movs	r3, #0
 800be02:	613b      	str	r3, [r7, #16]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	613b      	str	r3, [r7, #16]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	613b      	str	r3, [r7, #16]
 800be14:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2201      	movs	r2, #1
 800be1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2200      	movs	r2, #0
 800be22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d001      	beq.n	800be32 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	e000      	b.n	800be34 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800be32:	2300      	movs	r3, #0
  }
}
 800be34:	4618      	mov	r0, r3
 800be36:	3728      	adds	r7, #40	; 0x28
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b088      	sub	sp, #32
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	099b      	lsrs	r3, r3, #6
 800be58:	f003 0301 	and.w	r3, r3, #1
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d10f      	bne.n	800be80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800be66:	2b00      	cmp	r3, #0
 800be68:	d00a      	beq.n	800be80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	099b      	lsrs	r3, r3, #6
 800be6e:	f003 0301 	and.w	r3, r3, #1
 800be72:	2b00      	cmp	r3, #0
 800be74:	d004      	beq.n	800be80 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	4798      	blx	r3
    return;
 800be7e:	e0be      	b.n	800bffe <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	085b      	lsrs	r3, r3, #1
 800be84:	f003 0301 	and.w	r3, r3, #1
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00a      	beq.n	800bea2 <HAL_SPI_IRQHandler+0x66>
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	09db      	lsrs	r3, r3, #7
 800be90:	f003 0301 	and.w	r3, r3, #1
 800be94:	2b00      	cmp	r3, #0
 800be96:	d004      	beq.n	800bea2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	4798      	blx	r3
    return;
 800bea0:	e0ad      	b.n	800bffe <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	095b      	lsrs	r3, r3, #5
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d106      	bne.n	800bebc <HAL_SPI_IRQHandler+0x80>
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	099b      	lsrs	r3, r3, #6
 800beb2:	f003 0301 	and.w	r3, r3, #1
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f000 80a1 	beq.w	800bffe <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	095b      	lsrs	r3, r3, #5
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 809a 	beq.w	800bffe <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	099b      	lsrs	r3, r3, #6
 800bece:	f003 0301 	and.w	r3, r3, #1
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d023      	beq.n	800bf1e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d011      	beq.n	800bf06 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bee6:	f043 0204 	orr.w	r2, r3, #4
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800beee:	2300      	movs	r3, #0
 800bef0:	617b      	str	r3, [r7, #20]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	617b      	str	r3, [r7, #20]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	617b      	str	r3, [r7, #20]
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	e00b      	b.n	800bf1e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bf06:	2300      	movs	r3, #0
 800bf08:	613b      	str	r3, [r7, #16]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	613b      	str	r3, [r7, #16]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	613b      	str	r3, [r7, #16]
 800bf1a:	693b      	ldr	r3, [r7, #16]
        return;
 800bf1c:	e06f      	b.n	800bffe <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	095b      	lsrs	r3, r3, #5
 800bf22:	f003 0301 	and.w	r3, r3, #1
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d014      	beq.n	800bf54 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf2e:	f043 0201 	orr.w	r2, r3, #1
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bf36:	2300      	movs	r3, #0
 800bf38:	60fb      	str	r3, [r7, #12]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	60fb      	str	r3, [r7, #12]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf50:	601a      	str	r2, [r3, #0]
 800bf52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d04f      	beq.n	800bffc <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	685a      	ldr	r2, [r3, #4]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bf6a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	f003 0302 	and.w	r3, r3, #2
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d104      	bne.n	800bf88 <HAL_SPI_IRQHandler+0x14c>
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	f003 0301 	and.w	r3, r3, #1
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d034      	beq.n	800bff2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	685a      	ldr	r2, [r3, #4]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f022 0203 	bic.w	r2, r2, #3
 800bf96:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d011      	beq.n	800bfc4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfa4:	4a17      	ldr	r2, [pc, #92]	; (800c004 <HAL_SPI_IRQHandler+0x1c8>)
 800bfa6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7fc fe69 	bl	8008c84 <HAL_DMA_Abort_IT>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d005      	beq.n	800bfc4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d016      	beq.n	800bffa <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfd0:	4a0c      	ldr	r2, [pc, #48]	; (800c004 <HAL_SPI_IRQHandler+0x1c8>)
 800bfd2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fc fe53 	bl	8008c84 <HAL_DMA_Abort_IT>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00a      	beq.n	800bffa <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfe8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800bff0:	e003      	b.n	800bffa <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f808 	bl	800c008 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bff8:	e000      	b.n	800bffc <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800bffa:	bf00      	nop
    return;
 800bffc:	bf00      	nop
  }
}
 800bffe:	3720      	adds	r7, #32
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	0800c01b 	.word	0x0800c01b

0800c008 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c010:	bf00      	nop
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	bc80      	pop	{r7}
 800c018:	4770      	bx	lr

0800c01a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b084      	sub	sp, #16
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c026:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2200      	movs	r2, #0
 800c02c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2200      	movs	r2, #0
 800c032:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f7ff ffe7 	bl	800c008 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c03a:	bf00      	nop
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
	...

0800c044 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b088      	sub	sp, #32
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	603b      	str	r3, [r7, #0]
 800c050:	4613      	mov	r3, r2
 800c052:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c054:	f7fc fcda 	bl	8008a0c <HAL_GetTick>
 800c058:	4602      	mov	r2, r0
 800c05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05c:	1a9b      	subs	r3, r3, r2
 800c05e:	683a      	ldr	r2, [r7, #0]
 800c060:	4413      	add	r3, r2
 800c062:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c064:	f7fc fcd2 	bl	8008a0c <HAL_GetTick>
 800c068:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c06a:	4b39      	ldr	r3, [pc, #228]	; (800c150 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	015b      	lsls	r3, r3, #5
 800c070:	0d1b      	lsrs	r3, r3, #20
 800c072:	69fa      	ldr	r2, [r7, #28]
 800c074:	fb02 f303 	mul.w	r3, r2, r3
 800c078:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c07a:	e054      	b.n	800c126 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c082:	d050      	beq.n	800c126 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c084:	f7fc fcc2 	bl	8008a0c <HAL_GetTick>
 800c088:	4602      	mov	r2, r0
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	69fa      	ldr	r2, [r7, #28]
 800c090:	429a      	cmp	r2, r3
 800c092:	d902      	bls.n	800c09a <SPI_WaitFlagStateUntilTimeout+0x56>
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d13d      	bne.n	800c116 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	685a      	ldr	r2, [r3, #4]
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c0a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c0b2:	d111      	bne.n	800c0d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0bc:	d004      	beq.n	800c0c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0c6:	d107      	bne.n	800c0d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0e0:	d10f      	bne.n	800c102 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c0f0:	601a      	str	r2, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c100:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2201      	movs	r2, #1
 800c106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2200      	movs	r2, #0
 800c10e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c112:	2303      	movs	r3, #3
 800c114:	e017      	b.n	800c146 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d101      	bne.n	800c120 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c11c:	2300      	movs	r3, #0
 800c11e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	3b01      	subs	r3, #1
 800c124:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	689a      	ldr	r2, [r3, #8]
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	4013      	ands	r3, r2
 800c130:	68ba      	ldr	r2, [r7, #8]
 800c132:	429a      	cmp	r2, r3
 800c134:	bf0c      	ite	eq
 800c136:	2301      	moveq	r3, #1
 800c138:	2300      	movne	r3, #0
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	461a      	mov	r2, r3
 800c13e:	79fb      	ldrb	r3, [r7, #7]
 800c140:	429a      	cmp	r2, r3
 800c142:	d19b      	bne.n	800c07c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3720      	adds	r7, #32
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	20000040 	.word	0x20000040

0800c154 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b086      	sub	sp, #24
 800c158:	af02      	add	r7, sp, #8
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c168:	d111      	bne.n	800c18e <SPI_EndRxTransaction+0x3a>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c172:	d004      	beq.n	800c17e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c17c:	d107      	bne.n	800c18e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c18c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c196:	d117      	bne.n	800c1c8 <SPI_EndRxTransaction+0x74>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1a0:	d112      	bne.n	800c1c8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	9300      	str	r3, [sp, #0]
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	2101      	movs	r1, #1
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f7ff ff49 	bl	800c044 <SPI_WaitFlagStateUntilTimeout>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d01a      	beq.n	800c1ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1bc:	f043 0220 	orr.w	r2, r3, #32
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e013      	b.n	800c1f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	2180      	movs	r1, #128	; 0x80
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	f7ff ff36 	bl	800c044 <SPI_WaitFlagStateUntilTimeout>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d007      	beq.n	800c1ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e2:	f043 0220 	orr.w	r2, r3, #32
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c1ea:	2303      	movs	r3, #3
 800c1ec:	e000      	b.n	800c1f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800c1ee:	2300      	movs	r3, #0
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3710      	adds	r7, #16
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b086      	sub	sp, #24
 800c1fc:	af02      	add	r7, sp, #8
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	9300      	str	r3, [sp, #0]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2201      	movs	r2, #1
 800c20c:	2102      	movs	r1, #2
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f7ff ff18 	bl	800c044 <SPI_WaitFlagStateUntilTimeout>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d007      	beq.n	800c22a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c21e:	f043 0220 	orr.w	r2, r3, #32
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800c226:	2303      	movs	r3, #3
 800c228:	e013      	b.n	800c252 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	2200      	movs	r2, #0
 800c232:	2180      	movs	r1, #128	; 0x80
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	f7ff ff05 	bl	800c044 <SPI_WaitFlagStateUntilTimeout>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d007      	beq.n	800c250 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c244:	f043 0220 	orr.w	r2, r3, #32
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800c24c:	2303      	movs	r3, #3
 800c24e:	e000      	b.n	800c252 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800c250:	2300      	movs	r3, #0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b082      	sub	sp, #8
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	e042      	b.n	800c2f2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c272:	b2db      	uxtb	r3, r3
 800c274:	2b00      	cmp	r3, #0
 800c276:	d106      	bne.n	800c286 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f7fc f973 	bl	800856c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2224      	movs	r2, #36	; 0x24
 800c28a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	68da      	ldr	r2, [r3, #12]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c29c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 fa08 	bl	800c6b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	691a      	ldr	r2, [r3, #16]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c2b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	695a      	ldr	r2, [r3, #20]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c2c2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	68da      	ldr	r2, [r3, #12]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c2d2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2220      	movs	r2, #32
 800c2de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2220      	movs	r2, #32
 800c2e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b08a      	sub	sp, #40	; 0x28
 800c2fe:	af02      	add	r7, sp, #8
 800c300:	60f8      	str	r0, [r7, #12]
 800c302:	60b9      	str	r1, [r7, #8]
 800c304:	603b      	str	r3, [r7, #0]
 800c306:	4613      	mov	r3, r2
 800c308:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c30a:	2300      	movs	r3, #0
 800c30c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c314:	b2db      	uxtb	r3, r3
 800c316:	2b20      	cmp	r3, #32
 800c318:	d175      	bne.n	800c406 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <HAL_UART_Transmit+0x2c>
 800c320:	88fb      	ldrh	r3, [r7, #6]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d101      	bne.n	800c32a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	e06e      	b.n	800c408 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2200      	movs	r2, #0
 800c32e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2221      	movs	r2, #33	; 0x21
 800c334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c338:	f7fc fb68 	bl	8008a0c <HAL_GetTick>
 800c33c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	88fa      	ldrh	r2, [r7, #6]
 800c342:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	88fa      	ldrh	r2, [r7, #6]
 800c348:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c352:	d108      	bne.n	800c366 <HAL_UART_Transmit+0x6c>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	691b      	ldr	r3, [r3, #16]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d104      	bne.n	800c366 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c35c:	2300      	movs	r3, #0
 800c35e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	61bb      	str	r3, [r7, #24]
 800c364:	e003      	b.n	800c36e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c36a:	2300      	movs	r3, #0
 800c36c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c36e:	e02e      	b.n	800c3ce <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	2200      	movs	r2, #0
 800c378:	2180      	movs	r1, #128	; 0x80
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f000 f8df 	bl	800c53e <UART_WaitOnFlagUntilTimeout>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d005      	beq.n	800c392 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2220      	movs	r2, #32
 800c38a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800c38e:	2303      	movs	r3, #3
 800c390:	e03a      	b.n	800c408 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10b      	bne.n	800c3b0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	881b      	ldrh	r3, [r3, #0]
 800c39c:	461a      	mov	r2, r3
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c3a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	3302      	adds	r3, #2
 800c3ac:	61bb      	str	r3, [r7, #24]
 800c3ae:	e007      	b.n	800c3c0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	781a      	ldrb	r2, [r3, #0]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	b29a      	uxth	r2, r3
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1cb      	bne.n	800c370 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	2140      	movs	r1, #64	; 0x40
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f000 f8ab 	bl	800c53e <UART_WaitOnFlagUntilTimeout>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d005      	beq.n	800c3fa <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2220      	movs	r2, #32
 800c3f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800c3f6:	2303      	movs	r3, #3
 800c3f8:	e006      	b.n	800c408 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2220      	movs	r2, #32
 800c3fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800c402:	2300      	movs	r3, #0
 800c404:	e000      	b.n	800c408 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c406:	2302      	movs	r3, #2
  }
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3720      	adds	r7, #32
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b08a      	sub	sp, #40	; 0x28
 800c414:	af02      	add	r7, sp, #8
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	603b      	str	r3, [r7, #0]
 800c41c:	4613      	mov	r3, r2
 800c41e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c420:	2300      	movs	r3, #0
 800c422:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	2b20      	cmp	r3, #32
 800c42e:	f040 8081 	bne.w	800c534 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <HAL_UART_Receive+0x2e>
 800c438:	88fb      	ldrh	r3, [r7, #6]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800c43e:	2301      	movs	r3, #1
 800c440:	e079      	b.n	800c536 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2200      	movs	r2, #0
 800c446:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2222      	movs	r2, #34	; 0x22
 800c44c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2200      	movs	r2, #0
 800c454:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c456:	f7fc fad9 	bl	8008a0c <HAL_GetTick>
 800c45a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	88fa      	ldrh	r2, [r7, #6]
 800c460:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	88fa      	ldrh	r2, [r7, #6]
 800c466:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c470:	d108      	bne.n	800c484 <HAL_UART_Receive+0x74>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d104      	bne.n	800c484 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800c47a:	2300      	movs	r3, #0
 800c47c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	61bb      	str	r3, [r7, #24]
 800c482:	e003      	b.n	800c48c <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c488:	2300      	movs	r3, #0
 800c48a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800c48c:	e047      	b.n	800c51e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	2200      	movs	r2, #0
 800c496:	2120      	movs	r1, #32
 800c498:	68f8      	ldr	r0, [r7, #12]
 800c49a:	f000 f850 	bl	800c53e <UART_WaitOnFlagUntilTimeout>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d005      	beq.n	800c4b0 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2220      	movs	r2, #32
 800c4a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800c4ac:	2303      	movs	r3, #3
 800c4ae:	e042      	b.n	800c536 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10c      	bne.n	800c4d0 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	3302      	adds	r3, #2
 800c4cc:	61bb      	str	r3, [r7, #24]
 800c4ce:	e01f      	b.n	800c510 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4d8:	d007      	beq.n	800c4ea <HAL_UART_Receive+0xda>
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d10a      	bne.n	800c4f8 <HAL_UART_Receive+0xe8>
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d106      	bne.n	800c4f8 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	b2da      	uxtb	r2, r3
 800c4f2:	69fb      	ldr	r3, [r7, #28]
 800c4f4:	701a      	strb	r2, [r3, #0]
 800c4f6:	e008      	b.n	800c50a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c504:	b2da      	uxtb	r2, r3
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	3301      	adds	r3, #1
 800c50e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c514:	b29b      	uxth	r3, r3
 800c516:	3b01      	subs	r3, #1
 800c518:	b29a      	uxth	r2, r3
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c522:	b29b      	uxth	r3, r3
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1b2      	bne.n	800c48e <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2220      	movs	r2, #32
 800c52c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800c530:	2300      	movs	r3, #0
 800c532:	e000      	b.n	800c536 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800c534:	2302      	movs	r3, #2
  }
}
 800c536:	4618      	mov	r0, r3
 800c538:	3720      	adds	r7, #32
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b086      	sub	sp, #24
 800c542:	af00      	add	r7, sp, #0
 800c544:	60f8      	str	r0, [r7, #12]
 800c546:	60b9      	str	r1, [r7, #8]
 800c548:	603b      	str	r3, [r7, #0]
 800c54a:	4613      	mov	r3, r2
 800c54c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c54e:	e03b      	b.n	800c5c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c550:	6a3b      	ldr	r3, [r7, #32]
 800c552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c556:	d037      	beq.n	800c5c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c558:	f7fc fa58 	bl	8008a0c <HAL_GetTick>
 800c55c:	4602      	mov	r2, r0
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	6a3a      	ldr	r2, [r7, #32]
 800c564:	429a      	cmp	r2, r3
 800c566:	d302      	bcc.n	800c56e <UART_WaitOnFlagUntilTimeout+0x30>
 800c568:	6a3b      	ldr	r3, [r7, #32]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d101      	bne.n	800c572 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c56e:	2303      	movs	r3, #3
 800c570:	e03a      	b.n	800c5e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	68db      	ldr	r3, [r3, #12]
 800c578:	f003 0304 	and.w	r3, r3, #4
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d023      	beq.n	800c5c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	2b80      	cmp	r3, #128	; 0x80
 800c584:	d020      	beq.n	800c5c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	2b40      	cmp	r3, #64	; 0x40
 800c58a:	d01d      	beq.n	800c5c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 0308 	and.w	r3, r3, #8
 800c596:	2b08      	cmp	r3, #8
 800c598:	d116      	bne.n	800c5c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c59a:	2300      	movs	r3, #0
 800c59c:	617b      	str	r3, [r7, #20]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	617b      	str	r3, [r7, #20]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	617b      	str	r3, [r7, #20]
 800c5ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f000 f81d 	bl	800c5f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2208      	movs	r2, #8
 800c5ba:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e00f      	b.n	800c5e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	68ba      	ldr	r2, [r7, #8]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	bf0c      	ite	eq
 800c5d8:	2301      	moveq	r3, #1
 800c5da:	2300      	movne	r3, #0
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	461a      	mov	r2, r3
 800c5e0:	79fb      	ldrb	r3, [r7, #7]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d0b4      	beq.n	800c550 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3718      	adds	r7, #24
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b095      	sub	sp, #84	; 0x54
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	330c      	adds	r3, #12
 800c5fe:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c602:	e853 3f00 	ldrex	r3, [r3]
 800c606:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c60e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	330c      	adds	r3, #12
 800c616:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c618:	643a      	str	r2, [r7, #64]	; 0x40
 800c61a:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c61c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c61e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c620:	e841 2300 	strex	r3, r2, [r1]
 800c624:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d1e5      	bne.n	800c5f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	3314      	adds	r3, #20
 800c632:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c634:	6a3b      	ldr	r3, [r7, #32]
 800c636:	e853 3f00 	ldrex	r3, [r3]
 800c63a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	f023 0301 	bic.w	r3, r3, #1
 800c642:	64bb      	str	r3, [r7, #72]	; 0x48
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	3314      	adds	r3, #20
 800c64a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c64c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c64e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c654:	e841 2300 	strex	r3, r2, [r1]
 800c658:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d1e5      	bne.n	800c62c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c664:	2b01      	cmp	r3, #1
 800c666:	d119      	bne.n	800c69c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	330c      	adds	r3, #12
 800c66e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	e853 3f00 	ldrex	r3, [r3]
 800c676:	60bb      	str	r3, [r7, #8]
   return(result);
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	f023 0310 	bic.w	r3, r3, #16
 800c67e:	647b      	str	r3, [r7, #68]	; 0x44
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	330c      	adds	r3, #12
 800c686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c688:	61ba      	str	r2, [r7, #24]
 800c68a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68c:	6979      	ldr	r1, [r7, #20]
 800c68e:	69ba      	ldr	r2, [r7, #24]
 800c690:	e841 2300 	strex	r3, r2, [r1]
 800c694:	613b      	str	r3, [r7, #16]
   return(result);
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d1e5      	bne.n	800c668 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2220      	movs	r2, #32
 800c6a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c6aa:	bf00      	nop
 800c6ac:	3754      	adds	r7, #84	; 0x54
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bc80      	pop	{r7}
 800c6b2:	4770      	bx	lr

0800c6b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	691b      	ldr	r3, [r3, #16]
 800c6c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	68da      	ldr	r2, [r3, #12]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	430a      	orrs	r2, r1
 800c6d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	689a      	ldr	r2, [r3, #8]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	431a      	orrs	r2, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	695b      	ldr	r3, [r3, #20]
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c6ee:	f023 030c 	bic.w	r3, r3, #12
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	6812      	ldr	r2, [r2, #0]
 800c6f6:	68b9      	ldr	r1, [r7, #8]
 800c6f8:	430b      	orrs	r3, r1
 800c6fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	695b      	ldr	r3, [r3, #20]
 800c702:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	699a      	ldr	r2, [r3, #24]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	430a      	orrs	r2, r1
 800c710:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a2c      	ldr	r2, [pc, #176]	; (800c7c8 <UART_SetConfig+0x114>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d103      	bne.n	800c724 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c71c:	f7fe fc14 	bl	800af48 <HAL_RCC_GetPCLK2Freq>
 800c720:	60f8      	str	r0, [r7, #12]
 800c722:	e002      	b.n	800c72a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c724:	f7fe fbfc 	bl	800af20 <HAL_RCC_GetPCLK1Freq>
 800c728:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	4613      	mov	r3, r2
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	4413      	add	r3, r2
 800c732:	009a      	lsls	r2, r3, #2
 800c734:	441a      	add	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c740:	4a22      	ldr	r2, [pc, #136]	; (800c7cc <UART_SetConfig+0x118>)
 800c742:	fba2 2303 	umull	r2, r3, r2, r3
 800c746:	095b      	lsrs	r3, r3, #5
 800c748:	0119      	lsls	r1, r3, #4
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	4613      	mov	r3, r2
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	4413      	add	r3, r2
 800c752:	009a      	lsls	r2, r3, #2
 800c754:	441a      	add	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c760:	4b1a      	ldr	r3, [pc, #104]	; (800c7cc <UART_SetConfig+0x118>)
 800c762:	fba3 0302 	umull	r0, r3, r3, r2
 800c766:	095b      	lsrs	r3, r3, #5
 800c768:	2064      	movs	r0, #100	; 0x64
 800c76a:	fb00 f303 	mul.w	r3, r0, r3
 800c76e:	1ad3      	subs	r3, r2, r3
 800c770:	011b      	lsls	r3, r3, #4
 800c772:	3332      	adds	r3, #50	; 0x32
 800c774:	4a15      	ldr	r2, [pc, #84]	; (800c7cc <UART_SetConfig+0x118>)
 800c776:	fba2 2303 	umull	r2, r3, r2, r3
 800c77a:	095b      	lsrs	r3, r3, #5
 800c77c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c780:	4419      	add	r1, r3
 800c782:	68fa      	ldr	r2, [r7, #12]
 800c784:	4613      	mov	r3, r2
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	4413      	add	r3, r2
 800c78a:	009a      	lsls	r2, r3, #2
 800c78c:	441a      	add	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	fbb2 f2f3 	udiv	r2, r2, r3
 800c798:	4b0c      	ldr	r3, [pc, #48]	; (800c7cc <UART_SetConfig+0x118>)
 800c79a:	fba3 0302 	umull	r0, r3, r3, r2
 800c79e:	095b      	lsrs	r3, r3, #5
 800c7a0:	2064      	movs	r0, #100	; 0x64
 800c7a2:	fb00 f303 	mul.w	r3, r0, r3
 800c7a6:	1ad3      	subs	r3, r2, r3
 800c7a8:	011b      	lsls	r3, r3, #4
 800c7aa:	3332      	adds	r3, #50	; 0x32
 800c7ac:	4a07      	ldr	r2, [pc, #28]	; (800c7cc <UART_SetConfig+0x118>)
 800c7ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c7b2:	095b      	lsrs	r3, r3, #5
 800c7b4:	f003 020f 	and.w	r2, r3, #15
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	440a      	add	r2, r1
 800c7be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c7c0:	bf00      	nop
 800c7c2:	3710      	adds	r7, #16
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	40013800 	.word	0x40013800
 800c7cc:	51eb851f 	.word	0x51eb851f

0800c7d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	4638      	mov	r0, r7
 800c7da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3714      	adds	r7, #20
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bc80      	pop	{r7}
 800c7e8:	4770      	bx	lr

0800c7ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b085      	sub	sp, #20
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c7f2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c7f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c7fe:	b29a      	uxth	r2, r3
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	b29b      	uxth	r3, r3
 800c804:	43db      	mvns	r3, r3
 800c806:	b29b      	uxth	r3, r3
 800c808:	4013      	ands	r3, r2
 800c80a:	b29a      	uxth	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c812:	2300      	movs	r3, #0
}
 800c814:	4618      	mov	r0, r3
 800c816:	3714      	adds	r7, #20
 800c818:	46bd      	mov	sp, r7
 800c81a:	bc80      	pop	{r7}
 800c81c:	4770      	bx	lr

0800c81e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800c81e:	b480      	push	{r7}
 800c820:	b083      	sub	sp, #12
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
 800c826:	460b      	mov	r3, r1
 800c828:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	bc80      	pop	{r7}
 800c834:	4770      	bx	lr

0800c836 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c836:	b480      	push	{r7}
 800c838:	b085      	sub	sp, #20
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	60f8      	str	r0, [r7, #12]
 800c83e:	4638      	mov	r0, r7
 800c840:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2201      	movs	r2, #1
 800c848:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2200      	movs	r2, #0
 800c850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2200      	movs	r2, #0
 800c858:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2200      	movs	r2, #0
 800c860:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	3714      	adds	r7, #20
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bc80      	pop	{r7}
 800c86e:	4770      	bx	lr

0800c870 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b0c2      	sub	sp, #264	; 0x108
 800c874:	af00      	add	r7, sp, #0
 800c876:	1d3b      	adds	r3, r7, #4
 800c878:	6018      	str	r0, [r3, #0]
 800c87a:	463b      	mov	r3, r7
 800c87c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c87e:	463b      	mov	r3, r7
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	785b      	ldrb	r3, [r3, #1]
 800c884:	2b01      	cmp	r3, #1
 800c886:	f040 8545 	bne.w	800d314 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c88a:	463b      	mov	r3, r7
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	699a      	ldr	r2, [r3, #24]
 800c890:	463b      	mov	r3, r7
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	691b      	ldr	r3, [r3, #16]
 800c896:	429a      	cmp	r2, r3
 800c898:	d905      	bls.n	800c8a6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800c89a:	463b      	mov	r3, r7
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c8a4:	e004      	b.n	800c8b0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800c8a6:	463b      	mov	r3, r7
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	699b      	ldr	r3, [r3, #24]
 800c8ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c8b0:	463b      	mov	r3, r7
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	7b1b      	ldrb	r3, [r3, #12]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d128      	bne.n	800c90c <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c8ba:	463b      	mov	r3, r7
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	6959      	ldr	r1, [r3, #20]
 800c8c0:	463b      	mov	r3, r7
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	88da      	ldrh	r2, [r3, #6]
 800c8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	1d38      	adds	r0, r7, #4
 800c8ce:	6800      	ldr	r0, [r0, #0]
 800c8d0:	f001 f946 	bl	800db60 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c8d4:	1d3b      	adds	r3, r7, #4
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	613b      	str	r3, [r7, #16]
 800c8da:	1d3b      	adds	r3, r7, #4
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	613b      	str	r3, [r7, #16]
 800c8ec:	463b      	mov	r3, r7
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	011a      	lsls	r2, r3, #4
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	4413      	add	r3, r2
 800c8f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c8fc:	60fb      	str	r3, [r7, #12]
 800c8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c902:	b29a      	uxth	r2, r3
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	801a      	strh	r2, [r3, #0]
 800c908:	f000 bcdb 	b.w	800d2c2 <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c90c:	463b      	mov	r3, r7
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	78db      	ldrb	r3, [r3, #3]
 800c912:	2b02      	cmp	r3, #2
 800c914:	f040 836f 	bne.w	800cff6 <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c918:	463b      	mov	r3, r7
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	6a1a      	ldr	r2, [r3, #32]
 800c91e:	463b      	mov	r3, r7
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	691b      	ldr	r3, [r3, #16]
 800c924:	429a      	cmp	r2, r3
 800c926:	f240 8313 	bls.w	800cf50 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c92a:	1d3b      	adds	r3, r7, #4
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	463b      	mov	r3, r7
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	4413      	add	r3, r2
 800c938:	881b      	ldrh	r3, [r3, #0]
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c944:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800c948:	1d3b      	adds	r3, r7, #4
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	463b      	mov	r3, r7
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	441a      	add	r2, r3
 800c956:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c95a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c95e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c962:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c96e:	463b      	mov	r3, r7
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	6a1a      	ldr	r2, [r3, #32]
 800c974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c978:	1ad2      	subs	r2, r2, r3
 800c97a:	463b      	mov	r3, r7
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c980:	1d3b      	adds	r3, r7, #4
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	463b      	mov	r3, r7
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	881b      	ldrh	r3, [r3, #0]
 800c990:	b29b      	uxth	r3, r3
 800c992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c996:	2b00      	cmp	r3, #0
 800c998:	f000 816d 	beq.w	800cc76 <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c99c:	1d3b      	adds	r3, r7, #4
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	633b      	str	r3, [r7, #48]	; 0x30
 800c9a2:	463b      	mov	r3, r7
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	785b      	ldrb	r3, [r3, #1]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d16e      	bne.n	800ca8a <USB_EPStartXfer+0x21a>
 800c9ac:	1d3b      	adds	r3, r7, #4
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9b2:	1d3b      	adds	r3, r7, #4
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	461a      	mov	r2, r3
 800c9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c0:	4413      	add	r3, r2
 800c9c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9c4:	463b      	mov	r3, r7
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	011a      	lsls	r2, r3, #4
 800c9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ce:	4413      	add	r3, r2
 800c9d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c9d4:	627b      	str	r3, [r7, #36]	; 0x24
 800c9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d8:	881b      	ldrh	r3, [r3, #0]
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c9e0:	b29a      	uxth	r2, r3
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e4:	801a      	strh	r2, [r3, #0]
 800c9e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9ea:	2b3e      	cmp	r3, #62	; 0x3e
 800c9ec:	d921      	bls.n	800ca32 <USB_EPStartXfer+0x1c2>
 800c9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9f2:	095b      	lsrs	r3, r3, #5
 800c9f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9fc:	f003 031f 	and.w	r3, r3, #31
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d104      	bne.n	800ca0e <USB_EPStartXfer+0x19e>
 800ca04:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ca08:	3b01      	subs	r3, #1
 800ca0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ca0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca10:	881b      	ldrh	r3, [r3, #0]
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	029b      	lsls	r3, r3, #10
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2e:	801a      	strh	r2, [r3, #0]
 800ca30:	e047      	b.n	800cac2 <USB_EPStartXfer+0x252>
 800ca32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10a      	bne.n	800ca50 <USB_EPStartXfer+0x1e0>
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3c:	881b      	ldrh	r3, [r3, #0]
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4c:	801a      	strh	r2, [r3, #0]
 800ca4e:	e038      	b.n	800cac2 <USB_EPStartXfer+0x252>
 800ca50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca54:	085b      	lsrs	r3, r3, #1
 800ca56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ca5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca5e:	f003 0301 	and.w	r3, r3, #1
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d004      	beq.n	800ca70 <USB_EPStartXfer+0x200>
 800ca66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ca70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca72:	881b      	ldrh	r3, [r3, #0]
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	029b      	lsls	r3, r3, #10
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	4313      	orrs	r3, r2
 800ca82:	b29a      	uxth	r2, r3
 800ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca86:	801a      	strh	r2, [r3, #0]
 800ca88:	e01b      	b.n	800cac2 <USB_EPStartXfer+0x252>
 800ca8a:	463b      	mov	r3, r7
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	785b      	ldrb	r3, [r3, #1]
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d116      	bne.n	800cac2 <USB_EPStartXfer+0x252>
 800ca94:	1d3b      	adds	r3, r7, #4
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	461a      	mov	r2, r3
 800caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa2:	4413      	add	r3, r2
 800caa4:	633b      	str	r3, [r7, #48]	; 0x30
 800caa6:	463b      	mov	r3, r7
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	011a      	lsls	r2, r3, #4
 800caae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab0:	4413      	add	r3, r2
 800cab2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cabc:	b29a      	uxth	r2, r3
 800cabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cac2:	463b      	mov	r3, r7
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	895b      	ldrh	r3, [r3, #10]
 800cac8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cacc:	463b      	mov	r3, r7
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6959      	ldr	r1, [r3, #20]
 800cad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cadc:	1d38      	adds	r0, r7, #4
 800cade:	6800      	ldr	r0, [r0, #0]
 800cae0:	f001 f83e 	bl	800db60 <USB_WritePMA>
            ep->xfer_buff += len;
 800cae4:	463b      	mov	r3, r7
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	695a      	ldr	r2, [r3, #20]
 800caea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caee:	441a      	add	r2, r3
 800caf0:	463b      	mov	r3, r7
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800caf6:	463b      	mov	r3, r7
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	6a1a      	ldr	r2, [r3, #32]
 800cafc:	463b      	mov	r3, r7
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	691b      	ldr	r3, [r3, #16]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d909      	bls.n	800cb1a <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 800cb06:	463b      	mov	r3, r7
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	6a1a      	ldr	r2, [r3, #32]
 800cb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb10:	1ad2      	subs	r2, r2, r3
 800cb12:	463b      	mov	r3, r7
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	621a      	str	r2, [r3, #32]
 800cb18:	e008      	b.n	800cb2c <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 800cb1a:	463b      	mov	r3, r7
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	6a1b      	ldr	r3, [r3, #32]
 800cb20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800cb24:	463b      	mov	r3, r7
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cb2c:	463b      	mov	r3, r7
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	785b      	ldrb	r3, [r3, #1]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d16e      	bne.n	800cc14 <USB_EPStartXfer+0x3a4>
 800cb36:	1d3b      	adds	r3, r7, #4
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	61bb      	str	r3, [r7, #24]
 800cb3c:	1d3b      	adds	r3, r7, #4
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	461a      	mov	r2, r3
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	4413      	add	r3, r2
 800cb4c:	61bb      	str	r3, [r7, #24]
 800cb4e:	463b      	mov	r3, r7
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	011a      	lsls	r2, r3, #4
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	4413      	add	r3, r2
 800cb5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cb5e:	617b      	str	r3, [r7, #20]
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	881b      	ldrh	r3, [r3, #0]
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	801a      	strh	r2, [r3, #0]
 800cb70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb74:	2b3e      	cmp	r3, #62	; 0x3e
 800cb76:	d921      	bls.n	800cbbc <USB_EPStartXfer+0x34c>
 800cb78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb7c:	095b      	lsrs	r3, r3, #5
 800cb7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cb82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb86:	f003 031f 	and.w	r3, r3, #31
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d104      	bne.n	800cb98 <USB_EPStartXfer+0x328>
 800cb8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb92:	3b01      	subs	r3, #1
 800cb94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	881b      	ldrh	r3, [r3, #0]
 800cb9c:	b29a      	uxth	r2, r3
 800cb9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	029b      	lsls	r3, r3, #10
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	801a      	strh	r2, [r3, #0]
 800cbba:	e04a      	b.n	800cc52 <USB_EPStartXfer+0x3e2>
 800cbbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10a      	bne.n	800cbda <USB_EPStartXfer+0x36a>
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	881b      	ldrh	r3, [r3, #0]
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbd2:	b29a      	uxth	r2, r3
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	801a      	strh	r2, [r3, #0]
 800cbd8:	e03b      	b.n	800cc52 <USB_EPStartXfer+0x3e2>
 800cbda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbde:	085b      	lsrs	r3, r3, #1
 800cbe0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cbe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbe8:	f003 0301 	and.w	r3, r3, #1
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d004      	beq.n	800cbfa <USB_EPStartXfer+0x38a>
 800cbf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	881b      	ldrh	r3, [r3, #0]
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	029b      	lsls	r3, r3, #10
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	801a      	strh	r2, [r3, #0]
 800cc12:	e01e      	b.n	800cc52 <USB_EPStartXfer+0x3e2>
 800cc14:	463b      	mov	r3, r7
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	785b      	ldrb	r3, [r3, #1]
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d119      	bne.n	800cc52 <USB_EPStartXfer+0x3e2>
 800cc1e:	1d3b      	adds	r3, r7, #4
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	623b      	str	r3, [r7, #32]
 800cc24:	1d3b      	adds	r3, r7, #4
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	461a      	mov	r2, r3
 800cc30:	6a3b      	ldr	r3, [r7, #32]
 800cc32:	4413      	add	r3, r2
 800cc34:	623b      	str	r3, [r7, #32]
 800cc36:	463b      	mov	r3, r7
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	011a      	lsls	r2, r3, #4
 800cc3e:	6a3b      	ldr	r3, [r7, #32]
 800cc40:	4413      	add	r3, r2
 800cc42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cc46:	61fb      	str	r3, [r7, #28]
 800cc48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cc52:	463b      	mov	r3, r7
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	891b      	ldrh	r3, [r3, #8]
 800cc58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc5c:	463b      	mov	r3, r7
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6959      	ldr	r1, [r3, #20]
 800cc62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cc6c:	1d38      	adds	r0, r7, #4
 800cc6e:	6800      	ldr	r0, [r0, #0]
 800cc70:	f000 ff76 	bl	800db60 <USB_WritePMA>
 800cc74:	e325      	b.n	800d2c2 <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cc76:	463b      	mov	r3, r7
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	785b      	ldrb	r3, [r3, #1]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d16e      	bne.n	800cd5e <USB_EPStartXfer+0x4ee>
 800cc80:	1d3b      	adds	r3, r7, #4
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc86:	1d3b      	adds	r3, r7, #4
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	461a      	mov	r2, r3
 800cc92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc94:	4413      	add	r3, r2
 800cc96:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc98:	463b      	mov	r3, r7
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	011a      	lsls	r2, r3, #4
 800cca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cca2:	4413      	add	r3, r2
 800cca4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cca8:	647b      	str	r3, [r7, #68]	; 0x44
 800ccaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccac:	881b      	ldrh	r3, [r3, #0]
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ccb4:	b29a      	uxth	r2, r3
 800ccb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccb8:	801a      	strh	r2, [r3, #0]
 800ccba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccbe:	2b3e      	cmp	r3, #62	; 0x3e
 800ccc0:	d921      	bls.n	800cd06 <USB_EPStartXfer+0x496>
 800ccc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccc6:	095b      	lsrs	r3, r3, #5
 800ccc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccd0:	f003 031f 	and.w	r3, r3, #31
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d104      	bne.n	800cce2 <USB_EPStartXfer+0x472>
 800ccd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cce4:	881b      	ldrh	r3, [r3, #0]
 800cce6:	b29a      	uxth	r2, r3
 800cce8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	029b      	lsls	r3, r3, #10
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd02:	801a      	strh	r2, [r3, #0]
 800cd04:	e04a      	b.n	800cd9c <USB_EPStartXfer+0x52c>
 800cd06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d10a      	bne.n	800cd24 <USB_EPStartXfer+0x4b4>
 800cd0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd10:	881b      	ldrh	r3, [r3, #0]
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd20:	801a      	strh	r2, [r3, #0]
 800cd22:	e03b      	b.n	800cd9c <USB_EPStartXfer+0x52c>
 800cd24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd28:	085b      	lsrs	r3, r3, #1
 800cd2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd32:	f003 0301 	and.w	r3, r3, #1
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d004      	beq.n	800cd44 <USB_EPStartXfer+0x4d4>
 800cd3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cd3e:	3301      	adds	r3, #1
 800cd40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cd44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd46:	881b      	ldrh	r3, [r3, #0]
 800cd48:	b29a      	uxth	r2, r3
 800cd4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	029b      	lsls	r3, r3, #10
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	4313      	orrs	r3, r2
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd5a:	801a      	strh	r2, [r3, #0]
 800cd5c:	e01e      	b.n	800cd9c <USB_EPStartXfer+0x52c>
 800cd5e:	463b      	mov	r3, r7
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	785b      	ldrb	r3, [r3, #1]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d119      	bne.n	800cd9c <USB_EPStartXfer+0x52c>
 800cd68:	1d3b      	adds	r3, r7, #4
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	653b      	str	r3, [r7, #80]	; 0x50
 800cd6e:	1d3b      	adds	r3, r7, #4
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	461a      	mov	r2, r3
 800cd7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd7c:	4413      	add	r3, r2
 800cd7e:	653b      	str	r3, [r7, #80]	; 0x50
 800cd80:	463b      	mov	r3, r7
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	011a      	lsls	r2, r3, #4
 800cd88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cd90:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd96:	b29a      	uxth	r2, r3
 800cd98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cd9c:	463b      	mov	r3, r7
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	891b      	ldrh	r3, [r3, #8]
 800cda2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cda6:	463b      	mov	r3, r7
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	6959      	ldr	r1, [r3, #20]
 800cdac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cdb6:	1d38      	adds	r0, r7, #4
 800cdb8:	6800      	ldr	r0, [r0, #0]
 800cdba:	f000 fed1 	bl	800db60 <USB_WritePMA>
            ep->xfer_buff += len;
 800cdbe:	463b      	mov	r3, r7
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	695a      	ldr	r2, [r3, #20]
 800cdc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdc8:	441a      	add	r2, r3
 800cdca:	463b      	mov	r3, r7
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cdd0:	463b      	mov	r3, r7
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	6a1a      	ldr	r2, [r3, #32]
 800cdd6:	463b      	mov	r3, r7
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	691b      	ldr	r3, [r3, #16]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d909      	bls.n	800cdf4 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 800cde0:	463b      	mov	r3, r7
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	6a1a      	ldr	r2, [r3, #32]
 800cde6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdea:	1ad2      	subs	r2, r2, r3
 800cdec:	463b      	mov	r3, r7
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	621a      	str	r2, [r3, #32]
 800cdf2:	e008      	b.n	800ce06 <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 800cdf4:	463b      	mov	r3, r7
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	6a1b      	ldr	r3, [r3, #32]
 800cdfa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800cdfe:	463b      	mov	r3, r7
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2200      	movs	r2, #0
 800ce04:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ce06:	1d3b      	adds	r3, r7, #4
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	643b      	str	r3, [r7, #64]	; 0x40
 800ce0c:	463b      	mov	r3, r7
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	785b      	ldrb	r3, [r3, #1]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d16e      	bne.n	800cef4 <USB_EPStartXfer+0x684>
 800ce16:	1d3b      	adds	r3, r7, #4
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce1c:	1d3b      	adds	r3, r7, #4
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	461a      	mov	r2, r3
 800ce28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2a:	4413      	add	r3, r2
 800ce2c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce2e:	463b      	mov	r3, r7
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	011a      	lsls	r2, r3, #4
 800ce36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce38:	4413      	add	r3, r2
 800ce3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ce3e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce42:	881b      	ldrh	r3, [r3, #0]
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce4a:	b29a      	uxth	r2, r3
 800ce4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce4e:	801a      	strh	r2, [r3, #0]
 800ce50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce54:	2b3e      	cmp	r3, #62	; 0x3e
 800ce56:	d921      	bls.n	800ce9c <USB_EPStartXfer+0x62c>
 800ce58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce5c:	095b      	lsrs	r3, r3, #5
 800ce5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ce62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce66:	f003 031f 	and.w	r3, r3, #31
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d104      	bne.n	800ce78 <USB_EPStartXfer+0x608>
 800ce6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce72:	3b01      	subs	r3, #1
 800ce74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ce78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce7a:	881b      	ldrh	r3, [r3, #0]
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce82:	b29b      	uxth	r3, r3
 800ce84:	029b      	lsls	r3, r3, #10
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce98:	801a      	strh	r2, [r3, #0]
 800ce9a:	e047      	b.n	800cf2c <USB_EPStartXfer+0x6bc>
 800ce9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10a      	bne.n	800ceba <USB_EPStartXfer+0x64a>
 800cea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea6:	881b      	ldrh	r3, [r3, #0]
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ceae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceb6:	801a      	strh	r2, [r3, #0]
 800ceb8:	e038      	b.n	800cf2c <USB_EPStartXfer+0x6bc>
 800ceba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cebe:	085b      	lsrs	r3, r3, #1
 800cec0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cec8:	f003 0301 	and.w	r3, r3, #1
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d004      	beq.n	800ceda <USB_EPStartXfer+0x66a>
 800ced0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ced4:	3301      	adds	r3, #1
 800ced6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ceda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cedc:	881b      	ldrh	r3, [r3, #0]
 800cede:	b29a      	uxth	r2, r3
 800cee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	029b      	lsls	r3, r3, #10
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	4313      	orrs	r3, r2
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef0:	801a      	strh	r2, [r3, #0]
 800cef2:	e01b      	b.n	800cf2c <USB_EPStartXfer+0x6bc>
 800cef4:	463b      	mov	r3, r7
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	785b      	ldrb	r3, [r3, #1]
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d116      	bne.n	800cf2c <USB_EPStartXfer+0x6bc>
 800cefe:	1d3b      	adds	r3, r7, #4
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	461a      	mov	r2, r3
 800cf0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf0c:	4413      	add	r3, r2
 800cf0e:	643b      	str	r3, [r7, #64]	; 0x40
 800cf10:	463b      	mov	r3, r7
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	011a      	lsls	r2, r3, #4
 800cf18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf1a:	4413      	add	r3, r2
 800cf1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cf20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf26:	b29a      	uxth	r2, r3
 800cf28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf2a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cf2c:	463b      	mov	r3, r7
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	895b      	ldrh	r3, [r3, #10]
 800cf32:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf36:	463b      	mov	r3, r7
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	6959      	ldr	r1, [r3, #20]
 800cf3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cf46:	1d38      	adds	r0, r7, #4
 800cf48:	6800      	ldr	r0, [r0, #0]
 800cf4a:	f000 fe09 	bl	800db60 <USB_WritePMA>
 800cf4e:	e1b8      	b.n	800d2c2 <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800cf50:	463b      	mov	r3, r7
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	6a1b      	ldr	r3, [r3, #32]
 800cf56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cf5a:	1d3b      	adds	r3, r7, #4
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	463b      	mov	r3, r7
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	4413      	add	r3, r2
 800cf68:	881b      	ldrh	r3, [r3, #0]
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800cf70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf74:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800cf78:	1d3b      	adds	r3, r7, #4
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	463b      	mov	r3, r7
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	441a      	add	r2, r3
 800cf86:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800cf8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cf9e:	1d3b      	adds	r3, r7, #4
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfa4:	1d3b      	adds	r3, r7, #4
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	461a      	mov	r2, r3
 800cfb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfb2:	4413      	add	r3, r2
 800cfb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfb6:	463b      	mov	r3, r7
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	011a      	lsls	r2, r3, #4
 800cfbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfc0:	4413      	add	r3, r2
 800cfc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cfc6:	65bb      	str	r3, [r7, #88]	; 0x58
 800cfc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfcc:	b29a      	uxth	r2, r3
 800cfce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfd0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cfd2:	463b      	mov	r3, r7
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	891b      	ldrh	r3, [r3, #8]
 800cfd8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cfdc:	463b      	mov	r3, r7
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	6959      	ldr	r1, [r3, #20]
 800cfe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cfec:	1d38      	adds	r0, r7, #4
 800cfee:	6800      	ldr	r0, [r0, #0]
 800cff0:	f000 fdb6 	bl	800db60 <USB_WritePMA>
 800cff4:	e165      	b.n	800d2c2 <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800cff6:	463b      	mov	r3, r7
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	6a1a      	ldr	r2, [r3, #32]
 800cffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d000:	1ad2      	subs	r2, r2, r3
 800d002:	463b      	mov	r3, r7
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d008:	1d3b      	adds	r3, r7, #4
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	463b      	mov	r3, r7
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	4413      	add	r3, r2
 800d016:	881b      	ldrh	r3, [r3, #0]
 800d018:	b29b      	uxth	r3, r3
 800d01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f000 80a5 	beq.w	800d16e <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d024:	1d3b      	adds	r3, r7, #4
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	673b      	str	r3, [r7, #112]	; 0x70
 800d02a:	463b      	mov	r3, r7
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	785b      	ldrb	r3, [r3, #1]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d16e      	bne.n	800d112 <USB_EPStartXfer+0x8a2>
 800d034:	1d3b      	adds	r3, r7, #4
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	66bb      	str	r3, [r7, #104]	; 0x68
 800d03a:	1d3b      	adds	r3, r7, #4
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d042:	b29b      	uxth	r3, r3
 800d044:	461a      	mov	r2, r3
 800d046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d048:	4413      	add	r3, r2
 800d04a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d04c:	463b      	mov	r3, r7
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	011a      	lsls	r2, r3, #4
 800d054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d056:	4413      	add	r3, r2
 800d058:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d05c:	667b      	str	r3, [r7, #100]	; 0x64
 800d05e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d060:	881b      	ldrh	r3, [r3, #0]
 800d062:	b29b      	uxth	r3, r3
 800d064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d068:	b29a      	uxth	r2, r3
 800d06a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d06c:	801a      	strh	r2, [r3, #0]
 800d06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d072:	2b3e      	cmp	r3, #62	; 0x3e
 800d074:	d921      	bls.n	800d0ba <USB_EPStartXfer+0x84a>
 800d076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d07a:	095b      	lsrs	r3, r3, #5
 800d07c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d084:	f003 031f 	and.w	r3, r3, #31
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d104      	bne.n	800d096 <USB_EPStartXfer+0x826>
 800d08c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d090:	3b01      	subs	r3, #1
 800d092:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d098:	881b      	ldrh	r3, [r3, #0]
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	029b      	lsls	r3, r3, #10
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0b6:	801a      	strh	r2, [r3, #0]
 800d0b8:	e047      	b.n	800d14a <USB_EPStartXfer+0x8da>
 800d0ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d10a      	bne.n	800d0d8 <USB_EPStartXfer+0x868>
 800d0c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0c4:	881b      	ldrh	r3, [r3, #0]
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0d0:	b29a      	uxth	r2, r3
 800d0d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0d4:	801a      	strh	r2, [r3, #0]
 800d0d6:	e038      	b.n	800d14a <USB_EPStartXfer+0x8da>
 800d0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0dc:	085b      	lsrs	r3, r3, #1
 800d0de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0e6:	f003 0301 	and.w	r3, r3, #1
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d004      	beq.n	800d0f8 <USB_EPStartXfer+0x888>
 800d0ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d0f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0fa:	881b      	ldrh	r3, [r3, #0]
 800d0fc:	b29a      	uxth	r2, r3
 800d0fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d102:	b29b      	uxth	r3, r3
 800d104:	029b      	lsls	r3, r3, #10
 800d106:	b29b      	uxth	r3, r3
 800d108:	4313      	orrs	r3, r2
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d10e:	801a      	strh	r2, [r3, #0]
 800d110:	e01b      	b.n	800d14a <USB_EPStartXfer+0x8da>
 800d112:	463b      	mov	r3, r7
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	785b      	ldrb	r3, [r3, #1]
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d116      	bne.n	800d14a <USB_EPStartXfer+0x8da>
 800d11c:	1d3b      	adds	r3, r7, #4
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d124:	b29b      	uxth	r3, r3
 800d126:	461a      	mov	r2, r3
 800d128:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d12a:	4413      	add	r3, r2
 800d12c:	673b      	str	r3, [r7, #112]	; 0x70
 800d12e:	463b      	mov	r3, r7
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	011a      	lsls	r2, r3, #4
 800d136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d138:	4413      	add	r3, r2
 800d13a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d13e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d144:	b29a      	uxth	r2, r3
 800d146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d148:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d14a:	463b      	mov	r3, r7
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	895b      	ldrh	r3, [r3, #10]
 800d150:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d154:	463b      	mov	r3, r7
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	6959      	ldr	r1, [r3, #20]
 800d15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d15e:	b29b      	uxth	r3, r3
 800d160:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d164:	1d38      	adds	r0, r7, #4
 800d166:	6800      	ldr	r0, [r0, #0]
 800d168:	f000 fcfa 	bl	800db60 <USB_WritePMA>
 800d16c:	e0a9      	b.n	800d2c2 <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d16e:	463b      	mov	r3, r7
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	785b      	ldrb	r3, [r3, #1]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d16e      	bne.n	800d256 <USB_EPStartXfer+0x9e6>
 800d178:	1d3b      	adds	r3, r7, #4
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d17e:	1d3b      	adds	r3, r7, #4
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d186:	b29b      	uxth	r3, r3
 800d188:	461a      	mov	r2, r3
 800d18a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d18c:	4413      	add	r3, r2
 800d18e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d190:	463b      	mov	r3, r7
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	011a      	lsls	r2, r3, #4
 800d198:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d19a:	4413      	add	r3, r2
 800d19c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d1a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800d1a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1a4:	881b      	ldrh	r3, [r3, #0]
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1ac:	b29a      	uxth	r2, r3
 800d1ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1b0:	801a      	strh	r2, [r3, #0]
 800d1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1b6:	2b3e      	cmp	r3, #62	; 0x3e
 800d1b8:	d921      	bls.n	800d1fe <USB_EPStartXfer+0x98e>
 800d1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1be:	095b      	lsrs	r3, r3, #5
 800d1c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1c8:	f003 031f 	and.w	r3, r3, #31
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d104      	bne.n	800d1da <USB_EPStartXfer+0x96a>
 800d1d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d1da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1dc:	881b      	ldrh	r3, [r3, #0]
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	029b      	lsls	r3, r3, #10
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1f6:	b29a      	uxth	r2, r3
 800d1f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1fa:	801a      	strh	r2, [r3, #0]
 800d1fc:	e050      	b.n	800d2a0 <USB_EPStartXfer+0xa30>
 800d1fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d202:	2b00      	cmp	r3, #0
 800d204:	d10a      	bne.n	800d21c <USB_EPStartXfer+0x9ac>
 800d206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d208:	881b      	ldrh	r3, [r3, #0]
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d214:	b29a      	uxth	r2, r3
 800d216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d218:	801a      	strh	r2, [r3, #0]
 800d21a:	e041      	b.n	800d2a0 <USB_EPStartXfer+0xa30>
 800d21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d220:	085b      	lsrs	r3, r3, #1
 800d222:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d22a:	f003 0301 	and.w	r3, r3, #1
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d004      	beq.n	800d23c <USB_EPStartXfer+0x9cc>
 800d232:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d236:	3301      	adds	r3, #1
 800d238:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d23c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d23e:	881b      	ldrh	r3, [r3, #0]
 800d240:	b29a      	uxth	r2, r3
 800d242:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d246:	b29b      	uxth	r3, r3
 800d248:	029b      	lsls	r3, r3, #10
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	4313      	orrs	r3, r2
 800d24e:	b29a      	uxth	r2, r3
 800d250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d252:	801a      	strh	r2, [r3, #0]
 800d254:	e024      	b.n	800d2a0 <USB_EPStartXfer+0xa30>
 800d256:	463b      	mov	r3, r7
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	785b      	ldrb	r3, [r3, #1]
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d11f      	bne.n	800d2a0 <USB_EPStartXfer+0xa30>
 800d260:	1d3b      	adds	r3, r7, #4
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d268:	1d3b      	adds	r3, r7, #4
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d270:	b29b      	uxth	r3, r3
 800d272:	461a      	mov	r2, r3
 800d274:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d278:	4413      	add	r3, r2
 800d27a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d27e:	463b      	mov	r3, r7
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	011a      	lsls	r2, r3, #4
 800d286:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d28a:	4413      	add	r3, r2
 800d28c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d290:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d298:	b29a      	uxth	r2, r3
 800d29a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d29e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d2a0:	463b      	mov	r3, r7
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	891b      	ldrh	r3, [r3, #8]
 800d2a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d2aa:	463b      	mov	r3, r7
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	6959      	ldr	r1, [r3, #20]
 800d2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d2ba:	1d38      	adds	r0, r7, #4
 800d2bc:	6800      	ldr	r0, [r0, #0]
 800d2be:	f000 fc4f 	bl	800db60 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d2c2:	1d3b      	adds	r3, r7, #4
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	463b      	mov	r3, r7
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	4413      	add	r3, r2
 800d2d0:	881b      	ldrh	r3, [r3, #0]
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2dc:	817b      	strh	r3, [r7, #10]
 800d2de:	897b      	ldrh	r3, [r7, #10]
 800d2e0:	f083 0310 	eor.w	r3, r3, #16
 800d2e4:	817b      	strh	r3, [r7, #10]
 800d2e6:	897b      	ldrh	r3, [r7, #10]
 800d2e8:	f083 0320 	eor.w	r3, r3, #32
 800d2ec:	817b      	strh	r3, [r7, #10]
 800d2ee:	1d3b      	adds	r3, r7, #4
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	463b      	mov	r3, r7
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	009b      	lsls	r3, r3, #2
 800d2fa:	441a      	add	r2, r3
 800d2fc:	897b      	ldrh	r3, [r7, #10]
 800d2fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d30a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d30e:	b29b      	uxth	r3, r3
 800d310:	8013      	strh	r3, [r2, #0]
 800d312:	e3f3      	b.n	800dafc <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d314:	463b      	mov	r3, r7
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	7b1b      	ldrb	r3, [r3, #12]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f040 809c 	bne.w	800d458 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d320:	463b      	mov	r3, r7
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	699a      	ldr	r2, [r3, #24]
 800d326:	463b      	mov	r3, r7
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	691b      	ldr	r3, [r3, #16]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d90e      	bls.n	800d34e <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 800d330:	463b      	mov	r3, r7
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	691b      	ldr	r3, [r3, #16]
 800d336:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800d33a:	463b      	mov	r3, r7
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	699a      	ldr	r2, [r3, #24]
 800d340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d344:	1ad2      	subs	r2, r2, r3
 800d346:	463b      	mov	r3, r7
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	619a      	str	r2, [r3, #24]
 800d34c:	e008      	b.n	800d360 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 800d34e:	463b      	mov	r3, r7
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	699b      	ldr	r3, [r3, #24]
 800d354:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800d358:	463b      	mov	r3, r7
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2200      	movs	r2, #0
 800d35e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d360:	1d3b      	adds	r3, r7, #4
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d368:	1d3b      	adds	r3, r7, #4
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d370:	b29b      	uxth	r3, r3
 800d372:	461a      	mov	r2, r3
 800d374:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d378:	4413      	add	r3, r2
 800d37a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d37e:	463b      	mov	r3, r7
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	011a      	lsls	r2, r3, #4
 800d386:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d38a:	4413      	add	r3, r2
 800d38c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d390:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d394:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d398:	881b      	ldrh	r3, [r3, #0]
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3a0:	b29a      	uxth	r2, r3
 800d3a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d3a6:	801a      	strh	r2, [r3, #0]
 800d3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3ac:	2b3e      	cmp	r3, #62	; 0x3e
 800d3ae:	d923      	bls.n	800d3f8 <USB_EPStartXfer+0xb88>
 800d3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3b4:	095b      	lsrs	r3, r3, #5
 800d3b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3be:	f003 031f 	and.w	r3, r3, #31
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d104      	bne.n	800d3d0 <USB_EPStartXfer+0xb60>
 800d3c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d3d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d3d4:	881b      	ldrh	r3, [r3, #0]
 800d3d6:	b29a      	uxth	r2, r3
 800d3d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	029b      	lsls	r3, r3, #10
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3ee:	b29a      	uxth	r2, r3
 800d3f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d3f4:	801a      	strh	r2, [r3, #0]
 800d3f6:	e353      	b.n	800daa0 <USB_EPStartXfer+0x1230>
 800d3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10c      	bne.n	800d41a <USB_EPStartXfer+0xbaa>
 800d400:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d404:	881b      	ldrh	r3, [r3, #0]
 800d406:	b29b      	uxth	r3, r3
 800d408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d40c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d410:	b29a      	uxth	r2, r3
 800d412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d416:	801a      	strh	r2, [r3, #0]
 800d418:	e342      	b.n	800daa0 <USB_EPStartXfer+0x1230>
 800d41a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d41e:	085b      	lsrs	r3, r3, #1
 800d420:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d428:	f003 0301 	and.w	r3, r3, #1
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d004      	beq.n	800d43a <USB_EPStartXfer+0xbca>
 800d430:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d434:	3301      	adds	r3, #1
 800d436:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d43a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d43e:	881b      	ldrh	r3, [r3, #0]
 800d440:	b29a      	uxth	r2, r3
 800d442:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d446:	b29b      	uxth	r3, r3
 800d448:	029b      	lsls	r3, r3, #10
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	4313      	orrs	r3, r2
 800d44e:	b29a      	uxth	r2, r3
 800d450:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d454:	801a      	strh	r2, [r3, #0]
 800d456:	e323      	b.n	800daa0 <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d458:	463b      	mov	r3, r7
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	78db      	ldrb	r3, [r3, #3]
 800d45e:	2b02      	cmp	r3, #2
 800d460:	f040 81a9 	bne.w	800d7b6 <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d464:	463b      	mov	r3, r7
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	785b      	ldrb	r3, [r3, #1]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f040 8082 	bne.w	800d574 <USB_EPStartXfer+0xd04>
 800d470:	1d3b      	adds	r3, r7, #4
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d478:	1d3b      	adds	r3, r7, #4
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d480:	b29b      	uxth	r3, r3
 800d482:	461a      	mov	r2, r3
 800d484:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d488:	4413      	add	r3, r2
 800d48a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d48e:	463b      	mov	r3, r7
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	011a      	lsls	r2, r3, #4
 800d496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d49a:	4413      	add	r3, r2
 800d49c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d4a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d4a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d4a8:	881b      	ldrh	r3, [r3, #0]
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d4b6:	801a      	strh	r2, [r3, #0]
 800d4b8:	463b      	mov	r3, r7
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	691b      	ldr	r3, [r3, #16]
 800d4be:	2b3e      	cmp	r3, #62	; 0x3e
 800d4c0:	d925      	bls.n	800d50e <USB_EPStartXfer+0xc9e>
 800d4c2:	463b      	mov	r3, r7
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	691b      	ldr	r3, [r3, #16]
 800d4c8:	095b      	lsrs	r3, r3, #5
 800d4ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d4ce:	463b      	mov	r3, r7
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	691b      	ldr	r3, [r3, #16]
 800d4d4:	f003 031f 	and.w	r3, r3, #31
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d104      	bne.n	800d4e6 <USB_EPStartXfer+0xc76>
 800d4dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d4e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d4ea:	881b      	ldrh	r3, [r3, #0]
 800d4ec:	b29a      	uxth	r2, r3
 800d4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	029b      	lsls	r3, r3, #10
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	b29b      	uxth	r3, r3
 800d4fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d504:	b29a      	uxth	r2, r3
 800d506:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d50a:	801a      	strh	r2, [r3, #0]
 800d50c:	e058      	b.n	800d5c0 <USB_EPStartXfer+0xd50>
 800d50e:	463b      	mov	r3, r7
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	691b      	ldr	r3, [r3, #16]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d10c      	bne.n	800d532 <USB_EPStartXfer+0xcc2>
 800d518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d51c:	881b      	ldrh	r3, [r3, #0]
 800d51e:	b29b      	uxth	r3, r3
 800d520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d528:	b29a      	uxth	r2, r3
 800d52a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d52e:	801a      	strh	r2, [r3, #0]
 800d530:	e046      	b.n	800d5c0 <USB_EPStartXfer+0xd50>
 800d532:	463b      	mov	r3, r7
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	691b      	ldr	r3, [r3, #16]
 800d538:	085b      	lsrs	r3, r3, #1
 800d53a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d53e:	463b      	mov	r3, r7
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	691b      	ldr	r3, [r3, #16]
 800d544:	f003 0301 	and.w	r3, r3, #1
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d004      	beq.n	800d556 <USB_EPStartXfer+0xce6>
 800d54c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d550:	3301      	adds	r3, #1
 800d552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d556:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d55a:	881b      	ldrh	r3, [r3, #0]
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d562:	b29b      	uxth	r3, r3
 800d564:	029b      	lsls	r3, r3, #10
 800d566:	b29b      	uxth	r3, r3
 800d568:	4313      	orrs	r3, r2
 800d56a:	b29a      	uxth	r2, r3
 800d56c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d570:	801a      	strh	r2, [r3, #0]
 800d572:	e025      	b.n	800d5c0 <USB_EPStartXfer+0xd50>
 800d574:	463b      	mov	r3, r7
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	785b      	ldrb	r3, [r3, #1]
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d120      	bne.n	800d5c0 <USB_EPStartXfer+0xd50>
 800d57e:	1d3b      	adds	r3, r7, #4
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d586:	1d3b      	adds	r3, r7, #4
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d58e:	b29b      	uxth	r3, r3
 800d590:	461a      	mov	r2, r3
 800d592:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d596:	4413      	add	r3, r2
 800d598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d59c:	463b      	mov	r3, r7
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	011a      	lsls	r2, r3, #4
 800d5a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d5a8:	4413      	add	r3, r2
 800d5aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d5ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d5b2:	463b      	mov	r3, r7
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	691b      	ldr	r3, [r3, #16]
 800d5b8:	b29a      	uxth	r2, r3
 800d5ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d5be:	801a      	strh	r2, [r3, #0]
 800d5c0:	1d3b      	adds	r3, r7, #4
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d5c8:	463b      	mov	r3, r7
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	785b      	ldrb	r3, [r3, #1]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	f040 8082 	bne.w	800d6d8 <USB_EPStartXfer+0xe68>
 800d5d4:	1d3b      	adds	r3, r7, #4
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d5dc:	1d3b      	adds	r3, r7, #4
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5ec:	4413      	add	r3, r2
 800d5ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d5f2:	463b      	mov	r3, r7
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	011a      	lsls	r2, r3, #4
 800d5fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5fe:	4413      	add	r3, r2
 800d600:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d60c:	881b      	ldrh	r3, [r3, #0]
 800d60e:	b29b      	uxth	r3, r3
 800d610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d614:	b29a      	uxth	r2, r3
 800d616:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d61a:	801a      	strh	r2, [r3, #0]
 800d61c:	463b      	mov	r3, r7
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	691b      	ldr	r3, [r3, #16]
 800d622:	2b3e      	cmp	r3, #62	; 0x3e
 800d624:	d925      	bls.n	800d672 <USB_EPStartXfer+0xe02>
 800d626:	463b      	mov	r3, r7
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	095b      	lsrs	r3, r3, #5
 800d62e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d632:	463b      	mov	r3, r7
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	691b      	ldr	r3, [r3, #16]
 800d638:	f003 031f 	and.w	r3, r3, #31
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d104      	bne.n	800d64a <USB_EPStartXfer+0xdda>
 800d640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d644:	3b01      	subs	r3, #1
 800d646:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d64a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d64e:	881b      	ldrh	r3, [r3, #0]
 800d650:	b29a      	uxth	r2, r3
 800d652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d656:	b29b      	uxth	r3, r3
 800d658:	029b      	lsls	r3, r3, #10
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	4313      	orrs	r3, r2
 800d65e:	b29b      	uxth	r3, r3
 800d660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d668:	b29a      	uxth	r2, r3
 800d66a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d66e:	801a      	strh	r2, [r3, #0]
 800d670:	e054      	b.n	800d71c <USB_EPStartXfer+0xeac>
 800d672:	463b      	mov	r3, r7
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	691b      	ldr	r3, [r3, #16]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10c      	bne.n	800d696 <USB_EPStartXfer+0xe26>
 800d67c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d680:	881b      	ldrh	r3, [r3, #0]
 800d682:	b29b      	uxth	r3, r3
 800d684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d68c:	b29a      	uxth	r2, r3
 800d68e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d692:	801a      	strh	r2, [r3, #0]
 800d694:	e042      	b.n	800d71c <USB_EPStartXfer+0xeac>
 800d696:	463b      	mov	r3, r7
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	691b      	ldr	r3, [r3, #16]
 800d69c:	085b      	lsrs	r3, r3, #1
 800d69e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d6a2:	463b      	mov	r3, r7
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	691b      	ldr	r3, [r3, #16]
 800d6a8:	f003 0301 	and.w	r3, r3, #1
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d004      	beq.n	800d6ba <USB_EPStartXfer+0xe4a>
 800d6b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d6ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d6be:	881b      	ldrh	r3, [r3, #0]
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	029b      	lsls	r3, r3, #10
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	b29a      	uxth	r2, r3
 800d6d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d6d4:	801a      	strh	r2, [r3, #0]
 800d6d6:	e021      	b.n	800d71c <USB_EPStartXfer+0xeac>
 800d6d8:	463b      	mov	r3, r7
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	785b      	ldrb	r3, [r3, #1]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d11c      	bne.n	800d71c <USB_EPStartXfer+0xeac>
 800d6e2:	1d3b      	adds	r3, r7, #4
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d6f2:	4413      	add	r3, r2
 800d6f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d6f8:	463b      	mov	r3, r7
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	011a      	lsls	r2, r3, #4
 800d700:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d704:	4413      	add	r3, r2
 800d706:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d70a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d70e:	463b      	mov	r3, r7
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	b29a      	uxth	r2, r3
 800d716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d71a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d71c:	463b      	mov	r3, r7
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	69db      	ldr	r3, [r3, #28]
 800d722:	2b00      	cmp	r3, #0
 800d724:	f000 81bc 	beq.w	800daa0 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d728:	1d3b      	adds	r3, r7, #4
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	463b      	mov	r3, r7
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	4413      	add	r3, r2
 800d736:	881b      	ldrh	r3, [r3, #0]
 800d738:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d73c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d744:	2b00      	cmp	r3, #0
 800d746:	d005      	beq.n	800d754 <USB_EPStartXfer+0xee4>
 800d748:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d750:	2b00      	cmp	r3, #0
 800d752:	d10d      	bne.n	800d770 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d754:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f040 819f 	bne.w	800daa0 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d762:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	f040 8198 	bne.w	800daa0 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d770:	1d3b      	adds	r3, r7, #4
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	463b      	mov	r3, r7
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	4413      	add	r3, r2
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	b29b      	uxth	r3, r3
 800d782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d78a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800d78e:	1d3b      	adds	r3, r7, #4
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	463b      	mov	r3, r7
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	441a      	add	r2, r3
 800d79c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d7a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	8013      	strh	r3, [r2, #0]
 800d7b4:	e174      	b.n	800daa0 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d7b6:	463b      	mov	r3, r7
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	78db      	ldrb	r3, [r3, #3]
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	f040 816d 	bne.w	800da9c <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d7c2:	463b      	mov	r3, r7
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	699a      	ldr	r2, [r3, #24]
 800d7c8:	463b      	mov	r3, r7
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	691b      	ldr	r3, [r3, #16]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d90e      	bls.n	800d7f0 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 800d7d2:	463b      	mov	r3, r7
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	691b      	ldr	r3, [r3, #16]
 800d7d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800d7dc:	463b      	mov	r3, r7
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	699a      	ldr	r2, [r3, #24]
 800d7e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7e6:	1ad2      	subs	r2, r2, r3
 800d7e8:	463b      	mov	r3, r7
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	619a      	str	r2, [r3, #24]
 800d7ee:	e008      	b.n	800d802 <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 800d7f0:	463b      	mov	r3, r7
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	699b      	ldr	r3, [r3, #24]
 800d7f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800d7fa:	463b      	mov	r3, r7
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2200      	movs	r2, #0
 800d800:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d802:	463b      	mov	r3, r7
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	785b      	ldrb	r3, [r3, #1]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d17b      	bne.n	800d904 <USB_EPStartXfer+0x1094>
 800d80c:	1d3b      	adds	r3, r7, #4
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d814:	1d3b      	adds	r3, r7, #4
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	461a      	mov	r2, r3
 800d820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d824:	4413      	add	r3, r2
 800d826:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d82a:	463b      	mov	r3, r7
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	011a      	lsls	r2, r3, #4
 800d832:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d836:	4413      	add	r3, r2
 800d838:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d83c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d840:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d844:	881b      	ldrh	r3, [r3, #0]
 800d846:	b29b      	uxth	r3, r3
 800d848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d84c:	b29a      	uxth	r2, r3
 800d84e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d852:	801a      	strh	r2, [r3, #0]
 800d854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d858:	2b3e      	cmp	r3, #62	; 0x3e
 800d85a:	d923      	bls.n	800d8a4 <USB_EPStartXfer+0x1034>
 800d85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d860:	095b      	lsrs	r3, r3, #5
 800d862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d86a:	f003 031f 	and.w	r3, r3, #31
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d104      	bne.n	800d87c <USB_EPStartXfer+0x100c>
 800d872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d876:	3b01      	subs	r3, #1
 800d878:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d87c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d880:	881b      	ldrh	r3, [r3, #0]
 800d882:	b29a      	uxth	r2, r3
 800d884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d888:	b29b      	uxth	r3, r3
 800d88a:	029b      	lsls	r3, r3, #10
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	4313      	orrs	r3, r2
 800d890:	b29b      	uxth	r3, r3
 800d892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d8a0:	801a      	strh	r2, [r3, #0]
 800d8a2:	e054      	b.n	800d94e <USB_EPStartXfer+0x10de>
 800d8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10c      	bne.n	800d8c6 <USB_EPStartXfer+0x1056>
 800d8ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d8b0:	881b      	ldrh	r3, [r3, #0]
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8bc:	b29a      	uxth	r2, r3
 800d8be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d8c2:	801a      	strh	r2, [r3, #0]
 800d8c4:	e043      	b.n	800d94e <USB_EPStartXfer+0x10de>
 800d8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8ca:	085b      	lsrs	r3, r3, #1
 800d8cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8d4:	f003 0301 	and.w	r3, r3, #1
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d004      	beq.n	800d8e6 <USB_EPStartXfer+0x1076>
 800d8dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d8e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d8ea:	881b      	ldrh	r3, [r3, #0]
 800d8ec:	b29a      	uxth	r2, r3
 800d8ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	029b      	lsls	r3, r3, #10
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d900:	801a      	strh	r2, [r3, #0]
 800d902:	e024      	b.n	800d94e <USB_EPStartXfer+0x10de>
 800d904:	463b      	mov	r3, r7
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	785b      	ldrb	r3, [r3, #1]
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d11f      	bne.n	800d94e <USB_EPStartXfer+0x10de>
 800d90e:	1d3b      	adds	r3, r7, #4
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d916:	1d3b      	adds	r3, r7, #4
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d91e:	b29b      	uxth	r3, r3
 800d920:	461a      	mov	r2, r3
 800d922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d926:	4413      	add	r3, r2
 800d928:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d92c:	463b      	mov	r3, r7
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	011a      	lsls	r2, r3, #4
 800d934:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d938:	4413      	add	r3, r2
 800d93a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d93e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d946:	b29a      	uxth	r2, r3
 800d948:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d94c:	801a      	strh	r2, [r3, #0]
 800d94e:	1d3b      	adds	r3, r7, #4
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d956:	463b      	mov	r3, r7
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	785b      	ldrb	r3, [r3, #1]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d17b      	bne.n	800da58 <USB_EPStartXfer+0x11e8>
 800d960:	1d3b      	adds	r3, r7, #4
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d968:	1d3b      	adds	r3, r7, #4
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d970:	b29b      	uxth	r3, r3
 800d972:	461a      	mov	r2, r3
 800d974:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d978:	4413      	add	r3, r2
 800d97a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d97e:	463b      	mov	r3, r7
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	011a      	lsls	r2, r3, #4
 800d986:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d98a:	4413      	add	r3, r2
 800d98c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d994:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d998:	881b      	ldrh	r3, [r3, #0]
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d9a0:	b29a      	uxth	r2, r3
 800d9a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d9a6:	801a      	strh	r2, [r3, #0]
 800d9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9ac:	2b3e      	cmp	r3, #62	; 0x3e
 800d9ae:	d923      	bls.n	800d9f8 <USB_EPStartXfer+0x1188>
 800d9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9b4:	095b      	lsrs	r3, r3, #5
 800d9b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9be:	f003 031f 	and.w	r3, r3, #31
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d104      	bne.n	800d9d0 <USB_EPStartXfer+0x1160>
 800d9c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d9d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d9d4:	881b      	ldrh	r3, [r3, #0]
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	029b      	lsls	r3, r3, #10
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9ee:	b29a      	uxth	r2, r3
 800d9f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d9f4:	801a      	strh	r2, [r3, #0]
 800d9f6:	e053      	b.n	800daa0 <USB_EPStartXfer+0x1230>
 800d9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d10c      	bne.n	800da1a <USB_EPStartXfer+0x11aa>
 800da00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800da04:	881b      	ldrh	r3, [r3, #0]
 800da06:	b29b      	uxth	r3, r3
 800da08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da10:	b29a      	uxth	r2, r3
 800da12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800da16:	801a      	strh	r2, [r3, #0]
 800da18:	e042      	b.n	800daa0 <USB_EPStartXfer+0x1230>
 800da1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da1e:	085b      	lsrs	r3, r3, #1
 800da20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800da24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da28:	f003 0301 	and.w	r3, r3, #1
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d004      	beq.n	800da3a <USB_EPStartXfer+0x11ca>
 800da30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800da34:	3301      	adds	r3, #1
 800da36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800da3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800da3e:	881b      	ldrh	r3, [r3, #0]
 800da40:	b29a      	uxth	r2, r3
 800da42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800da46:	b29b      	uxth	r3, r3
 800da48:	029b      	lsls	r3, r3, #10
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	4313      	orrs	r3, r2
 800da4e:	b29a      	uxth	r2, r3
 800da50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800da54:	801a      	strh	r2, [r3, #0]
 800da56:	e023      	b.n	800daa0 <USB_EPStartXfer+0x1230>
 800da58:	463b      	mov	r3, r7
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	785b      	ldrb	r3, [r3, #1]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d11e      	bne.n	800daa0 <USB_EPStartXfer+0x1230>
 800da62:	1d3b      	adds	r3, r7, #4
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	461a      	mov	r2, r3
 800da6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800da72:	4413      	add	r3, r2
 800da74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800da78:	463b      	mov	r3, r7
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	011a      	lsls	r2, r3, #4
 800da80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800da84:	4413      	add	r3, r2
 800da86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800da8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800da8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da92:	b29a      	uxth	r2, r3
 800da94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800da98:	801a      	strh	r2, [r3, #0]
 800da9a:	e001      	b.n	800daa0 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 800da9c:	2301      	movs	r3, #1
 800da9e:	e02e      	b.n	800dafe <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800daa0:	1d3b      	adds	r3, r7, #4
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	463b      	mov	r3, r7
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	4413      	add	r3, r2
 800daae:	881b      	ldrh	r3, [r3, #0]
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dabe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dac2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dac6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800daca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dace:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dad2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dad6:	1d3b      	adds	r3, r7, #4
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	463b      	mov	r3, r7
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	441a      	add	r2, r3
 800dae4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800daec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800daf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800daf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800dafc:	2300      	movs	r3, #0
}
 800dafe:	4618      	mov	r0, r3
 800db00:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800db08:	b480      	push	{r7}
 800db0a:	b083      	sub	sp, #12
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	460b      	mov	r3, r1
 800db12:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800db14:	78fb      	ldrb	r3, [r7, #3]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d103      	bne.n	800db22 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2280      	movs	r2, #128	; 0x80
 800db1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	370c      	adds	r7, #12
 800db28:	46bd      	mov	sp, r7
 800db2a:	bc80      	pop	{r7}
 800db2c:	4770      	bx	lr

0800db2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800db2e:	b480      	push	{r7}
 800db30:	b083      	sub	sp, #12
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800db36:	2300      	movs	r3, #0
}
 800db38:	4618      	mov	r0, r3
 800db3a:	370c      	adds	r7, #12
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bc80      	pop	{r7}
 800db40:	4770      	bx	lr

0800db42 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800db42:	b480      	push	{r7}
 800db44:	b085      	sub	sp, #20
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800db50:	b29b      	uxth	r3, r3
 800db52:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800db54:	68fb      	ldr	r3, [r7, #12]
}
 800db56:	4618      	mov	r0, r3
 800db58:	3714      	adds	r7, #20
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bc80      	pop	{r7}
 800db5e:	4770      	bx	lr

0800db60 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800db60:	b480      	push	{r7}
 800db62:	b08b      	sub	sp, #44	; 0x2c
 800db64:	af00      	add	r7, sp, #0
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	4611      	mov	r1, r2
 800db6c:	461a      	mov	r2, r3
 800db6e:	460b      	mov	r3, r1
 800db70:	80fb      	strh	r3, [r7, #6]
 800db72:	4613      	mov	r3, r2
 800db74:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800db76:	88bb      	ldrh	r3, [r7, #4]
 800db78:	3301      	adds	r3, #1
 800db7a:	085b      	lsrs	r3, r3, #1
 800db7c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800db86:	88fb      	ldrh	r3, [r7, #6]
 800db88:	005a      	lsls	r2, r3, #1
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	4413      	add	r3, r2
 800db8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db92:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800db94:	69bb      	ldr	r3, [r7, #24]
 800db96:	627b      	str	r3, [r7, #36]	; 0x24
 800db98:	e01e      	b.n	800dbd8 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	3301      	adds	r3, #1
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	021b      	lsls	r3, r3, #8
 800dba8:	b21a      	sxth	r2, r3
 800dbaa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	b21b      	sxth	r3, r3
 800dbb2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800dbb4:	6a3b      	ldr	r3, [r7, #32]
 800dbb6:	8a7a      	ldrh	r2, [r7, #18]
 800dbb8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800dbba:	6a3b      	ldr	r3, [r7, #32]
 800dbbc:	3302      	adds	r3, #2
 800dbbe:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800dbc0:	6a3b      	ldr	r3, [r7, #32]
 800dbc2:	3302      	adds	r3, #2
 800dbc4:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	3301      	adds	r3, #1
 800dbd0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd4:	3b01      	subs	r3, #1
 800dbd6:	627b      	str	r3, [r7, #36]	; 0x24
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d1dd      	bne.n	800db9a <USB_WritePMA+0x3a>
  }
}
 800dbde:	bf00      	nop
 800dbe0:	bf00      	nop
 800dbe2:	372c      	adds	r7, #44	; 0x2c
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bc80      	pop	{r7}
 800dbe8:	4770      	bx	lr

0800dbea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b08b      	sub	sp, #44	; 0x2c
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	60f8      	str	r0, [r7, #12]
 800dbf2:	60b9      	str	r1, [r7, #8]
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	80fb      	strh	r3, [r7, #6]
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800dc00:	88bb      	ldrh	r3, [r7, #4]
 800dc02:	085b      	lsrs	r3, r3, #1
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800dc10:	88fb      	ldrh	r3, [r7, #6]
 800dc12:	005a      	lsls	r2, r3, #1
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	4413      	add	r3, r2
 800dc18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc1c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	627b      	str	r3, [r7, #36]	; 0x24
 800dc22:	e01b      	b.n	800dc5c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800dc24:	6a3b      	ldr	r3, [r7, #32]
 800dc26:	881b      	ldrh	r3, [r3, #0]
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800dc2c:	6a3b      	ldr	r3, [r7, #32]
 800dc2e:	3302      	adds	r3, #2
 800dc30:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	b2da      	uxtb	r2, r3
 800dc36:	69fb      	ldr	r3, [r7, #28]
 800dc38:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	0a1b      	lsrs	r3, r3, #8
 800dc44:	b2da      	uxtb	r2, r3
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800dc4a:	69fb      	ldr	r3, [r7, #28]
 800dc4c:	3301      	adds	r3, #1
 800dc4e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800dc50:	6a3b      	ldr	r3, [r7, #32]
 800dc52:	3302      	adds	r3, #2
 800dc54:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800dc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc58:	3b01      	subs	r3, #1
 800dc5a:	627b      	str	r3, [r7, #36]	; 0x24
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d1e0      	bne.n	800dc24 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800dc62:	88bb      	ldrh	r3, [r7, #4]
 800dc64:	f003 0301 	and.w	r3, r3, #1
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d007      	beq.n	800dc7e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800dc6e:	6a3b      	ldr	r3, [r7, #32]
 800dc70:	881b      	ldrh	r3, [r3, #0]
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	b2da      	uxtb	r2, r3
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	701a      	strb	r2, [r3, #0]
  }
}
 800dc7e:	bf00      	nop
 800dc80:	372c      	adds	r7, #44	; 0x2c
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bc80      	pop	{r7}
 800dc86:	4770      	bx	lr

0800dc88 <__assert_func>:
 800dc88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc8a:	4614      	mov	r4, r2
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	4b09      	ldr	r3, [pc, #36]	; (800dcb4 <__assert_func+0x2c>)
 800dc90:	4605      	mov	r5, r0
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	68d8      	ldr	r0, [r3, #12]
 800dc96:	b14c      	cbz	r4, 800dcac <__assert_func+0x24>
 800dc98:	4b07      	ldr	r3, [pc, #28]	; (800dcb8 <__assert_func+0x30>)
 800dc9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc9e:	9100      	str	r1, [sp, #0]
 800dca0:	462b      	mov	r3, r5
 800dca2:	4906      	ldr	r1, [pc, #24]	; (800dcbc <__assert_func+0x34>)
 800dca4:	f000 f814 	bl	800dcd0 <fiprintf>
 800dca8:	f000 fd48 	bl	800e73c <abort>
 800dcac:	4b04      	ldr	r3, [pc, #16]	; (800dcc0 <__assert_func+0x38>)
 800dcae:	461c      	mov	r4, r3
 800dcb0:	e7f3      	b.n	800dc9a <__assert_func+0x12>
 800dcb2:	bf00      	nop
 800dcb4:	2000004c 	.word	0x2000004c
 800dcb8:	0800f876 	.word	0x0800f876
 800dcbc:	0800f883 	.word	0x0800f883
 800dcc0:	0800f8b1 	.word	0x0800f8b1

0800dcc4 <__errno>:
 800dcc4:	4b01      	ldr	r3, [pc, #4]	; (800dccc <__errno+0x8>)
 800dcc6:	6818      	ldr	r0, [r3, #0]
 800dcc8:	4770      	bx	lr
 800dcca:	bf00      	nop
 800dccc:	2000004c 	.word	0x2000004c

0800dcd0 <fiprintf>:
 800dcd0:	b40e      	push	{r1, r2, r3}
 800dcd2:	b503      	push	{r0, r1, lr}
 800dcd4:	4601      	mov	r1, r0
 800dcd6:	ab03      	add	r3, sp, #12
 800dcd8:	4805      	ldr	r0, [pc, #20]	; (800dcf0 <fiprintf+0x20>)
 800dcda:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcde:	6800      	ldr	r0, [r0, #0]
 800dce0:	9301      	str	r3, [sp, #4]
 800dce2:	f000 f92d 	bl	800df40 <_vfiprintf_r>
 800dce6:	b002      	add	sp, #8
 800dce8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcec:	b003      	add	sp, #12
 800dcee:	4770      	bx	lr
 800dcf0:	2000004c 	.word	0x2000004c

0800dcf4 <__libc_init_array>:
 800dcf4:	b570      	push	{r4, r5, r6, lr}
 800dcf6:	2600      	movs	r6, #0
 800dcf8:	4d0c      	ldr	r5, [pc, #48]	; (800dd2c <__libc_init_array+0x38>)
 800dcfa:	4c0d      	ldr	r4, [pc, #52]	; (800dd30 <__libc_init_array+0x3c>)
 800dcfc:	1b64      	subs	r4, r4, r5
 800dcfe:	10a4      	asrs	r4, r4, #2
 800dd00:	42a6      	cmp	r6, r4
 800dd02:	d109      	bne.n	800dd18 <__libc_init_array+0x24>
 800dd04:	f001 f9ee 	bl	800f0e4 <_init>
 800dd08:	2600      	movs	r6, #0
 800dd0a:	4d0a      	ldr	r5, [pc, #40]	; (800dd34 <__libc_init_array+0x40>)
 800dd0c:	4c0a      	ldr	r4, [pc, #40]	; (800dd38 <__libc_init_array+0x44>)
 800dd0e:	1b64      	subs	r4, r4, r5
 800dd10:	10a4      	asrs	r4, r4, #2
 800dd12:	42a6      	cmp	r6, r4
 800dd14:	d105      	bne.n	800dd22 <__libc_init_array+0x2e>
 800dd16:	bd70      	pop	{r4, r5, r6, pc}
 800dd18:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd1c:	4798      	blx	r3
 800dd1e:	3601      	adds	r6, #1
 800dd20:	e7ee      	b.n	800dd00 <__libc_init_array+0xc>
 800dd22:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd26:	4798      	blx	r3
 800dd28:	3601      	adds	r6, #1
 800dd2a:	e7f2      	b.n	800dd12 <__libc_init_array+0x1e>
 800dd2c:	0800f94c 	.word	0x0800f94c
 800dd30:	0800f94c 	.word	0x0800f94c
 800dd34:	0800f94c 	.word	0x0800f94c
 800dd38:	0800f950 	.word	0x0800f950

0800dd3c <malloc>:
 800dd3c:	4b02      	ldr	r3, [pc, #8]	; (800dd48 <malloc+0xc>)
 800dd3e:	4601      	mov	r1, r0
 800dd40:	6818      	ldr	r0, [r3, #0]
 800dd42:	f000 b87b 	b.w	800de3c <_malloc_r>
 800dd46:	bf00      	nop
 800dd48:	2000004c 	.word	0x2000004c

0800dd4c <free>:
 800dd4c:	4b02      	ldr	r3, [pc, #8]	; (800dd58 <free+0xc>)
 800dd4e:	4601      	mov	r1, r0
 800dd50:	6818      	ldr	r0, [r3, #0]
 800dd52:	f000 b827 	b.w	800dda4 <_free_r>
 800dd56:	bf00      	nop
 800dd58:	2000004c 	.word	0x2000004c

0800dd5c <memcmp>:
 800dd5c:	b530      	push	{r4, r5, lr}
 800dd5e:	2400      	movs	r4, #0
 800dd60:	3901      	subs	r1, #1
 800dd62:	42a2      	cmp	r2, r4
 800dd64:	d101      	bne.n	800dd6a <memcmp+0xe>
 800dd66:	2000      	movs	r0, #0
 800dd68:	e005      	b.n	800dd76 <memcmp+0x1a>
 800dd6a:	5d03      	ldrb	r3, [r0, r4]
 800dd6c:	3401      	adds	r4, #1
 800dd6e:	5d0d      	ldrb	r5, [r1, r4]
 800dd70:	42ab      	cmp	r3, r5
 800dd72:	d0f6      	beq.n	800dd62 <memcmp+0x6>
 800dd74:	1b58      	subs	r0, r3, r5
 800dd76:	bd30      	pop	{r4, r5, pc}

0800dd78 <memcpy>:
 800dd78:	440a      	add	r2, r1
 800dd7a:	4291      	cmp	r1, r2
 800dd7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd80:	d100      	bne.n	800dd84 <memcpy+0xc>
 800dd82:	4770      	bx	lr
 800dd84:	b510      	push	{r4, lr}
 800dd86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd8a:	4291      	cmp	r1, r2
 800dd8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd90:	d1f9      	bne.n	800dd86 <memcpy+0xe>
 800dd92:	bd10      	pop	{r4, pc}

0800dd94 <memset>:
 800dd94:	4603      	mov	r3, r0
 800dd96:	4402      	add	r2, r0
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d100      	bne.n	800dd9e <memset+0xa>
 800dd9c:	4770      	bx	lr
 800dd9e:	f803 1b01 	strb.w	r1, [r3], #1
 800dda2:	e7f9      	b.n	800dd98 <memset+0x4>

0800dda4 <_free_r>:
 800dda4:	b538      	push	{r3, r4, r5, lr}
 800dda6:	4605      	mov	r5, r0
 800dda8:	2900      	cmp	r1, #0
 800ddaa:	d043      	beq.n	800de34 <_free_r+0x90>
 800ddac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddb0:	1f0c      	subs	r4, r1, #4
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	bfb8      	it	lt
 800ddb6:	18e4      	addlt	r4, r4, r3
 800ddb8:	f000 ff0e 	bl	800ebd8 <__malloc_lock>
 800ddbc:	4a1e      	ldr	r2, [pc, #120]	; (800de38 <_free_r+0x94>)
 800ddbe:	6813      	ldr	r3, [r2, #0]
 800ddc0:	4610      	mov	r0, r2
 800ddc2:	b933      	cbnz	r3, 800ddd2 <_free_r+0x2e>
 800ddc4:	6063      	str	r3, [r4, #4]
 800ddc6:	6014      	str	r4, [r2, #0]
 800ddc8:	4628      	mov	r0, r5
 800ddca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddce:	f000 bf09 	b.w	800ebe4 <__malloc_unlock>
 800ddd2:	42a3      	cmp	r3, r4
 800ddd4:	d90a      	bls.n	800ddec <_free_r+0x48>
 800ddd6:	6821      	ldr	r1, [r4, #0]
 800ddd8:	1862      	adds	r2, r4, r1
 800ddda:	4293      	cmp	r3, r2
 800dddc:	bf01      	itttt	eq
 800ddde:	681a      	ldreq	r2, [r3, #0]
 800dde0:	685b      	ldreq	r3, [r3, #4]
 800dde2:	1852      	addeq	r2, r2, r1
 800dde4:	6022      	streq	r2, [r4, #0]
 800dde6:	6063      	str	r3, [r4, #4]
 800dde8:	6004      	str	r4, [r0, #0]
 800ddea:	e7ed      	b.n	800ddc8 <_free_r+0x24>
 800ddec:	461a      	mov	r2, r3
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	b10b      	cbz	r3, 800ddf6 <_free_r+0x52>
 800ddf2:	42a3      	cmp	r3, r4
 800ddf4:	d9fa      	bls.n	800ddec <_free_r+0x48>
 800ddf6:	6811      	ldr	r1, [r2, #0]
 800ddf8:	1850      	adds	r0, r2, r1
 800ddfa:	42a0      	cmp	r0, r4
 800ddfc:	d10b      	bne.n	800de16 <_free_r+0x72>
 800ddfe:	6820      	ldr	r0, [r4, #0]
 800de00:	4401      	add	r1, r0
 800de02:	1850      	adds	r0, r2, r1
 800de04:	4283      	cmp	r3, r0
 800de06:	6011      	str	r1, [r2, #0]
 800de08:	d1de      	bne.n	800ddc8 <_free_r+0x24>
 800de0a:	6818      	ldr	r0, [r3, #0]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	4401      	add	r1, r0
 800de10:	6011      	str	r1, [r2, #0]
 800de12:	6053      	str	r3, [r2, #4]
 800de14:	e7d8      	b.n	800ddc8 <_free_r+0x24>
 800de16:	d902      	bls.n	800de1e <_free_r+0x7a>
 800de18:	230c      	movs	r3, #12
 800de1a:	602b      	str	r3, [r5, #0]
 800de1c:	e7d4      	b.n	800ddc8 <_free_r+0x24>
 800de1e:	6820      	ldr	r0, [r4, #0]
 800de20:	1821      	adds	r1, r4, r0
 800de22:	428b      	cmp	r3, r1
 800de24:	bf01      	itttt	eq
 800de26:	6819      	ldreq	r1, [r3, #0]
 800de28:	685b      	ldreq	r3, [r3, #4]
 800de2a:	1809      	addeq	r1, r1, r0
 800de2c:	6021      	streq	r1, [r4, #0]
 800de2e:	6063      	str	r3, [r4, #4]
 800de30:	6054      	str	r4, [r2, #4]
 800de32:	e7c9      	b.n	800ddc8 <_free_r+0x24>
 800de34:	bd38      	pop	{r3, r4, r5, pc}
 800de36:	bf00      	nop
 800de38:	2000018c 	.word	0x2000018c

0800de3c <_malloc_r>:
 800de3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de3e:	1ccd      	adds	r5, r1, #3
 800de40:	f025 0503 	bic.w	r5, r5, #3
 800de44:	3508      	adds	r5, #8
 800de46:	2d0c      	cmp	r5, #12
 800de48:	bf38      	it	cc
 800de4a:	250c      	movcc	r5, #12
 800de4c:	2d00      	cmp	r5, #0
 800de4e:	4606      	mov	r6, r0
 800de50:	db01      	blt.n	800de56 <_malloc_r+0x1a>
 800de52:	42a9      	cmp	r1, r5
 800de54:	d903      	bls.n	800de5e <_malloc_r+0x22>
 800de56:	230c      	movs	r3, #12
 800de58:	6033      	str	r3, [r6, #0]
 800de5a:	2000      	movs	r0, #0
 800de5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de5e:	f000 febb 	bl	800ebd8 <__malloc_lock>
 800de62:	4921      	ldr	r1, [pc, #132]	; (800dee8 <_malloc_r+0xac>)
 800de64:	680a      	ldr	r2, [r1, #0]
 800de66:	4614      	mov	r4, r2
 800de68:	b99c      	cbnz	r4, 800de92 <_malloc_r+0x56>
 800de6a:	4f20      	ldr	r7, [pc, #128]	; (800deec <_malloc_r+0xb0>)
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	b923      	cbnz	r3, 800de7a <_malloc_r+0x3e>
 800de70:	4621      	mov	r1, r4
 800de72:	4630      	mov	r0, r6
 800de74:	f000 fb2a 	bl	800e4cc <_sbrk_r>
 800de78:	6038      	str	r0, [r7, #0]
 800de7a:	4629      	mov	r1, r5
 800de7c:	4630      	mov	r0, r6
 800de7e:	f000 fb25 	bl	800e4cc <_sbrk_r>
 800de82:	1c43      	adds	r3, r0, #1
 800de84:	d123      	bne.n	800dece <_malloc_r+0x92>
 800de86:	230c      	movs	r3, #12
 800de88:	4630      	mov	r0, r6
 800de8a:	6033      	str	r3, [r6, #0]
 800de8c:	f000 feaa 	bl	800ebe4 <__malloc_unlock>
 800de90:	e7e3      	b.n	800de5a <_malloc_r+0x1e>
 800de92:	6823      	ldr	r3, [r4, #0]
 800de94:	1b5b      	subs	r3, r3, r5
 800de96:	d417      	bmi.n	800dec8 <_malloc_r+0x8c>
 800de98:	2b0b      	cmp	r3, #11
 800de9a:	d903      	bls.n	800dea4 <_malloc_r+0x68>
 800de9c:	6023      	str	r3, [r4, #0]
 800de9e:	441c      	add	r4, r3
 800dea0:	6025      	str	r5, [r4, #0]
 800dea2:	e004      	b.n	800deae <_malloc_r+0x72>
 800dea4:	6863      	ldr	r3, [r4, #4]
 800dea6:	42a2      	cmp	r2, r4
 800dea8:	bf0c      	ite	eq
 800deaa:	600b      	streq	r3, [r1, #0]
 800deac:	6053      	strne	r3, [r2, #4]
 800deae:	4630      	mov	r0, r6
 800deb0:	f000 fe98 	bl	800ebe4 <__malloc_unlock>
 800deb4:	f104 000b 	add.w	r0, r4, #11
 800deb8:	1d23      	adds	r3, r4, #4
 800deba:	f020 0007 	bic.w	r0, r0, #7
 800debe:	1ac2      	subs	r2, r0, r3
 800dec0:	d0cc      	beq.n	800de5c <_malloc_r+0x20>
 800dec2:	1a1b      	subs	r3, r3, r0
 800dec4:	50a3      	str	r3, [r4, r2]
 800dec6:	e7c9      	b.n	800de5c <_malloc_r+0x20>
 800dec8:	4622      	mov	r2, r4
 800deca:	6864      	ldr	r4, [r4, #4]
 800decc:	e7cc      	b.n	800de68 <_malloc_r+0x2c>
 800dece:	1cc4      	adds	r4, r0, #3
 800ded0:	f024 0403 	bic.w	r4, r4, #3
 800ded4:	42a0      	cmp	r0, r4
 800ded6:	d0e3      	beq.n	800dea0 <_malloc_r+0x64>
 800ded8:	1a21      	subs	r1, r4, r0
 800deda:	4630      	mov	r0, r6
 800dedc:	f000 faf6 	bl	800e4cc <_sbrk_r>
 800dee0:	3001      	adds	r0, #1
 800dee2:	d1dd      	bne.n	800dea0 <_malloc_r+0x64>
 800dee4:	e7cf      	b.n	800de86 <_malloc_r+0x4a>
 800dee6:	bf00      	nop
 800dee8:	2000018c 	.word	0x2000018c
 800deec:	20000190 	.word	0x20000190

0800def0 <__sfputc_r>:
 800def0:	6893      	ldr	r3, [r2, #8]
 800def2:	b410      	push	{r4}
 800def4:	3b01      	subs	r3, #1
 800def6:	2b00      	cmp	r3, #0
 800def8:	6093      	str	r3, [r2, #8]
 800defa:	da07      	bge.n	800df0c <__sfputc_r+0x1c>
 800defc:	6994      	ldr	r4, [r2, #24]
 800defe:	42a3      	cmp	r3, r4
 800df00:	db01      	blt.n	800df06 <__sfputc_r+0x16>
 800df02:	290a      	cmp	r1, #10
 800df04:	d102      	bne.n	800df0c <__sfputc_r+0x1c>
 800df06:	bc10      	pop	{r4}
 800df08:	f000 bb58 	b.w	800e5bc <__swbuf_r>
 800df0c:	6813      	ldr	r3, [r2, #0]
 800df0e:	1c58      	adds	r0, r3, #1
 800df10:	6010      	str	r0, [r2, #0]
 800df12:	7019      	strb	r1, [r3, #0]
 800df14:	4608      	mov	r0, r1
 800df16:	bc10      	pop	{r4}
 800df18:	4770      	bx	lr

0800df1a <__sfputs_r>:
 800df1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df1c:	4606      	mov	r6, r0
 800df1e:	460f      	mov	r7, r1
 800df20:	4614      	mov	r4, r2
 800df22:	18d5      	adds	r5, r2, r3
 800df24:	42ac      	cmp	r4, r5
 800df26:	d101      	bne.n	800df2c <__sfputs_r+0x12>
 800df28:	2000      	movs	r0, #0
 800df2a:	e007      	b.n	800df3c <__sfputs_r+0x22>
 800df2c:	463a      	mov	r2, r7
 800df2e:	4630      	mov	r0, r6
 800df30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df34:	f7ff ffdc 	bl	800def0 <__sfputc_r>
 800df38:	1c43      	adds	r3, r0, #1
 800df3a:	d1f3      	bne.n	800df24 <__sfputs_r+0xa>
 800df3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df40 <_vfiprintf_r>:
 800df40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df44:	460d      	mov	r5, r1
 800df46:	4614      	mov	r4, r2
 800df48:	4698      	mov	r8, r3
 800df4a:	4606      	mov	r6, r0
 800df4c:	b09d      	sub	sp, #116	; 0x74
 800df4e:	b118      	cbz	r0, 800df58 <_vfiprintf_r+0x18>
 800df50:	6983      	ldr	r3, [r0, #24]
 800df52:	b90b      	cbnz	r3, 800df58 <_vfiprintf_r+0x18>
 800df54:	f000 fd14 	bl	800e980 <__sinit>
 800df58:	4b89      	ldr	r3, [pc, #548]	; (800e180 <_vfiprintf_r+0x240>)
 800df5a:	429d      	cmp	r5, r3
 800df5c:	d11b      	bne.n	800df96 <_vfiprintf_r+0x56>
 800df5e:	6875      	ldr	r5, [r6, #4]
 800df60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df62:	07d9      	lsls	r1, r3, #31
 800df64:	d405      	bmi.n	800df72 <_vfiprintf_r+0x32>
 800df66:	89ab      	ldrh	r3, [r5, #12]
 800df68:	059a      	lsls	r2, r3, #22
 800df6a:	d402      	bmi.n	800df72 <_vfiprintf_r+0x32>
 800df6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df6e:	f000 fda5 	bl	800eabc <__retarget_lock_acquire_recursive>
 800df72:	89ab      	ldrh	r3, [r5, #12]
 800df74:	071b      	lsls	r3, r3, #28
 800df76:	d501      	bpl.n	800df7c <_vfiprintf_r+0x3c>
 800df78:	692b      	ldr	r3, [r5, #16]
 800df7a:	b9eb      	cbnz	r3, 800dfb8 <_vfiprintf_r+0x78>
 800df7c:	4629      	mov	r1, r5
 800df7e:	4630      	mov	r0, r6
 800df80:	f000 fb6e 	bl	800e660 <__swsetup_r>
 800df84:	b1c0      	cbz	r0, 800dfb8 <_vfiprintf_r+0x78>
 800df86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df88:	07dc      	lsls	r4, r3, #31
 800df8a:	d50e      	bpl.n	800dfaa <_vfiprintf_r+0x6a>
 800df8c:	f04f 30ff 	mov.w	r0, #4294967295
 800df90:	b01d      	add	sp, #116	; 0x74
 800df92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df96:	4b7b      	ldr	r3, [pc, #492]	; (800e184 <_vfiprintf_r+0x244>)
 800df98:	429d      	cmp	r5, r3
 800df9a:	d101      	bne.n	800dfa0 <_vfiprintf_r+0x60>
 800df9c:	68b5      	ldr	r5, [r6, #8]
 800df9e:	e7df      	b.n	800df60 <_vfiprintf_r+0x20>
 800dfa0:	4b79      	ldr	r3, [pc, #484]	; (800e188 <_vfiprintf_r+0x248>)
 800dfa2:	429d      	cmp	r5, r3
 800dfa4:	bf08      	it	eq
 800dfa6:	68f5      	ldreq	r5, [r6, #12]
 800dfa8:	e7da      	b.n	800df60 <_vfiprintf_r+0x20>
 800dfaa:	89ab      	ldrh	r3, [r5, #12]
 800dfac:	0598      	lsls	r0, r3, #22
 800dfae:	d4ed      	bmi.n	800df8c <_vfiprintf_r+0x4c>
 800dfb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfb2:	f000 fd84 	bl	800eabe <__retarget_lock_release_recursive>
 800dfb6:	e7e9      	b.n	800df8c <_vfiprintf_r+0x4c>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	9309      	str	r3, [sp, #36]	; 0x24
 800dfbc:	2320      	movs	r3, #32
 800dfbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dfc2:	2330      	movs	r3, #48	; 0x30
 800dfc4:	f04f 0901 	mov.w	r9, #1
 800dfc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfcc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e18c <_vfiprintf_r+0x24c>
 800dfd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfd4:	4623      	mov	r3, r4
 800dfd6:	469a      	mov	sl, r3
 800dfd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfdc:	b10a      	cbz	r2, 800dfe2 <_vfiprintf_r+0xa2>
 800dfde:	2a25      	cmp	r2, #37	; 0x25
 800dfe0:	d1f9      	bne.n	800dfd6 <_vfiprintf_r+0x96>
 800dfe2:	ebba 0b04 	subs.w	fp, sl, r4
 800dfe6:	d00b      	beq.n	800e000 <_vfiprintf_r+0xc0>
 800dfe8:	465b      	mov	r3, fp
 800dfea:	4622      	mov	r2, r4
 800dfec:	4629      	mov	r1, r5
 800dfee:	4630      	mov	r0, r6
 800dff0:	f7ff ff93 	bl	800df1a <__sfputs_r>
 800dff4:	3001      	adds	r0, #1
 800dff6:	f000 80aa 	beq.w	800e14e <_vfiprintf_r+0x20e>
 800dffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dffc:	445a      	add	r2, fp
 800dffe:	9209      	str	r2, [sp, #36]	; 0x24
 800e000:	f89a 3000 	ldrb.w	r3, [sl]
 800e004:	2b00      	cmp	r3, #0
 800e006:	f000 80a2 	beq.w	800e14e <_vfiprintf_r+0x20e>
 800e00a:	2300      	movs	r3, #0
 800e00c:	f04f 32ff 	mov.w	r2, #4294967295
 800e010:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e014:	f10a 0a01 	add.w	sl, sl, #1
 800e018:	9304      	str	r3, [sp, #16]
 800e01a:	9307      	str	r3, [sp, #28]
 800e01c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e020:	931a      	str	r3, [sp, #104]	; 0x68
 800e022:	4654      	mov	r4, sl
 800e024:	2205      	movs	r2, #5
 800e026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e02a:	4858      	ldr	r0, [pc, #352]	; (800e18c <_vfiprintf_r+0x24c>)
 800e02c:	f000 fdac 	bl	800eb88 <memchr>
 800e030:	9a04      	ldr	r2, [sp, #16]
 800e032:	b9d8      	cbnz	r0, 800e06c <_vfiprintf_r+0x12c>
 800e034:	06d1      	lsls	r1, r2, #27
 800e036:	bf44      	itt	mi
 800e038:	2320      	movmi	r3, #32
 800e03a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e03e:	0713      	lsls	r3, r2, #28
 800e040:	bf44      	itt	mi
 800e042:	232b      	movmi	r3, #43	; 0x2b
 800e044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e048:	f89a 3000 	ldrb.w	r3, [sl]
 800e04c:	2b2a      	cmp	r3, #42	; 0x2a
 800e04e:	d015      	beq.n	800e07c <_vfiprintf_r+0x13c>
 800e050:	4654      	mov	r4, sl
 800e052:	2000      	movs	r0, #0
 800e054:	f04f 0c0a 	mov.w	ip, #10
 800e058:	9a07      	ldr	r2, [sp, #28]
 800e05a:	4621      	mov	r1, r4
 800e05c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e060:	3b30      	subs	r3, #48	; 0x30
 800e062:	2b09      	cmp	r3, #9
 800e064:	d94e      	bls.n	800e104 <_vfiprintf_r+0x1c4>
 800e066:	b1b0      	cbz	r0, 800e096 <_vfiprintf_r+0x156>
 800e068:	9207      	str	r2, [sp, #28]
 800e06a:	e014      	b.n	800e096 <_vfiprintf_r+0x156>
 800e06c:	eba0 0308 	sub.w	r3, r0, r8
 800e070:	fa09 f303 	lsl.w	r3, r9, r3
 800e074:	4313      	orrs	r3, r2
 800e076:	46a2      	mov	sl, r4
 800e078:	9304      	str	r3, [sp, #16]
 800e07a:	e7d2      	b.n	800e022 <_vfiprintf_r+0xe2>
 800e07c:	9b03      	ldr	r3, [sp, #12]
 800e07e:	1d19      	adds	r1, r3, #4
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	9103      	str	r1, [sp, #12]
 800e084:	2b00      	cmp	r3, #0
 800e086:	bfbb      	ittet	lt
 800e088:	425b      	neglt	r3, r3
 800e08a:	f042 0202 	orrlt.w	r2, r2, #2
 800e08e:	9307      	strge	r3, [sp, #28]
 800e090:	9307      	strlt	r3, [sp, #28]
 800e092:	bfb8      	it	lt
 800e094:	9204      	strlt	r2, [sp, #16]
 800e096:	7823      	ldrb	r3, [r4, #0]
 800e098:	2b2e      	cmp	r3, #46	; 0x2e
 800e09a:	d10c      	bne.n	800e0b6 <_vfiprintf_r+0x176>
 800e09c:	7863      	ldrb	r3, [r4, #1]
 800e09e:	2b2a      	cmp	r3, #42	; 0x2a
 800e0a0:	d135      	bne.n	800e10e <_vfiprintf_r+0x1ce>
 800e0a2:	9b03      	ldr	r3, [sp, #12]
 800e0a4:	3402      	adds	r4, #2
 800e0a6:	1d1a      	adds	r2, r3, #4
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	9203      	str	r2, [sp, #12]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	bfb8      	it	lt
 800e0b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0b4:	9305      	str	r3, [sp, #20]
 800e0b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e19c <_vfiprintf_r+0x25c>
 800e0ba:	2203      	movs	r2, #3
 800e0bc:	4650      	mov	r0, sl
 800e0be:	7821      	ldrb	r1, [r4, #0]
 800e0c0:	f000 fd62 	bl	800eb88 <memchr>
 800e0c4:	b140      	cbz	r0, 800e0d8 <_vfiprintf_r+0x198>
 800e0c6:	2340      	movs	r3, #64	; 0x40
 800e0c8:	eba0 000a 	sub.w	r0, r0, sl
 800e0cc:	fa03 f000 	lsl.w	r0, r3, r0
 800e0d0:	9b04      	ldr	r3, [sp, #16]
 800e0d2:	3401      	adds	r4, #1
 800e0d4:	4303      	orrs	r3, r0
 800e0d6:	9304      	str	r3, [sp, #16]
 800e0d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0dc:	2206      	movs	r2, #6
 800e0de:	482c      	ldr	r0, [pc, #176]	; (800e190 <_vfiprintf_r+0x250>)
 800e0e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0e4:	f000 fd50 	bl	800eb88 <memchr>
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	d03f      	beq.n	800e16c <_vfiprintf_r+0x22c>
 800e0ec:	4b29      	ldr	r3, [pc, #164]	; (800e194 <_vfiprintf_r+0x254>)
 800e0ee:	bb1b      	cbnz	r3, 800e138 <_vfiprintf_r+0x1f8>
 800e0f0:	9b03      	ldr	r3, [sp, #12]
 800e0f2:	3307      	adds	r3, #7
 800e0f4:	f023 0307 	bic.w	r3, r3, #7
 800e0f8:	3308      	adds	r3, #8
 800e0fa:	9303      	str	r3, [sp, #12]
 800e0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0fe:	443b      	add	r3, r7
 800e100:	9309      	str	r3, [sp, #36]	; 0x24
 800e102:	e767      	b.n	800dfd4 <_vfiprintf_r+0x94>
 800e104:	460c      	mov	r4, r1
 800e106:	2001      	movs	r0, #1
 800e108:	fb0c 3202 	mla	r2, ip, r2, r3
 800e10c:	e7a5      	b.n	800e05a <_vfiprintf_r+0x11a>
 800e10e:	2300      	movs	r3, #0
 800e110:	f04f 0c0a 	mov.w	ip, #10
 800e114:	4619      	mov	r1, r3
 800e116:	3401      	adds	r4, #1
 800e118:	9305      	str	r3, [sp, #20]
 800e11a:	4620      	mov	r0, r4
 800e11c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e120:	3a30      	subs	r2, #48	; 0x30
 800e122:	2a09      	cmp	r2, #9
 800e124:	d903      	bls.n	800e12e <_vfiprintf_r+0x1ee>
 800e126:	2b00      	cmp	r3, #0
 800e128:	d0c5      	beq.n	800e0b6 <_vfiprintf_r+0x176>
 800e12a:	9105      	str	r1, [sp, #20]
 800e12c:	e7c3      	b.n	800e0b6 <_vfiprintf_r+0x176>
 800e12e:	4604      	mov	r4, r0
 800e130:	2301      	movs	r3, #1
 800e132:	fb0c 2101 	mla	r1, ip, r1, r2
 800e136:	e7f0      	b.n	800e11a <_vfiprintf_r+0x1da>
 800e138:	ab03      	add	r3, sp, #12
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	462a      	mov	r2, r5
 800e13e:	4630      	mov	r0, r6
 800e140:	4b15      	ldr	r3, [pc, #84]	; (800e198 <_vfiprintf_r+0x258>)
 800e142:	a904      	add	r1, sp, #16
 800e144:	f3af 8000 	nop.w
 800e148:	4607      	mov	r7, r0
 800e14a:	1c78      	adds	r0, r7, #1
 800e14c:	d1d6      	bne.n	800e0fc <_vfiprintf_r+0x1bc>
 800e14e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e150:	07d9      	lsls	r1, r3, #31
 800e152:	d405      	bmi.n	800e160 <_vfiprintf_r+0x220>
 800e154:	89ab      	ldrh	r3, [r5, #12]
 800e156:	059a      	lsls	r2, r3, #22
 800e158:	d402      	bmi.n	800e160 <_vfiprintf_r+0x220>
 800e15a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e15c:	f000 fcaf 	bl	800eabe <__retarget_lock_release_recursive>
 800e160:	89ab      	ldrh	r3, [r5, #12]
 800e162:	065b      	lsls	r3, r3, #25
 800e164:	f53f af12 	bmi.w	800df8c <_vfiprintf_r+0x4c>
 800e168:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e16a:	e711      	b.n	800df90 <_vfiprintf_r+0x50>
 800e16c:	ab03      	add	r3, sp, #12
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	462a      	mov	r2, r5
 800e172:	4630      	mov	r0, r6
 800e174:	4b08      	ldr	r3, [pc, #32]	; (800e198 <_vfiprintf_r+0x258>)
 800e176:	a904      	add	r1, sp, #16
 800e178:	f000 f882 	bl	800e280 <_printf_i>
 800e17c:	e7e4      	b.n	800e148 <_vfiprintf_r+0x208>
 800e17e:	bf00      	nop
 800e180:	0800f90c 	.word	0x0800f90c
 800e184:	0800f92c 	.word	0x0800f92c
 800e188:	0800f8ec 	.word	0x0800f8ec
 800e18c:	0800f8b8 	.word	0x0800f8b8
 800e190:	0800f8c2 	.word	0x0800f8c2
 800e194:	00000000 	.word	0x00000000
 800e198:	0800df1b 	.word	0x0800df1b
 800e19c:	0800f8be 	.word	0x0800f8be

0800e1a0 <_printf_common>:
 800e1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1a4:	4616      	mov	r6, r2
 800e1a6:	4699      	mov	r9, r3
 800e1a8:	688a      	ldr	r2, [r1, #8]
 800e1aa:	690b      	ldr	r3, [r1, #16]
 800e1ac:	4607      	mov	r7, r0
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	bfb8      	it	lt
 800e1b2:	4613      	movlt	r3, r2
 800e1b4:	6033      	str	r3, [r6, #0]
 800e1b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e1ba:	460c      	mov	r4, r1
 800e1bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e1c0:	b10a      	cbz	r2, 800e1c6 <_printf_common+0x26>
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	6033      	str	r3, [r6, #0]
 800e1c6:	6823      	ldr	r3, [r4, #0]
 800e1c8:	0699      	lsls	r1, r3, #26
 800e1ca:	bf42      	ittt	mi
 800e1cc:	6833      	ldrmi	r3, [r6, #0]
 800e1ce:	3302      	addmi	r3, #2
 800e1d0:	6033      	strmi	r3, [r6, #0]
 800e1d2:	6825      	ldr	r5, [r4, #0]
 800e1d4:	f015 0506 	ands.w	r5, r5, #6
 800e1d8:	d106      	bne.n	800e1e8 <_printf_common+0x48>
 800e1da:	f104 0a19 	add.w	sl, r4, #25
 800e1de:	68e3      	ldr	r3, [r4, #12]
 800e1e0:	6832      	ldr	r2, [r6, #0]
 800e1e2:	1a9b      	subs	r3, r3, r2
 800e1e4:	42ab      	cmp	r3, r5
 800e1e6:	dc28      	bgt.n	800e23a <_printf_common+0x9a>
 800e1e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e1ec:	1e13      	subs	r3, r2, #0
 800e1ee:	6822      	ldr	r2, [r4, #0]
 800e1f0:	bf18      	it	ne
 800e1f2:	2301      	movne	r3, #1
 800e1f4:	0692      	lsls	r2, r2, #26
 800e1f6:	d42d      	bmi.n	800e254 <_printf_common+0xb4>
 800e1f8:	4649      	mov	r1, r9
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e200:	47c0      	blx	r8
 800e202:	3001      	adds	r0, #1
 800e204:	d020      	beq.n	800e248 <_printf_common+0xa8>
 800e206:	6823      	ldr	r3, [r4, #0]
 800e208:	68e5      	ldr	r5, [r4, #12]
 800e20a:	f003 0306 	and.w	r3, r3, #6
 800e20e:	2b04      	cmp	r3, #4
 800e210:	bf18      	it	ne
 800e212:	2500      	movne	r5, #0
 800e214:	6832      	ldr	r2, [r6, #0]
 800e216:	f04f 0600 	mov.w	r6, #0
 800e21a:	68a3      	ldr	r3, [r4, #8]
 800e21c:	bf08      	it	eq
 800e21e:	1aad      	subeq	r5, r5, r2
 800e220:	6922      	ldr	r2, [r4, #16]
 800e222:	bf08      	it	eq
 800e224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e228:	4293      	cmp	r3, r2
 800e22a:	bfc4      	itt	gt
 800e22c:	1a9b      	subgt	r3, r3, r2
 800e22e:	18ed      	addgt	r5, r5, r3
 800e230:	341a      	adds	r4, #26
 800e232:	42b5      	cmp	r5, r6
 800e234:	d11a      	bne.n	800e26c <_printf_common+0xcc>
 800e236:	2000      	movs	r0, #0
 800e238:	e008      	b.n	800e24c <_printf_common+0xac>
 800e23a:	2301      	movs	r3, #1
 800e23c:	4652      	mov	r2, sl
 800e23e:	4649      	mov	r1, r9
 800e240:	4638      	mov	r0, r7
 800e242:	47c0      	blx	r8
 800e244:	3001      	adds	r0, #1
 800e246:	d103      	bne.n	800e250 <_printf_common+0xb0>
 800e248:	f04f 30ff 	mov.w	r0, #4294967295
 800e24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e250:	3501      	adds	r5, #1
 800e252:	e7c4      	b.n	800e1de <_printf_common+0x3e>
 800e254:	2030      	movs	r0, #48	; 0x30
 800e256:	18e1      	adds	r1, r4, r3
 800e258:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e25c:	1c5a      	adds	r2, r3, #1
 800e25e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e262:	4422      	add	r2, r4
 800e264:	3302      	adds	r3, #2
 800e266:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e26a:	e7c5      	b.n	800e1f8 <_printf_common+0x58>
 800e26c:	2301      	movs	r3, #1
 800e26e:	4622      	mov	r2, r4
 800e270:	4649      	mov	r1, r9
 800e272:	4638      	mov	r0, r7
 800e274:	47c0      	blx	r8
 800e276:	3001      	adds	r0, #1
 800e278:	d0e6      	beq.n	800e248 <_printf_common+0xa8>
 800e27a:	3601      	adds	r6, #1
 800e27c:	e7d9      	b.n	800e232 <_printf_common+0x92>
	...

0800e280 <_printf_i>:
 800e280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e284:	460c      	mov	r4, r1
 800e286:	7e27      	ldrb	r7, [r4, #24]
 800e288:	4691      	mov	r9, r2
 800e28a:	2f78      	cmp	r7, #120	; 0x78
 800e28c:	4680      	mov	r8, r0
 800e28e:	469a      	mov	sl, r3
 800e290:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e292:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e296:	d807      	bhi.n	800e2a8 <_printf_i+0x28>
 800e298:	2f62      	cmp	r7, #98	; 0x62
 800e29a:	d80a      	bhi.n	800e2b2 <_printf_i+0x32>
 800e29c:	2f00      	cmp	r7, #0
 800e29e:	f000 80d9 	beq.w	800e454 <_printf_i+0x1d4>
 800e2a2:	2f58      	cmp	r7, #88	; 0x58
 800e2a4:	f000 80a4 	beq.w	800e3f0 <_printf_i+0x170>
 800e2a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e2ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e2b0:	e03a      	b.n	800e328 <_printf_i+0xa8>
 800e2b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e2b6:	2b15      	cmp	r3, #21
 800e2b8:	d8f6      	bhi.n	800e2a8 <_printf_i+0x28>
 800e2ba:	a001      	add	r0, pc, #4	; (adr r0, 800e2c0 <_printf_i+0x40>)
 800e2bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e2c0:	0800e319 	.word	0x0800e319
 800e2c4:	0800e32d 	.word	0x0800e32d
 800e2c8:	0800e2a9 	.word	0x0800e2a9
 800e2cc:	0800e2a9 	.word	0x0800e2a9
 800e2d0:	0800e2a9 	.word	0x0800e2a9
 800e2d4:	0800e2a9 	.word	0x0800e2a9
 800e2d8:	0800e32d 	.word	0x0800e32d
 800e2dc:	0800e2a9 	.word	0x0800e2a9
 800e2e0:	0800e2a9 	.word	0x0800e2a9
 800e2e4:	0800e2a9 	.word	0x0800e2a9
 800e2e8:	0800e2a9 	.word	0x0800e2a9
 800e2ec:	0800e43b 	.word	0x0800e43b
 800e2f0:	0800e35d 	.word	0x0800e35d
 800e2f4:	0800e41d 	.word	0x0800e41d
 800e2f8:	0800e2a9 	.word	0x0800e2a9
 800e2fc:	0800e2a9 	.word	0x0800e2a9
 800e300:	0800e45d 	.word	0x0800e45d
 800e304:	0800e2a9 	.word	0x0800e2a9
 800e308:	0800e35d 	.word	0x0800e35d
 800e30c:	0800e2a9 	.word	0x0800e2a9
 800e310:	0800e2a9 	.word	0x0800e2a9
 800e314:	0800e425 	.word	0x0800e425
 800e318:	680b      	ldr	r3, [r1, #0]
 800e31a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e31e:	1d1a      	adds	r2, r3, #4
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	600a      	str	r2, [r1, #0]
 800e324:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e328:	2301      	movs	r3, #1
 800e32a:	e0a4      	b.n	800e476 <_printf_i+0x1f6>
 800e32c:	6825      	ldr	r5, [r4, #0]
 800e32e:	6808      	ldr	r0, [r1, #0]
 800e330:	062e      	lsls	r6, r5, #24
 800e332:	f100 0304 	add.w	r3, r0, #4
 800e336:	d50a      	bpl.n	800e34e <_printf_i+0xce>
 800e338:	6805      	ldr	r5, [r0, #0]
 800e33a:	600b      	str	r3, [r1, #0]
 800e33c:	2d00      	cmp	r5, #0
 800e33e:	da03      	bge.n	800e348 <_printf_i+0xc8>
 800e340:	232d      	movs	r3, #45	; 0x2d
 800e342:	426d      	negs	r5, r5
 800e344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e348:	230a      	movs	r3, #10
 800e34a:	485e      	ldr	r0, [pc, #376]	; (800e4c4 <_printf_i+0x244>)
 800e34c:	e019      	b.n	800e382 <_printf_i+0x102>
 800e34e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e352:	6805      	ldr	r5, [r0, #0]
 800e354:	600b      	str	r3, [r1, #0]
 800e356:	bf18      	it	ne
 800e358:	b22d      	sxthne	r5, r5
 800e35a:	e7ef      	b.n	800e33c <_printf_i+0xbc>
 800e35c:	680b      	ldr	r3, [r1, #0]
 800e35e:	6825      	ldr	r5, [r4, #0]
 800e360:	1d18      	adds	r0, r3, #4
 800e362:	6008      	str	r0, [r1, #0]
 800e364:	0628      	lsls	r0, r5, #24
 800e366:	d501      	bpl.n	800e36c <_printf_i+0xec>
 800e368:	681d      	ldr	r5, [r3, #0]
 800e36a:	e002      	b.n	800e372 <_printf_i+0xf2>
 800e36c:	0669      	lsls	r1, r5, #25
 800e36e:	d5fb      	bpl.n	800e368 <_printf_i+0xe8>
 800e370:	881d      	ldrh	r5, [r3, #0]
 800e372:	2f6f      	cmp	r7, #111	; 0x6f
 800e374:	bf0c      	ite	eq
 800e376:	2308      	moveq	r3, #8
 800e378:	230a      	movne	r3, #10
 800e37a:	4852      	ldr	r0, [pc, #328]	; (800e4c4 <_printf_i+0x244>)
 800e37c:	2100      	movs	r1, #0
 800e37e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e382:	6866      	ldr	r6, [r4, #4]
 800e384:	2e00      	cmp	r6, #0
 800e386:	bfa8      	it	ge
 800e388:	6821      	ldrge	r1, [r4, #0]
 800e38a:	60a6      	str	r6, [r4, #8]
 800e38c:	bfa4      	itt	ge
 800e38e:	f021 0104 	bicge.w	r1, r1, #4
 800e392:	6021      	strge	r1, [r4, #0]
 800e394:	b90d      	cbnz	r5, 800e39a <_printf_i+0x11a>
 800e396:	2e00      	cmp	r6, #0
 800e398:	d04d      	beq.n	800e436 <_printf_i+0x1b6>
 800e39a:	4616      	mov	r6, r2
 800e39c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3a0:	fb03 5711 	mls	r7, r3, r1, r5
 800e3a4:	5dc7      	ldrb	r7, [r0, r7]
 800e3a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e3aa:	462f      	mov	r7, r5
 800e3ac:	42bb      	cmp	r3, r7
 800e3ae:	460d      	mov	r5, r1
 800e3b0:	d9f4      	bls.n	800e39c <_printf_i+0x11c>
 800e3b2:	2b08      	cmp	r3, #8
 800e3b4:	d10b      	bne.n	800e3ce <_printf_i+0x14e>
 800e3b6:	6823      	ldr	r3, [r4, #0]
 800e3b8:	07df      	lsls	r7, r3, #31
 800e3ba:	d508      	bpl.n	800e3ce <_printf_i+0x14e>
 800e3bc:	6923      	ldr	r3, [r4, #16]
 800e3be:	6861      	ldr	r1, [r4, #4]
 800e3c0:	4299      	cmp	r1, r3
 800e3c2:	bfde      	ittt	le
 800e3c4:	2330      	movle	r3, #48	; 0x30
 800e3c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e3ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e3ce:	1b92      	subs	r2, r2, r6
 800e3d0:	6122      	str	r2, [r4, #16]
 800e3d2:	464b      	mov	r3, r9
 800e3d4:	4621      	mov	r1, r4
 800e3d6:	4640      	mov	r0, r8
 800e3d8:	f8cd a000 	str.w	sl, [sp]
 800e3dc:	aa03      	add	r2, sp, #12
 800e3de:	f7ff fedf 	bl	800e1a0 <_printf_common>
 800e3e2:	3001      	adds	r0, #1
 800e3e4:	d14c      	bne.n	800e480 <_printf_i+0x200>
 800e3e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ea:	b004      	add	sp, #16
 800e3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3f0:	4834      	ldr	r0, [pc, #208]	; (800e4c4 <_printf_i+0x244>)
 800e3f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e3f6:	680e      	ldr	r6, [r1, #0]
 800e3f8:	6823      	ldr	r3, [r4, #0]
 800e3fa:	f856 5b04 	ldr.w	r5, [r6], #4
 800e3fe:	061f      	lsls	r7, r3, #24
 800e400:	600e      	str	r6, [r1, #0]
 800e402:	d514      	bpl.n	800e42e <_printf_i+0x1ae>
 800e404:	07d9      	lsls	r1, r3, #31
 800e406:	bf44      	itt	mi
 800e408:	f043 0320 	orrmi.w	r3, r3, #32
 800e40c:	6023      	strmi	r3, [r4, #0]
 800e40e:	b91d      	cbnz	r5, 800e418 <_printf_i+0x198>
 800e410:	6823      	ldr	r3, [r4, #0]
 800e412:	f023 0320 	bic.w	r3, r3, #32
 800e416:	6023      	str	r3, [r4, #0]
 800e418:	2310      	movs	r3, #16
 800e41a:	e7af      	b.n	800e37c <_printf_i+0xfc>
 800e41c:	6823      	ldr	r3, [r4, #0]
 800e41e:	f043 0320 	orr.w	r3, r3, #32
 800e422:	6023      	str	r3, [r4, #0]
 800e424:	2378      	movs	r3, #120	; 0x78
 800e426:	4828      	ldr	r0, [pc, #160]	; (800e4c8 <_printf_i+0x248>)
 800e428:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e42c:	e7e3      	b.n	800e3f6 <_printf_i+0x176>
 800e42e:	065e      	lsls	r6, r3, #25
 800e430:	bf48      	it	mi
 800e432:	b2ad      	uxthmi	r5, r5
 800e434:	e7e6      	b.n	800e404 <_printf_i+0x184>
 800e436:	4616      	mov	r6, r2
 800e438:	e7bb      	b.n	800e3b2 <_printf_i+0x132>
 800e43a:	680b      	ldr	r3, [r1, #0]
 800e43c:	6826      	ldr	r6, [r4, #0]
 800e43e:	1d1d      	adds	r5, r3, #4
 800e440:	6960      	ldr	r0, [r4, #20]
 800e442:	600d      	str	r5, [r1, #0]
 800e444:	0635      	lsls	r5, r6, #24
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	d501      	bpl.n	800e44e <_printf_i+0x1ce>
 800e44a:	6018      	str	r0, [r3, #0]
 800e44c:	e002      	b.n	800e454 <_printf_i+0x1d4>
 800e44e:	0671      	lsls	r1, r6, #25
 800e450:	d5fb      	bpl.n	800e44a <_printf_i+0x1ca>
 800e452:	8018      	strh	r0, [r3, #0]
 800e454:	2300      	movs	r3, #0
 800e456:	4616      	mov	r6, r2
 800e458:	6123      	str	r3, [r4, #16]
 800e45a:	e7ba      	b.n	800e3d2 <_printf_i+0x152>
 800e45c:	680b      	ldr	r3, [r1, #0]
 800e45e:	1d1a      	adds	r2, r3, #4
 800e460:	600a      	str	r2, [r1, #0]
 800e462:	681e      	ldr	r6, [r3, #0]
 800e464:	2100      	movs	r1, #0
 800e466:	4630      	mov	r0, r6
 800e468:	6862      	ldr	r2, [r4, #4]
 800e46a:	f000 fb8d 	bl	800eb88 <memchr>
 800e46e:	b108      	cbz	r0, 800e474 <_printf_i+0x1f4>
 800e470:	1b80      	subs	r0, r0, r6
 800e472:	6060      	str	r0, [r4, #4]
 800e474:	6863      	ldr	r3, [r4, #4]
 800e476:	6123      	str	r3, [r4, #16]
 800e478:	2300      	movs	r3, #0
 800e47a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e47e:	e7a8      	b.n	800e3d2 <_printf_i+0x152>
 800e480:	4632      	mov	r2, r6
 800e482:	4649      	mov	r1, r9
 800e484:	4640      	mov	r0, r8
 800e486:	6923      	ldr	r3, [r4, #16]
 800e488:	47d0      	blx	sl
 800e48a:	3001      	adds	r0, #1
 800e48c:	d0ab      	beq.n	800e3e6 <_printf_i+0x166>
 800e48e:	6823      	ldr	r3, [r4, #0]
 800e490:	079b      	lsls	r3, r3, #30
 800e492:	d413      	bmi.n	800e4bc <_printf_i+0x23c>
 800e494:	68e0      	ldr	r0, [r4, #12]
 800e496:	9b03      	ldr	r3, [sp, #12]
 800e498:	4298      	cmp	r0, r3
 800e49a:	bfb8      	it	lt
 800e49c:	4618      	movlt	r0, r3
 800e49e:	e7a4      	b.n	800e3ea <_printf_i+0x16a>
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	4632      	mov	r2, r6
 800e4a4:	4649      	mov	r1, r9
 800e4a6:	4640      	mov	r0, r8
 800e4a8:	47d0      	blx	sl
 800e4aa:	3001      	adds	r0, #1
 800e4ac:	d09b      	beq.n	800e3e6 <_printf_i+0x166>
 800e4ae:	3501      	adds	r5, #1
 800e4b0:	68e3      	ldr	r3, [r4, #12]
 800e4b2:	9903      	ldr	r1, [sp, #12]
 800e4b4:	1a5b      	subs	r3, r3, r1
 800e4b6:	42ab      	cmp	r3, r5
 800e4b8:	dcf2      	bgt.n	800e4a0 <_printf_i+0x220>
 800e4ba:	e7eb      	b.n	800e494 <_printf_i+0x214>
 800e4bc:	2500      	movs	r5, #0
 800e4be:	f104 0619 	add.w	r6, r4, #25
 800e4c2:	e7f5      	b.n	800e4b0 <_printf_i+0x230>
 800e4c4:	0800f8c9 	.word	0x0800f8c9
 800e4c8:	0800f8da 	.word	0x0800f8da

0800e4cc <_sbrk_r>:
 800e4cc:	b538      	push	{r3, r4, r5, lr}
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	4d05      	ldr	r5, [pc, #20]	; (800e4e8 <_sbrk_r+0x1c>)
 800e4d2:	4604      	mov	r4, r0
 800e4d4:	4608      	mov	r0, r1
 800e4d6:	602b      	str	r3, [r5, #0]
 800e4d8:	f7fa f9de 	bl	8008898 <_sbrk>
 800e4dc:	1c43      	adds	r3, r0, #1
 800e4de:	d102      	bne.n	800e4e6 <_sbrk_r+0x1a>
 800e4e0:	682b      	ldr	r3, [r5, #0]
 800e4e2:	b103      	cbz	r3, 800e4e6 <_sbrk_r+0x1a>
 800e4e4:	6023      	str	r3, [r4, #0]
 800e4e6:	bd38      	pop	{r3, r4, r5, pc}
 800e4e8:	20000bc8 	.word	0x20000bc8

0800e4ec <strchr>:
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	b2c9      	uxtb	r1, r1
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4f6:	b112      	cbz	r2, 800e4fe <strchr+0x12>
 800e4f8:	428a      	cmp	r2, r1
 800e4fa:	d1f9      	bne.n	800e4f0 <strchr+0x4>
 800e4fc:	4770      	bx	lr
 800e4fe:	2900      	cmp	r1, #0
 800e500:	bf18      	it	ne
 800e502:	2000      	movne	r0, #0
 800e504:	4770      	bx	lr

0800e506 <strcspn>:
 800e506:	4603      	mov	r3, r0
 800e508:	b570      	push	{r4, r5, r6, lr}
 800e50a:	461e      	mov	r6, r3
 800e50c:	f813 4b01 	ldrb.w	r4, [r3], #1
 800e510:	b144      	cbz	r4, 800e524 <strcspn+0x1e>
 800e512:	1e4a      	subs	r2, r1, #1
 800e514:	e001      	b.n	800e51a <strcspn+0x14>
 800e516:	42a5      	cmp	r5, r4
 800e518:	d004      	beq.n	800e524 <strcspn+0x1e>
 800e51a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800e51e:	2d00      	cmp	r5, #0
 800e520:	d1f9      	bne.n	800e516 <strcspn+0x10>
 800e522:	e7f2      	b.n	800e50a <strcspn+0x4>
 800e524:	1a30      	subs	r0, r6, r0
 800e526:	bd70      	pop	{r4, r5, r6, pc}

0800e528 <strspn>:
 800e528:	4603      	mov	r3, r0
 800e52a:	b570      	push	{r4, r5, r6, lr}
 800e52c:	461e      	mov	r6, r3
 800e52e:	f813 4b01 	ldrb.w	r4, [r3], #1
 800e532:	b13c      	cbz	r4, 800e544 <strspn+0x1c>
 800e534:	1e4a      	subs	r2, r1, #1
 800e536:	e001      	b.n	800e53c <strspn+0x14>
 800e538:	42a5      	cmp	r5, r4
 800e53a:	d0f7      	beq.n	800e52c <strspn+0x4>
 800e53c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800e540:	2d00      	cmp	r5, #0
 800e542:	d1f9      	bne.n	800e538 <strspn+0x10>
 800e544:	1a30      	subs	r0, r6, r0
 800e546:	bd70      	pop	{r4, r5, r6, pc}

0800e548 <_vsniprintf_r>:
 800e548:	b530      	push	{r4, r5, lr}
 800e54a:	1e14      	subs	r4, r2, #0
 800e54c:	4605      	mov	r5, r0
 800e54e:	b09b      	sub	sp, #108	; 0x6c
 800e550:	4618      	mov	r0, r3
 800e552:	da05      	bge.n	800e560 <_vsniprintf_r+0x18>
 800e554:	238b      	movs	r3, #139	; 0x8b
 800e556:	f04f 30ff 	mov.w	r0, #4294967295
 800e55a:	602b      	str	r3, [r5, #0]
 800e55c:	b01b      	add	sp, #108	; 0x6c
 800e55e:	bd30      	pop	{r4, r5, pc}
 800e560:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e564:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e568:	bf0c      	ite	eq
 800e56a:	4623      	moveq	r3, r4
 800e56c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e570:	9302      	str	r3, [sp, #8]
 800e572:	9305      	str	r3, [sp, #20]
 800e574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e578:	4602      	mov	r2, r0
 800e57a:	9100      	str	r1, [sp, #0]
 800e57c:	9104      	str	r1, [sp, #16]
 800e57e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e582:	4669      	mov	r1, sp
 800e584:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e586:	4628      	mov	r0, r5
 800e588:	f000 fbb4 	bl	800ecf4 <_svfiprintf_r>
 800e58c:	1c43      	adds	r3, r0, #1
 800e58e:	bfbc      	itt	lt
 800e590:	238b      	movlt	r3, #139	; 0x8b
 800e592:	602b      	strlt	r3, [r5, #0]
 800e594:	2c00      	cmp	r4, #0
 800e596:	d0e1      	beq.n	800e55c <_vsniprintf_r+0x14>
 800e598:	2200      	movs	r2, #0
 800e59a:	9b00      	ldr	r3, [sp, #0]
 800e59c:	701a      	strb	r2, [r3, #0]
 800e59e:	e7dd      	b.n	800e55c <_vsniprintf_r+0x14>

0800e5a0 <vsniprintf>:
 800e5a0:	b507      	push	{r0, r1, r2, lr}
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	460a      	mov	r2, r1
 800e5a8:	4601      	mov	r1, r0
 800e5aa:	4803      	ldr	r0, [pc, #12]	; (800e5b8 <vsniprintf+0x18>)
 800e5ac:	6800      	ldr	r0, [r0, #0]
 800e5ae:	f7ff ffcb 	bl	800e548 <_vsniprintf_r>
 800e5b2:	b003      	add	sp, #12
 800e5b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e5b8:	2000004c 	.word	0x2000004c

0800e5bc <__swbuf_r>:
 800e5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5be:	460e      	mov	r6, r1
 800e5c0:	4614      	mov	r4, r2
 800e5c2:	4605      	mov	r5, r0
 800e5c4:	b118      	cbz	r0, 800e5ce <__swbuf_r+0x12>
 800e5c6:	6983      	ldr	r3, [r0, #24]
 800e5c8:	b90b      	cbnz	r3, 800e5ce <__swbuf_r+0x12>
 800e5ca:	f000 f9d9 	bl	800e980 <__sinit>
 800e5ce:	4b21      	ldr	r3, [pc, #132]	; (800e654 <__swbuf_r+0x98>)
 800e5d0:	429c      	cmp	r4, r3
 800e5d2:	d12b      	bne.n	800e62c <__swbuf_r+0x70>
 800e5d4:	686c      	ldr	r4, [r5, #4]
 800e5d6:	69a3      	ldr	r3, [r4, #24]
 800e5d8:	60a3      	str	r3, [r4, #8]
 800e5da:	89a3      	ldrh	r3, [r4, #12]
 800e5dc:	071a      	lsls	r2, r3, #28
 800e5de:	d52f      	bpl.n	800e640 <__swbuf_r+0x84>
 800e5e0:	6923      	ldr	r3, [r4, #16]
 800e5e2:	b36b      	cbz	r3, 800e640 <__swbuf_r+0x84>
 800e5e4:	6923      	ldr	r3, [r4, #16]
 800e5e6:	6820      	ldr	r0, [r4, #0]
 800e5e8:	b2f6      	uxtb	r6, r6
 800e5ea:	1ac0      	subs	r0, r0, r3
 800e5ec:	6963      	ldr	r3, [r4, #20]
 800e5ee:	4637      	mov	r7, r6
 800e5f0:	4283      	cmp	r3, r0
 800e5f2:	dc04      	bgt.n	800e5fe <__swbuf_r+0x42>
 800e5f4:	4621      	mov	r1, r4
 800e5f6:	4628      	mov	r0, r5
 800e5f8:	f000 f92e 	bl	800e858 <_fflush_r>
 800e5fc:	bb30      	cbnz	r0, 800e64c <__swbuf_r+0x90>
 800e5fe:	68a3      	ldr	r3, [r4, #8]
 800e600:	3001      	adds	r0, #1
 800e602:	3b01      	subs	r3, #1
 800e604:	60a3      	str	r3, [r4, #8]
 800e606:	6823      	ldr	r3, [r4, #0]
 800e608:	1c5a      	adds	r2, r3, #1
 800e60a:	6022      	str	r2, [r4, #0]
 800e60c:	701e      	strb	r6, [r3, #0]
 800e60e:	6963      	ldr	r3, [r4, #20]
 800e610:	4283      	cmp	r3, r0
 800e612:	d004      	beq.n	800e61e <__swbuf_r+0x62>
 800e614:	89a3      	ldrh	r3, [r4, #12]
 800e616:	07db      	lsls	r3, r3, #31
 800e618:	d506      	bpl.n	800e628 <__swbuf_r+0x6c>
 800e61a:	2e0a      	cmp	r6, #10
 800e61c:	d104      	bne.n	800e628 <__swbuf_r+0x6c>
 800e61e:	4621      	mov	r1, r4
 800e620:	4628      	mov	r0, r5
 800e622:	f000 f919 	bl	800e858 <_fflush_r>
 800e626:	b988      	cbnz	r0, 800e64c <__swbuf_r+0x90>
 800e628:	4638      	mov	r0, r7
 800e62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e62c:	4b0a      	ldr	r3, [pc, #40]	; (800e658 <__swbuf_r+0x9c>)
 800e62e:	429c      	cmp	r4, r3
 800e630:	d101      	bne.n	800e636 <__swbuf_r+0x7a>
 800e632:	68ac      	ldr	r4, [r5, #8]
 800e634:	e7cf      	b.n	800e5d6 <__swbuf_r+0x1a>
 800e636:	4b09      	ldr	r3, [pc, #36]	; (800e65c <__swbuf_r+0xa0>)
 800e638:	429c      	cmp	r4, r3
 800e63a:	bf08      	it	eq
 800e63c:	68ec      	ldreq	r4, [r5, #12]
 800e63e:	e7ca      	b.n	800e5d6 <__swbuf_r+0x1a>
 800e640:	4621      	mov	r1, r4
 800e642:	4628      	mov	r0, r5
 800e644:	f000 f80c 	bl	800e660 <__swsetup_r>
 800e648:	2800      	cmp	r0, #0
 800e64a:	d0cb      	beq.n	800e5e4 <__swbuf_r+0x28>
 800e64c:	f04f 37ff 	mov.w	r7, #4294967295
 800e650:	e7ea      	b.n	800e628 <__swbuf_r+0x6c>
 800e652:	bf00      	nop
 800e654:	0800f90c 	.word	0x0800f90c
 800e658:	0800f92c 	.word	0x0800f92c
 800e65c:	0800f8ec 	.word	0x0800f8ec

0800e660 <__swsetup_r>:
 800e660:	4b32      	ldr	r3, [pc, #200]	; (800e72c <__swsetup_r+0xcc>)
 800e662:	b570      	push	{r4, r5, r6, lr}
 800e664:	681d      	ldr	r5, [r3, #0]
 800e666:	4606      	mov	r6, r0
 800e668:	460c      	mov	r4, r1
 800e66a:	b125      	cbz	r5, 800e676 <__swsetup_r+0x16>
 800e66c:	69ab      	ldr	r3, [r5, #24]
 800e66e:	b913      	cbnz	r3, 800e676 <__swsetup_r+0x16>
 800e670:	4628      	mov	r0, r5
 800e672:	f000 f985 	bl	800e980 <__sinit>
 800e676:	4b2e      	ldr	r3, [pc, #184]	; (800e730 <__swsetup_r+0xd0>)
 800e678:	429c      	cmp	r4, r3
 800e67a:	d10f      	bne.n	800e69c <__swsetup_r+0x3c>
 800e67c:	686c      	ldr	r4, [r5, #4]
 800e67e:	89a3      	ldrh	r3, [r4, #12]
 800e680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e684:	0719      	lsls	r1, r3, #28
 800e686:	d42c      	bmi.n	800e6e2 <__swsetup_r+0x82>
 800e688:	06dd      	lsls	r5, r3, #27
 800e68a:	d411      	bmi.n	800e6b0 <__swsetup_r+0x50>
 800e68c:	2309      	movs	r3, #9
 800e68e:	6033      	str	r3, [r6, #0]
 800e690:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e694:	f04f 30ff 	mov.w	r0, #4294967295
 800e698:	81a3      	strh	r3, [r4, #12]
 800e69a:	e03e      	b.n	800e71a <__swsetup_r+0xba>
 800e69c:	4b25      	ldr	r3, [pc, #148]	; (800e734 <__swsetup_r+0xd4>)
 800e69e:	429c      	cmp	r4, r3
 800e6a0:	d101      	bne.n	800e6a6 <__swsetup_r+0x46>
 800e6a2:	68ac      	ldr	r4, [r5, #8]
 800e6a4:	e7eb      	b.n	800e67e <__swsetup_r+0x1e>
 800e6a6:	4b24      	ldr	r3, [pc, #144]	; (800e738 <__swsetup_r+0xd8>)
 800e6a8:	429c      	cmp	r4, r3
 800e6aa:	bf08      	it	eq
 800e6ac:	68ec      	ldreq	r4, [r5, #12]
 800e6ae:	e7e6      	b.n	800e67e <__swsetup_r+0x1e>
 800e6b0:	0758      	lsls	r0, r3, #29
 800e6b2:	d512      	bpl.n	800e6da <__swsetup_r+0x7a>
 800e6b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6b6:	b141      	cbz	r1, 800e6ca <__swsetup_r+0x6a>
 800e6b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6bc:	4299      	cmp	r1, r3
 800e6be:	d002      	beq.n	800e6c6 <__swsetup_r+0x66>
 800e6c0:	4630      	mov	r0, r6
 800e6c2:	f7ff fb6f 	bl	800dda4 <_free_r>
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	6363      	str	r3, [r4, #52]	; 0x34
 800e6ca:	89a3      	ldrh	r3, [r4, #12]
 800e6cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e6d0:	81a3      	strh	r3, [r4, #12]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	6063      	str	r3, [r4, #4]
 800e6d6:	6923      	ldr	r3, [r4, #16]
 800e6d8:	6023      	str	r3, [r4, #0]
 800e6da:	89a3      	ldrh	r3, [r4, #12]
 800e6dc:	f043 0308 	orr.w	r3, r3, #8
 800e6e0:	81a3      	strh	r3, [r4, #12]
 800e6e2:	6923      	ldr	r3, [r4, #16]
 800e6e4:	b94b      	cbnz	r3, 800e6fa <__swsetup_r+0x9a>
 800e6e6:	89a3      	ldrh	r3, [r4, #12]
 800e6e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e6ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6f0:	d003      	beq.n	800e6fa <__swsetup_r+0x9a>
 800e6f2:	4621      	mov	r1, r4
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	f000 fa07 	bl	800eb08 <__smakebuf_r>
 800e6fa:	89a0      	ldrh	r0, [r4, #12]
 800e6fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e700:	f010 0301 	ands.w	r3, r0, #1
 800e704:	d00a      	beq.n	800e71c <__swsetup_r+0xbc>
 800e706:	2300      	movs	r3, #0
 800e708:	60a3      	str	r3, [r4, #8]
 800e70a:	6963      	ldr	r3, [r4, #20]
 800e70c:	425b      	negs	r3, r3
 800e70e:	61a3      	str	r3, [r4, #24]
 800e710:	6923      	ldr	r3, [r4, #16]
 800e712:	b943      	cbnz	r3, 800e726 <__swsetup_r+0xc6>
 800e714:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e718:	d1ba      	bne.n	800e690 <__swsetup_r+0x30>
 800e71a:	bd70      	pop	{r4, r5, r6, pc}
 800e71c:	0781      	lsls	r1, r0, #30
 800e71e:	bf58      	it	pl
 800e720:	6963      	ldrpl	r3, [r4, #20]
 800e722:	60a3      	str	r3, [r4, #8]
 800e724:	e7f4      	b.n	800e710 <__swsetup_r+0xb0>
 800e726:	2000      	movs	r0, #0
 800e728:	e7f7      	b.n	800e71a <__swsetup_r+0xba>
 800e72a:	bf00      	nop
 800e72c:	2000004c 	.word	0x2000004c
 800e730:	0800f90c 	.word	0x0800f90c
 800e734:	0800f92c 	.word	0x0800f92c
 800e738:	0800f8ec 	.word	0x0800f8ec

0800e73c <abort>:
 800e73c:	2006      	movs	r0, #6
 800e73e:	b508      	push	{r3, lr}
 800e740:	f000 fc00 	bl	800ef44 <raise>
 800e744:	2001      	movs	r0, #1
 800e746:	f7fa f834 	bl	80087b2 <_exit>
	...

0800e74c <__sflush_r>:
 800e74c:	898a      	ldrh	r2, [r1, #12]
 800e74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e752:	4605      	mov	r5, r0
 800e754:	0710      	lsls	r0, r2, #28
 800e756:	460c      	mov	r4, r1
 800e758:	d458      	bmi.n	800e80c <__sflush_r+0xc0>
 800e75a:	684b      	ldr	r3, [r1, #4]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	dc05      	bgt.n	800e76c <__sflush_r+0x20>
 800e760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e762:	2b00      	cmp	r3, #0
 800e764:	dc02      	bgt.n	800e76c <__sflush_r+0x20>
 800e766:	2000      	movs	r0, #0
 800e768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e76c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e76e:	2e00      	cmp	r6, #0
 800e770:	d0f9      	beq.n	800e766 <__sflush_r+0x1a>
 800e772:	2300      	movs	r3, #0
 800e774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e778:	682f      	ldr	r7, [r5, #0]
 800e77a:	602b      	str	r3, [r5, #0]
 800e77c:	d032      	beq.n	800e7e4 <__sflush_r+0x98>
 800e77e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e780:	89a3      	ldrh	r3, [r4, #12]
 800e782:	075a      	lsls	r2, r3, #29
 800e784:	d505      	bpl.n	800e792 <__sflush_r+0x46>
 800e786:	6863      	ldr	r3, [r4, #4]
 800e788:	1ac0      	subs	r0, r0, r3
 800e78a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e78c:	b10b      	cbz	r3, 800e792 <__sflush_r+0x46>
 800e78e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e790:	1ac0      	subs	r0, r0, r3
 800e792:	2300      	movs	r3, #0
 800e794:	4602      	mov	r2, r0
 800e796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e798:	4628      	mov	r0, r5
 800e79a:	6a21      	ldr	r1, [r4, #32]
 800e79c:	47b0      	blx	r6
 800e79e:	1c43      	adds	r3, r0, #1
 800e7a0:	89a3      	ldrh	r3, [r4, #12]
 800e7a2:	d106      	bne.n	800e7b2 <__sflush_r+0x66>
 800e7a4:	6829      	ldr	r1, [r5, #0]
 800e7a6:	291d      	cmp	r1, #29
 800e7a8:	d82c      	bhi.n	800e804 <__sflush_r+0xb8>
 800e7aa:	4a2a      	ldr	r2, [pc, #168]	; (800e854 <__sflush_r+0x108>)
 800e7ac:	40ca      	lsrs	r2, r1
 800e7ae:	07d6      	lsls	r6, r2, #31
 800e7b0:	d528      	bpl.n	800e804 <__sflush_r+0xb8>
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	6062      	str	r2, [r4, #4]
 800e7b6:	6922      	ldr	r2, [r4, #16]
 800e7b8:	04d9      	lsls	r1, r3, #19
 800e7ba:	6022      	str	r2, [r4, #0]
 800e7bc:	d504      	bpl.n	800e7c8 <__sflush_r+0x7c>
 800e7be:	1c42      	adds	r2, r0, #1
 800e7c0:	d101      	bne.n	800e7c6 <__sflush_r+0x7a>
 800e7c2:	682b      	ldr	r3, [r5, #0]
 800e7c4:	b903      	cbnz	r3, 800e7c8 <__sflush_r+0x7c>
 800e7c6:	6560      	str	r0, [r4, #84]	; 0x54
 800e7c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7ca:	602f      	str	r7, [r5, #0]
 800e7cc:	2900      	cmp	r1, #0
 800e7ce:	d0ca      	beq.n	800e766 <__sflush_r+0x1a>
 800e7d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7d4:	4299      	cmp	r1, r3
 800e7d6:	d002      	beq.n	800e7de <__sflush_r+0x92>
 800e7d8:	4628      	mov	r0, r5
 800e7da:	f7ff fae3 	bl	800dda4 <_free_r>
 800e7de:	2000      	movs	r0, #0
 800e7e0:	6360      	str	r0, [r4, #52]	; 0x34
 800e7e2:	e7c1      	b.n	800e768 <__sflush_r+0x1c>
 800e7e4:	6a21      	ldr	r1, [r4, #32]
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	47b0      	blx	r6
 800e7ec:	1c41      	adds	r1, r0, #1
 800e7ee:	d1c7      	bne.n	800e780 <__sflush_r+0x34>
 800e7f0:	682b      	ldr	r3, [r5, #0]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d0c4      	beq.n	800e780 <__sflush_r+0x34>
 800e7f6:	2b1d      	cmp	r3, #29
 800e7f8:	d001      	beq.n	800e7fe <__sflush_r+0xb2>
 800e7fa:	2b16      	cmp	r3, #22
 800e7fc:	d101      	bne.n	800e802 <__sflush_r+0xb6>
 800e7fe:	602f      	str	r7, [r5, #0]
 800e800:	e7b1      	b.n	800e766 <__sflush_r+0x1a>
 800e802:	89a3      	ldrh	r3, [r4, #12]
 800e804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e808:	81a3      	strh	r3, [r4, #12]
 800e80a:	e7ad      	b.n	800e768 <__sflush_r+0x1c>
 800e80c:	690f      	ldr	r7, [r1, #16]
 800e80e:	2f00      	cmp	r7, #0
 800e810:	d0a9      	beq.n	800e766 <__sflush_r+0x1a>
 800e812:	0793      	lsls	r3, r2, #30
 800e814:	bf18      	it	ne
 800e816:	2300      	movne	r3, #0
 800e818:	680e      	ldr	r6, [r1, #0]
 800e81a:	bf08      	it	eq
 800e81c:	694b      	ldreq	r3, [r1, #20]
 800e81e:	eba6 0807 	sub.w	r8, r6, r7
 800e822:	600f      	str	r7, [r1, #0]
 800e824:	608b      	str	r3, [r1, #8]
 800e826:	f1b8 0f00 	cmp.w	r8, #0
 800e82a:	dd9c      	ble.n	800e766 <__sflush_r+0x1a>
 800e82c:	4643      	mov	r3, r8
 800e82e:	463a      	mov	r2, r7
 800e830:	4628      	mov	r0, r5
 800e832:	6a21      	ldr	r1, [r4, #32]
 800e834:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e836:	47b0      	blx	r6
 800e838:	2800      	cmp	r0, #0
 800e83a:	dc06      	bgt.n	800e84a <__sflush_r+0xfe>
 800e83c:	89a3      	ldrh	r3, [r4, #12]
 800e83e:	f04f 30ff 	mov.w	r0, #4294967295
 800e842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e846:	81a3      	strh	r3, [r4, #12]
 800e848:	e78e      	b.n	800e768 <__sflush_r+0x1c>
 800e84a:	4407      	add	r7, r0
 800e84c:	eba8 0800 	sub.w	r8, r8, r0
 800e850:	e7e9      	b.n	800e826 <__sflush_r+0xda>
 800e852:	bf00      	nop
 800e854:	20400001 	.word	0x20400001

0800e858 <_fflush_r>:
 800e858:	b538      	push	{r3, r4, r5, lr}
 800e85a:	690b      	ldr	r3, [r1, #16]
 800e85c:	4605      	mov	r5, r0
 800e85e:	460c      	mov	r4, r1
 800e860:	b913      	cbnz	r3, 800e868 <_fflush_r+0x10>
 800e862:	2500      	movs	r5, #0
 800e864:	4628      	mov	r0, r5
 800e866:	bd38      	pop	{r3, r4, r5, pc}
 800e868:	b118      	cbz	r0, 800e872 <_fflush_r+0x1a>
 800e86a:	6983      	ldr	r3, [r0, #24]
 800e86c:	b90b      	cbnz	r3, 800e872 <_fflush_r+0x1a>
 800e86e:	f000 f887 	bl	800e980 <__sinit>
 800e872:	4b14      	ldr	r3, [pc, #80]	; (800e8c4 <_fflush_r+0x6c>)
 800e874:	429c      	cmp	r4, r3
 800e876:	d11b      	bne.n	800e8b0 <_fflush_r+0x58>
 800e878:	686c      	ldr	r4, [r5, #4]
 800e87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d0ef      	beq.n	800e862 <_fflush_r+0xa>
 800e882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e884:	07d0      	lsls	r0, r2, #31
 800e886:	d404      	bmi.n	800e892 <_fflush_r+0x3a>
 800e888:	0599      	lsls	r1, r3, #22
 800e88a:	d402      	bmi.n	800e892 <_fflush_r+0x3a>
 800e88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e88e:	f000 f915 	bl	800eabc <__retarget_lock_acquire_recursive>
 800e892:	4628      	mov	r0, r5
 800e894:	4621      	mov	r1, r4
 800e896:	f7ff ff59 	bl	800e74c <__sflush_r>
 800e89a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e89c:	4605      	mov	r5, r0
 800e89e:	07da      	lsls	r2, r3, #31
 800e8a0:	d4e0      	bmi.n	800e864 <_fflush_r+0xc>
 800e8a2:	89a3      	ldrh	r3, [r4, #12]
 800e8a4:	059b      	lsls	r3, r3, #22
 800e8a6:	d4dd      	bmi.n	800e864 <_fflush_r+0xc>
 800e8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8aa:	f000 f908 	bl	800eabe <__retarget_lock_release_recursive>
 800e8ae:	e7d9      	b.n	800e864 <_fflush_r+0xc>
 800e8b0:	4b05      	ldr	r3, [pc, #20]	; (800e8c8 <_fflush_r+0x70>)
 800e8b2:	429c      	cmp	r4, r3
 800e8b4:	d101      	bne.n	800e8ba <_fflush_r+0x62>
 800e8b6:	68ac      	ldr	r4, [r5, #8]
 800e8b8:	e7df      	b.n	800e87a <_fflush_r+0x22>
 800e8ba:	4b04      	ldr	r3, [pc, #16]	; (800e8cc <_fflush_r+0x74>)
 800e8bc:	429c      	cmp	r4, r3
 800e8be:	bf08      	it	eq
 800e8c0:	68ec      	ldreq	r4, [r5, #12]
 800e8c2:	e7da      	b.n	800e87a <_fflush_r+0x22>
 800e8c4:	0800f90c 	.word	0x0800f90c
 800e8c8:	0800f92c 	.word	0x0800f92c
 800e8cc:	0800f8ec 	.word	0x0800f8ec

0800e8d0 <std>:
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	b510      	push	{r4, lr}
 800e8d4:	4604      	mov	r4, r0
 800e8d6:	e9c0 3300 	strd	r3, r3, [r0]
 800e8da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8de:	6083      	str	r3, [r0, #8]
 800e8e0:	8181      	strh	r1, [r0, #12]
 800e8e2:	6643      	str	r3, [r0, #100]	; 0x64
 800e8e4:	81c2      	strh	r2, [r0, #14]
 800e8e6:	6183      	str	r3, [r0, #24]
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	2208      	movs	r2, #8
 800e8ec:	305c      	adds	r0, #92	; 0x5c
 800e8ee:	f7ff fa51 	bl	800dd94 <memset>
 800e8f2:	4b05      	ldr	r3, [pc, #20]	; (800e908 <std+0x38>)
 800e8f4:	6224      	str	r4, [r4, #32]
 800e8f6:	6263      	str	r3, [r4, #36]	; 0x24
 800e8f8:	4b04      	ldr	r3, [pc, #16]	; (800e90c <std+0x3c>)
 800e8fa:	62a3      	str	r3, [r4, #40]	; 0x28
 800e8fc:	4b04      	ldr	r3, [pc, #16]	; (800e910 <std+0x40>)
 800e8fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e900:	4b04      	ldr	r3, [pc, #16]	; (800e914 <std+0x44>)
 800e902:	6323      	str	r3, [r4, #48]	; 0x30
 800e904:	bd10      	pop	{r4, pc}
 800e906:	bf00      	nop
 800e908:	0800ef7d 	.word	0x0800ef7d
 800e90c:	0800ef9f 	.word	0x0800ef9f
 800e910:	0800efd7 	.word	0x0800efd7
 800e914:	0800effb 	.word	0x0800effb

0800e918 <_cleanup_r>:
 800e918:	4901      	ldr	r1, [pc, #4]	; (800e920 <_cleanup_r+0x8>)
 800e91a:	f000 b8af 	b.w	800ea7c <_fwalk_reent>
 800e91e:	bf00      	nop
 800e920:	0800e859 	.word	0x0800e859

0800e924 <__sfmoreglue>:
 800e924:	b570      	push	{r4, r5, r6, lr}
 800e926:	2568      	movs	r5, #104	; 0x68
 800e928:	1e4a      	subs	r2, r1, #1
 800e92a:	4355      	muls	r5, r2
 800e92c:	460e      	mov	r6, r1
 800e92e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e932:	f7ff fa83 	bl	800de3c <_malloc_r>
 800e936:	4604      	mov	r4, r0
 800e938:	b140      	cbz	r0, 800e94c <__sfmoreglue+0x28>
 800e93a:	2100      	movs	r1, #0
 800e93c:	e9c0 1600 	strd	r1, r6, [r0]
 800e940:	300c      	adds	r0, #12
 800e942:	60a0      	str	r0, [r4, #8]
 800e944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e948:	f7ff fa24 	bl	800dd94 <memset>
 800e94c:	4620      	mov	r0, r4
 800e94e:	bd70      	pop	{r4, r5, r6, pc}

0800e950 <__sfp_lock_acquire>:
 800e950:	4801      	ldr	r0, [pc, #4]	; (800e958 <__sfp_lock_acquire+0x8>)
 800e952:	f000 b8b3 	b.w	800eabc <__retarget_lock_acquire_recursive>
 800e956:	bf00      	nop
 800e958:	20000bc4 	.word	0x20000bc4

0800e95c <__sfp_lock_release>:
 800e95c:	4801      	ldr	r0, [pc, #4]	; (800e964 <__sfp_lock_release+0x8>)
 800e95e:	f000 b8ae 	b.w	800eabe <__retarget_lock_release_recursive>
 800e962:	bf00      	nop
 800e964:	20000bc4 	.word	0x20000bc4

0800e968 <__sinit_lock_acquire>:
 800e968:	4801      	ldr	r0, [pc, #4]	; (800e970 <__sinit_lock_acquire+0x8>)
 800e96a:	f000 b8a7 	b.w	800eabc <__retarget_lock_acquire_recursive>
 800e96e:	bf00      	nop
 800e970:	20000bbf 	.word	0x20000bbf

0800e974 <__sinit_lock_release>:
 800e974:	4801      	ldr	r0, [pc, #4]	; (800e97c <__sinit_lock_release+0x8>)
 800e976:	f000 b8a2 	b.w	800eabe <__retarget_lock_release_recursive>
 800e97a:	bf00      	nop
 800e97c:	20000bbf 	.word	0x20000bbf

0800e980 <__sinit>:
 800e980:	b510      	push	{r4, lr}
 800e982:	4604      	mov	r4, r0
 800e984:	f7ff fff0 	bl	800e968 <__sinit_lock_acquire>
 800e988:	69a3      	ldr	r3, [r4, #24]
 800e98a:	b11b      	cbz	r3, 800e994 <__sinit+0x14>
 800e98c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e990:	f7ff bff0 	b.w	800e974 <__sinit_lock_release>
 800e994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e998:	6523      	str	r3, [r4, #80]	; 0x50
 800e99a:	4b13      	ldr	r3, [pc, #76]	; (800e9e8 <__sinit+0x68>)
 800e99c:	4a13      	ldr	r2, [pc, #76]	; (800e9ec <__sinit+0x6c>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e9a2:	42a3      	cmp	r3, r4
 800e9a4:	bf08      	it	eq
 800e9a6:	2301      	moveq	r3, #1
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	bf08      	it	eq
 800e9ac:	61a3      	streq	r3, [r4, #24]
 800e9ae:	f000 f81f 	bl	800e9f0 <__sfp>
 800e9b2:	6060      	str	r0, [r4, #4]
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	f000 f81b 	bl	800e9f0 <__sfp>
 800e9ba:	60a0      	str	r0, [r4, #8]
 800e9bc:	4620      	mov	r0, r4
 800e9be:	f000 f817 	bl	800e9f0 <__sfp>
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	2104      	movs	r1, #4
 800e9c6:	60e0      	str	r0, [r4, #12]
 800e9c8:	6860      	ldr	r0, [r4, #4]
 800e9ca:	f7ff ff81 	bl	800e8d0 <std>
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	2109      	movs	r1, #9
 800e9d2:	68a0      	ldr	r0, [r4, #8]
 800e9d4:	f7ff ff7c 	bl	800e8d0 <std>
 800e9d8:	2202      	movs	r2, #2
 800e9da:	2112      	movs	r1, #18
 800e9dc:	68e0      	ldr	r0, [r4, #12]
 800e9de:	f7ff ff77 	bl	800e8d0 <std>
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	61a3      	str	r3, [r4, #24]
 800e9e6:	e7d1      	b.n	800e98c <__sinit+0xc>
 800e9e8:	0800f8b4 	.word	0x0800f8b4
 800e9ec:	0800e919 	.word	0x0800e919

0800e9f0 <__sfp>:
 800e9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9f2:	4607      	mov	r7, r0
 800e9f4:	f7ff ffac 	bl	800e950 <__sfp_lock_acquire>
 800e9f8:	4b1e      	ldr	r3, [pc, #120]	; (800ea74 <__sfp+0x84>)
 800e9fa:	681e      	ldr	r6, [r3, #0]
 800e9fc:	69b3      	ldr	r3, [r6, #24]
 800e9fe:	b913      	cbnz	r3, 800ea06 <__sfp+0x16>
 800ea00:	4630      	mov	r0, r6
 800ea02:	f7ff ffbd 	bl	800e980 <__sinit>
 800ea06:	3648      	adds	r6, #72	; 0x48
 800ea08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ea0c:	3b01      	subs	r3, #1
 800ea0e:	d503      	bpl.n	800ea18 <__sfp+0x28>
 800ea10:	6833      	ldr	r3, [r6, #0]
 800ea12:	b30b      	cbz	r3, 800ea58 <__sfp+0x68>
 800ea14:	6836      	ldr	r6, [r6, #0]
 800ea16:	e7f7      	b.n	800ea08 <__sfp+0x18>
 800ea18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ea1c:	b9d5      	cbnz	r5, 800ea54 <__sfp+0x64>
 800ea1e:	4b16      	ldr	r3, [pc, #88]	; (800ea78 <__sfp+0x88>)
 800ea20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ea24:	60e3      	str	r3, [r4, #12]
 800ea26:	6665      	str	r5, [r4, #100]	; 0x64
 800ea28:	f000 f847 	bl	800eaba <__retarget_lock_init_recursive>
 800ea2c:	f7ff ff96 	bl	800e95c <__sfp_lock_release>
 800ea30:	2208      	movs	r2, #8
 800ea32:	4629      	mov	r1, r5
 800ea34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ea38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ea3c:	6025      	str	r5, [r4, #0]
 800ea3e:	61a5      	str	r5, [r4, #24]
 800ea40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ea44:	f7ff f9a6 	bl	800dd94 <memset>
 800ea48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ea4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ea50:	4620      	mov	r0, r4
 800ea52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea54:	3468      	adds	r4, #104	; 0x68
 800ea56:	e7d9      	b.n	800ea0c <__sfp+0x1c>
 800ea58:	2104      	movs	r1, #4
 800ea5a:	4638      	mov	r0, r7
 800ea5c:	f7ff ff62 	bl	800e924 <__sfmoreglue>
 800ea60:	4604      	mov	r4, r0
 800ea62:	6030      	str	r0, [r6, #0]
 800ea64:	2800      	cmp	r0, #0
 800ea66:	d1d5      	bne.n	800ea14 <__sfp+0x24>
 800ea68:	f7ff ff78 	bl	800e95c <__sfp_lock_release>
 800ea6c:	230c      	movs	r3, #12
 800ea6e:	603b      	str	r3, [r7, #0]
 800ea70:	e7ee      	b.n	800ea50 <__sfp+0x60>
 800ea72:	bf00      	nop
 800ea74:	0800f8b4 	.word	0x0800f8b4
 800ea78:	ffff0001 	.word	0xffff0001

0800ea7c <_fwalk_reent>:
 800ea7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea80:	4606      	mov	r6, r0
 800ea82:	4688      	mov	r8, r1
 800ea84:	2700      	movs	r7, #0
 800ea86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ea8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea8e:	f1b9 0901 	subs.w	r9, r9, #1
 800ea92:	d505      	bpl.n	800eaa0 <_fwalk_reent+0x24>
 800ea94:	6824      	ldr	r4, [r4, #0]
 800ea96:	2c00      	cmp	r4, #0
 800ea98:	d1f7      	bne.n	800ea8a <_fwalk_reent+0xe>
 800ea9a:	4638      	mov	r0, r7
 800ea9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaa0:	89ab      	ldrh	r3, [r5, #12]
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d907      	bls.n	800eab6 <_fwalk_reent+0x3a>
 800eaa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	d003      	beq.n	800eab6 <_fwalk_reent+0x3a>
 800eaae:	4629      	mov	r1, r5
 800eab0:	4630      	mov	r0, r6
 800eab2:	47c0      	blx	r8
 800eab4:	4307      	orrs	r7, r0
 800eab6:	3568      	adds	r5, #104	; 0x68
 800eab8:	e7e9      	b.n	800ea8e <_fwalk_reent+0x12>

0800eaba <__retarget_lock_init_recursive>:
 800eaba:	4770      	bx	lr

0800eabc <__retarget_lock_acquire_recursive>:
 800eabc:	4770      	bx	lr

0800eabe <__retarget_lock_release_recursive>:
 800eabe:	4770      	bx	lr

0800eac0 <__swhatbuf_r>:
 800eac0:	b570      	push	{r4, r5, r6, lr}
 800eac2:	460e      	mov	r6, r1
 800eac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eac8:	4614      	mov	r4, r2
 800eaca:	2900      	cmp	r1, #0
 800eacc:	461d      	mov	r5, r3
 800eace:	b096      	sub	sp, #88	; 0x58
 800ead0:	da07      	bge.n	800eae2 <__swhatbuf_r+0x22>
 800ead2:	2300      	movs	r3, #0
 800ead4:	602b      	str	r3, [r5, #0]
 800ead6:	89b3      	ldrh	r3, [r6, #12]
 800ead8:	061a      	lsls	r2, r3, #24
 800eada:	d410      	bmi.n	800eafe <__swhatbuf_r+0x3e>
 800eadc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eae0:	e00e      	b.n	800eb00 <__swhatbuf_r+0x40>
 800eae2:	466a      	mov	r2, sp
 800eae4:	f000 fab0 	bl	800f048 <_fstat_r>
 800eae8:	2800      	cmp	r0, #0
 800eaea:	dbf2      	blt.n	800ead2 <__swhatbuf_r+0x12>
 800eaec:	9a01      	ldr	r2, [sp, #4]
 800eaee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eaf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eaf6:	425a      	negs	r2, r3
 800eaf8:	415a      	adcs	r2, r3
 800eafa:	602a      	str	r2, [r5, #0]
 800eafc:	e7ee      	b.n	800eadc <__swhatbuf_r+0x1c>
 800eafe:	2340      	movs	r3, #64	; 0x40
 800eb00:	2000      	movs	r0, #0
 800eb02:	6023      	str	r3, [r4, #0]
 800eb04:	b016      	add	sp, #88	; 0x58
 800eb06:	bd70      	pop	{r4, r5, r6, pc}

0800eb08 <__smakebuf_r>:
 800eb08:	898b      	ldrh	r3, [r1, #12]
 800eb0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb0c:	079d      	lsls	r5, r3, #30
 800eb0e:	4606      	mov	r6, r0
 800eb10:	460c      	mov	r4, r1
 800eb12:	d507      	bpl.n	800eb24 <__smakebuf_r+0x1c>
 800eb14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb18:	6023      	str	r3, [r4, #0]
 800eb1a:	6123      	str	r3, [r4, #16]
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	6163      	str	r3, [r4, #20]
 800eb20:	b002      	add	sp, #8
 800eb22:	bd70      	pop	{r4, r5, r6, pc}
 800eb24:	466a      	mov	r2, sp
 800eb26:	ab01      	add	r3, sp, #4
 800eb28:	f7ff ffca 	bl	800eac0 <__swhatbuf_r>
 800eb2c:	9900      	ldr	r1, [sp, #0]
 800eb2e:	4605      	mov	r5, r0
 800eb30:	4630      	mov	r0, r6
 800eb32:	f7ff f983 	bl	800de3c <_malloc_r>
 800eb36:	b948      	cbnz	r0, 800eb4c <__smakebuf_r+0x44>
 800eb38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb3c:	059a      	lsls	r2, r3, #22
 800eb3e:	d4ef      	bmi.n	800eb20 <__smakebuf_r+0x18>
 800eb40:	f023 0303 	bic.w	r3, r3, #3
 800eb44:	f043 0302 	orr.w	r3, r3, #2
 800eb48:	81a3      	strh	r3, [r4, #12]
 800eb4a:	e7e3      	b.n	800eb14 <__smakebuf_r+0xc>
 800eb4c:	4b0d      	ldr	r3, [pc, #52]	; (800eb84 <__smakebuf_r+0x7c>)
 800eb4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb50:	89a3      	ldrh	r3, [r4, #12]
 800eb52:	6020      	str	r0, [r4, #0]
 800eb54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb58:	81a3      	strh	r3, [r4, #12]
 800eb5a:	9b00      	ldr	r3, [sp, #0]
 800eb5c:	6120      	str	r0, [r4, #16]
 800eb5e:	6163      	str	r3, [r4, #20]
 800eb60:	9b01      	ldr	r3, [sp, #4]
 800eb62:	b15b      	cbz	r3, 800eb7c <__smakebuf_r+0x74>
 800eb64:	4630      	mov	r0, r6
 800eb66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb6a:	f000 fa7f 	bl	800f06c <_isatty_r>
 800eb6e:	b128      	cbz	r0, 800eb7c <__smakebuf_r+0x74>
 800eb70:	89a3      	ldrh	r3, [r4, #12]
 800eb72:	f023 0303 	bic.w	r3, r3, #3
 800eb76:	f043 0301 	orr.w	r3, r3, #1
 800eb7a:	81a3      	strh	r3, [r4, #12]
 800eb7c:	89a0      	ldrh	r0, [r4, #12]
 800eb7e:	4305      	orrs	r5, r0
 800eb80:	81a5      	strh	r5, [r4, #12]
 800eb82:	e7cd      	b.n	800eb20 <__smakebuf_r+0x18>
 800eb84:	0800e919 	.word	0x0800e919

0800eb88 <memchr>:
 800eb88:	4603      	mov	r3, r0
 800eb8a:	b510      	push	{r4, lr}
 800eb8c:	b2c9      	uxtb	r1, r1
 800eb8e:	4402      	add	r2, r0
 800eb90:	4293      	cmp	r3, r2
 800eb92:	4618      	mov	r0, r3
 800eb94:	d101      	bne.n	800eb9a <memchr+0x12>
 800eb96:	2000      	movs	r0, #0
 800eb98:	e003      	b.n	800eba2 <memchr+0x1a>
 800eb9a:	7804      	ldrb	r4, [r0, #0]
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	428c      	cmp	r4, r1
 800eba0:	d1f6      	bne.n	800eb90 <memchr+0x8>
 800eba2:	bd10      	pop	{r4, pc}

0800eba4 <memmove>:
 800eba4:	4288      	cmp	r0, r1
 800eba6:	b510      	push	{r4, lr}
 800eba8:	eb01 0402 	add.w	r4, r1, r2
 800ebac:	d902      	bls.n	800ebb4 <memmove+0x10>
 800ebae:	4284      	cmp	r4, r0
 800ebb0:	4623      	mov	r3, r4
 800ebb2:	d807      	bhi.n	800ebc4 <memmove+0x20>
 800ebb4:	1e43      	subs	r3, r0, #1
 800ebb6:	42a1      	cmp	r1, r4
 800ebb8:	d008      	beq.n	800ebcc <memmove+0x28>
 800ebba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebc2:	e7f8      	b.n	800ebb6 <memmove+0x12>
 800ebc4:	4601      	mov	r1, r0
 800ebc6:	4402      	add	r2, r0
 800ebc8:	428a      	cmp	r2, r1
 800ebca:	d100      	bne.n	800ebce <memmove+0x2a>
 800ebcc:	bd10      	pop	{r4, pc}
 800ebce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebd6:	e7f7      	b.n	800ebc8 <memmove+0x24>

0800ebd8 <__malloc_lock>:
 800ebd8:	4801      	ldr	r0, [pc, #4]	; (800ebe0 <__malloc_lock+0x8>)
 800ebda:	f7ff bf6f 	b.w	800eabc <__retarget_lock_acquire_recursive>
 800ebde:	bf00      	nop
 800ebe0:	20000bc0 	.word	0x20000bc0

0800ebe4 <__malloc_unlock>:
 800ebe4:	4801      	ldr	r0, [pc, #4]	; (800ebec <__malloc_unlock+0x8>)
 800ebe6:	f7ff bf6a 	b.w	800eabe <__retarget_lock_release_recursive>
 800ebea:	bf00      	nop
 800ebec:	20000bc0 	.word	0x20000bc0

0800ebf0 <_realloc_r>:
 800ebf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebf2:	4607      	mov	r7, r0
 800ebf4:	4614      	mov	r4, r2
 800ebf6:	460e      	mov	r6, r1
 800ebf8:	b921      	cbnz	r1, 800ec04 <_realloc_r+0x14>
 800ebfa:	4611      	mov	r1, r2
 800ebfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ec00:	f7ff b91c 	b.w	800de3c <_malloc_r>
 800ec04:	b922      	cbnz	r2, 800ec10 <_realloc_r+0x20>
 800ec06:	f7ff f8cd 	bl	800dda4 <_free_r>
 800ec0a:	4625      	mov	r5, r4
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec10:	f000 fa4e 	bl	800f0b0 <_malloc_usable_size_r>
 800ec14:	42a0      	cmp	r0, r4
 800ec16:	d20f      	bcs.n	800ec38 <_realloc_r+0x48>
 800ec18:	4621      	mov	r1, r4
 800ec1a:	4638      	mov	r0, r7
 800ec1c:	f7ff f90e 	bl	800de3c <_malloc_r>
 800ec20:	4605      	mov	r5, r0
 800ec22:	2800      	cmp	r0, #0
 800ec24:	d0f2      	beq.n	800ec0c <_realloc_r+0x1c>
 800ec26:	4631      	mov	r1, r6
 800ec28:	4622      	mov	r2, r4
 800ec2a:	f7ff f8a5 	bl	800dd78 <memcpy>
 800ec2e:	4631      	mov	r1, r6
 800ec30:	4638      	mov	r0, r7
 800ec32:	f7ff f8b7 	bl	800dda4 <_free_r>
 800ec36:	e7e9      	b.n	800ec0c <_realloc_r+0x1c>
 800ec38:	4635      	mov	r5, r6
 800ec3a:	e7e7      	b.n	800ec0c <_realloc_r+0x1c>

0800ec3c <__ssputs_r>:
 800ec3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec40:	688e      	ldr	r6, [r1, #8]
 800ec42:	4682      	mov	sl, r0
 800ec44:	429e      	cmp	r6, r3
 800ec46:	460c      	mov	r4, r1
 800ec48:	4690      	mov	r8, r2
 800ec4a:	461f      	mov	r7, r3
 800ec4c:	d838      	bhi.n	800ecc0 <__ssputs_r+0x84>
 800ec4e:	898a      	ldrh	r2, [r1, #12]
 800ec50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec54:	d032      	beq.n	800ecbc <__ssputs_r+0x80>
 800ec56:	6825      	ldr	r5, [r4, #0]
 800ec58:	6909      	ldr	r1, [r1, #16]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	eba5 0901 	sub.w	r9, r5, r1
 800ec60:	6965      	ldr	r5, [r4, #20]
 800ec62:	444b      	add	r3, r9
 800ec64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec6c:	106d      	asrs	r5, r5, #1
 800ec6e:	429d      	cmp	r5, r3
 800ec70:	bf38      	it	cc
 800ec72:	461d      	movcc	r5, r3
 800ec74:	0553      	lsls	r3, r2, #21
 800ec76:	d531      	bpl.n	800ecdc <__ssputs_r+0xa0>
 800ec78:	4629      	mov	r1, r5
 800ec7a:	f7ff f8df 	bl	800de3c <_malloc_r>
 800ec7e:	4606      	mov	r6, r0
 800ec80:	b950      	cbnz	r0, 800ec98 <__ssputs_r+0x5c>
 800ec82:	230c      	movs	r3, #12
 800ec84:	f04f 30ff 	mov.w	r0, #4294967295
 800ec88:	f8ca 3000 	str.w	r3, [sl]
 800ec8c:	89a3      	ldrh	r3, [r4, #12]
 800ec8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec92:	81a3      	strh	r3, [r4, #12]
 800ec94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec98:	464a      	mov	r2, r9
 800ec9a:	6921      	ldr	r1, [r4, #16]
 800ec9c:	f7ff f86c 	bl	800dd78 <memcpy>
 800eca0:	89a3      	ldrh	r3, [r4, #12]
 800eca2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecaa:	81a3      	strh	r3, [r4, #12]
 800ecac:	6126      	str	r6, [r4, #16]
 800ecae:	444e      	add	r6, r9
 800ecb0:	6026      	str	r6, [r4, #0]
 800ecb2:	463e      	mov	r6, r7
 800ecb4:	6165      	str	r5, [r4, #20]
 800ecb6:	eba5 0509 	sub.w	r5, r5, r9
 800ecba:	60a5      	str	r5, [r4, #8]
 800ecbc:	42be      	cmp	r6, r7
 800ecbe:	d900      	bls.n	800ecc2 <__ssputs_r+0x86>
 800ecc0:	463e      	mov	r6, r7
 800ecc2:	4632      	mov	r2, r6
 800ecc4:	4641      	mov	r1, r8
 800ecc6:	6820      	ldr	r0, [r4, #0]
 800ecc8:	f7ff ff6c 	bl	800eba4 <memmove>
 800eccc:	68a3      	ldr	r3, [r4, #8]
 800ecce:	6822      	ldr	r2, [r4, #0]
 800ecd0:	1b9b      	subs	r3, r3, r6
 800ecd2:	4432      	add	r2, r6
 800ecd4:	2000      	movs	r0, #0
 800ecd6:	60a3      	str	r3, [r4, #8]
 800ecd8:	6022      	str	r2, [r4, #0]
 800ecda:	e7db      	b.n	800ec94 <__ssputs_r+0x58>
 800ecdc:	462a      	mov	r2, r5
 800ecde:	f7ff ff87 	bl	800ebf0 <_realloc_r>
 800ece2:	4606      	mov	r6, r0
 800ece4:	2800      	cmp	r0, #0
 800ece6:	d1e1      	bne.n	800ecac <__ssputs_r+0x70>
 800ece8:	4650      	mov	r0, sl
 800ecea:	6921      	ldr	r1, [r4, #16]
 800ecec:	f7ff f85a 	bl	800dda4 <_free_r>
 800ecf0:	e7c7      	b.n	800ec82 <__ssputs_r+0x46>
	...

0800ecf4 <_svfiprintf_r>:
 800ecf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf8:	4698      	mov	r8, r3
 800ecfa:	898b      	ldrh	r3, [r1, #12]
 800ecfc:	4607      	mov	r7, r0
 800ecfe:	061b      	lsls	r3, r3, #24
 800ed00:	460d      	mov	r5, r1
 800ed02:	4614      	mov	r4, r2
 800ed04:	b09d      	sub	sp, #116	; 0x74
 800ed06:	d50e      	bpl.n	800ed26 <_svfiprintf_r+0x32>
 800ed08:	690b      	ldr	r3, [r1, #16]
 800ed0a:	b963      	cbnz	r3, 800ed26 <_svfiprintf_r+0x32>
 800ed0c:	2140      	movs	r1, #64	; 0x40
 800ed0e:	f7ff f895 	bl	800de3c <_malloc_r>
 800ed12:	6028      	str	r0, [r5, #0]
 800ed14:	6128      	str	r0, [r5, #16]
 800ed16:	b920      	cbnz	r0, 800ed22 <_svfiprintf_r+0x2e>
 800ed18:	230c      	movs	r3, #12
 800ed1a:	603b      	str	r3, [r7, #0]
 800ed1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed20:	e0d1      	b.n	800eec6 <_svfiprintf_r+0x1d2>
 800ed22:	2340      	movs	r3, #64	; 0x40
 800ed24:	616b      	str	r3, [r5, #20]
 800ed26:	2300      	movs	r3, #0
 800ed28:	9309      	str	r3, [sp, #36]	; 0x24
 800ed2a:	2320      	movs	r3, #32
 800ed2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed30:	2330      	movs	r3, #48	; 0x30
 800ed32:	f04f 0901 	mov.w	r9, #1
 800ed36:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eee0 <_svfiprintf_r+0x1ec>
 800ed3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed42:	4623      	mov	r3, r4
 800ed44:	469a      	mov	sl, r3
 800ed46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed4a:	b10a      	cbz	r2, 800ed50 <_svfiprintf_r+0x5c>
 800ed4c:	2a25      	cmp	r2, #37	; 0x25
 800ed4e:	d1f9      	bne.n	800ed44 <_svfiprintf_r+0x50>
 800ed50:	ebba 0b04 	subs.w	fp, sl, r4
 800ed54:	d00b      	beq.n	800ed6e <_svfiprintf_r+0x7a>
 800ed56:	465b      	mov	r3, fp
 800ed58:	4622      	mov	r2, r4
 800ed5a:	4629      	mov	r1, r5
 800ed5c:	4638      	mov	r0, r7
 800ed5e:	f7ff ff6d 	bl	800ec3c <__ssputs_r>
 800ed62:	3001      	adds	r0, #1
 800ed64:	f000 80aa 	beq.w	800eebc <_svfiprintf_r+0x1c8>
 800ed68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed6a:	445a      	add	r2, fp
 800ed6c:	9209      	str	r2, [sp, #36]	; 0x24
 800ed6e:	f89a 3000 	ldrb.w	r3, [sl]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	f000 80a2 	beq.w	800eebc <_svfiprintf_r+0x1c8>
 800ed78:	2300      	movs	r3, #0
 800ed7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed82:	f10a 0a01 	add.w	sl, sl, #1
 800ed86:	9304      	str	r3, [sp, #16]
 800ed88:	9307      	str	r3, [sp, #28]
 800ed8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed8e:	931a      	str	r3, [sp, #104]	; 0x68
 800ed90:	4654      	mov	r4, sl
 800ed92:	2205      	movs	r2, #5
 800ed94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed98:	4851      	ldr	r0, [pc, #324]	; (800eee0 <_svfiprintf_r+0x1ec>)
 800ed9a:	f7ff fef5 	bl	800eb88 <memchr>
 800ed9e:	9a04      	ldr	r2, [sp, #16]
 800eda0:	b9d8      	cbnz	r0, 800edda <_svfiprintf_r+0xe6>
 800eda2:	06d0      	lsls	r0, r2, #27
 800eda4:	bf44      	itt	mi
 800eda6:	2320      	movmi	r3, #32
 800eda8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edac:	0711      	lsls	r1, r2, #28
 800edae:	bf44      	itt	mi
 800edb0:	232b      	movmi	r3, #43	; 0x2b
 800edb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edb6:	f89a 3000 	ldrb.w	r3, [sl]
 800edba:	2b2a      	cmp	r3, #42	; 0x2a
 800edbc:	d015      	beq.n	800edea <_svfiprintf_r+0xf6>
 800edbe:	4654      	mov	r4, sl
 800edc0:	2000      	movs	r0, #0
 800edc2:	f04f 0c0a 	mov.w	ip, #10
 800edc6:	9a07      	ldr	r2, [sp, #28]
 800edc8:	4621      	mov	r1, r4
 800edca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edce:	3b30      	subs	r3, #48	; 0x30
 800edd0:	2b09      	cmp	r3, #9
 800edd2:	d94e      	bls.n	800ee72 <_svfiprintf_r+0x17e>
 800edd4:	b1b0      	cbz	r0, 800ee04 <_svfiprintf_r+0x110>
 800edd6:	9207      	str	r2, [sp, #28]
 800edd8:	e014      	b.n	800ee04 <_svfiprintf_r+0x110>
 800edda:	eba0 0308 	sub.w	r3, r0, r8
 800edde:	fa09 f303 	lsl.w	r3, r9, r3
 800ede2:	4313      	orrs	r3, r2
 800ede4:	46a2      	mov	sl, r4
 800ede6:	9304      	str	r3, [sp, #16]
 800ede8:	e7d2      	b.n	800ed90 <_svfiprintf_r+0x9c>
 800edea:	9b03      	ldr	r3, [sp, #12]
 800edec:	1d19      	adds	r1, r3, #4
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	9103      	str	r1, [sp, #12]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	bfbb      	ittet	lt
 800edf6:	425b      	neglt	r3, r3
 800edf8:	f042 0202 	orrlt.w	r2, r2, #2
 800edfc:	9307      	strge	r3, [sp, #28]
 800edfe:	9307      	strlt	r3, [sp, #28]
 800ee00:	bfb8      	it	lt
 800ee02:	9204      	strlt	r2, [sp, #16]
 800ee04:	7823      	ldrb	r3, [r4, #0]
 800ee06:	2b2e      	cmp	r3, #46	; 0x2e
 800ee08:	d10c      	bne.n	800ee24 <_svfiprintf_r+0x130>
 800ee0a:	7863      	ldrb	r3, [r4, #1]
 800ee0c:	2b2a      	cmp	r3, #42	; 0x2a
 800ee0e:	d135      	bne.n	800ee7c <_svfiprintf_r+0x188>
 800ee10:	9b03      	ldr	r3, [sp, #12]
 800ee12:	3402      	adds	r4, #2
 800ee14:	1d1a      	adds	r2, r3, #4
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	9203      	str	r2, [sp, #12]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	bfb8      	it	lt
 800ee1e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee22:	9305      	str	r3, [sp, #20]
 800ee24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eef0 <_svfiprintf_r+0x1fc>
 800ee28:	2203      	movs	r2, #3
 800ee2a:	4650      	mov	r0, sl
 800ee2c:	7821      	ldrb	r1, [r4, #0]
 800ee2e:	f7ff feab 	bl	800eb88 <memchr>
 800ee32:	b140      	cbz	r0, 800ee46 <_svfiprintf_r+0x152>
 800ee34:	2340      	movs	r3, #64	; 0x40
 800ee36:	eba0 000a 	sub.w	r0, r0, sl
 800ee3a:	fa03 f000 	lsl.w	r0, r3, r0
 800ee3e:	9b04      	ldr	r3, [sp, #16]
 800ee40:	3401      	adds	r4, #1
 800ee42:	4303      	orrs	r3, r0
 800ee44:	9304      	str	r3, [sp, #16]
 800ee46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee4a:	2206      	movs	r2, #6
 800ee4c:	4825      	ldr	r0, [pc, #148]	; (800eee4 <_svfiprintf_r+0x1f0>)
 800ee4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee52:	f7ff fe99 	bl	800eb88 <memchr>
 800ee56:	2800      	cmp	r0, #0
 800ee58:	d038      	beq.n	800eecc <_svfiprintf_r+0x1d8>
 800ee5a:	4b23      	ldr	r3, [pc, #140]	; (800eee8 <_svfiprintf_r+0x1f4>)
 800ee5c:	bb1b      	cbnz	r3, 800eea6 <_svfiprintf_r+0x1b2>
 800ee5e:	9b03      	ldr	r3, [sp, #12]
 800ee60:	3307      	adds	r3, #7
 800ee62:	f023 0307 	bic.w	r3, r3, #7
 800ee66:	3308      	adds	r3, #8
 800ee68:	9303      	str	r3, [sp, #12]
 800ee6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee6c:	4433      	add	r3, r6
 800ee6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee70:	e767      	b.n	800ed42 <_svfiprintf_r+0x4e>
 800ee72:	460c      	mov	r4, r1
 800ee74:	2001      	movs	r0, #1
 800ee76:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee7a:	e7a5      	b.n	800edc8 <_svfiprintf_r+0xd4>
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	f04f 0c0a 	mov.w	ip, #10
 800ee82:	4619      	mov	r1, r3
 800ee84:	3401      	adds	r4, #1
 800ee86:	9305      	str	r3, [sp, #20]
 800ee88:	4620      	mov	r0, r4
 800ee8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee8e:	3a30      	subs	r2, #48	; 0x30
 800ee90:	2a09      	cmp	r2, #9
 800ee92:	d903      	bls.n	800ee9c <_svfiprintf_r+0x1a8>
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d0c5      	beq.n	800ee24 <_svfiprintf_r+0x130>
 800ee98:	9105      	str	r1, [sp, #20]
 800ee9a:	e7c3      	b.n	800ee24 <_svfiprintf_r+0x130>
 800ee9c:	4604      	mov	r4, r0
 800ee9e:	2301      	movs	r3, #1
 800eea0:	fb0c 2101 	mla	r1, ip, r1, r2
 800eea4:	e7f0      	b.n	800ee88 <_svfiprintf_r+0x194>
 800eea6:	ab03      	add	r3, sp, #12
 800eea8:	9300      	str	r3, [sp, #0]
 800eeaa:	462a      	mov	r2, r5
 800eeac:	4638      	mov	r0, r7
 800eeae:	4b0f      	ldr	r3, [pc, #60]	; (800eeec <_svfiprintf_r+0x1f8>)
 800eeb0:	a904      	add	r1, sp, #16
 800eeb2:	f3af 8000 	nop.w
 800eeb6:	1c42      	adds	r2, r0, #1
 800eeb8:	4606      	mov	r6, r0
 800eeba:	d1d6      	bne.n	800ee6a <_svfiprintf_r+0x176>
 800eebc:	89ab      	ldrh	r3, [r5, #12]
 800eebe:	065b      	lsls	r3, r3, #25
 800eec0:	f53f af2c 	bmi.w	800ed1c <_svfiprintf_r+0x28>
 800eec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eec6:	b01d      	add	sp, #116	; 0x74
 800eec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eecc:	ab03      	add	r3, sp, #12
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	462a      	mov	r2, r5
 800eed2:	4638      	mov	r0, r7
 800eed4:	4b05      	ldr	r3, [pc, #20]	; (800eeec <_svfiprintf_r+0x1f8>)
 800eed6:	a904      	add	r1, sp, #16
 800eed8:	f7ff f9d2 	bl	800e280 <_printf_i>
 800eedc:	e7eb      	b.n	800eeb6 <_svfiprintf_r+0x1c2>
 800eede:	bf00      	nop
 800eee0:	0800f8b8 	.word	0x0800f8b8
 800eee4:	0800f8c2 	.word	0x0800f8c2
 800eee8:	00000000 	.word	0x00000000
 800eeec:	0800ec3d 	.word	0x0800ec3d
 800eef0:	0800f8be 	.word	0x0800f8be

0800eef4 <_raise_r>:
 800eef4:	291f      	cmp	r1, #31
 800eef6:	b538      	push	{r3, r4, r5, lr}
 800eef8:	4604      	mov	r4, r0
 800eefa:	460d      	mov	r5, r1
 800eefc:	d904      	bls.n	800ef08 <_raise_r+0x14>
 800eefe:	2316      	movs	r3, #22
 800ef00:	6003      	str	r3, [r0, #0]
 800ef02:	f04f 30ff 	mov.w	r0, #4294967295
 800ef06:	bd38      	pop	{r3, r4, r5, pc}
 800ef08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef0a:	b112      	cbz	r2, 800ef12 <_raise_r+0x1e>
 800ef0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef10:	b94b      	cbnz	r3, 800ef26 <_raise_r+0x32>
 800ef12:	4620      	mov	r0, r4
 800ef14:	f000 f830 	bl	800ef78 <_getpid_r>
 800ef18:	462a      	mov	r2, r5
 800ef1a:	4601      	mov	r1, r0
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef22:	f000 b817 	b.w	800ef54 <_kill_r>
 800ef26:	2b01      	cmp	r3, #1
 800ef28:	d00a      	beq.n	800ef40 <_raise_r+0x4c>
 800ef2a:	1c59      	adds	r1, r3, #1
 800ef2c:	d103      	bne.n	800ef36 <_raise_r+0x42>
 800ef2e:	2316      	movs	r3, #22
 800ef30:	6003      	str	r3, [r0, #0]
 800ef32:	2001      	movs	r0, #1
 800ef34:	e7e7      	b.n	800ef06 <_raise_r+0x12>
 800ef36:	2400      	movs	r4, #0
 800ef38:	4628      	mov	r0, r5
 800ef3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef3e:	4798      	blx	r3
 800ef40:	2000      	movs	r0, #0
 800ef42:	e7e0      	b.n	800ef06 <_raise_r+0x12>

0800ef44 <raise>:
 800ef44:	4b02      	ldr	r3, [pc, #8]	; (800ef50 <raise+0xc>)
 800ef46:	4601      	mov	r1, r0
 800ef48:	6818      	ldr	r0, [r3, #0]
 800ef4a:	f7ff bfd3 	b.w	800eef4 <_raise_r>
 800ef4e:	bf00      	nop
 800ef50:	2000004c 	.word	0x2000004c

0800ef54 <_kill_r>:
 800ef54:	b538      	push	{r3, r4, r5, lr}
 800ef56:	2300      	movs	r3, #0
 800ef58:	4d06      	ldr	r5, [pc, #24]	; (800ef74 <_kill_r+0x20>)
 800ef5a:	4604      	mov	r4, r0
 800ef5c:	4608      	mov	r0, r1
 800ef5e:	4611      	mov	r1, r2
 800ef60:	602b      	str	r3, [r5, #0]
 800ef62:	f7f9 fc16 	bl	8008792 <_kill>
 800ef66:	1c43      	adds	r3, r0, #1
 800ef68:	d102      	bne.n	800ef70 <_kill_r+0x1c>
 800ef6a:	682b      	ldr	r3, [r5, #0]
 800ef6c:	b103      	cbz	r3, 800ef70 <_kill_r+0x1c>
 800ef6e:	6023      	str	r3, [r4, #0]
 800ef70:	bd38      	pop	{r3, r4, r5, pc}
 800ef72:	bf00      	nop
 800ef74:	20000bc8 	.word	0x20000bc8

0800ef78 <_getpid_r>:
 800ef78:	f7f9 bc04 	b.w	8008784 <_getpid>

0800ef7c <__sread>:
 800ef7c:	b510      	push	{r4, lr}
 800ef7e:	460c      	mov	r4, r1
 800ef80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef84:	f000 f89c 	bl	800f0c0 <_read_r>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	bfab      	itete	ge
 800ef8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef8e:	89a3      	ldrhlt	r3, [r4, #12]
 800ef90:	181b      	addge	r3, r3, r0
 800ef92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef96:	bfac      	ite	ge
 800ef98:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef9a:	81a3      	strhlt	r3, [r4, #12]
 800ef9c:	bd10      	pop	{r4, pc}

0800ef9e <__swrite>:
 800ef9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa2:	461f      	mov	r7, r3
 800efa4:	898b      	ldrh	r3, [r1, #12]
 800efa6:	4605      	mov	r5, r0
 800efa8:	05db      	lsls	r3, r3, #23
 800efaa:	460c      	mov	r4, r1
 800efac:	4616      	mov	r6, r2
 800efae:	d505      	bpl.n	800efbc <__swrite+0x1e>
 800efb0:	2302      	movs	r3, #2
 800efb2:	2200      	movs	r2, #0
 800efb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efb8:	f000 f868 	bl	800f08c <_lseek_r>
 800efbc:	89a3      	ldrh	r3, [r4, #12]
 800efbe:	4632      	mov	r2, r6
 800efc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800efc4:	81a3      	strh	r3, [r4, #12]
 800efc6:	4628      	mov	r0, r5
 800efc8:	463b      	mov	r3, r7
 800efca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efd2:	f000 b817 	b.w	800f004 <_write_r>

0800efd6 <__sseek>:
 800efd6:	b510      	push	{r4, lr}
 800efd8:	460c      	mov	r4, r1
 800efda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efde:	f000 f855 	bl	800f08c <_lseek_r>
 800efe2:	1c43      	adds	r3, r0, #1
 800efe4:	89a3      	ldrh	r3, [r4, #12]
 800efe6:	bf15      	itete	ne
 800efe8:	6560      	strne	r0, [r4, #84]	; 0x54
 800efea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800efee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eff2:	81a3      	strheq	r3, [r4, #12]
 800eff4:	bf18      	it	ne
 800eff6:	81a3      	strhne	r3, [r4, #12]
 800eff8:	bd10      	pop	{r4, pc}

0800effa <__sclose>:
 800effa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800effe:	f000 b813 	b.w	800f028 <_close_r>
	...

0800f004 <_write_r>:
 800f004:	b538      	push	{r3, r4, r5, lr}
 800f006:	4604      	mov	r4, r0
 800f008:	4608      	mov	r0, r1
 800f00a:	4611      	mov	r1, r2
 800f00c:	2200      	movs	r2, #0
 800f00e:	4d05      	ldr	r5, [pc, #20]	; (800f024 <_write_r+0x20>)
 800f010:	602a      	str	r2, [r5, #0]
 800f012:	461a      	mov	r2, r3
 800f014:	f7f9 fbf4 	bl	8008800 <_write>
 800f018:	1c43      	adds	r3, r0, #1
 800f01a:	d102      	bne.n	800f022 <_write_r+0x1e>
 800f01c:	682b      	ldr	r3, [r5, #0]
 800f01e:	b103      	cbz	r3, 800f022 <_write_r+0x1e>
 800f020:	6023      	str	r3, [r4, #0]
 800f022:	bd38      	pop	{r3, r4, r5, pc}
 800f024:	20000bc8 	.word	0x20000bc8

0800f028 <_close_r>:
 800f028:	b538      	push	{r3, r4, r5, lr}
 800f02a:	2300      	movs	r3, #0
 800f02c:	4d05      	ldr	r5, [pc, #20]	; (800f044 <_close_r+0x1c>)
 800f02e:	4604      	mov	r4, r0
 800f030:	4608      	mov	r0, r1
 800f032:	602b      	str	r3, [r5, #0]
 800f034:	f7f9 fc00 	bl	8008838 <_close>
 800f038:	1c43      	adds	r3, r0, #1
 800f03a:	d102      	bne.n	800f042 <_close_r+0x1a>
 800f03c:	682b      	ldr	r3, [r5, #0]
 800f03e:	b103      	cbz	r3, 800f042 <_close_r+0x1a>
 800f040:	6023      	str	r3, [r4, #0]
 800f042:	bd38      	pop	{r3, r4, r5, pc}
 800f044:	20000bc8 	.word	0x20000bc8

0800f048 <_fstat_r>:
 800f048:	b538      	push	{r3, r4, r5, lr}
 800f04a:	2300      	movs	r3, #0
 800f04c:	4d06      	ldr	r5, [pc, #24]	; (800f068 <_fstat_r+0x20>)
 800f04e:	4604      	mov	r4, r0
 800f050:	4608      	mov	r0, r1
 800f052:	4611      	mov	r1, r2
 800f054:	602b      	str	r3, [r5, #0]
 800f056:	f7f9 fbfa 	bl	800884e <_fstat>
 800f05a:	1c43      	adds	r3, r0, #1
 800f05c:	d102      	bne.n	800f064 <_fstat_r+0x1c>
 800f05e:	682b      	ldr	r3, [r5, #0]
 800f060:	b103      	cbz	r3, 800f064 <_fstat_r+0x1c>
 800f062:	6023      	str	r3, [r4, #0]
 800f064:	bd38      	pop	{r3, r4, r5, pc}
 800f066:	bf00      	nop
 800f068:	20000bc8 	.word	0x20000bc8

0800f06c <_isatty_r>:
 800f06c:	b538      	push	{r3, r4, r5, lr}
 800f06e:	2300      	movs	r3, #0
 800f070:	4d05      	ldr	r5, [pc, #20]	; (800f088 <_isatty_r+0x1c>)
 800f072:	4604      	mov	r4, r0
 800f074:	4608      	mov	r0, r1
 800f076:	602b      	str	r3, [r5, #0]
 800f078:	f7f9 fbf8 	bl	800886c <_isatty>
 800f07c:	1c43      	adds	r3, r0, #1
 800f07e:	d102      	bne.n	800f086 <_isatty_r+0x1a>
 800f080:	682b      	ldr	r3, [r5, #0]
 800f082:	b103      	cbz	r3, 800f086 <_isatty_r+0x1a>
 800f084:	6023      	str	r3, [r4, #0]
 800f086:	bd38      	pop	{r3, r4, r5, pc}
 800f088:	20000bc8 	.word	0x20000bc8

0800f08c <_lseek_r>:
 800f08c:	b538      	push	{r3, r4, r5, lr}
 800f08e:	4604      	mov	r4, r0
 800f090:	4608      	mov	r0, r1
 800f092:	4611      	mov	r1, r2
 800f094:	2200      	movs	r2, #0
 800f096:	4d05      	ldr	r5, [pc, #20]	; (800f0ac <_lseek_r+0x20>)
 800f098:	602a      	str	r2, [r5, #0]
 800f09a:	461a      	mov	r2, r3
 800f09c:	f7f9 fbf0 	bl	8008880 <_lseek>
 800f0a0:	1c43      	adds	r3, r0, #1
 800f0a2:	d102      	bne.n	800f0aa <_lseek_r+0x1e>
 800f0a4:	682b      	ldr	r3, [r5, #0]
 800f0a6:	b103      	cbz	r3, 800f0aa <_lseek_r+0x1e>
 800f0a8:	6023      	str	r3, [r4, #0]
 800f0aa:	bd38      	pop	{r3, r4, r5, pc}
 800f0ac:	20000bc8 	.word	0x20000bc8

0800f0b0 <_malloc_usable_size_r>:
 800f0b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0b4:	1f18      	subs	r0, r3, #4
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	bfbc      	itt	lt
 800f0ba:	580b      	ldrlt	r3, [r1, r0]
 800f0bc:	18c0      	addlt	r0, r0, r3
 800f0be:	4770      	bx	lr

0800f0c0 <_read_r>:
 800f0c0:	b538      	push	{r3, r4, r5, lr}
 800f0c2:	4604      	mov	r4, r0
 800f0c4:	4608      	mov	r0, r1
 800f0c6:	4611      	mov	r1, r2
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	4d05      	ldr	r5, [pc, #20]	; (800f0e0 <_read_r+0x20>)
 800f0cc:	602a      	str	r2, [r5, #0]
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	f7f9 fb79 	bl	80087c6 <_read>
 800f0d4:	1c43      	adds	r3, r0, #1
 800f0d6:	d102      	bne.n	800f0de <_read_r+0x1e>
 800f0d8:	682b      	ldr	r3, [r5, #0]
 800f0da:	b103      	cbz	r3, 800f0de <_read_r+0x1e>
 800f0dc:	6023      	str	r3, [r4, #0]
 800f0de:	bd38      	pop	{r3, r4, r5, pc}
 800f0e0:	20000bc8 	.word	0x20000bc8

0800f0e4 <_init>:
 800f0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0e6:	bf00      	nop
 800f0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0ea:	bc08      	pop	{r3}
 800f0ec:	469e      	mov	lr, r3
 800f0ee:	4770      	bx	lr

0800f0f0 <_fini>:
 800f0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0f2:	bf00      	nop
 800f0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0f6:	bc08      	pop	{r3}
 800f0f8:	469e      	mov	lr, r3
 800f0fa:	4770      	bx	lr
