
f103c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d6c  0800f400  0800f400  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801016c  0801016c  000300b0  2**0
                  CONTENTS
  4 .ARM          00000000  0801016c  0801016c  000300b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801016c  0801016c  000300b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801016c  0801016c  0002016c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010170  08010170  00020170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08010174  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  200000b0  08010224  000300b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a80  08010224  00030a80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ecf5  00000000  00000000  000300d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a68  00000000  00000000  0004edce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00052838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  00053e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b081  00000000  00000000  000555a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018393  00000000  00000000  00070621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa60  00000000  00000000  000889b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a10  00000000  00000000  00118468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800f3e8 	.word	0x0800f3e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	0800f3e8 	.word	0x0800f3e8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__aeabi_f2iz>:
 800062c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000630:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000634:	d30f      	bcc.n	8000656 <__aeabi_f2iz+0x2a>
 8000636:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800063a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800063e:	d90d      	bls.n	800065c <__aeabi_f2iz+0x30>
 8000640:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000648:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800064c:	fa23 f002 	lsr.w	r0, r3, r2
 8000650:	bf18      	it	ne
 8000652:	4240      	negne	r0, r0
 8000654:	4770      	bx	lr
 8000656:	f04f 0000 	mov.w	r0, #0
 800065a:	4770      	bx	lr
 800065c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000660:	d101      	bne.n	8000666 <__aeabi_f2iz+0x3a>
 8000662:	0242      	lsls	r2, r0, #9
 8000664:	d105      	bne.n	8000672 <__aeabi_f2iz+0x46>
 8000666:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800066a:	bf08      	it	eq
 800066c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000670:	4770      	bx	lr
 8000672:	f04f 0000 	mov.w	r0, #0
 8000676:	4770      	bx	lr

08000678 <__popcountsi2>:
 8000678:	0843      	lsrs	r3, r0, #1
 800067a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800067e:	1ac0      	subs	r0, r0, r3
 8000680:	0883      	lsrs	r3, r0, #2
 8000682:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000686:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 800068a:	4418      	add	r0, r3
 800068c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000690:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000694:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000698:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 800069c:	0e00      	lsrs	r0, r0, #24
 800069e:	4770      	bx	lr

080006a0 <SET_COUNT>:
extern uint8_t read_X2[4], read_X1[4], read_X0[4];
extern uint8_t read_Y2[4], read_Y1[4], read_Y0[4];
extern uint8_t read_Z2[4], read_Z1[4], read_Z0[4];


void SET_COUNT(int chip_select) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80006a8:	4a2c      	ldr	r2, [pc, #176]	; (800075c <SET_COUNT+0xbc>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006b0:	4a2b      	ldr	r2, [pc, #172]	; (8000760 <SET_COUNT+0xc0>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006b8:	2201      	movs	r2, #1
 80006ba:	4619      	mov	r1, r3
 80006bc:	f008 fec4 	bl	8009448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 80006c0:	4a26      	ldr	r2, [pc, #152]	; (800075c <SET_COUNT+0xbc>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006c8:	4a25      	ldr	r2, [pc, #148]	; (8000760 <SET_COUNT+0xc0>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006d0:	2200      	movs	r2, #0
 80006d2:	4619      	mov	r1, r3
 80006d4:	f008 feb8 	bl	8009448 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, rm3100_MSB_X_buf, sizeof(rm3100_MSB_X_buf), 1000); //Not need to necessary to send multiple value or register
 80006d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006dc:	2201      	movs	r2, #1
 80006de:	4921      	ldr	r1, [pc, #132]	; (8000764 <SET_COUNT+0xc4>)
 80006e0:	4821      	ldr	r0, [pc, #132]	; (8000768 <SET_COUNT+0xc8>)
 80006e2:	f00b f98b 	bl	800b9fc <HAL_SPI_Transmit>
	//Initiate Count cycle
	HAL_SPI_Transmit(&hspi1, MSB_X_buf, sizeof(MSB_X_buf), 1000);
 80006e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ea:	2201      	movs	r2, #1
 80006ec:	491f      	ldr	r1, [pc, #124]	; (800076c <SET_COUNT+0xcc>)
 80006ee:	481e      	ldr	r0, [pc, #120]	; (8000768 <SET_COUNT+0xc8>)
 80006f0:	f00b f984 	bl	800b9fc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_X_buf, sizeof(LSB_X_buf), 1000);
 80006f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f8:	2201      	movs	r2, #1
 80006fa:	491d      	ldr	r1, [pc, #116]	; (8000770 <SET_COUNT+0xd0>)
 80006fc:	481a      	ldr	r0, [pc, #104]	; (8000768 <SET_COUNT+0xc8>)
 80006fe:	f00b f97d 	bl	800b9fc <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Y_buf, sizeof(MSB_Y_buf), 1000);
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	2201      	movs	r2, #1
 8000708:	491a      	ldr	r1, [pc, #104]	; (8000774 <SET_COUNT+0xd4>)
 800070a:	4817      	ldr	r0, [pc, #92]	; (8000768 <SET_COUNT+0xc8>)
 800070c:	f00b f976 	bl	800b9fc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Y_buf, sizeof(LSB_Y_buf), 1000);
 8000710:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000714:	2201      	movs	r2, #1
 8000716:	4918      	ldr	r1, [pc, #96]	; (8000778 <SET_COUNT+0xd8>)
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <SET_COUNT+0xc8>)
 800071a:	f00b f96f 	bl	800b9fc <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Z_buf, sizeof(MSB_Z_buf), 1000);
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	2201      	movs	r2, #1
 8000724:	4915      	ldr	r1, [pc, #84]	; (800077c <SET_COUNT+0xdc>)
 8000726:	4810      	ldr	r0, [pc, #64]	; (8000768 <SET_COUNT+0xc8>)
 8000728:	f00b f968 	bl	800b9fc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Z_buf, sizeof(LSB_Z_buf), 1000);
 800072c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000730:	2201      	movs	r2, #1
 8000732:	4913      	ldr	r1, [pc, #76]	; (8000780 <SET_COUNT+0xe0>)
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <SET_COUNT+0xc8>)
 8000736:	f00b f961 	bl	800b9fc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH);
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <SET_COUNT+0xbc>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000742:	4a07      	ldr	r2, [pc, #28]	; (8000760 <SET_COUNT+0xc0>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800074a:	2201      	movs	r2, #1
 800074c:	4619      	mov	r1, r3
 800074e:	f008 fe7b 	bl	8009448 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000028 	.word	0x20000028
 8000760:	20000038 	.word	0x20000038
 8000764:	20000004 	.word	0x20000004
 8000768:	200006f4 	.word	0x200006f4
 800076c:	200000d0 	.word	0x200000d0
 8000770:	20000008 	.word	0x20000008
 8000774:	200000d4 	.word	0x200000d4
 8000778:	2000000c 	.word	0x2000000c
 800077c:	200000d8 	.word	0x200000d8
 8000780:	20000010 	.word	0x20000010

08000784 <Continuous_Mode>:
//Initiate Continuous Measurements Mode

void Continuous_Mode(int chip_select) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 800078c:	4a1a      	ldr	r2, [pc, #104]	; (80007f8 <Continuous_Mode+0x74>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000794:	4a19      	ldr	r2, [pc, #100]	; (80007fc <Continuous_Mode+0x78>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800079c:	2201      	movs	r2, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	f008 fe52 	bl	8009448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 80007a4:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <Continuous_Mode+0x74>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007ac:	4a13      	ldr	r2, [pc, #76]	; (80007fc <Continuous_Mode+0x78>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	f008 fe46 	bl	8009448 <HAL_GPIO_WritePin>
	//Initiate Continuous Measurements Mode
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_buf, sizeof(rm3100_cmm_buf), 1000);
 80007bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c0:	2201      	movs	r2, #1
 80007c2:	490f      	ldr	r1, [pc, #60]	; (8000800 <Continuous_Mode+0x7c>)
 80007c4:	480f      	ldr	r0, [pc, #60]	; (8000804 <Continuous_Mode+0x80>)
 80007c6:	f00b f919 	bl	800b9fc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_mod_buf, sizeof(rm3100_cmm_mod_buf), 1000);
 80007ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ce:	2201      	movs	r2, #1
 80007d0:	490d      	ldr	r1, [pc, #52]	; (8000808 <Continuous_Mode+0x84>)
 80007d2:	480c      	ldr	r0, [pc, #48]	; (8000804 <Continuous_Mode+0x80>)
 80007d4:	f00b f912 	bl	800b9fc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80007d8:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <Continuous_Mode+0x74>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007e0:	4a06      	ldr	r2, [pc, #24]	; (80007fc <Continuous_Mode+0x78>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4619      	mov	r1, r3
 80007ec:	f008 fe2c 	bl	8009448 <HAL_GPIO_WritePin>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000028 	.word	0x20000028
 80007fc:	20000038 	.word	0x20000038
 8000800:	20000014 	.word	0x20000014
 8000804:	200006f4 	.word	0x200006f4
 8000808:	20000018 	.word	0x20000018

0800080c <TMRC_Mode>:
//Initiate Time Measurements and Rate Control

void TMRC_Mode(int chip_select) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8000814:	4a1a      	ldr	r2, [pc, #104]	; (8000880 <TMRC_Mode+0x74>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800081c:	4a19      	ldr	r2, [pc, #100]	; (8000884 <TMRC_Mode+0x78>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000824:	2201      	movs	r2, #1
 8000826:	4619      	mov	r1, r3
 8000828:	f008 fe0e 	bl	8009448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 800082c:	4a14      	ldr	r2, [pc, #80]	; (8000880 <TMRC_Mode+0x74>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000834:	4a13      	ldr	r2, [pc, #76]	; (8000884 <TMRC_Mode+0x78>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800083c:	2200      	movs	r2, #0
 800083e:	4619      	mov	r1, r3
 8000840:	f008 fe02 	bl	8009448 <HAL_GPIO_WritePin>
	//initiate Time Measurements and Reset Control
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_add_buf, sizeof(rm3100_tmrc_add_buf), 1000);
 8000844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000848:	2201      	movs	r2, #1
 800084a:	490f      	ldr	r1, [pc, #60]	; (8000888 <TMRC_Mode+0x7c>)
 800084c:	480f      	ldr	r0, [pc, #60]	; (800088c <TMRC_Mode+0x80>)
 800084e:	f00b f8d5 	bl	800b9fc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_Val_buf, sizeof(rm3100_tmrc_Val_buf), 1000);
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	2201      	movs	r2, #1
 8000858:	490d      	ldr	r1, [pc, #52]	; (8000890 <TMRC_Mode+0x84>)
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <TMRC_Mode+0x80>)
 800085c:	f00b f8ce 	bl	800b9fc <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_read_buf, sizeof(rm3100_tmrc_read_buf),
//			1000);
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <TMRC_Mode+0x74>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <TMRC_Mode+0x78>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000870:	2201      	movs	r2, #1
 8000872:	4619      	mov	r1, r3
 8000874:	f008 fde8 	bl	8009448 <HAL_GPIO_WritePin>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000028 	.word	0x20000028
 8000884:	20000038 	.word	0x20000038
 8000888:	2000001c 	.word	0x2000001c
 800088c:	200006f4 	.word	0x200006f4
 8000890:	20000020 	.word	0x20000020

08000894 <Mea_Result>:

//Read Measurements Results
void Mea_Result(int chip_select) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 800089c:	4a3f      	ldr	r2, [pc, #252]	; (800099c <Mea_Result+0x108>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008a4:	4a3e      	ldr	r2, [pc, #248]	; (80009a0 <Mea_Result+0x10c>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ac:	2201      	movs	r2, #1
 80008ae:	4619      	mov	r1, r3
 80008b0:	f008 fdca 	bl	8009448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 80008b4:	4a39      	ldr	r2, [pc, #228]	; (800099c <Mea_Result+0x108>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008bc:	4a38      	ldr	r2, [pc, #224]	; (80009a0 <Mea_Result+0x10c>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008c4:	2200      	movs	r2, #0
 80008c6:	4619      	mov	r1, r3
 80008c8:	f008 fdbe 	bl	8009448 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, MRRW2_X_buf, sizeof(MRRW2_X_buf), 1000);
 80008cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d0:	2201      	movs	r2, #1
 80008d2:	4934      	ldr	r1, [pc, #208]	; (80009a4 <Mea_Result+0x110>)
 80008d4:	4834      	ldr	r0, [pc, #208]	; (80009a8 <Mea_Result+0x114>)
 80008d6:	f00b f891 	bl	800b9fc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &read_X2[chip_select], sizeof(read_X2[chip_select]), 1000);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a33      	ldr	r2, [pc, #204]	; (80009ac <Mea_Result+0x118>)
 80008de:	1899      	adds	r1, r3, r2
 80008e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e4:	2201      	movs	r2, #1
 80008e6:	4830      	ldr	r0, [pc, #192]	; (80009a8 <Mea_Result+0x114>)
 80008e8:	f00b f9cc 	bl	800bc84 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X1[chip_select], sizeof(read_X1[chip_select]), 1000);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a30      	ldr	r2, [pc, #192]	; (80009b0 <Mea_Result+0x11c>)
 80008f0:	1899      	adds	r1, r3, r2
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	2201      	movs	r2, #1
 80008f8:	482b      	ldr	r0, [pc, #172]	; (80009a8 <Mea_Result+0x114>)
 80008fa:	f00b f9c3 	bl	800bc84 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X0[chip_select], sizeof(read_X0[chip_select]), 1000);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a2c      	ldr	r2, [pc, #176]	; (80009b4 <Mea_Result+0x120>)
 8000902:	1899      	adds	r1, r3, r2
 8000904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000908:	2201      	movs	r2, #1
 800090a:	4827      	ldr	r0, [pc, #156]	; (80009a8 <Mea_Result+0x114>)
 800090c:	f00b f9ba 	bl	800bc84 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y2[chip_select], sizeof(read_Y2[chip_select]), 1000);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a29      	ldr	r2, [pc, #164]	; (80009b8 <Mea_Result+0x124>)
 8000914:	1899      	adds	r1, r3, r2
 8000916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091a:	2201      	movs	r2, #1
 800091c:	4822      	ldr	r0, [pc, #136]	; (80009a8 <Mea_Result+0x114>)
 800091e:	f00b f9b1 	bl	800bc84 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y1[chip_select], sizeof(read_Y1[chip_select]), 1000);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a25      	ldr	r2, [pc, #148]	; (80009bc <Mea_Result+0x128>)
 8000926:	1899      	adds	r1, r3, r2
 8000928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092c:	2201      	movs	r2, #1
 800092e:	481e      	ldr	r0, [pc, #120]	; (80009a8 <Mea_Result+0x114>)
 8000930:	f00b f9a8 	bl	800bc84 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y0[chip_select], sizeof(read_Y0[chip_select]), 1000);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <Mea_Result+0x12c>)
 8000938:	1899      	adds	r1, r3, r2
 800093a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093e:	2201      	movs	r2, #1
 8000940:	4819      	ldr	r0, [pc, #100]	; (80009a8 <Mea_Result+0x114>)
 8000942:	f00b f99f 	bl	800bc84 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z2[chip_select], sizeof(read_Z2[chip_select]), 1000);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a1e      	ldr	r2, [pc, #120]	; (80009c4 <Mea_Result+0x130>)
 800094a:	1899      	adds	r1, r3, r2
 800094c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000950:	2201      	movs	r2, #1
 8000952:	4815      	ldr	r0, [pc, #84]	; (80009a8 <Mea_Result+0x114>)
 8000954:	f00b f996 	bl	800bc84 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z1[chip_select], sizeof(read_Z1[chip_select]), 1000);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <Mea_Result+0x134>)
 800095c:	1899      	adds	r1, r3, r2
 800095e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000962:	2201      	movs	r2, #1
 8000964:	4810      	ldr	r0, [pc, #64]	; (80009a8 <Mea_Result+0x114>)
 8000966:	f00b f98d 	bl	800bc84 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z0[chip_select], sizeof(read_Z0[chip_select]), 1000);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a17      	ldr	r2, [pc, #92]	; (80009cc <Mea_Result+0x138>)
 800096e:	1899      	adds	r1, r3, r2
 8000970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000974:	2201      	movs	r2, #1
 8000976:	480c      	ldr	r0, [pc, #48]	; (80009a8 <Mea_Result+0x114>)
 8000978:	f00b f984 	bl	800bc84 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 800097c:	4a07      	ldr	r2, [pc, #28]	; (800099c <Mea_Result+0x108>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000984:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <Mea_Result+0x10c>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800098c:	2201      	movs	r2, #1
 800098e:	4619      	mov	r1, r3
 8000990:	f008 fd5a 	bl	8009448 <HAL_GPIO_WritePin>
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000028 	.word	0x20000028
 80009a0:	20000038 	.word	0x20000038
 80009a4:	20000024 	.word	0x20000024
 80009a8:	200006f4 	.word	0x200006f4
 80009ac:	20000328 	.word	0x20000328
 80009b0:	200002e8 	.word	0x200002e8
 80009b4:	2000033c 	.word	0x2000033c
 80009b8:	2000035c 	.word	0x2000035c
 80009bc:	20000280 	.word	0x20000280
 80009c0:	20000354 	.word	0x20000354
 80009c4:	200002ec 	.word	0x200002ec
 80009c8:	200002a4 	.word	0x200002a4
 80009cc:	20000350 	.word	0x20000350

080009d0 <Comb_measurement>:
//    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
//}


//Combine Measurements
void Comb_measurement(int chip_select) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
//    // Get current time from RTC
//    HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
//    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);

    // Combine bytes for X-axis
    mag_X[chip_select] = (read_X2[chip_select] << 16) | (read_X1[chip_select] << 8) | read_X0[chip_select];
 80009d8:	4a9c      	ldr	r2, [pc, #624]	; (8000c4c <Comb_measurement+0x27c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	041a      	lsls	r2, r3, #16
 80009e2:	499b      	ldr	r1, [pc, #620]	; (8000c50 <Comb_measurement+0x280>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	440b      	add	r3, r1
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	4313      	orrs	r3, r2
 80009ee:	4999      	ldr	r1, [pc, #612]	; (8000c54 <Comb_measurement+0x284>)
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	440a      	add	r2, r1
 80009f4:	7812      	ldrb	r2, [r2, #0]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	4a97      	ldr	r2, [pc, #604]	; (8000c58 <Comb_measurement+0x288>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_X[chip_select] = (mag_X[chip_select] & 0x800000) ? (mag_X[chip_select] | 0xFF000000) : mag_X[chip_select];
 8000a02:	4a95      	ldr	r2, [pc, #596]	; (8000c58 <Comb_measurement+0x288>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d007      	beq.n	8000a22 <Comb_measurement+0x52>
 8000a12:	4a91      	ldr	r2, [pc, #580]	; (8000c58 <Comb_measurement+0x288>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000a1e:	4619      	mov	r1, r3
 8000a20:	e004      	b.n	8000a2c <Comb_measurement+0x5c>
 8000a22:	4a8d      	ldr	r2, [pc, #564]	; (8000c58 <Comb_measurement+0x288>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4a8b      	ldr	r2, [pc, #556]	; (8000c5c <Comb_measurement+0x28c>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Combine bytes for Y-axis
    mag_Y[chip_select] = (read_Y2[chip_select] << 16) | (read_Y1[chip_select] << 8) | read_Y0[chip_select];
 8000a34:	4a8a      	ldr	r2, [pc, #552]	; (8000c60 <Comb_measurement+0x290>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	041a      	lsls	r2, r3, #16
 8000a3e:	4989      	ldr	r1, [pc, #548]	; (8000c64 <Comb_measurement+0x294>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	440b      	add	r3, r1
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	4987      	ldr	r1, [pc, #540]	; (8000c68 <Comb_measurement+0x298>)
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	440a      	add	r2, r1
 8000a50:	7812      	ldrb	r2, [r2, #0]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	4a85      	ldr	r2, [pc, #532]	; (8000c6c <Comb_measurement+0x29c>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_Y[chip_select] = (mag_Y[chip_select] & 0x800000) ? (mag_Y[chip_select] | 0xFF000000) : mag_Y[chip_select];
 8000a5e:	4a83      	ldr	r2, [pc, #524]	; (8000c6c <Comb_measurement+0x29c>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d007      	beq.n	8000a7e <Comb_measurement+0xae>
 8000a6e:	4a7f      	ldr	r2, [pc, #508]	; (8000c6c <Comb_measurement+0x29c>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	e004      	b.n	8000a88 <Comb_measurement+0xb8>
 8000a7e:	4a7b      	ldr	r2, [pc, #492]	; (8000c6c <Comb_measurement+0x29c>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a86:	4619      	mov	r1, r3
 8000a88:	4a79      	ldr	r2, [pc, #484]	; (8000c70 <Comb_measurement+0x2a0>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Combine bytes for Z-axis
    mag_Z[chip_select] = (read_Z2[chip_select] << 16) | (read_Z1[chip_select] << 8) | read_Z0[chip_select];
 8000a90:	4a78      	ldr	r2, [pc, #480]	; (8000c74 <Comb_measurement+0x2a4>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	041a      	lsls	r2, r3, #16
 8000a9a:	4977      	ldr	r1, [pc, #476]	; (8000c78 <Comb_measurement+0x2a8>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	440b      	add	r3, r1
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	4975      	ldr	r1, [pc, #468]	; (8000c7c <Comb_measurement+0x2ac>)
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	440a      	add	r2, r1
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4a73      	ldr	r2, [pc, #460]	; (8000c80 <Comb_measurement+0x2b0>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_Z[chip_select] = (mag_Z[chip_select] & 0x800000) ? (mag_Z[chip_select] | 0xFF000000) : mag_Z[chip_select];
 8000aba:	4a71      	ldr	r2, [pc, #452]	; (8000c80 <Comb_measurement+0x2b0>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d007      	beq.n	8000ada <Comb_measurement+0x10a>
 8000aca:	4a6d      	ldr	r2, [pc, #436]	; (8000c80 <Comb_measurement+0x2b0>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	e004      	b.n	8000ae4 <Comb_measurement+0x114>
 8000ada:	4a69      	ldr	r2, [pc, #420]	; (8000c80 <Comb_measurement+0x2b0>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4a67      	ldr	r2, [pc, #412]	; (8000c84 <Comb_measurement+0x2b4>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Calculate magnitude
   // magnitude[chip_select] = sqrt((float)(signed_mag_X[chip_select] * signed_mag_X[chip_select]) + (signed_mag_Y[chip_select] * signed_mag_Y[chip_select]) + (signed_mag_Z[chip_select] * signed_mag_Z[chip_select]));

    // Calculate axis values in float
    X_axis[chip_select] = (float)signed_mag_X[chip_select] / gain;
 8000aec:	4a5b      	ldr	r2, [pc, #364]	; (8000c5c <Comb_measurement+0x28c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fbf5 	bl	80002e4 <__aeabi_i2f>
 8000afa:	4602      	mov	r2, r0
 8000afc:	4b62      	ldr	r3, [pc, #392]	; (8000c88 <Comb_measurement+0x2b8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	4610      	mov	r0, r2
 8000b04:	f7ff fcf6 	bl	80004f4 <__aeabi_fdiv>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4a5f      	ldr	r2, [pc, #380]	; (8000c8c <Comb_measurement+0x2bc>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Y_axis[chip_select] = (float)signed_mag_Y[chip_select] / gain;
 8000b14:	4a56      	ldr	r2, [pc, #344]	; (8000c70 <Comb_measurement+0x2a0>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fbe1 	bl	80002e4 <__aeabi_i2f>
 8000b22:	4602      	mov	r2, r0
 8000b24:	4b58      	ldr	r3, [pc, #352]	; (8000c88 <Comb_measurement+0x2b8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	f7ff fce2 	bl	80004f4 <__aeabi_fdiv>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4619      	mov	r1, r3
 8000b34:	4a56      	ldr	r2, [pc, #344]	; (8000c90 <Comb_measurement+0x2c0>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Z_axis[chip_select] = (float)signed_mag_Z[chip_select] / gain;
 8000b3c:	4a51      	ldr	r2, [pc, #324]	; (8000c84 <Comb_measurement+0x2b4>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fbcd 	bl	80002e4 <__aeabi_i2f>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	4b4e      	ldr	r3, [pc, #312]	; (8000c88 <Comb_measurement+0x2b8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	4610      	mov	r0, r2
 8000b54:	f7ff fcce 	bl	80004f4 <__aeabi_fdiv>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4a4d      	ldr	r2, [pc, #308]	; (8000c94 <Comb_measurement+0x2c4>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    //Converting float axis data in to  integer data
    x_axis[chip_select] = (int)(X_axis[chip_select] * 1000);
 8000b64:	4a49      	ldr	r2, [pc, #292]	; (8000c8c <Comb_measurement+0x2bc>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6c:	494a      	ldr	r1, [pc, #296]	; (8000c98 <Comb_measurement+0x2c8>)
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fc0c 	bl	800038c <__aeabi_fmul>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fd58 	bl	800062c <__aeabi_f2iz>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	b2d9      	uxtb	r1, r3
 8000b80:	4a46      	ldr	r2, [pc, #280]	; (8000c9c <Comb_measurement+0x2cc>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	460a      	mov	r2, r1
 8000b88:	701a      	strb	r2, [r3, #0]
    y_axis[chip_select] = (int)(Y_axis[chip_select] * 1000);
 8000b8a:	4a41      	ldr	r2, [pc, #260]	; (8000c90 <Comb_measurement+0x2c0>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b92:	4941      	ldr	r1, [pc, #260]	; (8000c98 <Comb_measurement+0x2c8>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fbf9 	bl	800038c <__aeabi_fmul>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fd45 	bl	800062c <__aeabi_f2iz>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	b2d9      	uxtb	r1, r3
 8000ba6:	4a3e      	ldr	r2, [pc, #248]	; (8000ca0 <Comb_measurement+0x2d0>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	460a      	mov	r2, r1
 8000bae:	701a      	strb	r2, [r3, #0]
    z_axis[chip_select] = (int)(Z_axis[chip_select] * 1000);
 8000bb0:	4a38      	ldr	r2, [pc, #224]	; (8000c94 <Comb_measurement+0x2c4>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb8:	4937      	ldr	r1, [pc, #220]	; (8000c98 <Comb_measurement+0x2c8>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fbe6 	bl	800038c <__aeabi_fmul>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fd32 	bl	800062c <__aeabi_f2iz>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	b2d9      	uxtb	r1, r3
 8000bcc:	4a35      	ldr	r2, [pc, #212]	; (8000ca4 <Comb_measurement+0x2d4>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	460a      	mov	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]

    data1[counter++]=x_axis[chip_select];
 8000bd6:	4a31      	ldr	r2, [pc, #196]	; (8000c9c <Comb_measurement+0x2cc>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	7818      	ldrb	r0, [r3, #0]
 8000bde:	4b32      	ldr	r3, [pc, #200]	; (8000ca8 <Comb_measurement+0x2d8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	4930      	ldr	r1, [pc, #192]	; (8000ca8 <Comb_measurement+0x2d8>)
 8000be6:	600a      	str	r2, [r1, #0]
 8000be8:	b201      	sxth	r1, r0
 8000bea:	4a30      	ldr	r2, [pc, #192]	; (8000cac <Comb_measurement+0x2dc>)
 8000bec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    data1[counter++]=y_axis[chip_select];
 8000bf0:	4a2b      	ldr	r2, [pc, #172]	; (8000ca0 <Comb_measurement+0x2d0>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	7818      	ldrb	r0, [r3, #0]
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <Comb_measurement+0x2d8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	1c5a      	adds	r2, r3, #1
 8000bfe:	492a      	ldr	r1, [pc, #168]	; (8000ca8 <Comb_measurement+0x2d8>)
 8000c00:	600a      	str	r2, [r1, #0]
 8000c02:	b201      	sxth	r1, r0
 8000c04:	4a29      	ldr	r2, [pc, #164]	; (8000cac <Comb_measurement+0x2dc>)
 8000c06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    data1[counter++]=z_axis[chip_select];
 8000c0a:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <Comb_measurement+0x2d4>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4413      	add	r3, r2
 8000c10:	7818      	ldrb	r0, [r3, #0]
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <Comb_measurement+0x2d8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	4923      	ldr	r1, [pc, #140]	; (8000ca8 <Comb_measurement+0x2d8>)
 8000c1a:	600a      	str	r2, [r1, #0]
 8000c1c:	b201      	sxth	r1, r0
 8000c1e:	4a23      	ldr	r2, [pc, #140]	; (8000cac <Comb_measurement+0x2dc>)
 8000c20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    if(counter +12 > DATA_SIZE){
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <Comb_measurement+0x2d8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	330c      	adds	r3, #12
 8000c2a:	2b64      	cmp	r3, #100	; 0x64
 8000c2c:	d909      	bls.n	8000c42 <Comb_measurement+0x272>
    	 write_to_file("/epdm_re.txt", data1, counter);
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <Comb_measurement+0x2d8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	491d      	ldr	r1, [pc, #116]	; (8000cac <Comb_measurement+0x2dc>)
 8000c36:	481e      	ldr	r0, [pc, #120]	; (8000cb0 <Comb_measurement+0x2e0>)
 8000c38:	f006 fee2 	bl	8007a00 <write_to_file>
    	counter = 0;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <Comb_measurement+0x2d8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
      //  myDebug("%.2f %.2f %.2f %.2f ", X_axis[chip_select],Y_axis[chip_select],Z_axis[chip_select],Magnitude[chip_select]);
//    	myDebug("%.2f", x_axis[chip_select]);
//    	myDebug("%.2f", y_axis[chip_select]);
//    	myDebug("%.2f", z_axis[chip_select]);
//        myDebug("%.2f", Magnitude[chip_select]);
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000328 	.word	0x20000328
 8000c50:	200002e8 	.word	0x200002e8
 8000c54:	2000033c 	.word	0x2000033c
 8000c58:	2000032c 	.word	0x2000032c
 8000c5c:	20000260 	.word	0x20000260
 8000c60:	2000035c 	.word	0x2000035c
 8000c64:	20000280 	.word	0x20000280
 8000c68:	20000354 	.word	0x20000354
 8000c6c:	20000188 	.word	0x20000188
 8000c70:	20000340 	.word	0x20000340
 8000c74:	200002ec 	.word	0x200002ec
 8000c78:	200002a4 	.word	0x200002a4
 8000c7c:	20000350 	.word	0x20000350
 8000c80:	20000284 	.word	0x20000284
 8000c84:	200002d8 	.word	0x200002d8
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	200002c8 	.word	0x200002c8
 8000c90:	200002a8 	.word	0x200002a8
 8000c94:	20000270 	.word	0x20000270
 8000c98:	447a0000 	.word	0x447a0000
 8000c9c:	20000324 	.word	0x20000324
 8000ca0:	20000358 	.word	0x20000358
 8000ca4:	20000184 	.word	0x20000184
 8000ca8:	200000cc 	.word	0x200000cc
 8000cac:	20000198 	.word	0x20000198
 8000cb0:	0800f400 	.word	0x0800f400

08000cb4 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	bf38      	it	cc
 8000cc6:	4613      	movcc	r3, r2
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	bf28      	it	cs
 8000ce4:	4613      	movcs	r3, r2
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	683a      	ldr	r2, [r7, #0]
 8000cfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d02:	6839      	ldr	r1, [r7, #0]
 8000d04:	fb01 f202 	mul.w	r2, r1, r2
 8000d08:	1a9b      	subs	r3, r3, r2
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	1ad3      	subs	r3, r2, r3
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	6839      	ldr	r1, [r7, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ffdf 	bl	8000cf0 <lfs_aligndown>
 8000d32:	4603      	mov	r3, r0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	fab3 f383 	clz	r3, r3
 8000d4c:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr

08000d5a <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	fa93 f3a3 	rbit	r3, r3
 8000d68:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fc7a 	bl	8000678 <__popcountsi2>
 8000d84:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	1ad3      	subs	r3, r2, r3
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8000db0:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ffef 	bl	8000da8 <lfs_fromle32>
 8000dca:	4603      	mov	r3, r0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr

08000dea <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ffee 	bl	8000dd4 <lfs_frombe32>
 8000df8:	4603      	mov	r3, r0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f00d f8e6 	bl	800dfdc <malloc>
 8000e10:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f00d f8e2 	bl	800dfec <free>
#else
    (void)p;
#endif
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	601a      	str	r2, [r3, #0]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68d8      	ldr	r0, [r3, #12]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e60:	461a      	mov	r2, r3
 8000e62:	21ff      	movs	r1, #255	; 0xff
 8000e64:	f00d f8e6 	bl	800e034 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af02      	add	r7, sp, #8
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8000e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e88:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d208      	bcs.n	8000ea8 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8000e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e9a:	441a      	add	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ea0:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	f240 811b 	bls.w	80010de <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8000ea8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000eac:	e11c      	b.n	80010e8 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8000eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eb0:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d03f      	beq.n	8000f38 <lfs_bd_read+0xc0>
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d13a      	bne.n	8000f38 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8000ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d232      	bcs.n	8000f38 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d324      	bcc.n	8000f26 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	6859      	ldr	r1, [r3, #4]
 8000ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee6:	1acb      	subs	r3, r1, r3
 8000ee8:	4413      	add	r3, r2
 8000eea:	4619      	mov	r1, r3
 8000eec:	69b8      	ldr	r0, [r7, #24]
 8000eee:	f7ff fef0 	bl	8000cd2 <lfs_min>
 8000ef2:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	4413      	add	r3, r2
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4619      	mov	r1, r3
 8000f06:	69f8      	ldr	r0, [r7, #28]
 8000f08:	f00d f886 	bl	800e018 <memcpy>

                data += diff;
 8000f0c:	69fa      	ldr	r2, [r7, #28]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	4413      	add	r3, r2
 8000f12:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	4413      	add	r3, r2
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000f1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000f24:	e0db      	b.n	80010de <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	69b8      	ldr	r0, [r7, #24]
 8000f32:	f7ff fece 	bl	8000cd2 <lfs_min>
 8000f36:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d13a      	bne.n	8000fb8 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	4413      	add	r3, r2
        if (block == rcache->block &&
 8000f4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d232      	bcs.n	8000fb8 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d324      	bcc.n	8000fa6 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6859      	ldr	r1, [r3, #4]
 8000f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f66:	1acb      	subs	r3, r1, r3
 8000f68:	4413      	add	r3, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	69b8      	ldr	r0, [r7, #24]
 8000f6e:	f7ff feb0 	bl	8000cd2 <lfs_min>
 8000f72:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000f7e:	1acb      	subs	r3, r1, r3
 8000f80:	4413      	add	r3, r2
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4619      	mov	r1, r3
 8000f86:	69f8      	ldr	r0, [r7, #28]
 8000f88:	f00d f846 	bl	800e018 <memcpy>

                data += diff;
 8000f8c:	69fa      	ldr	r2, [r7, #28]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	4413      	add	r3, r2
 8000f92:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000f94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	4413      	add	r3, r2
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000fa4:	e09b      	b.n	80010de <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	4619      	mov	r1, r3
 8000fb0:	69b8      	ldr	r0, [r7, #24]
 8000fb2:	f7ff fe8e 	bl	8000cd2 <lfs_min>
 8000fb6:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000fb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d336      	bcc.n	800102e <lfs_bd_read+0x1b6>
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000fc4:	695a      	ldr	r2, [r3, #20]
 8000fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fcc:	fb02 f201 	mul.w	r2, r2, r1
 8000fd0:	1a9b      	subs	r3, r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d12b      	bne.n	800102e <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000fda:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000fdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d325      	bcc.n	800102e <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	69b8      	ldr	r0, [r7, #24]
 8000fec:	f7ff fe80 	bl	8000cf0 <lfs_aligndown>
 8000ff0:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ff6:	685c      	ldr	r4, [r3, #4]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001004:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001006:	47a0      	blx	r4
 8001008:	6178      	str	r0, [r7, #20]
            if (err) {
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <lfs_bd_read+0x19c>
                return err;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	e069      	b.n	80010e8 <lfs_bd_read+0x270>
            }

            data += diff;
 8001014:	69fa      	ldr	r2, [r7, #28]
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	4413      	add	r3, r2
 800101a:	61fb      	str	r3, [r7, #28]
            off += diff;
 800101c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	4413      	add	r3, r2
 8001022:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8001024:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 800102c:	e057      	b.n	80010de <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001036:	429a      	cmp	r2, r3
 8001038:	d305      	bcc.n	8001046 <lfs_bd_read+0x1ce>
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <lfs_bd_read+0x278>)
 800103c:	4a2d      	ldr	r2, [pc, #180]	; (80010f4 <lfs_bd_read+0x27c>)
 800103e:	216b      	movs	r1, #107	; 0x6b
 8001040:	482d      	ldr	r0, [pc, #180]	; (80010f8 <lfs_bd_read+0x280>)
 8001042:	f00c ff71 	bl	800df28 <__assert_func>
        rcache->block = block;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800104a:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4619      	mov	r1, r3
 8001054:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001056:	f7ff fe4b 	bl	8000cf0 <lfs_aligndown>
 800105a:	4602      	mov	r2, r0
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8001060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4619      	mov	r1, r3
 800106e:	4610      	mov	r0, r2
 8001070:	f7ff fe52 	bl	8000d18 <lfs_alignup>
 8001074:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	4619      	mov	r1, r3
 800107e:	4610      	mov	r0, r2
 8001080:	f7ff fe27 	bl	8000cd2 <lfs_min>
 8001084:	4602      	mov	r2, r0
                - rcache->off,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800108a:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 8001090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001092:	4619      	mov	r1, r3
 8001094:	4610      	mov	r0, r2
 8001096:	f7ff fe1c 	bl	8000cd2 <lfs_min>
 800109a:	4602      	mov	r2, r0
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010a4:	685c      	ldr	r4, [r3, #4]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6819      	ldr	r1, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	462b      	mov	r3, r5
 80010be:	47a0      	blx	r4
 80010c0:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	dd05      	ble.n	80010d4 <lfs_bd_read+0x25c>
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <lfs_bd_read+0x284>)
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <lfs_bd_read+0x27c>)
 80010cc:	2176      	movs	r1, #118	; 0x76
 80010ce:	480a      	ldr	r0, [pc, #40]	; (80010f8 <lfs_bd_read+0x280>)
 80010d0:	f00c ff2a 	bl	800df28 <__assert_func>
        if (err) {
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <lfs_bd_read+0x266>
            return err;
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	e004      	b.n	80010e8 <lfs_bd_read+0x270>
    while (size > 0) {
 80010de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f47f aee4 	bne.w	8000eae <lfs_bd_read+0x36>
        }
    }

    return 0;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bdb0      	pop	{r4, r5, r7, pc}
 80010f0:	0800f410 	.word	0x0800f410
 80010f4:	0800fefc 	.word	0x0800fefc
 80010f8:	0800f430 	.word	0x0800f430
 80010fc:	0800f444 	.word	0x0800f444

08001100 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b08e      	sub	sp, #56	; 0x38
 8001104:	af04      	add	r7, sp, #16
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800110e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001110:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
 800111a:	e039      	b.n	8001190 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800111c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2108      	movs	r1, #8
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fdd4 	bl	8000cd2 <lfs_min>
 800112a:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	1ad1      	subs	r1, r2, r3
 8001132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	4413      	add	r3, r2
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	9203      	str	r2, [sp, #12]
 800113c:	f107 0210 	add.w	r2, r7, #16
 8001140:	9202      	str	r2, [sp, #8]
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	460b      	mov	r3, r1
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f7ff fe92 	bl	8000e78 <lfs_bd_read>
 8001154:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <lfs_bd_cmp+0x60>
            return res;
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	e01c      	b.n	800119a <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8001160:	6a3a      	ldr	r2, [r7, #32]
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	18d1      	adds	r1, r2, r3
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	4618      	mov	r0, r3
 800116e:	f00c ff45 	bl	800dffc <memcmp>
 8001172:	61b8      	str	r0, [r7, #24]
        if (res) {
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	2b00      	cmp	r3, #0
 800117e:	da01      	bge.n	8001184 <lfs_bd_cmp+0x84>
 8001180:	2301      	movs	r3, #1
 8001182:	e00a      	b.n	800119a <lfs_bd_cmp+0x9a>
 8001184:	2302      	movs	r3, #2
 8001186:	e008      	b.n	800119a <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8001188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	4413      	add	r3, r2
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
 8001190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001194:	429a      	cmp	r2, r3
 8001196:	d3c1      	bcc.n	800111c <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af04      	add	r7, sp, #16
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ba:	d061      	beq.n	8001280 <lfs_bd_flush+0xdc>
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f113 0f02 	cmn.w	r3, #2
 80011c4:	d05c      	beq.n	8001280 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d305      	bcc.n	80011e0 <lfs_bd_flush+0x3c>
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <lfs_bd_flush+0xe8>)
 80011d6:	4a2e      	ldr	r2, [pc, #184]	; (8001290 <lfs_bd_flush+0xec>)
 80011d8:	219e      	movs	r1, #158	; 0x9e
 80011da:	482e      	ldr	r0, [pc, #184]	; (8001294 <lfs_bd_flush+0xf0>)
 80011dc:	f00c fea4 	bl	800df28 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	4619      	mov	r1, r3
 80011ec:	4610      	mov	r0, r2
 80011ee:	f7ff fd93 	bl	8000d18 <lfs_alignup>
 80011f2:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011f8:	689c      	ldr	r4, [r3, #8]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	6819      	ldr	r1, [r3, #0]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	462b      	mov	r3, r5
 8001210:	47a0      	blx	r4
 8001212:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2b00      	cmp	r3, #0
 8001218:	dd05      	ble.n	8001226 <lfs_bd_flush+0x82>
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <lfs_bd_flush+0xf4>)
 800121c:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <lfs_bd_flush+0xec>)
 800121e:	21a2      	movs	r1, #162	; 0xa2
 8001220:	481c      	ldr	r0, [pc, #112]	; (8001294 <lfs_bd_flush+0xf0>)
 8001222:	f00c fe81 	bl	800df28 <__assert_func>
        if (err) {
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <lfs_bd_flush+0x8c>
            return err;
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	e028      	b.n	8001282 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d020      	beq.n	8001278 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f7ff fdf9 	bl	8000e30 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800124a:	69f8      	ldr	r0, [r7, #28]
 800124c:	9003      	str	r0, [sp, #12]
 800124e:	9102      	str	r1, [sp, #8]
 8001250:	9201      	str	r2, [sp, #4]
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	2100      	movs	r1, #0
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff ff50 	bl	8001100 <lfs_bd_cmp>
 8001260:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2b00      	cmp	r3, #0
 8001266:	da01      	bge.n	800126c <lfs_bd_flush+0xc8>
                return res;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	e00a      	b.n	8001282 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8001272:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8001276:	e004      	b.n	8001282 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f7ff fde6 	bl	8000e4c <lfs_cache_zero>
    }

    return 0;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3720      	adds	r7, #32
 8001286:	46bd      	mov	sp, r7
 8001288:	bdb0      	pop	{r4, r5, r7, pc}
 800128a:	bf00      	nop
 800128c:	0800f450 	.word	0x0800f450
 8001290:	0800ff08 	.word	0x0800ff08
 8001294:	0800f430 	.word	0x0800f430
 8001298:	0800f444 	.word	0x0800f444

0800129c <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f7ff fdbf 	bl	8000e30 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f7ff ff73 	bl	80011a4 <lfs_bd_flush>
 80012be:	6178      	str	r0, [r7, #20]
    if (err) {
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <lfs_bd_sync+0x2e>
        return err;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	e011      	b.n	80012ee <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80012d4:	4610      	mov	r0, r2
 80012d6:	4798      	blx	r3
 80012d8:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	dd05      	ble.n	80012ec <lfs_bd_sync+0x50>
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <lfs_bd_sync+0x5c>)
 80012e2:	4a06      	ldr	r2, [pc, #24]	; (80012fc <lfs_bd_sync+0x60>)
 80012e4:	21c8      	movs	r1, #200	; 0xc8
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <lfs_bd_sync+0x64>)
 80012e8:	f00c fe1e 	bl	800df28 <__assert_func>
    return err;
 80012ec:	697b      	ldr	r3, [r7, #20]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	0800f444 	.word	0x0800f444
 80012fc:	0800ff18 	.word	0x0800ff18
 8001300:	0800f430 	.word	0x0800f430

08001304 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8001312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001314:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8001316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001318:	f113 0f02 	cmn.w	r3, #2
 800131c:	d00b      	beq.n	8001336 <lfs_bd_prog+0x32>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001326:	429a      	cmp	r2, r3
 8001328:	d305      	bcc.n	8001336 <lfs_bd_prog+0x32>
 800132a:	4b47      	ldr	r3, [pc, #284]	; (8001448 <lfs_bd_prog+0x144>)
 800132c:	4a47      	ldr	r2, [pc, #284]	; (800144c <lfs_bd_prog+0x148>)
 800132e:	21d3      	movs	r1, #211	; 0xd3
 8001330:	4847      	ldr	r0, [pc, #284]	; (8001450 <lfs_bd_prog+0x14c>)
 8001332:	f00c fdf9 	bl	800df28 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8001336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800133a:	441a      	add	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	429a      	cmp	r2, r3
 8001344:	d977      	bls.n	8001436 <lfs_bd_prog+0x132>
 8001346:	4b43      	ldr	r3, [pc, #268]	; (8001454 <lfs_bd_prog+0x150>)
 8001348:	4a40      	ldr	r2, [pc, #256]	; (800144c <lfs_bd_prog+0x148>)
 800134a:	21d4      	movs	r1, #212	; 0xd4
 800134c:	4840      	ldr	r0, [pc, #256]	; (8001450 <lfs_bd_prog+0x14c>)
 800134e:	f00c fdeb 	bl	800df28 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001358:	429a      	cmp	r2, r3
 800135a:	d151      	bne.n	8001400 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8001360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001362:	429a      	cmp	r2, r3
 8001364:	d34c      	bcc.n	8001400 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	4413      	add	r3, r2
                off >= pcache->off &&
 8001372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001374:	429a      	cmp	r2, r3
 8001376:	d243      	bcs.n	8001400 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800137c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	6859      	ldr	r1, [r3, #4]
 8001382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001384:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8001386:	4413      	add	r3, r2
 8001388:	4619      	mov	r1, r3
 800138a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800138c:	f7ff fca1 	bl	8000cd2 <lfs_min>
 8001390:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800139c:	1acb      	subs	r3, r1, r3
 800139e:	4413      	add	r3, r2
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	69f9      	ldr	r1, [r7, #28]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f00c fe37 	bl	800e018 <memcpy>

            data += diff;
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	4413      	add	r3, r2
 80013b0:	61fb      	str	r3, [r7, #28]
            off += diff;
 80013b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	4413      	add	r3, r2
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 80013ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	6898      	ldr	r0, [r3, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fc70 	bl	8000cb4 <lfs_max>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d126      	bne.n	8001436 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f7ff fed8 	bl	80011a4 <lfs_bd_flush>
 80013f4:	6178      	str	r0, [r7, #20]
                if (err) {
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d01c      	beq.n	8001436 <lfs_bd_prog+0x132>
                    return err;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	e01e      	b.n	800143e <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001408:	d005      	beq.n	8001416 <lfs_bd_prog+0x112>
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <lfs_bd_prog+0x154>)
 800140c:	4a0f      	ldr	r2, [pc, #60]	; (800144c <lfs_bd_prog+0x148>)
 800140e:	21f1      	movs	r1, #241	; 0xf1
 8001410:	480f      	ldr	r0, [pc, #60]	; (8001450 <lfs_bd_prog+0x14c>)
 8001412:	f00c fd89 	bl	800df28 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800141a:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	4619      	mov	r1, r3
 8001424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001426:	f7ff fc63 	bl	8000cf0 <lfs_aligndown>
 800142a:	4602      	mov	r2, r0
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8001436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001438:	2b00      	cmp	r3, #0
 800143a:	d18a      	bne.n	8001352 <lfs_bd_prog+0x4e>
    }

    return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	0800f478 	.word	0x0800f478
 800144c:	0800ff24 	.word	0x0800ff24
 8001450:	0800f430 	.word	0x0800f430
 8001454:	0800f4b4 	.word	0x0800f4b4
 8001458:	0800f4d8 	.word	0x0800f4d8

0800145c <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d305      	bcc.n	800147e <lfs_bd_erase+0x22>
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <lfs_bd_erase+0x54>)
 8001474:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <lfs_bd_erase+0x58>)
 8001476:	21ff      	movs	r1, #255	; 0xff
 8001478:	480f      	ldr	r0, [pc, #60]	; (80014b8 <lfs_bd_erase+0x5c>)
 800147a:	f00c fd55 	bl	800df28 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001488:	6839      	ldr	r1, [r7, #0]
 800148a:	4610      	mov	r0, r2
 800148c:	4798      	blx	r3
 800148e:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	dd06      	ble.n	80014a4 <lfs_bd_erase+0x48>
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <lfs_bd_erase+0x60>)
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <lfs_bd_erase+0x58>)
 800149a:	f240 1101 	movw	r1, #257	; 0x101
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <lfs_bd_erase+0x5c>)
 80014a0:	f00c fd42 	bl	800df28 <__assert_func>
    return err;
 80014a4:	68fb      	ldr	r3, [r7, #12]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	0800f410 	.word	0x0800f410
 80014b4:	0800ff30 	.word	0x0800ff30
 80014b8:	0800f430 	.word	0x0800f430
 80014bc:	0800f444 	.word	0x0800f444

080014c0 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3304      	adds	r3, #4
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f8:	d005      	beq.n	8001506 <lfs_pair_isnull+0x1e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3304      	adds	r3, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d101      	bne.n	800150a <lfs_pair_isnull+0x22>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <lfs_pair_isnull+0x24>
 800150a:	2300      	movs	r3, #0
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	b2db      	uxtb	r3, r3
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d017      	beq.n	8001562 <lfs_pair_cmp+0x46>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3304      	adds	r3, #4
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	3304      	adds	r3, #4
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d00f      	beq.n	8001562 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	3304      	adds	r3, #4
 800154a:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800154c:	429a      	cmp	r2, r3
 800154e:	d008      	beq.n	8001562 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3304      	adds	r3, #4
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800155a:	429a      	cmp	r2, r3
 800155c:	d001      	beq.n	8001562 <lfs_pair_cmp+0x46>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <lfs_pair_cmp+0x48>
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d107      	bne.n	8001594 <lfs_pair_sync+0x26>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3304      	adds	r3, #4
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	3304      	adds	r3, #4
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d00d      	beq.n	80015b0 <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	3304      	adds	r3, #4
 800159c:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d108      	bne.n	80015b4 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3304      	adds	r3, #4
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d101      	bne.n	80015b4 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <lfs_pair_sync+0x48>
 80015b4:	2300      	movs	r3, #0
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	b2db      	uxtb	r3, r3
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80015c6:	b590      	push	{r4, r7, lr}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fbe8 	bl	8000da8 <lfs_fromle32>
 80015d8:	4602      	mov	r2, r0
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3304      	adds	r3, #4
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	1d1c      	adds	r4, r3, #4
 80015e8:	4610      	mov	r0, r2
 80015ea:	f7ff fbdd 	bl	8000da8 <lfs_fromle32>
 80015ee:	4603      	mov	r3, r0
 80015f0:	6023      	str	r3, [r4, #0]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd90      	pop	{r4, r7, pc}

080015fa <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80015fa:	b590      	push	{r4, r7, lr}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fbd8 	bl	8000dbc <lfs_tole32>
 800160c:	4602      	mov	r2, r0
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3304      	adds	r3, #4
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	1d1c      	adds	r4, r3, #4
 800161c:	4610      	mov	r0, r2
 800161e:	f7ff fbcd 	bl	8000dbc <lfs_tole32>
 8001622:	4603      	mov	r3, r0
 8001624:	6023      	str	r3, [r4, #0]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bd90      	pop	{r4, r7, pc}

0800162e <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	43db      	mvns	r3, r3
 800163a:	0fdb      	lsrs	r3, r3, #31
 800163c:	b2db      	uxtb	r3, r3
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	059b      	lsls	r3, r3, #22
 8001654:	159b      	asrs	r3, r3, #22
 8001656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165a:	bf0c      	ite	eq
 800165c:	2301      	moveq	r3, #1
 800165e:	2300      	movne	r3, #0
 8001660:	b2db      	uxtb	r3, r3
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	0d1b      	lsrs	r3, r3, #20
 8001678:	b29b      	uxth	r3, r3
 800167a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800167e:	b29b      	uxth	r3, r3
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	0d1b      	lsrs	r3, r3, #20
 8001696:	b29b      	uxth	r3, r3
 8001698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800169c:	b29b      	uxth	r3, r3
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	0d1b      	lsrs	r3, r3, #20
 80016b4:	b2db      	uxtb	r3, r3
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ffed 	bl	80016a8 <lfs_tag_chunk>
 80016ce:	4603      	mov	r3, r0
 80016d0:	b25b      	sxtb	r3, r3
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	0a9b      	lsrs	r3, r3, #10
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016ec:	b29b      	uxth	r3, r3
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff95 	bl	8001648 <lfs_tag_isdelete>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ffe6 	bl	80016f8 <lfs_tag_size>
 800172c:	4603      	mov	r3, r0
 800172e:	3304      	adds	r3, #4
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	e012      	b.n	800176e <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	6819      	ldr	r1, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	4413      	add	r3, r2
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	4403      	add	r3, r0
 8001764:	404a      	eors	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	3301      	adds	r3, #1
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2b02      	cmp	r3, #2
 8001772:	dde9      	ble.n	8001748 <lfs_gstate_xor+0x10>
    }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e00b      	b.n	80017a6 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <lfs_gstate_iszero+0x20>
            return false;
 800179c:	2300      	movs	r3, #0
 800179e:	e006      	b.n	80017ae <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3301      	adds	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	ddf0      	ble.n	800178e <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80017ac:	2301      	movs	r3, #1
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff97 	bl	80016f8 <lfs_tag_size>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf14      	ite	ne
 80017d0:	2301      	movne	r3, #1
 80017d2:	2300      	moveq	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff84 	bl	80016f8 <lfs_tag_size>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b2db      	uxtb	r3, r3
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff2f 	bl	800166c <lfs_tag_type1>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf14      	ite	ne
 8001814:	2301      	movne	r3, #1
 8001816:	2300      	moveq	r3, #0
 8001818:	b2db      	uxtb	r3, r3
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff1b 	bl	800166c <lfs_tag_type1>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00a      	beq.n	8001852 <lfs_gstate_hasmovehere+0x30>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3304      	adds	r3, #4
 8001840:	6839      	ldr	r1, [r7, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fe6a 	bl	800151c <lfs_pair_cmp>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <lfs_gstate_hasmovehere+0x30>
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <lfs_gstate_hasmovehere+0x32>
 8001852:	2300      	movs	r3, #0
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	b2db      	uxtb	r3, r3
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fa9a 	bl	8000da8 <lfs_fromle32>
 8001874:	4602      	mov	r2, r0
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fa92 	bl	8000da8 <lfs_fromle32>
 8001884:	4602      	mov	r2, r0
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fa8a 	bl	8000da8 <lfs_fromle32>
 8001894:	4602      	mov	r2, r0
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	609a      	str	r2, [r3, #8]
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fa84 	bl	8000dbc <lfs_tole32>
 80018b4:	4602      	mov	r2, r0
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fa7c 	bl	8000dbc <lfs_tole32>
 80018c4:	4602      	mov	r2, r0
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fa74 	bl	8000dbc <lfs_tole32>
 80018d4:	4602      	mov	r2, r0
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	609a      	str	r2, [r3, #8]
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fa5a 	bl	8000da8 <lfs_fromle32>
 80018f4:	4602      	mov	r2, r0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fa52 	bl	8000da8 <lfs_fromle32>
 8001904:	4602      	mov	r2, r0
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	605a      	str	r2, [r3, #4]
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fa4c 	bl	8000dbc <lfs_tole32>
 8001924:	4602      	mov	r2, r0
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fa44 	bl	8000dbc <lfs_tole32>
 8001934:	4602      	mov	r2, r0
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	605a      	str	r2, [r3, #4]
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fa2a 	bl	8000da8 <lfs_fromle32>
 8001954:	4602      	mov	r2, r0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fa22 	bl	8000da8 <lfs_fromle32>
 8001964:	4602      	mov	r2, r0
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fa1a 	bl	8000da8 <lfs_fromle32>
 8001974:	4602      	mov	r2, r0
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fa12 	bl	8000da8 <lfs_fromle32>
 8001984:	4602      	mov	r2, r0
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fa0a 	bl	8000da8 <lfs_fromle32>
 8001994:	4602      	mov	r2, r0
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fa02 	bl	8000da8 <lfs_fromle32>
 80019a4:	4602      	mov	r2, r0
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	615a      	str	r2, [r3, #20]
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f9fc 	bl	8000dbc <lfs_tole32>
 80019c4:	4602      	mov	r2, r0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f9f4 	bl	8000dbc <lfs_tole32>
 80019d4:	4602      	mov	r2, r0
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f9ec 	bl	8000dbc <lfs_tole32>
 80019e4:	4602      	mov	r2, r0
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f9e4 	bl	8000dbc <lfs_tole32>
 80019f4:	4602      	mov	r2, r0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f9dc 	bl	8000dbc <lfs_tole32>
 8001a04:	4602      	mov	r2, r0
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff f9d4 	bl	8000dbc <lfs_tole32>
 8001a14:	4602      	mov	r2, r0
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	615a      	str	r2, [r3, #20]
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	e009      	b.n	8001a46 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d101      	bne.n	8001a40 <lfs_mlist_isopen+0x1e>
            return true;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e007      	b.n	8001a50 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f1      	bne.n	8001a32 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3328      	adds	r3, #40	; 0x28
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	e00d      	b.n	8001a88 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d105      	bne.n	8001a82 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	601a      	str	r2, [r3, #0]
            break;
 8001a80:	e007      	b.n	8001a92 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ed      	bne.n	8001a6c <lfs_mlist_remove+0x12>
        }
    }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4413      	add	r3, r2
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ae0:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8001ae2:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ae6:	fb02 f201 	mul.w	r2, r2, r1
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d212      	bcs.n	8001b1e <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	009a      	lsls	r2, r3, #2
 8001b02:	440a      	add	r2, r1
 8001b04:	6811      	ldr	r1, [r2, #0]
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	f002 021f 	and.w	r2, r2, #31
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4403      	add	r3, r0
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b36:	6a1a      	ldr	r2, [r3, #32]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffe5 	bl	8001b2a <lfs_alloc_ack>
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8001b72:	e04f      	b.n	8001c14 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b78:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b88:	1e5a      	subs	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	095b      	lsrs	r3, r3, #5
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d132      	bne.n	8001c14 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001bba:	6a12      	ldr	r2, [r2, #32]
 8001bbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bc0:	fb02 f201 	mul.w	r2, r2, r1
 8001bc4:	1a9a      	subs	r2, r3, r2
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8001bca:	e009      	b.n	8001be0 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bda:	1e5a      	subs	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d011      	beq.n	8001c10 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf4:	095b      	lsrs	r3, r3, #5
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	2101      	movs	r1, #1
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1dd      	bne.n	8001bcc <lfs_alloc+0x64>
                }

                return 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e050      	b.n	8001cb6 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d1a9      	bne.n	8001b74 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10f      	bne.n	8001c48 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	4413      	add	r3, r2
 8001c32:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <lfs_alloc+0x158>)
 8001c34:	9200      	str	r2, [sp, #0]
 8001c36:	f240 2249 	movw	r2, #585	; 0x249
 8001c3a:	4922      	ldr	r1, [pc, #136]	; (8001cc4 <lfs_alloc+0x15c>)
 8001c3c:	4822      	ldr	r0, [pc, #136]	; (8001cc8 <lfs_alloc+0x160>)
 8001c3e:	f00c fd95 	bl	800e76c <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8001c42:	f06f 031b 	mvn.w	r3, #27
 8001c46:	e036      	b.n	8001cb6 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c50:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c56:	6a12      	ldr	r2, [r2, #32]
 8001c58:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c5c:	fb02 f201 	mul.w	r2, r2, r1
 8001c60:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	00da      	lsls	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c72:	4619      	mov	r1, r3
 8001c74:	4610      	mov	r0, r2
 8001c76:	f7ff f82c 	bl	8000cd2 <lfs_min>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	461a      	mov	r2, r3
 8001c92:	2100      	movs	r1, #0
 8001c94:	f00c f9ce 	bl	800e034 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8001c98:	2301      	movs	r3, #1
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	490b      	ldr	r1, [pc, #44]	; (8001ccc <lfs_alloc+0x164>)
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f004 fe18 	bl	80068d4 <lfs_fs_rawtraverse>
 8001ca4:	60f8      	str	r0, [r7, #12]
        if (err) {
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f43f af62 	beq.w	8001b72 <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ff49 	bl	8001b46 <lfs_alloc_drop>
            return err;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	0800f524 	.word	0x0800f524
 8001cc4:	0800f430 	.word	0x0800f430
 8001cc8:	0800f4fc 	.word	0x0800f4fc
 8001ccc:	08001abf 	.word	0x08001abf

08001cd0 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b08f      	sub	sp, #60	; 0x3c
 8001cd4:	af04      	add	r7, sp, #16
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	333c      	adds	r3, #60	; 0x3c
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fd93 	bl	8001822 <lfs_gstate_hasmovehere>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80b9 	beq.w	8001e76 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fce8 	bl	80016da <lfs_tag_id>
 8001d0a:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80b2 	beq.w	8001e76 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fcdf 	bl	80016da <lfs_tag_id>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461c      	mov	r4, r3
 8001d20:	6838      	ldr	r0, [r7, #0]
 8001d22:	f7ff fcda 	bl	80016da <lfs_tag_id>
 8001d26:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8001d28:	429c      	cmp	r4, r3
 8001d2a:	f200 80a4 	bhi.w	8001e76 <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001d34:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001d36:	e09e      	b.n	8001e76 <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fce8 	bl	8001710 <lfs_tag_dsize>
 8001d40:	4602      	mov	r2, r0
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8001d4c:	68f9      	ldr	r1, [r7, #12]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2204      	movs	r2, #4
 8001d54:	9203      	str	r2, [sp, #12]
 8001d56:	f107 0210 	add.w	r2, r7, #16
 8001d5a:	9202      	str	r2, [sp, #8]
 8001d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5e:	9201      	str	r2, [sp, #4]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	2304      	movs	r3, #4
 8001d64:	460a      	mov	r2, r1
 8001d66:	2100      	movs	r1, #0
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f7ff f885 	bl	8000e78 <lfs_bd_read>
 8001d6e:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <lfs_dir_getslice+0xaa>
            return err;
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	e089      	b.n	8001e8e <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff f829 	bl	8000dd4 <lfs_frombe32>
 8001d82:	4602      	mov	r2, r0
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	4053      	eors	r3, r2
 8001d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d8c:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff fca3 	bl	80016da <lfs_tag_id>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d02b      	beq.n	8001df2 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001d9a:	69f8      	ldr	r0, [r7, #28]
 8001d9c:	f7ff fc66 	bl	800166c <lfs_tag_type1>
 8001da0:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8001da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da6:	d124      	bne.n	8001df2 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8001da8:	69f8      	ldr	r0, [r7, #28]
 8001daa:	f7ff fc96 	bl	80016da <lfs_tag_id>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461c      	mov	r4, r3
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fc8e 	bl	80016da <lfs_tag_id>
 8001dbe:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001dc0:	429c      	cmp	r4, r3
 8001dc2:	d816      	bhi.n	8001df2 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	1ad2      	subs	r2, r2, r3
 8001dca:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <lfs_dir_getslice+0x1c8>)
 8001dcc:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8001dce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d102      	bne.n	8001de2 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8001ddc:	f06f 0301 	mvn.w	r3, #1
 8001de0:	e055      	b.n	8001e8e <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001de2:	69f8      	ldr	r0, [r7, #28]
 8001de4:	f7ff fc6c 	bl	80016c0 <lfs_tag_splice>
 8001de8:	4603      	mov	r3, r0
 8001dea:	029a      	lsls	r2, r3, #10
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	4413      	add	r3, r2
 8001df0:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	1ad2      	subs	r2, r2, r3
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	405a      	eors	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d138      	bne.n	8001e76 <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 8001e04:	69f8      	ldr	r0, [r7, #28]
 8001e06:	f7ff fc1f 	bl	8001648 <lfs_tag_isdelete>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 8001e10:	f06f 0301 	mvn.w	r3, #1
 8001e14:	e03b      	b.n	8001e8e <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8001e16:	69f8      	ldr	r0, [r7, #28]
 8001e18:	f7ff fc6e 	bl	80016f8 <lfs_tag_size>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ff56 	bl	8000cd2 <lfs_min>
 8001e26:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8001e2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e32:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8001e34:	3204      	adds	r2, #4
 8001e36:	6979      	ldr	r1, [r7, #20]
 8001e38:	9103      	str	r1, [sp, #12]
 8001e3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e3c:	9102      	str	r1, [sp, #8]
 8001e3e:	9201      	str	r2, [sp, #4]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	4602      	mov	r2, r0
 8001e46:	2100      	movs	r1, #0
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f7ff f815 	bl	8000e78 <lfs_bd_read>
 8001e4e:	61b8      	str	r0, [r7, #24]
            if (err) {
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <lfs_dir_getslice+0x18a>
                return err;
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	e019      	b.n	8001e8e <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8001e5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	18d0      	adds	r0, r2, r3
 8001e60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	2100      	movs	r1, #0
 8001e6a:	f00c f8e3 	bl	800e034 <memset>

            return tag + gdiff;
 8001e6e:	6a3a      	ldr	r2, [r7, #32]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	4413      	add	r3, r2
 8001e74:	e00b      	b.n	8001e8e <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fc49 	bl	8001710 <lfs_tag_dsize>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	3304      	adds	r3, #4
 8001e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e84:	429a      	cmp	r2, r3
 8001e86:	f4bf af57 	bcs.w	8001d38 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8001e8a:	f06f 0301 	mvn.w	r3, #1
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	372c      	adds	r7, #44	; 0x2c
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd90      	pop	{r4, r7, pc}
 8001e96:	bf00      	nop
 8001e98:	000ffc00 	.word	0x000ffc00

08001e9c <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af04      	add	r7, sp, #16
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8001eaa:	6838      	ldr	r0, [r7, #0]
 8001eac:	f7ff fc24 	bl	80016f8 <lfs_tag_size>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	9302      	str	r3, [sp, #8]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f7ff ff04 	bl	8001cd0 <lfs_dir_getslice>
 8001ec8:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b08c      	sub	sp, #48	; 0x30
 8001ed6:	af04      	add	r7, sp, #16
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee2:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8001ee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ee8:	441a      	add	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f240 80c0 	bls.w	8002076 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8001ef6:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8001efa:	e0c1      	b.n	8002080 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8001efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001efe:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d03f      	beq.n	8001f86 <lfs_dir_getread+0xb4>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f113 0f02 	cmn.w	r3, #2
 8001f0e:	d13a      	bne.n	8001f86 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d232      	bcs.n	8001f86 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d324      	bcc.n	8001f74 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6859      	ldr	r1, [r3, #4]
 8001f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f34:	1acb      	subs	r3, r1, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	69b8      	ldr	r0, [r7, #24]
 8001f3c:	f7fe fec9 	bl	8000cd2 <lfs_min>
 8001f40:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f4c:	1acb      	subs	r3, r1, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4619      	mov	r1, r3
 8001f54:	69f8      	ldr	r0, [r7, #28]
 8001f56:	f00c f85f 	bl	800e018 <memcpy>

                data += diff;
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	4413      	add	r3, r2
 8001f60:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	4413      	add	r3, r2
 8001f68:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001f6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001f72:	e080      	b.n	8002076 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	69b8      	ldr	r0, [r7, #24]
 8001f80:	f7fe fea7 	bl	8000cd2 <lfs_min>
 8001f84:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f113 0f02 	cmn.w	r3, #2
 8001f8e:	d13a      	bne.n	8002006 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8001f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d232      	bcs.n	8002006 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d324      	bcc.n	8001ff4 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6859      	ldr	r1, [r3, #4]
 8001fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb4:	1acb      	subs	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	69b8      	ldr	r0, [r7, #24]
 8001fbc:	f7fe fe89 	bl	8000cd2 <lfs_min>
 8001fc0:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001fcc:	1acb      	subs	r3, r1, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	69f8      	ldr	r0, [r7, #28]
 8001fd6:	f00c f81f 	bl	800e018 <memcpy>

                data += diff;
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	4413      	add	r3, r2
 8001fe0:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001fea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001ff2:	e040      	b.n	8002076 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	69b8      	ldr	r0, [r7, #24]
 8002000:	f7fe fe67 	bl	8000cd2 <lfs_min>
 8002004:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f06f 0201 	mvn.w	r2, #1
 800200c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	4619      	mov	r1, r3
 8002016:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002018:	f7fe fe6a 	bl	8000cf0 <lfs_aligndown>
 800201c:	4602      	mov	r2, r0
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8002022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002026:	441a      	add	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	4619      	mov	r1, r3
 8002030:	4610      	mov	r0, r2
 8002032:	f7fe fe71 	bl	8000d18 <lfs_alignup>
 8002036:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203e:	4619      	mov	r1, r3
 8002040:	4610      	mov	r0, r2
 8002042:	f7fe fe46 	bl	8000cd2 <lfs_min>
 8002046:	4602      	mov	r2, r0
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8002054:	6839      	ldr	r1, [r7, #0]
 8002056:	6889      	ldr	r1, [r1, #8]
 8002058:	9102      	str	r1, [sp, #8]
 800205a:	9201      	str	r2, [sp, #4]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f7ff fe33 	bl	8001cd0 <lfs_dir_getslice>
 800206a:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	da01      	bge.n	8002076 <lfs_dir_getread+0x1a4>
            return err;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	e004      	b.n	8002080 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8002076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f af3f 	bne.w	8001efc <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3720      	adds	r7, #32
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <lfs_dir_traverse_filter+0x1e>
 80020a2:	4b24      	ldr	r3, [pc, #144]	; (8002134 <lfs_dir_traverse_filter+0xac>)
 80020a4:	e000      	b.n	80020a8 <lfs_dir_traverse_filter+0x20>
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80020a8:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	405a      	eors	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d014      	beq.n	80020e4 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fac2 	bl	8001648 <lfs_tag_isdelete>
 80020c4:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10c      	bne.n	80020e4 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <lfs_dir_traverse_filter+0xac>)
 80020ce:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <lfs_dir_traverse_filter+0xb4>)
 80020d6:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80020d8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80020dc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d104      	bne.n	80020ee <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
        return true;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e01e      	b.n	800212c <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80020ee:	68b8      	ldr	r0, [r7, #8]
 80020f0:	f7ff fabc 	bl	800166c <lfs_tag_type1>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020fa:	d116      	bne.n	800212a <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 80020fc:	68b8      	ldr	r0, [r7, #8]
 80020fe:	f7ff faec 	bl	80016da <lfs_tag_id>
 8002102:	4603      	mov	r3, r0
 8002104:	461c      	mov	r4, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fae5 	bl	80016da <lfs_tag_id>
 8002110:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002112:	429c      	cmp	r4, r3
 8002114:	d809      	bhi.n	800212a <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002116:	68b8      	ldr	r0, [r7, #8]
 8002118:	f7ff fad2 	bl	80016c0 <lfs_tag_splice>
 800211c:	4603      	mov	r3, r0
 800211e:	029a      	lsls	r2, r3, #10
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	441a      	add	r2, r3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	601a      	str	r2, [r3, #0]
    }

    return false;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	bd90      	pop	{r4, r7, pc}
 8002134:	7ffffc00 	.word	0x7ffffc00
 8002138:	700ffc00 	.word	0x700ffc00
 800213c:	000ffc00 	.word	0x000ffc00

08002140 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b0c1      	sub	sp, #260	; 0x104
 8002144:	af04      	add	r7, sp, #16
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8002154:	6838      	ldr	r0, [r7, #0]
 8002156:	f7ff fadb 	bl	8001710 <lfs_tag_dsize>
 800215a:	4602      	mov	r2, r0
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	441a      	add	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	429a      	cmp	r2, r3
 8002166:	d237      	bcs.n	80021d8 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8002168:	6838      	ldr	r0, [r7, #0]
 800216a:	f7ff fad1 	bl	8001710 <lfs_tag_dsize>
 800216e:	4602      	mov	r2, r0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8002176:	68f9      	ldr	r1, [r7, #12]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2204      	movs	r2, #4
 800217e:	9203      	str	r2, [sp, #12]
 8002180:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002184:	9202      	str	r2, [sp, #8]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	9201      	str	r2, [sp, #4]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2304      	movs	r3, #4
 800218e:	460a      	mov	r2, r1
 8002190:	2100      	movs	r1, #0
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7fe fe70 	bl	8000e78 <lfs_bd_read>
 8002198:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 800219c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <lfs_dir_traverse+0x6a>
                    return err;
 80021a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021a8:	e3cf      	b.n	800294a <lfs_dir_traverse+0x80a>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 80021aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe fe11 	bl	8000dd4 <lfs_frombe32>
 80021b2:	4602      	mov	r2, r0
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4053      	eors	r3, r2
 80021b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021bc:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3304      	adds	r3, #4
 80021c8:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 80021ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 80021d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	e01b      	b.n	8002210 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 80021d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80021dc:	2b00      	cmp	r3, #0
 80021de:	dd13      	ble.n	8002208 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 80021e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 80021e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 80021f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80021f6:	3308      	adds	r3, #8
 80021f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 80021fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002200:	3b01      	subs	r3, #1
 8002202:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002206:	e003      	b.n	8002210 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 800220e:	e2bc      	b.n	800278a <lfs_dir_traverse+0x64a>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8002210:	4b85      	ldr	r3, [pc, #532]	; (8002428 <lfs_dir_traverse+0x2e8>)
 8002212:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8002216:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800221c:	405a      	eors	r2, r3
 800221e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002222:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002226:	400b      	ands	r3, r1
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 82a0 	bne.w	8002770 <lfs_dir_traverse+0x630>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8002230:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002234:	f7ff fa51 	bl	80016da <lfs_tag_id>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80fe 	beq.w	800243c <lfs_dir_traverse+0x2fc>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8002240:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002244:	2b02      	cmp	r3, #2
 8002246:	d906      	bls.n	8002256 <lfs_dir_traverse+0x116>
 8002248:	4b78      	ldr	r3, [pc, #480]	; (800242c <lfs_dir_traverse+0x2ec>)
 800224a:	4a79      	ldr	r2, [pc, #484]	; (8002430 <lfs_dir_traverse+0x2f0>)
 800224c:	f44f 7154 	mov.w	r1, #848	; 0x350
 8002250:	4878      	ldr	r0, [pc, #480]	; (8002434 <lfs_dir_traverse+0x2f4>)
 8002252:	f00b fe69 	bl	800df28 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8002256:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002258:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800225c:	4613      	mov	r3, r2
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002268:	4413      	add	r3, r2
 800226a:	3b98      	subs	r3, #152	; 0x98
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002274:	4613      	mov	r3, r2
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002280:	4413      	add	r3, r2
 8002282:	3b94      	subs	r3, #148	; 0x94
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800228c:	4613      	mov	r3, r2
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	1a9b      	subs	r3, r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002298:	4413      	add	r3, r2
 800229a:	3b90      	subs	r3, #144	; 0x90
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022a4:	4613      	mov	r3, r2
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022b0:	4413      	add	r3, r2
 80022b2:	3b8c      	subs	r3, #140	; 0x8c
 80022b4:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022be:	4613      	mov	r3, r2
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022ca:	4413      	add	r3, r2
 80022cc:	3b88      	subs	r3, #136	; 0x88
 80022ce:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022d8:	4613      	mov	r3, r2
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022e4:	4413      	add	r3, r2
 80022e6:	3b84      	subs	r3, #132	; 0x84
 80022e8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022fe:	4413      	add	r3, r2
 8002300:	3b80      	subs	r3, #128	; 0x80
 8002302:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002318:	4413      	add	r3, r2
 800231a:	3b7c      	subs	r3, #124	; 0x7c
 800231c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8002320:	801a      	strh	r2, [r3, #0]
 8002322:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002326:	4613      	mov	r3, r2
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002332:	4413      	add	r3, r2
 8002334:	3b7a      	subs	r3, #122	; 0x7a
 8002336:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800233a:	801a      	strh	r2, [r3, #0]
 800233c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800234c:	4413      	add	r3, r2
 800234e:	3b78      	subs	r3, #120	; 0x78
 8002350:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8002354:	801a      	strh	r2, [r3, #0]
 8002356:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800235a:	4613      	mov	r3, r2
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002366:	4413      	add	r3, r2
 8002368:	3b74      	subs	r3, #116	; 0x74
 800236a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002374:	4613      	mov	r3, r2
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002380:	4413      	add	r3, r2
 8002382:	3b70      	subs	r3, #112	; 0x70
 8002384:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800239a:	4413      	add	r3, r2
 800239c:	3b6c      	subs	r3, #108	; 0x6c
 800239e:	6019      	str	r1, [r3, #0]
 80023a0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023b0:	4413      	add	r3, r2
 80023b2:	3b68      	subs	r3, #104	; 0x68
 80023b4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80023be:	4613      	mov	r3, r2
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023ca:	4413      	add	r3, r2
 80023cc:	3b68      	subs	r3, #104	; 0x68
 80023ce:	3304      	adds	r3, #4
 80023d0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80023d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023d8:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80023dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80023e0:	3301      	adds	r3, #1
 80023e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <lfs_dir_traverse+0x2f8>)
 8002406:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 800240a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800240e:	1e5a      	subs	r2, r3, #1
 8002410:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	3328      	adds	r3, #40	; 0x28
 800241e:	440b      	add	r3, r1
 8002420:	3304      	adds	r3, #4
 8002422:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002426:	e695      	b.n	8002154 <lfs_dir_traverse+0x14>
 8002428:	7ff00000 	.word	0x7ff00000
 800242c:	0800f528 	.word	0x0800f528
 8002430:	0800ff40 	.word	0x0800ff40
 8002434:	0800f430 	.word	0x0800f430
 8002438:	08002089 	.word	0x08002089
                continue;
            }
        }

popped:
 800243c:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800243e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002442:	f7ff f94a 	bl	80016da <lfs_tag_id>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d015      	beq.n	8002478 <lfs_dir_traverse+0x338>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800244c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff f943 	bl	80016da <lfs_tag_id>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8002458:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 800245c:	4293      	cmp	r3, r2
 800245e:	f200 8189 	bhi.w	8002774 <lfs_dir_traverse+0x634>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8002462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff f938 	bl	80016da <lfs_tag_id>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8002472:	4293      	cmp	r3, r2
 8002474:	f240 817e 	bls.w	8002774 <lfs_dir_traverse+0x634>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8002478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff f905 	bl	800168a <lfs_tag_type3>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	f43f ae66 	beq.w	8002154 <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8002488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff f8fd 	bl	800168a <lfs_tag_type3>
 8002490:	4603      	mov	r3, r0
 8002492:	461a      	mov	r2, r3
 8002494:	f240 1301 	movw	r3, #257	; 0x101
 8002498:	429a      	cmp	r2, r3
 800249a:	f040 80ed 	bne.w	8002678 <lfs_dir_traverse+0x538>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800249e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024a2:	4ab7      	ldr	r2, [pc, #732]	; (8002780 <lfs_dir_traverse+0x640>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	f000 8167 	beq.w	8002778 <lfs_dir_traverse+0x638>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 80024aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80024ae:	4613      	mov	r3, r2
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80024ba:	4413      	add	r3, r2
 80024bc:	3b98      	subs	r3, #152	; 0x98
 80024be:	4618      	mov	r0, r3
 80024c0:	233c      	movs	r3, #60	; 0x3c
 80024c2:	461a      	mov	r2, r3
 80024c4:	2100      	movs	r1, #0
 80024c6:	f00b fdb5 	bl	800e034 <memset>
 80024ca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80024ce:	4613      	mov	r3, r2
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80024da:	4413      	add	r3, r2
 80024dc:	3b98      	subs	r3, #152	; 0x98
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80024e6:	4613      	mov	r3, r2
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80024f2:	4413      	add	r3, r2
 80024f4:	3b94      	subs	r3, #148	; 0x94
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800250a:	4413      	add	r3, r2
 800250c:	3b90      	subs	r3, #144	; 0x90
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002516:	4613      	mov	r3, r2
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	1a9b      	subs	r3, r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002522:	4413      	add	r3, r2
 8002524:	3b8c      	subs	r3, #140	; 0x8c
 8002526:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002530:	4613      	mov	r3, r2
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800253c:	4413      	add	r3, r2
 800253e:	3b88      	subs	r3, #136	; 0x88
 8002540:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800254a:	4613      	mov	r3, r2
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002556:	4413      	add	r3, r2
 8002558:	3b84      	subs	r3, #132	; 0x84
 800255a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002564:	4613      	mov	r3, r2
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002570:	4413      	add	r3, r2
 8002572:	3b80      	subs	r3, #128	; 0x80
 8002574:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800257e:	4613      	mov	r3, r2
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800258a:	4413      	add	r3, r2
 800258c:	3b7c      	subs	r3, #124	; 0x7c
 800258e:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8002592:	801a      	strh	r2, [r3, #0]
 8002594:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80025a4:	4413      	add	r3, r2
 80025a6:	3b7a      	subs	r3, #122	; 0x7a
 80025a8:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80025ac:	801a      	strh	r2, [r3, #0]
 80025ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80025b2:	4613      	mov	r3, r2
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80025be:	4413      	add	r3, r2
 80025c0:	3b78      	subs	r3, #120	; 0x78
 80025c2:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80025c6:	801a      	strh	r2, [r3, #0]
 80025c8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80025d8:	4413      	add	r3, r2
 80025da:	3b74      	subs	r3, #116	; 0x74
 80025dc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80025e6:	4613      	mov	r3, r2
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80025f2:	4413      	add	r3, r2
 80025f4:	3b70      	subs	r3, #112	; 0x70
 80025f6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80025fa:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80025fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002600:	3301      	adds	r3, #1
 8002602:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8002606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f875 	bl	80016f8 <lfs_tag_size>
 800260e:	4603      	mov	r3, r0
 8002610:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8002614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff f85f 	bl	80016da <lfs_tag_id>
 800261c:	4603      	mov	r3, r0
 800261e:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8002622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002626:	60bb      	str	r3, [r7, #8]
            off = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
 8002630:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800263e:	4b51      	ldr	r3, [pc, #324]	; (8002784 <lfs_dir_traverse+0x644>)
 8002640:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8002644:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002648:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 800264c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002650:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8002654:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002658:	3301      	adds	r3, #1
 800265a:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 800265e:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8002662:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	b29a      	uxth	r2, r3
 800266a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800266e:	4413      	add	r3, r2
 8002670:	b29b      	uxth	r3, r3
 8002672:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8002676:	e56d      	b.n	8002154 <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8002678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f805 	bl	800168a <lfs_tag_type3>
 8002680:	4603      	mov	r3, r0
 8002682:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8002686:	d159      	bne.n	800273c <lfs_dir_traverse+0x5fc>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002688:	2300      	movs	r3, #0
 800268a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800268e:	e04b      	b.n	8002728 <lfs_dir_traverse+0x5e8>
                const struct lfs_attr *a = buffer;
 8002690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002694:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8002698:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	461a      	mov	r2, r3
 80026a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026aa:	4413      	add	r3, r2
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80026b2:	051c      	lsls	r4, r3, #20
 80026b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f80f 	bl	80016da <lfs_tag_id>
 80026bc:	4603      	mov	r3, r0
 80026be:	461a      	mov	r2, r3
 80026c0:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80026c4:	4413      	add	r3, r2
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	ea44 0103 	orr.w	r1, r4, r3
 80026cc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	461a      	mov	r2, r3
 80026da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026de:	4413      	add	r3, r2
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80026e4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	461a      	mov	r2, r3
 80026f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026f6:	4413      	add	r3, r2
 80026f8:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80026fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026fe:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002702:	4798      	blx	r3
 8002704:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8002708:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800270c:	2b00      	cmp	r3, #0
 800270e:	da02      	bge.n	8002716 <lfs_dir_traverse+0x5d6>
                    return res;
 8002710:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002714:	e119      	b.n	800294a <lfs_dir_traverse+0x80a>
                }

                if (res) {
 8002716:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d12e      	bne.n	800277c <lfs_dir_traverse+0x63c>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800271e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002722:	3301      	adds	r3, #1
 8002724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe ffe4 	bl	80016f8 <lfs_tag_size>
 8002730:	4602      	mov	r2, r0
 8002732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002736:	4293      	cmp	r3, r2
 8002738:	d3aa      	bcc.n	8002690 <lfs_dir_traverse+0x550>
 800273a:	e50b      	b.n	8002154 <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800273c:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8002740:	029a      	lsls	r2, r3, #10
 8002742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002744:	18d1      	adds	r1, r2, r3
 8002746:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800274a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800274e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002752:	4798      	blx	r3
 8002754:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8002758:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800275c:	2b00      	cmp	r3, #0
 800275e:	da02      	bge.n	8002766 <lfs_dir_traverse+0x626>
                return res;
 8002760:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002764:	e0f1      	b.n	800294a <lfs_dir_traverse+0x80a>
            }

            if (res) {
 8002766:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10c      	bne.n	8002788 <lfs_dir_traverse+0x648>
 800276e:	e4f1      	b.n	8002154 <lfs_dir_traverse+0x14>
                continue;
 8002770:	bf00      	nop
 8002772:	e4ef      	b.n	8002154 <lfs_dir_traverse+0x14>
            continue;
 8002774:	bf00      	nop
 8002776:	e4ed      	b.n	8002154 <lfs_dir_traverse+0x14>
                continue;
 8002778:	bf00      	nop
 800277a:	e4eb      	b.n	8002154 <lfs_dir_traverse+0x14>
                    break;
 800277c:	bf00      	nop
        {
 800277e:	e4e9      	b.n	8002154 <lfs_dir_traverse+0x14>
 8002780:	08002089 	.word	0x08002089
 8002784:	600ffc00 	.word	0x600ffc00
                break;
 8002788:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800278a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 80d9 	beq.w	8002946 <lfs_dir_traverse+0x806>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8002794:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002798:	1e5a      	subs	r2, r3, #1
 800279a:	4613      	mov	r3, r2
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80027a6:	4413      	add	r3, r2
 80027a8:	3b98      	subs	r3, #152	; 0x98
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80027ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80027b2:	1e5a      	subs	r2, r3, #1
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80027c0:	4413      	add	r3, r2
 80027c2:	3b94      	subs	r3, #148	; 0x94
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80027c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80027cc:	1e5a      	subs	r2, r3, #1
 80027ce:	4613      	mov	r3, r2
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80027da:	4413      	add	r3, r2
 80027dc:	3b90      	subs	r3, #144	; 0x90
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80027e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80027e6:	1e5a      	subs	r2, r3, #1
 80027e8:	4613      	mov	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80027f4:	4413      	add	r3, r2
 80027f6:	3b8c      	subs	r3, #140	; 0x8c
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 80027fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002802:	1e5a      	subs	r2, r3, #1
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002810:	4413      	add	r3, r2
 8002812:	3b88      	subs	r3, #136	; 0x88
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 800281a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800281e:	1e5a      	subs	r2, r3, #1
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800282c:	4413      	add	r3, r2
 800282e:	3b84      	subs	r3, #132	; 0x84
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8002836:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800283a:	1e5a      	subs	r2, r3, #1
 800283c:	4613      	mov	r3, r2
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002848:	4413      	add	r3, r2
 800284a:	3b80      	subs	r3, #128	; 0x80
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8002852:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002856:	1e5a      	subs	r2, r3, #1
 8002858:	4613      	mov	r3, r2
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002864:	4413      	add	r3, r2
 8002866:	3b7c      	subs	r3, #124	; 0x7c
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 800286e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002872:	1e5a      	subs	r2, r3, #1
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002880:	4413      	add	r3, r2
 8002882:	3b7a      	subs	r3, #122	; 0x7a
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 800288a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800288e:	1e5a      	subs	r2, r3, #1
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800289c:	4413      	add	r3, r2
 800289e:	3b78      	subs	r3, #120	; 0x78
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 80028a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80028aa:	1e5a      	subs	r2, r3, #1
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80028b8:	4413      	add	r3, r2
 80028ba:	3b74      	subs	r3, #116	; 0x74
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 80028c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80028c6:	1e5a      	subs	r2, r3, #1
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80028d4:	4413      	add	r3, r2
 80028d6:	3b70      	subs	r3, #112	; 0x70
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 80028de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80028e2:	1e5a      	subs	r2, r3, #1
 80028e4:	4613      	mov	r3, r2
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80028f0:	4413      	add	r3, r2
 80028f2:	3b6c      	subs	r3, #108	; 0x6c
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 80028f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800290a:	4413      	add	r3, r2
 800290c:	3b68      	subs	r3, #104	; 0x68
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 8002914:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002918:	1e5a      	subs	r2, r3, #1
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002926:	4413      	add	r3, r2
 8002928:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 800292c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002930:	3204      	adds	r2, #4
 8002932:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002936:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 800293a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800293e:	3b01      	subs	r3, #1
 8002940:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 8002944:	e57b      	b.n	800243e <lfs_dir_traverse+0x2fe>
    } else {
        return res;
 8002946:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 800294a:	4618      	mov	r0, r3
 800294c:	37f4      	adds	r7, #244	; 0xf4
 800294e:	46bd      	mov	sp, r7
 8002950:	bd90      	pop	{r4, r7, pc}
 8002952:	bf00      	nop

08002954 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b09f      	sub	sp, #124	; 0x7c
 8002958:	af04      	add	r7, sp, #16
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8002962:	f04f 33ff 	mov.w	r3, #4294967295
 8002966:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	429a      	cmp	r2, r3
 8002974:	d207      	bcs.n	8002986 <lfs_dir_fetchmatch+0x32>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3304      	adds	r3, #4
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	429a      	cmp	r2, r3
 8002984:	d302      	bcc.n	800298c <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 8002986:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800298a:	e348      	b.n	800301e <lfs_dir_fetchmatch+0x6ca>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800298c:	2300      	movs	r3, #0
 800298e:	633b      	str	r3, [r7, #48]	; 0x30
 8002990:	2300      	movs	r3, #0
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8002998:	2300      	movs	r3, #0
 800299a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800299c:	e056      	b.n	8002a4c <lfs_dir_fetchmatch+0xf8>
        int err = lfs_bd_read(lfs,
 800299e:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80029a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 80029a8:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80029aa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80029ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80029b0:	0092      	lsls	r2, r2, #2
 80029b2:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 80029b4:	2104      	movs	r1, #4
 80029b6:	9103      	str	r1, [sp, #12]
 80029b8:	9202      	str	r2, [sp, #8]
 80029ba:	2200      	movs	r2, #0
 80029bc:	9201      	str	r2, [sp, #4]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2304      	movs	r3, #4
 80029c2:	4602      	mov	r2, r0
 80029c4:	2100      	movs	r1, #0
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7fe fa56 	bl	8000e78 <lfs_bd_read>
 80029cc:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 80029ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80029d6:	4413      	add	r3, r2
 80029d8:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe f9e3 	bl	8000da8 <lfs_fromle32>
 80029e2:	4602      	mov	r2, r0
 80029e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80029ec:	440b      	add	r3, r1
 80029ee:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 80029f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <lfs_dir_fetchmatch+0xb0>
 80029f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80029fe:	d001      	beq.n	8002a04 <lfs_dir_fetchmatch+0xb0>
            return err;
 8002a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a02:	e30c      	b.n	800301e <lfs_dir_fetchmatch+0x6ca>
        }

        if (err != LFS_ERR_CORRUPT &&
 8002a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a06:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002a0a:	d01c      	beq.n	8002a46 <lfs_dir_fetchmatch+0xf2>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8002a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002a14:	4413      	add	r3, r2
 8002a16:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8002a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	bfb8      	it	lt
 8002a26:	425b      	neglt	r3, r3
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002a2e:	440b      	add	r3, r1
 8002a30:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8002a34:	4619      	mov	r1, r3
 8002a36:	4610      	mov	r0, r2
 8002a38:	f7fe f9a9 	bl	8000d8e <lfs_scmp>
 8002a3c:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	dd01      	ble.n	8002a46 <lfs_dir_fetchmatch+0xf2>
            r = i;
 8002a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a44:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8002a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a48:	3301      	adds	r3, #1
 8002a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	dda5      	ble.n	800299e <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8002a52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	bfb8      	it	lt
 8002a5c:	425b      	neglt	r3, r3
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4413      	add	r3, r2
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8002a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	bfb8      	it	lt
 8002a76:	425b      	neglt	r3, r3
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002a84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	bfb8      	it	lt
 8002a8e:	425b      	neglt	r3, r3
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002a96:	4413      	add	r3, r2
 8002a98:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002aaa:	e2a4      	b.n	8002ff6 <lfs_dir_fetchmatch+0x6a2>
        lfs_off_t off = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8002abc:	4aad      	ldr	r2, [pc, #692]	; (8002d74 <lfs_dir_fetchmatch+0x420>)
 8002abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ac2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ac6:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 8002ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ad2:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe f96f 	bl	8000dbc <lfs_tole32>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	2204      	movs	r2, #4
 8002aea:	4619      	mov	r1, r3
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295
 8002af0:	f004 fcec 	bl	80074cc <lfs_crc>
 8002af4:	4603      	mov	r3, r0
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe f953 	bl	8000da8 <lfs_fromle32>
 8002b02:	4602      	mov	r2, r0
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8002b08:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002b0a:	f7fe fe01 	bl	8001710 <lfs_tag_dsize>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b12:	4413      	add	r3, r2
 8002b14:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 8002b16:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8002b1c:	69d8      	ldr	r0, [r3, #28]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2204      	movs	r2, #4
 8002b24:	9203      	str	r2, [sp, #12]
 8002b26:	f107 0220 	add.w	r2, r7, #32
 8002b2a:	9202      	str	r2, [sp, #8]
 8002b2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b2e:	9201      	str	r2, [sp, #4]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	4603      	mov	r3, r0
 8002b34:	460a      	mov	r2, r1
 8002b36:	2100      	movs	r1, #0
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7fe f99d 	bl	8000e78 <lfs_bd_read>
 8002b3e:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8002b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <lfs_dir_fetchmatch+0x206>
                if (err == LFS_ERR_CORRUPT) {
 8002b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b48:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002b4c:	d103      	bne.n	8002b56 <lfs_dir_fetchmatch+0x202>
                    // can't continue?
                    dir->erased = false;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2200      	movs	r2, #0
 8002b52:	759a      	strb	r2, [r3, #22]
                    break;
 8002b54:	e1d6      	b.n	8002f04 <lfs_dir_fetchmatch+0x5b0>
                }
                return err;
 8002b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b58:	e261      	b.n	800301e <lfs_dir_fetchmatch+0x6ca>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	f107 0120 	add.w	r1, r7, #32
 8002b60:	2204      	movs	r2, #4
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 fcb2 	bl	80074cc <lfs_crc>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe f930 	bl	8000dd4 <lfs_frombe32>
 8002b74:	4602      	mov	r2, r0
 8002b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b78:	4053      	eors	r3, r2
 8002b7a:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe fd55 	bl	800162e <lfs_tag_isvalid>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f083 0301 	eor.w	r3, r3, #1
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01b      	beq.n	8002bc8 <lfs_dir_fetchmatch+0x274>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8002b90:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002b92:	f7fe fd6b 	bl	800166c <lfs_tag_type1>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002b9c:	d10d      	bne.n	8002bba <lfs_dir_fetchmatch+0x266>
                        dir->off % lfs->cfg->prog_size == 0);
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ba6:	6992      	ldr	r2, [r2, #24]
 8002ba8:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bac:	fb02 f201 	mul.w	r2, r2, r1
 8002bb0:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <lfs_dir_fetchmatch+0x266>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <lfs_dir_fetchmatch+0x268>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	759a      	strb	r2, [r3, #22]
                break;
 8002bc6:	e19d      	b.n	8002f04 <lfs_dir_fetchmatch+0x5b0>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fda0 	bl	8001710 <lfs_tag_dsize>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd4:	441a      	add	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d903      	bls.n	8002be8 <lfs_dir_fetchmatch+0x294>
                dir->erased = false;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2200      	movs	r2, #0
 8002be4:	759a      	strb	r2, [r3, #22]
                break;
 8002be6:	e18d      	b.n	8002f04 <lfs_dir_fetchmatch+0x5b0>
            }

            ptag = tag;
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fd3c 	bl	800166c <lfs_tag_type1>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002bfa:	d164      	bne.n	8002cc6 <lfs_dir_fetchmatch+0x372>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8002bfc:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002c02:	69dc      	ldr	r4, [r3, #28]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c0a:	3204      	adds	r2, #4
 8002c0c:	2104      	movs	r1, #4
 8002c0e:	9103      	str	r1, [sp, #12]
 8002c10:	f107 011c 	add.w	r1, r7, #28
 8002c14:	9102      	str	r1, [sp, #8]
 8002c16:	9201      	str	r2, [sp, #4]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	4623      	mov	r3, r4
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	2100      	movs	r1, #0
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f7fe f929 	bl	8000e78 <lfs_bd_read>
 8002c26:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8002c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <lfs_dir_fetchmatch+0x2ee>
                    if (err == LFS_ERR_CORRUPT) {
 8002c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c30:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002c34:	d103      	bne.n	8002c3e <lfs_dir_fetchmatch+0x2ea>
                        dir->erased = false;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	759a      	strb	r2, [r3, #22]
                        break;
 8002c3c:	e162      	b.n	8002f04 <lfs_dir_fetchmatch+0x5b0>
                    }
                    return err;
 8002c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 8002c40:	e1ed      	b.n	800301e <lfs_dir_fetchmatch+0x6ca>
                }
                dcrc = lfs_fromle32(dcrc);
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe f8af 	bl	8000da8 <lfs_fromle32>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 8002c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d003      	beq.n	8002c5e <lfs_dir_fetchmatch+0x30a>
                    dir->erased = false;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	759a      	strb	r2, [r3, #22]
                    break;
 8002c5c:	e152      	b.n	8002f04 <lfs_dir_fetchmatch+0x5b0>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe fd21 	bl	80016a8 <lfs_tag_chunk>
 8002c66:	4603      	mov	r3, r0
 8002c68:	07db      	lsls	r3, r3, #31
 8002c6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c6c:	4053      	eors	r3, r2
 8002c6e:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002c78:	2204      	movs	r2, #4
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f004 fc26 	bl	80074cc <lfs_crc>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8002c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c88:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe fd3f 	bl	8001710 <lfs_tag_dsize>
 8002c92:	4602      	mov	r2, r0
 8002c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c96:	441a      	add	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ca0:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002ca8:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8002caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8002cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002cbc:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc4:	e720      	b.n	8002b08 <lfs_dir_fetchmatch+0x1b4>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cca:	e02f      	b.n	8002d2c <lfs_dir_fetchmatch+0x3d8>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8002ccc:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002cd2:	69dc      	ldr	r4, [r3, #28]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cdc:	440a      	add	r2, r1
 8002cde:	2101      	movs	r1, #1
 8002ce0:	9103      	str	r1, [sp, #12]
 8002ce2:	f107 011b 	add.w	r1, r7, #27
 8002ce6:	9102      	str	r1, [sp, #8]
 8002ce8:	9201      	str	r2, [sp, #4]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	4623      	mov	r3, r4
 8002cee:	4602      	mov	r2, r0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f7fe f8c0 	bl	8000e78 <lfs_bd_read>
 8002cf8:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8002cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d009      	beq.n	8002d14 <lfs_dir_fetchmatch+0x3c0>
                    if (err == LFS_ERR_CORRUPT) {
 8002d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d02:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002d06:	d103      	bne.n	8002d10 <lfs_dir_fetchmatch+0x3bc>
                        dir->erased = false;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	759a      	strb	r2, [r3, #22]
 8002d0e:	e015      	b.n	8002d3c <lfs_dir_fetchmatch+0x3e8>
                        break;
                    }
                    return err;
 8002d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 8002d12:	e184      	b.n	800301e <lfs_dir_fetchmatch+0x6ca>
                }

                crc = lfs_crc(crc, &dat, 1);
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	f107 011b 	add.w	r1, r7, #27
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f004 fbd5 	bl	80074cc <lfs_crc>
 8002d22:	4603      	mov	r3, r0
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8002d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d28:	3301      	adds	r3, #1
 8002d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fcee 	bl	8001710 <lfs_tag_dsize>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d3c7      	bcc.n	8002ccc <lfs_dir_fetchmatch+0x378>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe fc94 	bl	800166c <lfs_tag_type1>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d116      	bne.n	8002d78 <lfs_dir_fetchmatch+0x424>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe fcc4 	bl	80016da <lfs_tag_id>
 8002d52:	4603      	mov	r3, r0
 8002d54:	461a      	mov	r2, r3
 8002d56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	f200 8086 	bhi.w	8002e6c <lfs_dir_fetchmatch+0x518>
                    tempcount = lfs_tag_id(tag) + 1;
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fcb9 	bl	80016da <lfs_tag_id>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d70:	e07c      	b.n	8002e6c <lfs_dir_fetchmatch+0x518>
 8002d72:	bf00      	nop
 8002d74:	0800f568 	.word	0x0800f568
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe fc76 	bl	800166c <lfs_tag_type1>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d86:	d134      	bne.n	8002df2 <lfs_dir_fetchmatch+0x49e>
                tempcount += lfs_tag_splice(tag);
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe fc98 	bl	80016c0 <lfs_tag_splice>
 8002d90:	4603      	mov	r3, r0
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d98:	4413      	add	r3, r2
 8002d9a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8002d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002da0:	4ba1      	ldr	r3, [pc, #644]	; (8003028 <lfs_dir_fetchmatch+0x6d4>)
 8002da2:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002da4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8002da8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8002dac:	6a3a      	ldr	r2, [r7, #32]
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d104      	bne.n	8002dbc <lfs_dir_fetchmatch+0x468>
                    tempbesttag |= 0x80000000;
 8002db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002db8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dba:	e057      	b.n	8002e6c <lfs_dir_fetchmatch+0x518>
                } else if (tempbesttag != -1 &&
 8002dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc2:	d053      	beq.n	8002e6c <lfs_dir_fetchmatch+0x518>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe fc87 	bl	80016da <lfs_tag_id>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461c      	mov	r4, r3
 8002dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fc81 	bl	80016da <lfs_tag_id>
 8002dd8:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8002dda:	429c      	cmp	r4, r3
 8002ddc:	d846      	bhi.n	8002e6c <lfs_dir_fetchmatch+0x518>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fe fc6d 	bl	80016c0 <lfs_tag_splice>
 8002de6:	4603      	mov	r3, r0
 8002de8:	029a      	lsls	r2, r3, #10
 8002dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dec:	4413      	add	r3, r2
 8002dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002df0:	e03c      	b.n	8002e6c <lfs_dir_fetchmatch+0x518>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe fc39 	bl	800166c <lfs_tag_type1>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e00:	d134      	bne.n	8002e6c <lfs_dir_fetchmatch+0x518>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fc4f 	bl	80016a8 <lfs_tag_chunk>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 8002e1c:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002e22:	69dc      	ldr	r4, [r3, #28]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e2a:	3204      	adds	r2, #4
 8002e2c:	2108      	movs	r1, #8
 8002e2e:	9103      	str	r1, [sp, #12]
 8002e30:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002e34:	9102      	str	r1, [sp, #8]
 8002e36:	9201      	str	r2, [sp, #4]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	4623      	mov	r3, r4
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	2100      	movs	r1, #0
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7fe f819 	bl	8000e78 <lfs_bd_read>
 8002e46:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8002e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <lfs_dir_fetchmatch+0x50e>
                    if (err == LFS_ERR_CORRUPT) {
 8002e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e50:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002e54:	d103      	bne.n	8002e5e <lfs_dir_fetchmatch+0x50a>
                        dir->erased = false;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	759a      	strb	r2, [r3, #22]
                        break;
 8002e5c:	e052      	b.n	8002f04 <lfs_dir_fetchmatch+0x5b0>
                    }
                    return err;
 8002e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e60:	e0dd      	b.n	800301e <lfs_dir_fetchmatch+0x6ca>
                }
                lfs_pair_fromle32(temptail);
 8002e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fbad 	bl	80015c6 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8002e6c:	6a3a      	ldr	r2, [r7, #32]
 8002e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e70:	405a      	eors	r2, r3
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f47f ae46 	bne.w	8002b08 <lfs_dir_fetchmatch+0x1b4>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002e7c:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002e82:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 8002e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e86:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	f107 0210 	add.w	r2, r7, #16
 8002e8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e92:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002e96:	4798      	blx	r3
 8002e98:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 8002e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	da09      	bge.n	8002eb4 <lfs_dir_fetchmatch+0x560>
                    if (res == LFS_ERR_CORRUPT) {
 8002ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002ea6:	d103      	bne.n	8002eb0 <lfs_dir_fetchmatch+0x55c>
                        dir->erased = false;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	759a      	strb	r2, [r3, #22]
 8002eae:	e029      	b.n	8002f04 <lfs_dir_fetchmatch+0x5b0>
                        break;
                    }
                    return res;
 8002eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 8002eb2:	e0b4      	b.n	800301e <lfs_dir_fetchmatch+0x6ca>
                }

                if (res == LFS_CMP_EQ) {
 8002eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d102      	bne.n	8002ec0 <lfs_dir_fetchmatch+0x56c>
                    // found a match
                    tempbesttag = tag;
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ebe:	e623      	b.n	8002b08 <lfs_dir_fetchmatch+0x1b4>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8002ec0:	6a3a      	ldr	r2, [r7, #32]
 8002ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec4:	405a      	eors	r2, r3
 8002ec6:	4b59      	ldr	r3, [pc, #356]	; (800302c <lfs_dir_fetchmatch+0x6d8>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <lfs_dir_fetchmatch+0x582>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ed4:	e618      	b.n	8002b08 <lfs_dir_fetchmatch+0x1b4>
                } else if (res == LFS_CMP_GT &&
 8002ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	f47f ae15 	bne.w	8002b08 <lfs_dir_fetchmatch+0x1b4>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe fbfa 	bl	80016da <lfs_tag_id>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	461c      	mov	r4, r3
 8002eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe fbf4 	bl	80016da <lfs_tag_id>
 8002ef2:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8002ef4:	429c      	cmp	r4, r3
 8002ef6:	f63f ae07 	bhi.w	8002b08 <lfs_dir_fetchmatch+0x1b4>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f00:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f02:	e601      	b.n	8002b08 <lfs_dir_fetchmatch+0x1b4>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d100      	bne.n	8002f0e <lfs_dir_fetchmatch+0x5ba>
 8002f0c:	e05d      	b.n	8002fca <lfs_dir_fetchmatch+0x676>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	333c      	adds	r3, #60	; 0x3c
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fc83 	bl	8001822 <lfs_gstate_hasmovehere>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d028      	beq.n	8002f74 <lfs_dir_fetchmatch+0x620>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe fbd7 	bl	80016da <lfs_tag_id>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	461c      	mov	r4, r3
 8002f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe fbd1 	bl	80016da <lfs_tag_id>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	429c      	cmp	r4, r3
 8002f3c:	d104      	bne.n	8002f48 <lfs_dir_fetchmatch+0x5f4>
                    besttag |= 0x80000000;
 8002f3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f44:	667b      	str	r3, [r7, #100]	; 0x64
 8002f46:	e015      	b.n	8002f74 <lfs_dir_fetchmatch+0x620>
                } else if (besttag != -1 &&
 8002f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d011      	beq.n	8002f74 <lfs_dir_fetchmatch+0x620>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe fbc0 	bl	80016da <lfs_tag_id>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	461c      	mov	r4, r3
 8002f5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fe fbba 	bl	80016da <lfs_tag_id>
 8002f66:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8002f68:	429c      	cmp	r4, r3
 8002f6a:	d203      	bcs.n	8002f74 <lfs_dir_fetchmatch+0x620>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8002f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f6e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002f72:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8002f74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00f      	beq.n	8002f9a <lfs_dir_fetchmatch+0x646>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe fbac 	bl	80016da <lfs_tag_id>
 8002f82:	4603      	mov	r3, r0
 8002f84:	461a      	mov	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	8a9b      	ldrh	r3, [r3, #20]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	f7fd fea0 	bl	8000cd2 <lfs_min>
 8002f92:	4603      	mov	r3, r0
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f98:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8002f9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe fb46 	bl	800162e <lfs_tag_isvalid>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <lfs_dir_fetchmatch+0x658>
                return besttag;
 8002fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002faa:	e038      	b.n	800301e <lfs_dir_fetchmatch+0x6ca>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8002fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fb93 	bl	80016da <lfs_tag_id>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	8a9b      	ldrh	r3, [r3, #20]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d202      	bcs.n	8002fc6 <lfs_dir_fetchmatch+0x672>
                return LFS_ERR_NOENT;
 8002fc0:	f06f 0301 	mvn.w	r3, #1
 8002fc4:	e02b      	b.n	800301e <lfs_dir_fetchmatch+0x6ca>
            } else {
                return 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e029      	b.n	800301e <lfs_dir_fetchmatch+0x6ca>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fe fa77 	bl	80014c0 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8002fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	bfb8      	it	lt
 8002fde:	425b      	neglt	r3, r3
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8002ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	f77f ad57 	ble.w	8002aac <lfs_dir_fetchmatch+0x158>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	490a      	ldr	r1, [pc, #40]	; (8003030 <lfs_dir_fetchmatch+0x6dc>)
 8003008:	9101      	str	r1, [sp, #4]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	f240 42ca 	movw	r2, #1226	; 0x4ca
 8003012:	4908      	ldr	r1, [pc, #32]	; (8003034 <lfs_dir_fetchmatch+0x6e0>)
 8003014:	4808      	ldr	r0, [pc, #32]	; (8003038 <lfs_dir_fetchmatch+0x6e4>)
 8003016:	f00b fba9 	bl	800e76c <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800301a:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800301e:	4618      	mov	r0, r3
 8003020:	376c      	adds	r7, #108	; 0x6c
 8003022:	46bd      	mov	sp, r7
 8003024:	bd90      	pop	{r4, r7, pc}
 8003026:	bf00      	nop
 8003028:	000ffc00 	.word	0x000ffc00
 800302c:	7ffffc00 	.word	0x7ffffc00
 8003030:	0800f524 	.word	0x0800f524
 8003034:	0800f430 	.word	0x0800f430
 8003038:	0800f530 	.word	0x0800f530

0800303c <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af04      	add	r7, sp, #16
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8003048:	2300      	movs	r3, #0
 800304a:	9303      	str	r3, [sp, #12]
 800304c:	2300      	movs	r3, #0
 800304e:	9302      	str	r3, [sp, #8]
 8003050:	2300      	movs	r3, #0
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	f04f 33ff 	mov.w	r3, #4294967295
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f7ff fc76 	bl	8002954 <lfs_dir_fetchmatch>
 8003068:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8003080:	f107 0310 	add.w	r3, r7, #16
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <lfs_dir_getgstate+0x5c>)
 8003088:	4a12      	ldr	r2, [pc, #72]	; (80030d4 <lfs_dir_getgstate+0x60>)
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f7fe ff05 	bl	8001e9c <lfs_dir_get>
 8003092:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b00      	cmp	r3, #0
 8003098:	da05      	bge.n	80030a6 <lfs_dir_getgstate+0x32>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f113 0f02 	cmn.w	r3, #2
 80030a0:	d001      	beq.n	80030a6 <lfs_dir_getgstate+0x32>
        return res;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	e00f      	b.n	80030c6 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	f113 0f02 	cmn.w	r3, #2
 80030ac:	d00a      	beq.n	80030c4 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 80030ae:	f107 0310 	add.w	r3, r7, #16
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fbd5 	bl	8001862 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 80030b8:	f107 0310 	add.w	r3, r7, #16
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe fb3a 	bl	8001738 <lfs_gstate_xor>
    }

    return 0;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	7ff0000c 	.word	0x7ff0000c
 80030d4:	7ff00000 	.word	0x7ff00000

080030d8 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	; 0x28
 80030dc:	af02      	add	r7, sp, #8
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10b      	bne.n	800310a <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	3308      	adds	r3, #8
 80030f6:	4932      	ldr	r1, [pc, #200]	; (80031c0 <lfs_dir_getinfo+0xe8>)
 80030f8:	461a      	mov	r2, r3
 80030fa:	460b      	mov	r3, r1
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2202      	movs	r2, #2
 8003104:	701a      	strb	r2, [r3, #0]
        return 0;
 8003106:	2300      	movs	r3, #0
 8003108:	e055      	b.n	80031b6 <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	029a      	lsls	r2, r3, #10
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003112:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8003114:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	4a29      	ldr	r2, [pc, #164]	; (80031c4 <lfs_dir_getinfo+0xec>)
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7fe feba 	bl	8001e9c <lfs_dir_get>
 8003128:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	2b00      	cmp	r3, #0
 800312e:	da01      	bge.n	8003134 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	e040      	b.n	80031b6 <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe faa7 	bl	800168a <lfs_tag_type3>
 800313c:	4603      	mov	r3, r0
 800313e:	b2da      	uxtb	r2, r3
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8003148:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800314c:	f043 0308 	orr.w	r3, r3, #8
 8003150:	f107 0214 	add.w	r2, r7, #20
 8003154:	9200      	str	r2, [sp, #0]
 8003156:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <lfs_dir_getinfo+0xf0>)
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f7fe fe9e 	bl	8001e9c <lfs_dir_get>
 8003160:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	2b00      	cmp	r3, #0
 8003166:	da01      	bge.n	800316c <lfs_dir_getinfo+0x94>
        return (int)tag;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	e024      	b.n	80031b6 <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe fbb6 	bl	80018e2 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe fa86 	bl	800168a <lfs_tag_type3>
 800317e:	4603      	mov	r3, r0
 8003180:	461a      	mov	r2, r3
 8003182:	f240 2302 	movw	r3, #514	; 0x202
 8003186:	429a      	cmp	r2, r3
 8003188:	d103      	bne.n	8003192 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	e010      	b.n	80031b4 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	4618      	mov	r0, r3
 8003196:	f7fe fa78 	bl	800168a <lfs_tag_type3>
 800319a:	4603      	mov	r3, r0
 800319c:	461a      	mov	r2, r3
 800319e:	f240 2301 	movw	r3, #513	; 0x201
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d106      	bne.n	80031b4 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fe faa5 	bl	80016f8 <lfs_tag_size>
 80031ae:	4602      	mov	r2, r0
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	605a      	str	r2, [r3, #4]
    }

    return 0;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	0800f570 	.word	0x0800f570
 80031c4:	780ffc00 	.word	0x780ffc00
 80031c8:	700ffc00 	.word	0x700ffc00

080031cc <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b08f      	sub	sp, #60	; 0x3c
 80031d0:	af04      	add	r7, sp, #16
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	689c      	ldr	r4, [r3, #8]
 80031ea:	68b8      	ldr	r0, [r7, #8]
 80031ec:	f7fe fa84 	bl	80016f8 <lfs_tag_size>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4619      	mov	r1, r3
 80031f4:	4620      	mov	r0, r4
 80031f6:	f7fd fd6c 	bl	8000cd2 <lfs_min>
 80031fa:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 80031fc:	6a3c      	ldr	r4, [r7, #32]
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	6852      	ldr	r2, [r2, #4]
 8003206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003208:	6849      	ldr	r1, [r1, #4]
 800320a:	69b8      	ldr	r0, [r7, #24]
 800320c:	9003      	str	r0, [sp, #12]
 800320e:	9102      	str	r1, [sp, #8]
 8003210:	9201      	str	r2, [sp, #4]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	4622      	mov	r2, r4
 8003218:	2100      	movs	r1, #0
 800321a:	6a38      	ldr	r0, [r7, #32]
 800321c:	f7fd ff70 	bl	8001100 <lfs_bd_cmp>
 8003220:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <lfs_dir_find_match+0x60>
        return res;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	e014      	b.n	8003256 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	689c      	ldr	r4, [r3, #8]
 8003230:	68b8      	ldr	r0, [r7, #8]
 8003232:	f7fe fa61 	bl	80016f8 <lfs_tag_size>
 8003236:	4603      	mov	r3, r0
 8003238:	429c      	cmp	r4, r3
 800323a:	d00b      	beq.n	8003254 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	689c      	ldr	r4, [r3, #8]
 8003240:	68b8      	ldr	r0, [r7, #8]
 8003242:	f7fe fa59 	bl	80016f8 <lfs_tag_size>
 8003246:	4603      	mov	r3, r0
 8003248:	429c      	cmp	r4, r3
 800324a:	d201      	bcs.n	8003250 <lfs_dir_find_match+0x84>
 800324c:	2301      	movs	r3, #1
 800324e:	e002      	b.n	8003256 <lfs_dir_find_match+0x8a>
 8003250:	2302      	movs	r3, #2
 8003252:	e000      	b.n	8003256 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	372c      	adds	r7, #44	; 0x2c
 800325a:	46bd      	mov	sp, r7
 800325c:	bd90      	pop	{r4, r7, pc}
	...

08003260 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b093      	sub	sp, #76	; 0x4c
 8003264:	af04      	add	r7, sp, #16
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003280:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8003282:	4b6e      	ldr	r3, [pc, #440]	; (800343c <lfs_dir_find+0x1dc>)
 8003284:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a1a      	ldr	r2, [r3, #32]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8003296:	496a      	ldr	r1, [pc, #424]	; (8003440 <lfs_dir_find+0x1e0>)
 8003298:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800329a:	f00b fb01 	bl	800e8a0 <strspn>
 800329e:	4602      	mov	r2, r0
 80032a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a2:	4413      	add	r3, r2
 80032a4:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 80032a6:	4966      	ldr	r1, [pc, #408]	; (8003440 <lfs_dir_find+0x1e0>)
 80032a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032aa:	f00b fae8 	bl	800e87e <strcspn>
 80032ae:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d105      	bne.n	80032c2 <lfs_dir_find+0x62>
 80032b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b8:	781a      	ldrb	r2, [r3, #0]
 80032ba:	4b62      	ldr	r3, [pc, #392]	; (8003444 <lfs_dir_find+0x1e4>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d00a      	beq.n	80032d8 <lfs_dir_find+0x78>
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d10c      	bne.n	80032e2 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 80032c8:	2202      	movs	r2, #2
 80032ca:	495f      	ldr	r1, [pc, #380]	; (8003448 <lfs_dir_find+0x1e8>)
 80032cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032ce:	f00a fe95 	bl	800dffc <memcmp>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d104      	bne.n	80032e2 <lfs_dir_find+0x82>
            name += namelen;
 80032d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	4413      	add	r3, r2
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 80032e0:	e7d9      	b.n	8003296 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 80032e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	4413      	add	r3, r2
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 80032ea:	2301      	movs	r3, #1
 80032ec:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 80032ee:	4954      	ldr	r1, [pc, #336]	; (8003440 <lfs_dir_find+0x1e0>)
 80032f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032f2:	f00b fad5 	bl	800e8a0 <strspn>
 80032f6:	4602      	mov	r2, r0
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	4413      	add	r3, r2
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 80032fe:	4950      	ldr	r1, [pc, #320]	; (8003440 <lfs_dir_find+0x1e0>)
 8003300:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003302:	f00b fabc 	bl	800e87e <strcspn>
 8003306:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01d      	beq.n	800334a <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d112      	bne.n	800333a <lfs_dir_find+0xda>
 8003314:	2202      	movs	r2, #2
 8003316:	494c      	ldr	r1, [pc, #304]	; (8003448 <lfs_dir_find+0x1e8>)
 8003318:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800331a:	f00a fe6f 	bl	800dffc <memcmp>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <lfs_dir_find+0xda>
                depth -= 1;
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	3b01      	subs	r3, #1
 8003328:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	2b00      	cmp	r3, #0
 800332e:	d107      	bne.n	8003340 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8003330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	4413      	add	r3, r2
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8003338:	e7ad      	b.n	8003296 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	3301      	adds	r3, #1
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8003340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	4413      	add	r3, r2
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8003348:	e7d1      	b.n	80032ee <lfs_dir_find+0x8e>
                break;
 800334a:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800334c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <lfs_dir_find+0xf8>
            return tag;
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	e06c      	b.n	8003432 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800335c:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe f992 	bl	800168a <lfs_tag_type3>
 8003366:	4603      	mov	r3, r0
 8003368:	2b02      	cmp	r3, #2
 800336a:	d002      	beq.n	8003372 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800336c:	f06f 0313 	mvn.w	r3, #19
 8003370:	e05f      	b.n	8003432 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8003372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe f9b0 	bl	80016da <lfs_tag_id>
 800337a:	4603      	mov	r3, r0
 800337c:	461a      	mov	r2, r3
 800337e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003382:	429a      	cmp	r2, r3
 8003384:	d01c      	beq.n	80033c0 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe f9a6 	bl	80016da <lfs_tag_id>
 800338e:	4603      	mov	r3, r0
 8003390:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8003392:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003396:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800339e:	9200      	str	r2, [sp, #0]
 80033a0:	4a2a      	ldr	r2, [pc, #168]	; (800344c <lfs_dir_find+0x1ec>)
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7fe fd79 	bl	8001e9c <lfs_dir_get>
 80033aa:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	da01      	bge.n	80033b6 <lfs_dir_find+0x156>
                return res;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	e03d      	b.n	8003432 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	3318      	adds	r3, #24
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe f903 	bl	80015c6 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 80033c6:	212f      	movs	r1, #47	; 0x2f
 80033c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80033ca:	f00b fa4b 	bl	800e864 <strchr>
 80033ce:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <lfs_dir_find+0x178>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	e000      	b.n	80033da <lfs_dir_find+0x17a>
 80033d8:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	613a      	str	r2, [r7, #16]
 80033de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033e0:	617a      	str	r2, [r7, #20]
 80033e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e4:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80033e6:	f107 0210 	add.w	r2, r7, #16
 80033ea:	9203      	str	r2, [sp, #12]
 80033ec:	4a18      	ldr	r2, [pc, #96]	; (8003450 <lfs_dir_find+0x1f0>)
 80033ee:	9202      	str	r2, [sp, #8]
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80033fa:	4622      	mov	r2, r4
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff faa8 	bl	8002954 <lfs_dir_fetchmatch>
 8003404:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	2b00      	cmp	r3, #0
 800340a:	da01      	bge.n	8003410 <lfs_dir_find+0x1b0>
                return tag;
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	e010      	b.n	8003432 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	2b00      	cmp	r3, #0
 8003414:	d004      	beq.n	8003420 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8003416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	4413      	add	r3, r2
 800341c:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 800341e:	e73a      	b.n	8003296 <lfs_dir_find+0x36>
            if (!dir->split) {
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	7ddb      	ldrb	r3, [r3, #23]
 8003424:	f083 0301 	eor.w	r3, r3, #1
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0c8      	beq.n	80033c0 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800342e:	f06f 0301 	mvn.w	r3, #1
    }
}
 8003432:	4618      	mov	r0, r3
 8003434:	373c      	adds	r7, #60	; 0x3c
 8003436:	46bd      	mov	sp, r7
 8003438:	bd90      	pop	{r4, r7, pc}
 800343a:	bf00      	nop
 800343c:	002ffc00 	.word	0x002ffc00
 8003440:	0800f570 	.word	0x0800f570
 8003444:	0800f574 	.word	0x0800f574
 8003448:	0800f578 	.word	0x0800f578
 800344c:	700ffc00 	.word	0x700ffc00
 8003450:	080031cd 	.word	0x080031cd

08003454 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b08b      	sub	sp, #44	; 0x2c
 8003458:	af04      	add	r7, sp, #16
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f103 0010 	add.w	r0, r3, #16
 8003468:	68fc      	ldr	r4, [r7, #12]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	6852      	ldr	r2, [r2, #4]
 8003472:	6839      	ldr	r1, [r7, #0]
 8003474:	9103      	str	r1, [sp, #12]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	9102      	str	r1, [sp, #8]
 800347a:	9201      	str	r2, [sp, #4]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2300      	movs	r3, #0
 8003480:	4622      	mov	r2, r4
 8003482:	4601      	mov	r1, r0
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7fd ff3d 	bl	8001304 <lfs_bd_prog>
 800348a:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <lfs_dir_commitprog+0x42>
        return err;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	e010      	b.n	80034b8 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4618      	mov	r0, r3
 80034a0:	f004 f814 	bl	80074cc <lfs_crc>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	60da      	str	r2, [r3, #12]
    commit->off += size;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	441a      	add	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	605a      	str	r2, [r3, #4]
    return 0;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd90      	pop	{r4, r7, pc}

080034c0 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b08f      	sub	sp, #60	; 0x3c
 80034c4:	af04      	add	r7, sp, #16
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fe f91e 	bl	8001710 <lfs_tag_dsize>
 80034d4:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	441a      	add	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d902      	bls.n	80034ec <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 80034e6:	f06f 031b 	mvn.w	r3, #27
 80034ea:	e065      	b.n	80035b8 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	4053      	eors	r3, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd fc76 	bl	8000dea <lfs_tobe32>
 80034fe:	4603      	mov	r3, r0
 8003500:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8003502:	f107 0214 	add.w	r2, r7, #20
 8003506:	2304      	movs	r3, #4
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7ff ffa2 	bl	8003454 <lfs_dir_commitprog>
 8003510:	61f8      	str	r0, [r7, #28]
    if (err) {
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <lfs_dir_commitattr+0x5c>
        return err;
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	e04d      	b.n	80035b8 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	db0c      	blt.n	800353c <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	3b04      	subs	r3, #4
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f7ff ff92 	bl	8003454 <lfs_dir_commitprog>
 8003530:	61f8      	str	r0, [r7, #28]
        if (err) {
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d039      	beq.n	80035ac <lfs_dir_commitattr+0xec>
            return err;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	e03d      	b.n	80035b8 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003540:	2300      	movs	r3, #0
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
 8003544:	e02d      	b.n	80035a2 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8003546:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8003548:	6a3a      	ldr	r2, [r7, #32]
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800354e:	1f1c      	subs	r4, r3, #4
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8003558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355a:	440a      	add	r2, r1
 800355c:	2101      	movs	r1, #1
 800355e:	9103      	str	r1, [sp, #12]
 8003560:	f107 0113 	add.w	r1, r7, #19
 8003564:	9102      	str	r1, [sp, #8]
 8003566:	9201      	str	r2, [sp, #4]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4623      	mov	r3, r4
 800356c:	4602      	mov	r2, r0
 800356e:	2100      	movs	r1, #0
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7fd fc81 	bl	8000e78 <lfs_bd_read>
 8003576:	61f8      	str	r0, [r7, #28]
            if (err) {
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <lfs_dir_commitattr+0xc2>
                return err;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	e01a      	b.n	80035b8 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8003582:	f107 0213 	add.w	r2, r7, #19
 8003586:	2301      	movs	r3, #1
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff ff62 	bl	8003454 <lfs_dir_commitprog>
 8003590:	61f8      	str	r0, [r7, #28]
            if (err) {
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <lfs_dir_commitattr+0xdc>
                return err;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	e00d      	b.n	80035b8 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	3301      	adds	r3, #1
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	3b04      	subs	r3, #4
 80035a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d3cc      	bcc.n	8003546 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	609a      	str	r2, [r3, #8]
    return 0;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	372c      	adds	r7, #44	; 0x2c
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd90      	pop	{r4, r7, pc}

080035c0 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b097      	sub	sp, #92	; 0x5c
 80035c4:	af04      	add	r7, sp, #16
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f7fd fb9c 	bl	8000d18 <lfs_alignup>
 80035e0:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80035ea:	e0a6      	b.n	800373a <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 80035f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fd fb67 	bl	8000cd2 <lfs_min>
 8003604:	4602      	mov	r2, r0
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	4413      	add	r3, r2
 800360a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 800360c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	429a      	cmp	r2, r3
 8003612:	d206      	bcs.n	8003622 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8003614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003616:	3b08      	subs	r3, #8
 8003618:	4619      	mov	r1, r3
 800361a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800361c:	f7fd fb59 	bl	8000cd2 <lfs_min>
 8003620:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 8003622:	f04f 33ff 	mov.w	r3, #4294967295
 8003626:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2204      	movs	r2, #4
 8003630:	9203      	str	r2, [sp, #12]
 8003632:	f107 0214 	add.w	r2, r7, #20
 8003636:	9202      	str	r2, [sp, #8]
 8003638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800363a:	9201      	str	r2, [sp, #4]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2304      	movs	r3, #4
 8003640:	460a      	mov	r2, r1
 8003642:	2100      	movs	r1, #0
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7fd fc17 	bl	8000e78 <lfs_bd_read>
 800364a:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <lfs_dir_commitcrc+0x9e>
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003658:	d001      	beq.n	800365e <lfs_dir_commitcrc+0x9e>
            return err;
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	e0e8      	b.n	8003830 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fd fbb7 	bl	8000dd4 <lfs_frombe32>
 8003666:	4603      	mov	r3, r0
 8003668:	43db      	mvns	r3, r3
 800366a:	0fdb      	lsrs	r3, r3, #31
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8003676:	7efb      	ldrb	r3, [r7, #27]
 8003678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367c:	051a      	lsls	r2, r3, #20
 800367e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	1acb      	subs	r3, r1, r3
 8003684:	4313      	orrs	r3, r2
 8003686:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800368a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800368e:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	4053      	eors	r3, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f7fd fba6 	bl	8000dea <lfs_tobe32>
 800369e:	4603      	mov	r3, r0
 80036a0:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f107 010c 	add.w	r1, r7, #12
 80036aa:	2204      	movs	r2, #4
 80036ac:	4618      	mov	r0, r3
 80036ae:	f003 ff0d 	bl	80074cc <lfs_crc>
 80036b2:	4602      	mov	r2, r0
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fd fb7d 	bl	8000dbc <lfs_tole32>
 80036c2:	4603      	mov	r3, r0
 80036c4:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f103 0010 	add.w	r0, r3, #16
 80036cc:	687c      	ldr	r4, [r7, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	6852      	ldr	r2, [r2, #4]
 80036d6:	2108      	movs	r1, #8
 80036d8:	9103      	str	r1, [sp, #12]
 80036da:	f107 010c 	add.w	r1, r7, #12
 80036de:	9102      	str	r1, [sp, #8]
 80036e0:	9201      	str	r2, [sp, #4]
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	4622      	mov	r2, r4
 80036e8:	4601      	mov	r1, r0
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd fe0a 	bl	8001304 <lfs_bd_prog>
 80036f0:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <lfs_dir_commitcrc+0x13c>
            return err;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	e099      	b.n	8003830 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 80036fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd fff0 	bl	80016f8 <lfs_tag_size>
 8003718:	4603      	mov	r3, r0
 800371a:	1d1a      	adds	r2, r3, #4
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	441a      	add	r2, r3
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8003726:	7efb      	ldrb	r3, [r7, #27]
 8003728:	07da      	lsls	r2, r3, #31
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	405a      	eors	r2, r3
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f04f 32ff 	mov.w	r2, #4294967295
 8003738:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003740:	429a      	cmp	r2, r3
 8003742:	f63f af53 	bhi.w	80035ec <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f103 0110 	add.w	r1, r3, #16
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	2300      	movs	r3, #0
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7fd fda3 	bl	800129c <lfs_bd_sync>
 8003756:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <lfs_dir_commitcrc+0x1a2>
        return err;
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	e066      	b.n	8003830 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 8003768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800376a:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800376c:	e05b      	b.n	8003826 <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 800376e:	f04f 33ff 	mov.w	r3, #4294967295
 8003772:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8003774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003778:	e030      	b.n	80037dc <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 800377a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800377c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800377e:	429a      	cmp	r2, r3
 8003780:	d106      	bne.n	8003790 <lfs_dir_commitcrc+0x1d0>
 8003782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003786:	429a      	cmp	r2, r3
 8003788:	d002      	beq.n	8003790 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 800378a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800378e:	e04f      	b.n	8003830 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8003790:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 8003792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8003798:	1d18      	adds	r0, r3, #4
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2201      	movs	r2, #1
 80037a0:	9203      	str	r2, [sp, #12]
 80037a2:	f107 020b 	add.w	r2, r7, #11
 80037a6:	9202      	str	r2, [sp, #8]
 80037a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037aa:	9201      	str	r2, [sp, #4]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	4603      	mov	r3, r0
 80037b0:	460a      	mov	r2, r1
 80037b2:	2100      	movs	r1, #0
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7fd fb5f 	bl	8000e78 <lfs_bd_read>
 80037ba:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <lfs_dir_commitcrc+0x206>
                return err;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	e034      	b.n	8003830 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 80037c6:	f107 030b 	add.w	r3, r7, #11
 80037ca:	2201      	movs	r2, #1
 80037cc:	4619      	mov	r1, r3
 80037ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037d0:	f003 fe7c 	bl	80074cc <lfs_crc>
 80037d4:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	3301      	adds	r3, #1
 80037da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037de:	3304      	adds	r3, #4
 80037e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d3c9      	bcc.n	800377a <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 80037ec:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80037f0:	e01e      	b.n	8003830 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 80037f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd fa68 	bl	8000cd2 <lfs_min>
 8003802:	4602      	mov	r2, r0
 8003804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003806:	4413      	add	r3, r2
 8003808:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 800380a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	429a      	cmp	r2, r3
 8003810:	d206      	bcs.n	8003820 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	3b08      	subs	r3, #8
 8003816:	4619      	mov	r1, r3
 8003818:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800381a:	f7fd fa5a 	bl	8000cd2 <lfs_min>
 800381e:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 8003820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003822:	3304      	adds	r3, #4
 8003824:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8003826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	429a      	cmp	r2, r3
 800382c:	d39f      	bcc.n	800376e <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	374c      	adds	r7, #76	; 0x4c
 8003834:	46bd      	mov	sp, r7
 8003836:	bd90      	pop	{r4, r7, pc}

08003838 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af04      	add	r7, sp, #16
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	e016      	b.n	8003876 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3301      	adds	r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	bfb8      	it	lt
 8003854:	425b      	neglt	r3, r3
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	4413      	add	r3, r2
 800385c:	4619      	mov	r1, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fe f982 	bl	8001b68 <lfs_alloc>
 8003864:	60f8      	str	r0, [r7, #12]
        if (err) {
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <lfs_dir_alloc+0x38>
            return err;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	e058      	b.n	8003922 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	3301      	adds	r3, #1
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b01      	cmp	r3, #1
 800387a:	dde5      	ble.n	8003848 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2200      	movs	r2, #0
 8003880:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800388c:	2004      	movs	r0, #4
 800388e:	9003      	str	r0, [sp, #12]
 8003890:	9202      	str	r2, [sp, #8]
 8003892:	2200      	movs	r2, #0
 8003894:	9201      	str	r2, [sp, #4]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2304      	movs	r3, #4
 800389a:	460a      	mov	r2, r1
 800389c:	2100      	movs	r1, #0
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd faea 	bl	8000e78 <lfs_bd_read>
 80038a4:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fa7c 	bl	8000da8 <lfs_fromle32>
 80038b0:	4602      	mov	r2, r0
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <lfs_dir_alloc+0x90>
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80038c2:	d001      	beq.n	80038c8 <lfs_dir_alloc+0x90>
        return err;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	e02c      	b.n	8003922 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	dd0e      	ble.n	80038f0 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	3301      	adds	r3, #1
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	4619      	mov	r1, r3
 80038e4:	4610      	mov	r0, r2
 80038e6:	f7fd fa17 	bl	8000d18 <lfs_alignup>
 80038ea:	4602      	mov	r2, r0
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2204      	movs	r2, #4
 80038f4:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f04f 32ff 	mov.w	r2, #4294967295
 80038fc:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2200      	movs	r2, #0
 8003902:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	f04f 32ff 	mov.w	r2, #4294967295
 800390a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	f04f 32ff 	mov.w	r2, #4294967295
 8003912:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2200      	movs	r2, #0
 8003918:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2200      	movs	r2, #0
 800391e:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800392a:	b580      	push	{r7, lr}
 800392c:	b092      	sub	sp, #72	; 0x48
 800392e:	af04      	add	r7, sp, #16
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8003938:	f107 0310 	add.w	r3, r7, #16
 800393c:	4619      	mov	r1, r3
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f7ff ff7a 	bl	8003838 <lfs_dir_alloc>
 8003944:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8003946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <lfs_dir_split+0x26>
        return err;
 800394c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394e:	e03c      	b.n	80039ca <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	7ddb      	ldrb	r3, [r3, #23]
 8003954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8003964:	f107 0110 	add.w	r1, r7, #16
 8003968:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800396c:	9302      	str	r3, [sp, #8]
 800396e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f879 	bl	8003a74 <lfs_dir_compact>
 8003982:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	2b00      	cmp	r3, #0
 8003988:	da01      	bge.n	800398e <lfs_dir_split+0x64>
        return res;
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	e01d      	b.n	80039ca <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2201      	movs	r2, #1
 800399e:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3320      	adds	r3, #32
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f7fd fdb7 	bl	800151c <lfs_pair_cmp>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d109      	bne.n	80039c8 <lfs_dir_split+0x9e>
 80039b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3738      	adds	r7, #56	; 0x38
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b086      	sub	sp, #24
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80039e2:	68b8      	ldr	r0, [r7, #8]
 80039e4:	f7fd fe94 	bl	8001710 <lfs_tag_dsize>
 80039e8:	4602      	mov	r2, r0
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	441a      	add	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	601a      	str	r2, [r3, #0]
    return 0;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b086      	sub	sp, #24
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	6859      	ldr	r1, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	f7ff fd51 	bl	80034c0 <lfs_dir_commitattr>
 8003a1e:	4603      	mov	r3, r0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	dd11      	ble.n	8003a60 <lfs_dir_needsrelocation+0x38>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	3301      	adds	r3, #1
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a48:	3201      	adds	r2, #1
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a52:	fb02 f201 	mul.w	r2, r2, r1
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <lfs_dir_needsrelocation+0x38>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <lfs_dir_needsrelocation+0x3a>
 8003a60:	2300      	movs	r3, #0
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	b2db      	uxtb	r3, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
	...

08003a74 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b0a4      	sub	sp, #144	; 0x90
 8003a78:	af0a      	add	r7, sp, #40	; 0x28
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8003a82:	2300      	movs	r3, #0
 8003a84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f7ff ffcc 	bl	8003a28 <lfs_dir_needsrelocation>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8003aa0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00e      	beq.n	8003ac6 <lfs_dir_compact+0x52>
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	657a      	str	r2, [r7, #84]	; 0x54
 8003aae:	2201      	movs	r2, #1
 8003ab0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ab2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fd fd2f 	bl	800151c <lfs_pair_cmp>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f040 8155 	bne.w	8003d70 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003acc:	2300      	movs	r3, #0
 8003ace:	643b      	str	r3, [r7, #64]	; 0x40
 8003ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ada:	64bb      	str	r3, [r7, #72]	; 0x48
 8003adc:	2300      	movs	r3, #0
 8003ade:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d004      	beq.n	8003af4 <lfs_dir_compact+0x80>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af0:	3b08      	subs	r3, #8
 8003af2:	e003      	b.n	8003afc <lfs_dir_compact+0x88>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8003afc:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4619      	mov	r1, r3
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f7fd fca9 	bl	800145c <lfs_bd_erase>
 8003b0a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8003b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b14:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003b18:	f000 812c 	beq.w	8003d74 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8003b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b1e:	e187      	b.n	8003e30 <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd f949 	bl	8000dbc <lfs_tole32>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8003b36:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7ff fc89 	bl	8003454 <lfs_dir_commitprog>
 8003b42:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd f92d 	bl	8000da8 <lfs_fromle32>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	609a      	str	r2, [r3, #8]
            if (err) {
 8003b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8003b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b5c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003b60:	f000 810a 	beq.w	8003d78 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8003b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b66:	e163      	b.n	8003e30 <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8003b68:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003b6c:	425b      	negs	r3, r3
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	637a      	str	r2, [r7, #52]	; 0x34
 8003b76:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b7a:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8003b7c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003b80:	9208      	str	r2, [sp, #32]
 8003b82:	4aad      	ldr	r2, [pc, #692]	; (8003e38 <lfs_dir_compact+0x3c4>)
 8003b84:	9207      	str	r2, [sp, #28]
 8003b86:	9306      	str	r3, [sp, #24]
 8003b88:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003b8c:	9305      	str	r3, [sp, #20]
 8003b8e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003b92:	9304      	str	r3, [sp, #16]
 8003b94:	2300      	movs	r3, #0
 8003b96:	9303      	str	r3, [sp, #12]
 8003b98:	4ba8      	ldr	r3, [pc, #672]	; (8003e3c <lfs_dir_compact+0x3c8>)
 8003b9a:	9302      	str	r3, [sp, #8]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba8:	2200      	movs	r2, #0
 8003baa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f7fe fac7 	bl	8002140 <lfs_dir_traverse>
 8003bb2:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8003bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d006      	beq.n	8003bc8 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8003bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bbc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003bc0:	f000 80dc 	beq.w	8003d7c <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8003bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc6:	e133      	b.n	8003e30 <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	3318      	adds	r3, #24
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd fc8b 	bl	80014e8 <lfs_pair_isnull>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f083 0301 	eor.w	r3, r3, #1
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d022      	beq.n	8003c24 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	3318      	adds	r3, #24
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd fd09 	bl	80015fa <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	7ddb      	ldrb	r3, [r3, #23]
 8003bec:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003bf0:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8003bf2:	4a93      	ldr	r2, [pc, #588]	; (8003e40 <lfs_dir_compact+0x3cc>)
 8003bf4:	431a      	orrs	r2, r3
                        dir->tail);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8003bfa:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f7ff fc5e 	bl	80034c0 <lfs_dir_commitattr>
 8003c04:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	3318      	adds	r3, #24
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd fcdb 	bl	80015c6 <lfs_pair_fromle32>
                if (err) {
 8003c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d006      	beq.n	8003c24 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8003c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c18:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003c1c:	f000 80b0 	beq.w	8003d80 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c22:	e105      	b.n	8003e30 <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8003c24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003c30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c34:	f083 0301 	eor.w	r3, r3, #1
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d011      	beq.n	8003c62 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c48:	4611      	mov	r1, r2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fd fd74 	bl	8001738 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fd fd6b 	bl	8001738 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003c68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd fd62 	bl	8001738 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c7a:	f023 0303 	bic.w	r3, r3, #3
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003c80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c84:	461a      	mov	r2, r3
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f7ff f9f3 	bl	8003074 <lfs_dir_getgstate>
 8003c8e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <lfs_dir_compact+0x226>
                return err;
 8003c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c98:	e0ca      	b.n	8003e30 <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8003c9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fd fd6e 	bl	8001780 <lfs_gstate_iszero>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f083 0301 	eor.w	r3, r3, #1
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d016      	beq.n	8003cde <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8003cb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fd fdf4 	bl	80018a2 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8003cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cbe:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003cc2:	4a60      	ldr	r2, [pc, #384]	; (8003e44 <lfs_dir_compact+0x3d0>)
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f7ff fbfb 	bl	80034c0 <lfs_dir_commitattr>
 8003cca:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8003ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8003cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cd4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003cd8:	d054      	beq.n	8003d84 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8003cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cdc:	e0a8      	b.n	8003e30 <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8003cde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f7ff fc6b 	bl	80035c0 <lfs_dir_commitcrc>
 8003cea:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8003cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003cf8:	d046      	beq.n	8003d88 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8003cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cfc:	e098      	b.n	8003e30 <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d04:	6992      	ldr	r2, [r2, #24]
 8003d06:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d0a:	fb02 f201 	mul.w	r2, r2, r1
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d006      	beq.n	8003d22 <lfs_dir_compact+0x2ae>
 8003d14:	4b4c      	ldr	r3, [pc, #304]	; (8003e48 <lfs_dir_compact+0x3d4>)
 8003d16:	4a4d      	ldr	r2, [pc, #308]	; (8003e4c <lfs_dir_compact+0x3d8>)
 8003d18:	f240 714a 	movw	r1, #1866	; 0x74a
 8003d1c:	484c      	ldr	r0, [pc, #304]	; (8003e50 <lfs_dir_compact+0x3dc>)
 8003d1e:	f00a f903 	bl	800df28 <__assert_func>
            lfs_pair_swap(dir->pair);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fd fbcb 	bl	80014c0 <lfs_pair_swap>
            dir->count = end - begin;
 8003d2a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8003d2e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8003d3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8003d40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3348      	adds	r3, #72	; 0x48
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
 8003d50:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003d52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003d56:	f083 0301 	eor.w	r3, r3, #1
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d064      	beq.n	8003e2a <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	333c      	adds	r3, #60	; 0x3c
 8003d66:	3230      	adds	r2, #48	; 0x30
 8003d68:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8003d6e:	e05c      	b.n	8003e2a <lfs_dir_compact+0x3b6>
        goto relocate;
 8003d70:	bf00      	nop
 8003d72:	e00a      	b.n	8003d8a <lfs_dir_compact+0x316>
                    goto relocate;
 8003d74:	bf00      	nop
 8003d76:	e008      	b.n	8003d8a <lfs_dir_compact+0x316>
                    goto relocate;
 8003d78:	bf00      	nop
 8003d7a:	e006      	b.n	8003d8a <lfs_dir_compact+0x316>
                    goto relocate;
 8003d7c:	bf00      	nop
 8003d7e:	e004      	b.n	8003d8a <lfs_dir_compact+0x316>
                        goto relocate;
 8003d80:	bf00      	nop
 8003d82:	e002      	b.n	8003d8a <lfs_dir_compact+0x316>
                        goto relocate;
 8003d84:	bf00      	nop
 8003d86:	e000      	b.n	8003d8a <lfs_dir_compact+0x316>
                    goto relocate;
 8003d88:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	3310      	adds	r3, #16
 8003d94:	4619      	mov	r1, r3
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f7fd f84a 	bl	8000e30 <lfs_cache_drop>
        if (!tired) {
 8003d9c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003da0:	f083 0301 	eor.w	r3, r3, #1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4a29      	ldr	r2, [pc, #164]	; (8003e54 <lfs_dir_compact+0x3e0>)
 8003db0:	9200      	str	r2, [sp, #0]
 8003db2:	f240 725c 	movw	r2, #1884	; 0x75c
 8003db6:	4926      	ldr	r1, [pc, #152]	; (8003e50 <lfs_dir_compact+0x3dc>)
 8003db8:	4827      	ldr	r0, [pc, #156]	; (8003e58 <lfs_dir_compact+0x3e4>)
 8003dba:	f00a fcd7 	bl	800e76c <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	617a      	str	r2, [r7, #20]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	61ba      	str	r2, [r7, #24]
 8003dc8:	f107 0214 	add.w	r2, r7, #20
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fd fba4 	bl	800151c <lfs_pair_cmp>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10c      	bne.n	8003df4 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <lfs_dir_compact+0x3e0>)
 8003de0:	9200      	str	r2, [sp, #0]
 8003de2:	f240 7261 	movw	r2, #1889	; 0x761
 8003de6:	491a      	ldr	r1, [pc, #104]	; (8003e50 <lfs_dir_compact+0x3dc>)
 8003de8:	481c      	ldr	r0, [pc, #112]	; (8003e5c <lfs_dir_compact+0x3e8>)
 8003dea:	f00a fcbf 	bl	800e76c <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8003dee:	f06f 031b 	mvn.w	r3, #27
 8003df2:	e01d      	b.n	8003e30 <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4619      	mov	r1, r3
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f7fd feb4 	bl	8001b68 <lfs_alloc>
 8003e00:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8003e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00c      	beq.n	8003e22 <lfs_dir_compact+0x3ae>
 8003e08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e0a:	f113 0f1c 	cmn.w	r3, #28
 8003e0e:	d106      	bne.n	8003e1e <lfs_dir_compact+0x3aa>
 8003e10:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003e14:	f083 0301 	eor.w	r3, r3, #1
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <lfs_dir_compact+0x3ae>
            return err;
 8003e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e20:	e006      	b.n	8003e30 <lfs_dir_compact+0x3bc>
        }

        tired = false;
 8003e22:	2300      	movs	r3, #0
 8003e24:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 8003e28:	e64d      	b.n	8003ac6 <lfs_dir_compact+0x52>
        break;
 8003e2a:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003e2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3768      	adds	r7, #104	; 0x68
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	080039ff 	.word	0x080039ff
 8003e3c:	400ffc00 	.word	0x400ffc00
 8003e40:	000ffc08 	.word	0x000ffc08
 8003e44:	7ffffc0c 	.word	0x7ffffc0c
 8003e48:	0800f57c 	.word	0x0800f57c
 8003e4c:	0800ff54 	.word	0x0800ff54
 8003e50:	0800f430 	.word	0x0800f430
 8003e54:	0800f524 	.word	0x0800f524
 8003e58:	0800f5a4 	.word	0x0800f5a4
 8003e5c:	0800f5c8 	.word	0x0800f5c8

08003e60 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003e60:	b590      	push	{r4, r7, lr}
 8003e62:	b097      	sub	sp, #92	; 0x5c
 8003e64:	af0a      	add	r7, sp, #40	; 0x28
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8003e6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003e74:	e058      	b.n	8003f28 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8003e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e80:	b292      	uxth	r2, r2
 8003e82:	4252      	negs	r2, r2
 8003e84:	b292      	uxth	r2, r2
 8003e86:	b212      	sxth	r2, r2
 8003e88:	f107 0118 	add.w	r1, r7, #24
 8003e8c:	9108      	str	r1, [sp, #32]
 8003e8e:	4979      	ldr	r1, [pc, #484]	; (8004074 <lfs_dir_splittingcompact+0x214>)
 8003e90:	9107      	str	r1, [sp, #28]
 8003e92:	9206      	str	r2, [sp, #24]
 8003e94:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003e98:	9205      	str	r2, [sp, #20]
 8003e9a:	9304      	str	r3, [sp, #16]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	9303      	str	r3, [sp, #12]
 8003ea0:	4b75      	ldr	r3, [pc, #468]	; (8004078 <lfs_dir_splittingcompact+0x218>)
 8003ea2:	9302      	str	r3, [sp, #8]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7fe f943 	bl	8002140 <lfs_dir_traverse>
 8003eba:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <lfs_dir_splittingcompact+0x66>
                return err;
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	e0d1      	b.n	800406a <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 8003ec6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2bfe      	cmp	r3, #254	; 0xfe
 8003ed0:	d822      	bhi.n	8003f18 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d004      	beq.n	8003ef0 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003eec:	085b      	lsrs	r3, r3, #1
 8003eee:	e003      	b.n	8003ef8 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ef4:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003ef6:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8003efc:	6992      	ldr	r2, [r2, #24]
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc ff09 	bl	8000d18 <lfs_alignup>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f7fc fee1 	bl	8000cd2 <lfs_min>
 8003f10:	4602      	mov	r2, r0
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d20e      	bcs.n	8003f36 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8003f18:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	085b      	lsrs	r3, r3, #1
 8003f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f24:	4413      	add	r3, r2
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003f28:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d8a0      	bhi.n	8003e76 <lfs_dir_splittingcompact+0x16>
 8003f34:	e000      	b.n	8003f38 <lfs_dir_splittingcompact+0xd8>
                break;
 8003f36:	bf00      	nop
        }

        if (split == begin) {
 8003f38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d02d      	beq.n	8003f9e <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003f4a:	9202      	str	r2, [sp, #8]
 8003f4c:	9301      	str	r3, [sp, #4]
 8003f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7ff fce6 	bl	800392a <lfs_dir_split>
 8003f5e:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <lfs_dir_splittingcompact+0x112>
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	f113 0f1c 	cmn.w	r3, #28
 8003f6c:	d001      	beq.n	8003f72 <lfs_dir_splittingcompact+0x112>
            return err;
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	e07b      	b.n	800406a <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00e      	beq.n	8003f96 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	493e      	ldr	r1, [pc, #248]	; (800407c <lfs_dir_splittingcompact+0x21c>)
 8003f82:	9101      	str	r1, [sp, #4]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	4613      	mov	r3, r2
 8003f88:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8003f8c:	493c      	ldr	r1, [pc, #240]	; (8004080 <lfs_dir_splittingcompact+0x220>)
 8003f8e:	483d      	ldr	r0, [pc, #244]	; (8004084 <lfs_dir_splittingcompact+0x224>)
 8003f90:	f00a fbec 	bl	800e76c <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8003f94:	e004      	b.n	8003fa0 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8003f9c:	e767      	b.n	8003e6e <lfs_dir_splittingcompact+0xe>
            break;
 8003f9e:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f7ff fd40 	bl	8003a28 <lfs_dir_needsrelocation>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d04e      	beq.n	800404c <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	613a      	str	r2, [r7, #16]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	617a      	str	r2, [r7, #20]
 8003fb8:	f107 0210 	add.w	r2, r7, #16
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fd faac 	bl	800151c <lfs_pair_cmp>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d140      	bne.n	800404c <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f003 f934 	bl	8007238 <lfs_fs_rawsize>
 8003fd0:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	da01      	bge.n	8003fdc <lfs_dir_splittingcompact+0x17c>
            return size;
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	e046      	b.n	800406a <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	085a      	lsrs	r2, r3, #1
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d930      	bls.n	800404c <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	4a23      	ldr	r2, [pc, #140]	; (800407c <lfs_dir_splittingcompact+0x21c>)
 8003ff0:	9200      	str	r2, [sp, #0]
 8003ff2:	f240 72bf 	movw	r2, #1983	; 0x7bf
 8003ff6:	4922      	ldr	r1, [pc, #136]	; (8004080 <lfs_dir_splittingcompact+0x220>)
 8003ff8:	4823      	ldr	r0, [pc, #140]	; (8004088 <lfs_dir_splittingcompact+0x228>)
 8003ffa:	f00a fbb7 	bl	800e76c <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003ffe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004002:	9302      	str	r3, [sp, #8]
 8004004:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004008:	9301      	str	r3, [sp, #4]
 800400a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f7ff fc88 	bl	800392a <lfs_dir_split>
 800401a:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <lfs_dir_splittingcompact+0x1ce>
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	f113 0f1c 	cmn.w	r3, #28
 8004028:	d001      	beq.n	800402e <lfs_dir_splittingcompact+0x1ce>
                return err;
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	e01d      	b.n	800406a <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8004034:	4b11      	ldr	r3, [pc, #68]	; (800407c <lfs_dir_splittingcompact+0x21c>)
 8004036:	f240 72c9 	movw	r2, #1993	; 0x7c9
 800403a:	4911      	ldr	r1, [pc, #68]	; (8004080 <lfs_dir_splittingcompact+0x220>)
 800403c:	4813      	ldr	r0, [pc, #76]	; (800408c <lfs_dir_splittingcompact+0x22c>)
 800403e:	f00a fb95 	bl	800e76c <iprintf>
 8004042:	e003      	b.n	800404c <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8004044:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004048:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 800404c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004050:	9302      	str	r3, [sp, #8]
 8004052:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7ff fd06 	bl	8003a74 <lfs_dir_compact>
 8004068:	4603      	mov	r3, r0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3734      	adds	r7, #52	; 0x34
 800406e:	46bd      	mov	sp, r7
 8004070:	bd90      	pop	{r4, r7, pc}
 8004072:	bf00      	nop
 8004074:	080039d3 	.word	0x080039d3
 8004078:	400ffc00 	.word	0x400ffc00
 800407c:	0800f524 	.word	0x0800f524
 8004080:	0800f430 	.word	0x0800f430
 8004084:	0800f600 	.word	0x0800f600
 8004088:	0800f630 	.word	0x0800f630
 800408c:	0800f660 	.word	0x0800f660

08004090 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8004090:	b5b0      	push	{r4, r5, r7, lr}
 8004092:	b0a6      	sub	sp, #152	; 0x98
 8004094:	af0a      	add	r7, sp, #40	; 0x28
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
    int state = 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 80040a2:	2300      	movs	r3, #0
 80040a4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 80040a8:	2300      	movs	r3, #0
 80040aa:	667b      	str	r3, [r7, #100]	; 0x64
 80040ac:	e06d      	b.n	800418a <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 80040ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	4413      	add	r3, r2
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fd fae6 	bl	800168a <lfs_tag_type3>
 80040be:	4603      	mov	r3, r0
 80040c0:	461a      	mov	r2, r3
 80040c2:	f240 4301 	movw	r3, #1025	; 0x401
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d106      	bne.n	80040d8 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	8a9b      	ldrh	r3, [r3, #20]
 80040ce:	3301      	adds	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	829a      	strh	r2, [r3, #20]
 80040d6:	e055      	b.n	8004184 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80040d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	4413      	add	r3, r2
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fd fad1 	bl	800168a <lfs_tag_type3>
 80040e8:	4603      	mov	r3, r0
 80040ea:	461a      	mov	r2, r3
 80040ec:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d114      	bne.n	800411e <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	8a9b      	ldrh	r3, [r3, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <lfs_dir_relocatingcommit+0x7a>
 80040fc:	4ba4      	ldr	r3, [pc, #656]	; (8004390 <lfs_dir_relocatingcommit+0x300>)
 80040fe:	4aa5      	ldr	r2, [pc, #660]	; (8004394 <lfs_dir_relocatingcommit+0x304>)
 8004100:	f240 71e1 	movw	r1, #2017	; 0x7e1
 8004104:	48a4      	ldr	r0, [pc, #656]	; (8004398 <lfs_dir_relocatingcommit+0x308>)
 8004106:	f009 ff0f 	bl	800df28 <__assert_func>
            dir->count -= 1;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	8a9b      	ldrh	r3, [r3, #20]
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8004116:	2301      	movs	r3, #1
 8004118:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800411c:	e032      	b.n	8004184 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800411e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	4413      	add	r3, r2
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7fd fa9f 	bl	800166c <lfs_tag_type1>
 800412e:	4603      	mov	r3, r0
 8004130:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004134:	d126      	bne.n	8004184 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8004136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	4413      	add	r3, r2
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8004146:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	4413      	add	r3, r2
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8004156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	4413      	add	r3, r2
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7fd faa1 	bl	80016a8 <lfs_tag_chunk>
 8004166:	4603      	mov	r3, r0
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2da      	uxtb	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	3318      	adds	r3, #24
 800417e:	4618      	mov	r0, r3
 8004180:	f7fd fa21 	bl	80015c6 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8004184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004186:	3301      	adds	r3, #1
 8004188:	667b      	str	r3, [r7, #100]	; 0x64
 800418a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800418c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004190:	429a      	cmp	r2, r3
 8004192:	db8c      	blt.n	80040ae <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8004194:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8004198:	2b00      	cmp	r3, #0
 800419a:	d02b      	beq.n	80041f4 <lfs_dir_relocatingcommit+0x164>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	8a9b      	ldrh	r3, [r3, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d127      	bne.n	80041f4 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 80041a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <lfs_dir_relocatingcommit+0x12a>
 80041ac:	4b7b      	ldr	r3, [pc, #492]	; (800439c <lfs_dir_relocatingcommit+0x30c>)
 80041ae:	4a79      	ldr	r2, [pc, #484]	; (8004394 <lfs_dir_relocatingcommit+0x304>)
 80041b0:	f240 71ee 	movw	r1, #2030	; 0x7ee
 80041b4:	4878      	ldr	r0, [pc, #480]	; (8004398 <lfs_dir_relocatingcommit+0x308>)
 80041b6:	f009 feb7 	bl	800df28 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80041c0:	4619      	mov	r1, r3
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f002 fcae 	bl	8006b24 <lfs_fs_pred>
 80041c8:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 80041ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <lfs_dir_relocatingcommit+0x14c>
 80041d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041d2:	f113 0f02 	cmn.w	r3, #2
 80041d6:	d001      	beq.n	80041dc <lfs_dir_relocatingcommit+0x14c>
            return err;
 80041d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041da:	e203      	b.n	80045e4 <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 80041dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041de:	f113 0f02 	cmn.w	r3, #2
 80041e2:	d007      	beq.n	80041f4 <lfs_dir_relocatingcommit+0x164>
 80041e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041e8:	7ddb      	ldrb	r3, [r3, #23]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 80041ee:	2302      	movs	r3, #2
 80041f0:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 80041f2:	e121      	b.n	8004438 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	7d9b      	ldrb	r3, [r3, #22]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80fb 	beq.w	80043f4 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8004202:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800420e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004210:	f04f 33ff 	mov.w	r3, #4294967295
 8004214:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800421a:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8004222:	2b00      	cmp	r3, #0
 8004224:	d004      	beq.n	8004230 <lfs_dir_relocatingcommit+0x1a0>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800422a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422c:	3b08      	subs	r3, #8
 800422e:	e003      	b.n	8004238 <lfs_dir_relocatingcommit+0x1a8>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8004238:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	3318      	adds	r3, #24
 800423e:	4618      	mov	r0, r3
 8004240:	f7fd f9db 	bl	80015fa <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004250:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8004256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800425a:	9308      	str	r3, [sp, #32]
 800425c:	4b50      	ldr	r3, [pc, #320]	; (80043a0 <lfs_dir_relocatingcommit+0x310>)
 800425e:	9307      	str	r3, [sp, #28]
 8004260:	2300      	movs	r3, #0
 8004262:	9306      	str	r3, [sp, #24]
 8004264:	2300      	movs	r3, #0
 8004266:	9305      	str	r3, [sp, #20]
 8004268:	2300      	movs	r3, #0
 800426a:	9304      	str	r3, [sp, #16]
 800426c:	2300      	movs	r3, #0
 800426e:	9303      	str	r3, [sp, #12]
 8004270:	2300      	movs	r3, #0
 8004272:	9302      	str	r3, [sp, #8]
 8004274:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004278:	9301      	str	r3, [sp, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	460b      	mov	r3, r1
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f7fd ff5c 	bl	8002140 <lfs_dir_traverse>
 8004288:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	3318      	adds	r3, #24
 800428e:	4618      	mov	r0, r3
 8004290:	f7fd f999 	bl	80015c6 <lfs_pair_fromle32>
        if (err) {
 8004294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00b      	beq.n	80042b2 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800429a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800429c:	f113 0f1c 	cmn.w	r3, #28
 80042a0:	f000 80aa 	beq.w	80043f8 <lfs_dir_relocatingcommit+0x368>
 80042a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80042aa:	f000 80a5 	beq.w	80043f8 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 80042ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b0:	e198      	b.n	80045e4 <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 80042b2:	f107 031c 	add.w	r3, r7, #28
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	605a      	str	r2, [r3, #4]
 80042bc:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80042c4:	f107 031c 	add.w	r3, r7, #28
 80042c8:	4611      	mov	r1, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fd fa34 	bl	8001738 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80042d6:	f107 031c 	add.w	r3, r7, #28
 80042da:	4611      	mov	r1, r2
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fd fa2b 	bl	8001738 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80042e8:	f107 031c 	add.w	r3, r7, #28
 80042ec:	4611      	mov	r1, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fd fa22 	bl	8001738 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042fa:	f023 0303 	bic.w	r3, r3, #3
 80042fe:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8004300:	f107 031c 	add.w	r3, r7, #28
 8004304:	4618      	mov	r0, r3
 8004306:	f7fd fa3b 	bl	8001780 <lfs_gstate_iszero>
 800430a:	4603      	mov	r3, r0
 800430c:	f083 0301 	eor.w	r3, r3, #1
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d027      	beq.n	8004366 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8004316:	f107 031c 	add.w	r3, r7, #28
 800431a:	461a      	mov	r2, r3
 800431c:	68b9      	ldr	r1, [r7, #8]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f7fe fea8 	bl	8003074 <lfs_dir_getgstate>
 8004324:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8004326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 800432c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800432e:	e159      	b.n	80045e4 <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 8004330:	f107 031c 	add.w	r3, r7, #28
 8004334:	4618      	mov	r0, r3
 8004336:	f7fd fab4 	bl	80018a2 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800433a:	f107 031c 	add.w	r3, r7, #28
 800433e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004342:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <lfs_dir_relocatingcommit+0x314>)
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff f8bb 	bl	80034c0 <lfs_dir_commitattr>
 800434a:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 800434c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8004352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004354:	f113 0f1c 	cmn.w	r3, #28
 8004358:	d050      	beq.n	80043fc <lfs_dir_relocatingcommit+0x36c>
 800435a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800435c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004360:	d04c      	beq.n	80043fc <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8004362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004364:	e13e      	b.n	80045e4 <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8004366:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800436a:	4619      	mov	r1, r3
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7ff f927 	bl	80035c0 <lfs_dir_commitcrc>
 8004372:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8004374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004376:	2b00      	cmp	r3, #0
 8004378:	d016      	beq.n	80043a8 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800437a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800437c:	f113 0f1c 	cmn.w	r3, #28
 8004380:	d03e      	beq.n	8004400 <lfs_dir_relocatingcommit+0x370>
 8004382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004384:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004388:	d03a      	beq.n	8004400 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 800438a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800438c:	e12a      	b.n	80045e4 <lfs_dir_relocatingcommit+0x554>
 800438e:	bf00      	nop
 8004390:	0800f68c 	.word	0x0800f68c
 8004394:	0800ff64 	.word	0x0800ff64
 8004398:	0800f430 	.word	0x0800f430
 800439c:	0800f69c 	.word	0x0800f69c
 80043a0:	080039ff 	.word	0x080039ff
 80043a4:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80043a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80043ae:	6992      	ldr	r2, [r2, #24]
 80043b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80043b4:	fb02 f201 	mul.w	r2, r2, r1
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d006      	beq.n	80043cc <lfs_dir_relocatingcommit+0x33c>
 80043be:	4b8b      	ldr	r3, [pc, #556]	; (80045ec <lfs_dir_relocatingcommit+0x55c>)
 80043c0:	4a8b      	ldr	r2, [pc, #556]	; (80045f0 <lfs_dir_relocatingcommit+0x560>)
 80043c2:	f640 0138 	movw	r1, #2104	; 0x838
 80043c6:	488b      	ldr	r0, [pc, #556]	; (80045f4 <lfs_dir_relocatingcommit+0x564>)
 80043c8:	f009 fdae 	bl	800df28 <__assert_func>
        dir->off = commit.off;
 80043cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80043d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	333c      	adds	r3, #60	; 0x3c
 80043de:	3230      	adds	r2, #48	; 0x30
 80043e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80043e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3348      	adds	r3, #72	; 0x48
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	605a      	str	r2, [r3, #4]
 80043f0:	609a      	str	r2, [r3, #8]
 80043f2:	e021      	b.n	8004438 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 80043f4:	bf00      	nop
 80043f6:	e004      	b.n	8004402 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80043f8:	bf00      	nop
 80043fa:	e002      	b.n	8004402 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004400:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3310      	adds	r3, #16
 8004406:	4619      	mov	r1, r3
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f7fc fd11 	bl	8000e30 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	8a9b      	ldrh	r3, [r3, #20]
 8004412:	9302      	str	r3, [sp, #8]
 8004414:	2300      	movs	r3, #0
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7ff fd1b 	bl	8003e60 <lfs_dir_splittingcompact>
 800442a:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 800442c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442e:	2b00      	cmp	r3, #0
 8004430:	da01      	bge.n	8004436 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8004432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004434:	e0d6      	b.n	80045e4 <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 8004436:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	64bb      	str	r3, [r7, #72]	; 0x48
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	663b      	str	r3, [r7, #96]	; 0x60
 800444a:	e0c6      	b.n	80045da <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 800444c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800444e:	3308      	adds	r3, #8
 8004450:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004454:	4611      	mov	r1, r2
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd f860 	bl	800151c <lfs_pair_cmp>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	f040 80b8 	bne.w	80045d4 <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8004464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	f103 0408 	add.w	r4, r3, #8
 800446c:	4615      	mov	r5, r2
 800446e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004470:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004472:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 800447a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800447c:	3308      	adds	r3, #8
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	f000 809d 	beq.w	80045c0 <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 8004486:	2300      	movs	r3, #0
 8004488:	65fb      	str	r3, [r7, #92]	; 0x5c
 800448a:	e07b      	b.n	8004584 <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800448c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	4413      	add	r3, r2
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fd f8f7 	bl	800168a <lfs_tag_type3>
 800449c:	4603      	mov	r3, r0
 800449e:	461a      	mov	r2, r3
 80044a0:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d115      	bne.n	80044d4 <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80044a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044aa:	889c      	ldrh	r4, [r3, #4]
 80044ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	4413      	add	r3, r2
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fd f90f 	bl	80016da <lfs_tag_id>
 80044bc:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80044be:	429c      	cmp	r4, r3
 80044c0:	d108      	bne.n	80044d4 <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80044c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c4:	f04f 32ff 	mov.w	r2, #4294967295
 80044c8:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80044ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044cc:	f04f 32ff 	mov.w	r2, #4294967295
 80044d0:	60da      	str	r2, [r3, #12]
 80044d2:	e054      	b.n	800457e <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80044d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	4413      	add	r3, r2
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fd f8d3 	bl	800168a <lfs_tag_type3>
 80044e4:	4603      	mov	r3, r0
 80044e6:	461a      	mov	r2, r3
 80044e8:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d11c      	bne.n	800452a <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 80044f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044f2:	889c      	ldrh	r4, [r3, #4]
 80044f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	4413      	add	r3, r2
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fd f8eb 	bl	80016da <lfs_tag_id>
 8004504:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004506:	429c      	cmp	r4, r3
 8004508:	d90f      	bls.n	800452a <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 800450a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800450c:	889b      	ldrh	r3, [r3, #4]
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004514:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004518:	799b      	ldrb	r3, [r3, #6]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d12f      	bne.n	800457e <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 800451e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	1e5a      	subs	r2, r3, #1
 8004524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004526:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8004528:	e029      	b.n	800457e <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800452a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	4413      	add	r3, r2
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f7fd f8a8 	bl	800168a <lfs_tag_type3>
 800453a:	4603      	mov	r3, r0
 800453c:	461a      	mov	r2, r3
 800453e:	f240 4301 	movw	r3, #1025	; 0x401
 8004542:	429a      	cmp	r2, r3
 8004544:	d11b      	bne.n	800457e <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8004546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004548:	889c      	ldrh	r4, [r3, #4]
 800454a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	4413      	add	r3, r2
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7fd f8c0 	bl	80016da <lfs_tag_id>
 800455a:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800455c:	429c      	cmp	r4, r3
 800455e:	d30e      	bcc.n	800457e <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 8004560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004562:	889b      	ldrh	r3, [r3, #4]
 8004564:	3301      	adds	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800456a:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800456c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800456e:	799b      	ldrb	r3, [r3, #6]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d104      	bne.n	800457e <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 8004574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800457c:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 800457e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004580:	3301      	adds	r3, #1
 8004582:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004584:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004586:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800458a:	429a      	cmp	r2, r3
 800458c:	f6ff af7e 	blt.w	800448c <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8004590:	e016      	b.n	80045c0 <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 8004592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004594:	889a      	ldrh	r2, [r3, #4]
 8004596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004598:	8b9b      	ldrh	r3, [r3, #28]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	b29a      	uxth	r2, r3
 800459e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045a0:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80045a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045a4:	f103 0108 	add.w	r1, r3, #8
 80045a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045aa:	3320      	adds	r3, #32
 80045ac:	461a      	mov	r2, r3
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7fe fd44 	bl	800303c <lfs_dir_fetch>
 80045b4:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 80045b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <lfs_dir_relocatingcommit+0x530>
                    return err;
 80045bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045be:	e011      	b.n	80045e4 <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 80045c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045c2:	889a      	ldrh	r2, [r3, #4]
 80045c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045c6:	8b9b      	ldrh	r3, [r3, #28]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d303      	bcc.n	80045d4 <lfs_dir_relocatingcommit+0x544>
 80045cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ce:	7fdb      	ldrb	r3, [r3, #31]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1de      	bne.n	8004592 <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80045d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	663b      	str	r3, [r7, #96]	; 0x60
 80045da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f47f af35 	bne.w	800444c <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 80045e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3770      	adds	r7, #112	; 0x70
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bdb0      	pop	{r4, r5, r7, pc}
 80045ec:	0800f57c 	.word	0x0800f57c
 80045f0:	0800ff64 	.word	0x0800ff64
 80045f4:	0800f430 	.word	0x0800f430

080045f8 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80045f8:	b5b0      	push	{r4, r5, r7, lr}
 80045fa:	b0bc      	sub	sp, #240	; 0xf0
 80045fc:	af04      	add	r7, sp, #16
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800460e:	e045      	b.n	800469c <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004614:	3308      	adds	r3, #8
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	429a      	cmp	r2, r3
 800461a:	d03a      	beq.n	8004692 <lfs_dir_orphaningcommit+0x9a>
 800461c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004620:	3308      	adds	r3, #8
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	4611      	mov	r1, r2
 8004626:	4618      	mov	r0, r3
 8004628:	f7fc ff78 	bl	800151c <lfs_pair_cmp>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d12f      	bne.n	8004692 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004636:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004638:	2b01      	cmp	r3, #1
 800463a:	d12a      	bne.n	8004692 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800463c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d023      	beq.n	8004692 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800464a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004656:	429a      	cmp	r2, r3
 8004658:	d91b      	bls.n	8004692 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800465a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f001 f900 	bl	8005864 <lfs_file_outline>
 8004664:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8004668:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <lfs_dir_orphaningcommit+0x7e>
                return err;
 8004670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004674:	e2ad      	b.n	8004bd2 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8004676:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f001 f914 	bl	80058a8 <lfs_file_flush>
 8004680:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8004684:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <lfs_dir_orphaningcommit+0x9a>
                return err;
 800468c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004690:	e29f      	b.n	8004bd2 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800469c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1b5      	bne.n	8004610 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80046ba:	461d      	mov	r5, r3
 80046bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80046c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80046ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80046d2:	9301      	str	r3, [sp, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff fcd8 	bl	8004090 <lfs_dir_relocatingcommit>
 80046e0:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 80046e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da02      	bge.n	80046f2 <lfs_dir_orphaningcommit+0xfa>
        return state;
 80046ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046f0:	e26f      	b.n	8004bd2 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80046f8:	4611      	mov	r1, r2
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fc ff0e 	bl	800151c <lfs_pair_cmp>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	461d      	mov	r5, r3
 800470a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800470e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004712:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004716:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 800471a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800471e:	2b02      	cmp	r3, #2
 8004720:	d14a      	bne.n	80047b8 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3348      	adds	r3, #72	; 0x48
 8004726:	461a      	mov	r2, r3
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f7fe fca2 	bl	8003074 <lfs_dir_getgstate>
 8004730:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8004734:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <lfs_dir_orphaningcommit+0x14a>
            return err;
 800473c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004740:	e247      	b.n	8004bd2 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8004742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8004748:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800474a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	3318      	adds	r3, #24
 8004752:	4618      	mov	r0, r3
 8004754:	f7fc ff51 	bl	80015fa <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	7ddb      	ldrb	r3, [r3, #23]
 800475c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004760:	051a      	lsls	r2, r3, #20
 8004762:	4bc2      	ldr	r3, [pc, #776]	; (8004a6c <lfs_dir_orphaningcommit+0x474>)
 8004764:	4313      	orrs	r3, r2
 8004766:	667b      	str	r3, [r7, #100]	; 0x64
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	3318      	adds	r3, #24
 800476c:	66bb      	str	r3, [r7, #104]	; 0x68
 800476e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004772:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004776:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800477a:	2000      	movs	r0, #0
 800477c:	9001      	str	r0, [sp, #4]
 800477e:	2001      	movs	r0, #1
 8004780:	9000      	str	r0, [sp, #0]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7ff fc84 	bl	8004090 <lfs_dir_relocatingcommit>
 8004788:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	3318      	adds	r3, #24
 8004790:	4618      	mov	r0, r3
 8004792:	f7fc ff18 	bl	80015c6 <lfs_pair_fromle32>
        if (state < 0) {
 8004796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800479a:	2b00      	cmp	r3, #0
 800479c:	da02      	bge.n	80047a4 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 800479e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047a2:	e216      	b.n	8004bd2 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80047a4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80047a8:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80047ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80047b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80047b8:	2300      	movs	r3, #0
 80047ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 80047be:	e1fc      	b.n	8004bba <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80047c0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80047c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80047c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80047cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047d0:	4ca7      	ldr	r4, [pc, #668]	; (8004a70 <lfs_dir_orphaningcommit+0x478>)
 80047d2:	9403      	str	r4, [sp, #12]
 80047d4:	9102      	str	r1, [sp, #8]
 80047d6:	9201      	str	r2, [sp, #4]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	4603      	mov	r3, r0
 80047dc:	f640 02c2 	movw	r2, #2242	; 0x8c2
 80047e0:	49a4      	ldr	r1, [pc, #656]	; (8004a74 <lfs_dir_orphaningcommit+0x47c>)
 80047e2:	48a5      	ldr	r0, [pc, #660]	; (8004a78 <lfs_dir_orphaningcommit+0x480>)
 80047e4:	f009 ffc2 	bl	800e76c <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f103 0220 	add.w	r2, r3, #32
 80047f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80047f8:	4611      	mov	r1, r2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc fe8e 	bl	800151c <lfs_pair_cmp>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d107      	bne.n	8004816 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8004806:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800480e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800481e:	e037      	b.n	8004890 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8004820:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004824:	f103 0208 	add.w	r2, r3, #8
 8004828:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800482c:	4611      	mov	r1, r2
 800482e:	4618      	mov	r0, r3
 8004830:	f7fc fe74 	bl	800151c <lfs_pair_cmp>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 800483a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800483e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004842:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8004844:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004848:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800484c:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 800484e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004852:	799b      	ldrb	r3, [r3, #6]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d116      	bne.n	8004886 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8004858:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800485c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004860:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004864:	4611      	mov	r1, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f7fc fe58 	bl	800151c <lfs_pair_cmp>
 800486c:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 800486e:	2b00      	cmp	r3, #0
 8004870:	d109      	bne.n	8004886 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8004872:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004876:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800487a:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 800487c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004880:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004884:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004886:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004890:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1c3      	bne.n	8004820 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8004898:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800489c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80048a0:	4619      	mov	r1, r3
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f002 f9c6 	bl	8006c34 <lfs_fs_parent>
 80048a8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80048ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	da07      	bge.n	80048c4 <lfs_dir_orphaningcommit+0x2cc>
 80048b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048b8:	f113 0f02 	cmn.w	r3, #2
 80048bc:	d002      	beq.n	80048c4 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80048be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048c2:	e186      	b.n	8004bd2 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80048c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048c8:	f113 0f02 	cmn.w	r3, #2
 80048cc:	bf14      	ite	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	2300      	moveq	r3, #0
 80048d2:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 80048d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048da:	f113 0f02 	cmn.w	r3, #2
 80048de:	f000 809e 	beq.w	8004a1e <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 80048e2:	2101      	movs	r1, #1
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f002 f9fb 	bl	8006ce0 <lfs_fs_preporphans>
 80048ea:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 80048ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <lfs_dir_orphaningcommit+0x304>
                return err;
 80048f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048fa:	e16a      	b.n	8004bd2 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80048fc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004900:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3330      	adds	r3, #48	; 0x30
 8004908:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f7fc ff87 	bl	8001822 <lfs_gstate_hasmovehere>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d02d      	beq.n	8004976 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	4618      	mov	r0, r3
 8004920:	f7fc fedb 	bl	80016da <lfs_tag_id>
 8004924:	4603      	mov	r3, r0
 8004926:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 800492a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800492c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800492e:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8004932:	484f      	ldr	r0, [pc, #316]	; (8004a70 <lfs_dir_orphaningcommit+0x478>)
 8004934:	9002      	str	r0, [sp, #8]
 8004936:	9201      	str	r2, [sp, #4]
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	460b      	mov	r3, r1
 800493c:	f640 02ef 	movw	r2, #2287	; 0x8ef
 8004940:	494c      	ldr	r1, [pc, #304]	; (8004a74 <lfs_dir_orphaningcommit+0x47c>)
 8004942:	484e      	ldr	r0, [pc, #312]	; (8004a7c <lfs_dir_orphaningcommit+0x484>)
 8004944:	f009 ff12 	bl	800e76c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004948:	2200      	movs	r2, #0
 800494a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f002 fa00 	bl	8006d54 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8004954:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004958:	4618      	mov	r0, r3
 800495a:	f7fc febe 	bl	80016da <lfs_tag_id>
 800495e:	4603      	mov	r3, r0
 8004960:	461a      	mov	r2, r3
 8004962:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004966:	4293      	cmp	r3, r2
 8004968:	d205      	bcs.n	8004976 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 800496a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800496e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004972:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8004976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004978:	657b      	str	r3, [r7, #84]	; 0x54
 800497a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800497c:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 800497e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004982:	4618      	mov	r0, r3
 8004984:	f7fc fe39 	bl	80015fa <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8004988:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800498c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004990:	4293      	cmp	r3, r2
 8004992:	d007      	beq.n	80049a4 <lfs_dir_orphaningcommit+0x3ac>
 8004994:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004998:	029b      	lsls	r3, r3, #10
 800499a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800499e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80049a2:	e000      	b.n	80049a6 <lfs_dir_orphaningcommit+0x3ae>
 80049a4:	2300      	movs	r3, #0
 80049a6:	647b      	str	r3, [r7, #68]	; 0x44
 80049a8:	2300      	movs	r3, #0
 80049aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80049b6:	653b      	str	r3, [r7, #80]	; 0x50
 80049b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80049bc:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80049c0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80049c4:	2000      	movs	r0, #0
 80049c6:	9001      	str	r0, [sp, #4]
 80049c8:	2002      	movs	r0, #2
 80049ca:	9000      	str	r0, [sp, #0]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f7ff fb5f 	bl	8004090 <lfs_dir_relocatingcommit>
 80049d2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80049d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fc fdf3 	bl	80015c6 <lfs_pair_fromle32>
            if (state < 0) {
 80049e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	da02      	bge.n	80049ee <lfs_dir_orphaningcommit+0x3f6>
                return state;
 80049e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049ec:	e0f1      	b.n	8004bd2 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 80049ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d113      	bne.n	8004a1e <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 80049f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 80049fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 8004a02:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004a06:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004a1c:	e0cd      	b.n	8004bba <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8004a1e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004a22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004a26:	4619      	mov	r1, r3
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f002 f87b 	bl	8006b24 <lfs_fs_pred>
 8004a2e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8004a32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d007      	beq.n	8004a4a <lfs_dir_orphaningcommit+0x452>
 8004a3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a3e:	f113 0f02 	cmn.w	r3, #2
 8004a42:	d002      	beq.n	8004a4a <lfs_dir_orphaningcommit+0x452>
            return err;
 8004a44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a48:	e0c3      	b.n	8004bd2 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8004a4a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d01a      	beq.n	8004a88 <lfs_dir_orphaningcommit+0x490>
 8004a52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a56:	f113 0f02 	cmn.w	r3, #2
 8004a5a:	d115      	bne.n	8004a88 <lfs_dir_orphaningcommit+0x490>
 8004a5c:	4b08      	ldr	r3, [pc, #32]	; (8004a80 <lfs_dir_orphaningcommit+0x488>)
 8004a5e:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <lfs_dir_orphaningcommit+0x48c>)
 8004a60:	f640 1112 	movw	r1, #2322	; 0x912
 8004a64:	4803      	ldr	r0, [pc, #12]	; (8004a74 <lfs_dir_orphaningcommit+0x47c>)
 8004a66:	f009 fa5f 	bl	800df28 <__assert_func>
 8004a6a:	bf00      	nop
 8004a6c:	000ffc08 	.word	0x000ffc08
 8004a70:	0800f524 	.word	0x0800f524
 8004a74:	0800f430 	.word	0x0800f430
 8004a78:	0800f6a4 	.word	0x0800f6a4
 8004a7c:	0800f6e0 	.word	0x0800f6e0
 8004a80:	0800f724 	.word	0x0800f724
 8004a84:	0800ff80 	.word	0x0800ff80

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8004a88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a8c:	f113 0f02 	cmn.w	r3, #2
 8004a90:	f000 8093 	beq.w	8004bba <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3330      	adds	r3, #48	; 0x30
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fc fe8d 	bl	80017b8 <lfs_gstate_hasorphans>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d011      	beq.n	8004ac8 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8004aa4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004aa8:	425b      	negs	r3, r3
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	b25b      	sxtb	r3, r3
 8004aae:	4619      	mov	r1, r3
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f002 f915 	bl	8006ce0 <lfs_fs_preporphans>
 8004ab6:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8004aba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8004ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ac6:	e084      	b.n	8004bd2 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004ac8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004acc:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3330      	adds	r3, #48	; 0x30
 8004ad4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fc fea1 	bl	8001822 <lfs_gstate_hasmovehere>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d01c      	beq.n	8004b20 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fc fdf5 	bl	80016da <lfs_tag_id>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8004af6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004afa:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8004afe:	4837      	ldr	r0, [pc, #220]	; (8004bdc <lfs_dir_orphaningcommit+0x5e4>)
 8004b00:	9002      	str	r0, [sp, #8]
 8004b02:	9201      	str	r2, [sp, #4]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	460b      	mov	r3, r1
 8004b08:	f640 1223 	movw	r2, #2339	; 0x923
 8004b0c:	4934      	ldr	r1, [pc, #208]	; (8004be0 <lfs_dir_orphaningcommit+0x5e8>)
 8004b0e:	4835      	ldr	r0, [pc, #212]	; (8004be4 <lfs_dir_orphaningcommit+0x5ec>)
 8004b10:	f009 fe2c 	bl	800e76c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004b14:	2200      	movs	r2, #0
 8004b16:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f002 f91a 	bl	8006d54 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8004b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8004b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8004b2c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fc fd62 	bl	80015fa <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004b36:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004b3a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d007      	beq.n	8004b52 <lfs_dir_orphaningcommit+0x55a>
 8004b42:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004b46:	029b      	lsls	r3, r3, #10
 8004b48:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004b4c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004b50:	e000      	b.n	8004b54 <lfs_dir_orphaningcommit+0x55c>
 8004b52:	2300      	movs	r3, #0
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
 8004b56:	2300      	movs	r3, #0
 8004b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b5a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004b5e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004b62:	051a      	lsls	r2, r3, #20
 8004b64:	4b20      	ldr	r3, [pc, #128]	; (8004be8 <lfs_dir_orphaningcommit+0x5f0>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b74:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004b78:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	9001      	str	r0, [sp, #4]
 8004b80:	2002      	movs	r0, #2
 8004b82:	9000      	str	r0, [sp, #0]
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff fa83 	bl	8004090 <lfs_dir_relocatingcommit>
 8004b8a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004b8e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fc fd17 	bl	80015c6 <lfs_pair_fromle32>
            if (state < 0) {
 8004b98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	da02      	bge.n	8004ba6 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8004ba0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ba4:	e015      	b.n	8004bd2 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8004ba6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004baa:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004bb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8004bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	f43f adfe 	beq.w	80047c0 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8004bc4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <lfs_dir_orphaningcommit+0x5d8>
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e000      	b.n	8004bd2 <lfs_dir_orphaningcommit+0x5da>
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	37e0      	adds	r7, #224	; 0xe0
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	0800f524 	.word	0x0800f524
 8004be0:	0800f430 	.word	0x0800f430
 8004be4:	0800f6e0 	.word	0x0800f6e0
 8004be8:	000ffc08 	.word	0x000ffc08

08004bec <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f7ff fcf9 	bl	80045f8 <lfs_dir_orphaningcommit>
 8004c06:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	da01      	bge.n	8004c12 <lfs_dir_commit+0x26>
        return orphans;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	e00d      	b.n	8004c2e <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d009      	beq.n	8004c2c <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004c18:	2100      	movs	r1, #0
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f002 f93a 	bl	8006e94 <lfs_fs_deorphan>
 8004c20:	6138      	str	r0, [r7, #16]
        if (err) {
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <lfs_dir_commit+0x40>
            return err;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	e000      	b.n	8004c2e <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <lfs_dir_rawopen>:

    return 0;
}
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b08d      	sub	sp, #52	; 0x34
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f103 0108 	add.w	r1, r3, #8
 8004c4a:	1d3a      	adds	r2, r7, #4
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7fe fb06 	bl	8003260 <lfs_dir_find>
 8004c54:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	da01      	bge.n	8004c60 <lfs_dir_rawopen+0x28>
        return tag;
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	e05e      	b.n	8004d1e <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fc fd11 	bl	800168a <lfs_tag_type3>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d002      	beq.n	8004c74 <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 8004c6e:	f06f 0313 	mvn.w	r3, #19
 8004c72:	e054      	b.n	8004d1e <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fc fd2f 	bl	80016da <lfs_tag_id>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d106      	bne.n	8004c96 <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	61bb      	str	r3, [r7, #24]
 8004c94:	e01f      	b.n	8004cd6 <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fc fd1b 	bl	80016da <lfs_tag_id>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004ca8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cac:	f043 0308 	orr.w	r3, r3, #8
 8004cb0:	f107 0214 	add.w	r2, r7, #20
 8004cb4:	9200      	str	r2, [sp, #0]
 8004cb6:	4a1c      	ldr	r2, [pc, #112]	; (8004d28 <lfs_dir_rawopen+0xf0>)
 8004cb8:	4621      	mov	r1, r4
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f7fd f8ee 	bl	8001e9c <lfs_dir_get>
 8004cc0:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	da01      	bge.n	8004ccc <lfs_dir_rawopen+0x94>
            return res;
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	e028      	b.n	8004d1e <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 8004ccc:	f107 0314 	add.w	r3, r7, #20
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fc fc78 	bl	80015c6 <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	f107 0214 	add.w	r2, r7, #20
 8004cde:	4619      	mov	r1, r3
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7fe f9ab 	bl	800303c <lfs_dir_fetch>
 8004ce6:	61f8      	str	r0, [r7, #28]
    if (err) {
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <lfs_dir_rawopen+0xba>
        return err;
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	e015      	b.n	8004d1e <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2200      	movs	r2, #0
 8004d06:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2202      	movs	r2, #2
 8004d12:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f7fc fec0 	bl	8001a9c <lfs_mlist_append>

    return 0;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	372c      	adds	r7, #44	; 0x2c
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd90      	pop	{r4, r7, pc}
 8004d26:	bf00      	nop
 8004d28:	700ffc00 	.word	0x700ffc00

08004d2c <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 8004d36:	6839      	ldr	r1, [r7, #0]
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7fc fe8e 	bl	8001a5a <lfs_mlist_remove>

    return 0;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 8004d54:	f44f 7284 	mov.w	r2, #264	; 0x108
 8004d58:	2100      	movs	r1, #0
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f009 f96a 	bl	800e034 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d110      	bne.n	8004d8a <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3308      	adds	r3, #8
 8004d72:	4935      	ldr	r1, [pc, #212]	; (8004e48 <lfs_dir_rawread+0x100>)
 8004d74:	461a      	mov	r2, r3
 8004d76:	460b      	mov	r3, r1
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e05a      	b.n	8004e40 <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d110      	bne.n	8004db4 <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2202      	movs	r2, #2
 8004d96:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	4a2b      	ldr	r2, [pc, #172]	; (8004e4c <lfs_dir_rawread+0x104>)
 8004d9e:	8811      	ldrh	r1, [r2, #0]
 8004da0:	7892      	ldrb	r2, [r2, #2]
 8004da2:	8019      	strh	r1, [r3, #0]
 8004da4:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e045      	b.n	8004e40 <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	889a      	ldrh	r2, [r3, #4]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	8b9b      	ldrh	r3, [r3, #28]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d11a      	bne.n	8004df6 <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	7fdb      	ldrb	r3, [r3, #31]
 8004dc4:	f083 0301 	eor.w	r3, r3, #1
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <lfs_dir_rawread+0x8a>
                return false;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e036      	b.n	8004e40 <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f103 0108 	add.w	r1, r3, #8
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	3320      	adds	r3, #32
 8004ddc:	461a      	mov	r2, r3
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f7fe f92c 	bl	800303c <lfs_dir_fetch>
 8004de4:	6178      	str	r0, [r7, #20]
            if (err) {
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <lfs_dir_rawread+0xa8>
                return err;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	e027      	b.n	8004e40 <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2200      	movs	r2, #0
 8004df4:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f103 0108 	add.w	r1, r3, #8
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	889a      	ldrh	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f7fe f968 	bl	80030d8 <lfs_dir_getinfo>
 8004e08:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <lfs_dir_rawread+0xd4>
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f113 0f02 	cmn.w	r3, #2
 8004e16:	d001      	beq.n	8004e1c <lfs_dir_rawread+0xd4>
            return err;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	e011      	b.n	8004e40 <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	889b      	ldrh	r3, [r3, #4]
 8004e20:	3301      	adds	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f113 0f02 	cmn.w	r3, #2
 8004e2e:	d100      	bne.n	8004e32 <lfs_dir_rawread+0xea>
    while (true) {
 8004e30:	e7c0      	b.n	8004db4 <lfs_dir_rawread+0x6c>
            break;
 8004e32:	bf00      	nop
        }
    }

    dir->pos += 1;
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8004e3e:	2301      	movs	r3, #1
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	0800f574 	.word	0x0800f574
 8004e4c:	0800f578 	.word	0x0800f578

08004e50 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8004e50:	b590      	push	{r4, r7, lr}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	3b08      	subs	r3, #8
 8004e68:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e72:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <lfs_ctz_index+0x2e>
        return 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e01c      	b.n	8004eb8 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fb ff77 	bl	8000d76 <lfs_popc>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	3302      	adds	r3, #2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	1ad2      	subs	r2, r2, r3
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e98:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	1ad4      	subs	r4, r2, r3
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f7fb ff65 	bl	8000d76 <lfs_popc>
 8004eac:	4603      	mov	r3, r0
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	1ae2      	subs	r2, r4, r3
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	601a      	str	r2, [r3, #0]
    return i;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd90      	pop	{r4, r7, pc}

08004ec0 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b08f      	sub	sp, #60	; 0x3c
 8004ec4:	af04      	add	r7, sp, #16
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d108      	bne.n	8004ee6 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8004ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eda:	601a      	str	r2, [r3, #0]
        *off = 0;
 8004edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
        return 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e053      	b.n	8004f8e <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	f107 0314 	add.w	r3, r7, #20
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f7ff ffac 	bl	8004e50 <lfs_ctz_index>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8004efc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004f00:	4619      	mov	r1, r3
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f7ff ffa4 	bl	8004e50 <lfs_ctz_index>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8004f0c:	e034      	b.n	8004f78 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8004f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	3301      	adds	r3, #1
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fb ff10 	bl	8000d3c <lfs_npw2>
 8004f1c:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8004f1e:	1e5c      	subs	r4, r3, #1
 8004f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f22:	f7fb ff1a 	bl	8000d5a <lfs_ctz>
 8004f26:	4603      	mov	r3, r0
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f7fb fed1 	bl	8000cd2 <lfs_min>
 8004f30:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	0092      	lsls	r2, r2, #2
 8004f38:	2104      	movs	r1, #4
 8004f3a:	9103      	str	r1, [sp, #12]
 8004f3c:	4639      	mov	r1, r7
 8004f3e:	9102      	str	r1, [sp, #8]
 8004f40:	9201      	str	r2, [sp, #4]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	2304      	movs	r3, #4
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7fb ff94 	bl	8000e78 <lfs_bd_read>
 8004f50:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fb ff27 	bl	8000da8 <lfs_fromle32>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	603b      	str	r3, [r7, #0]
        if (err) {
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <lfs_ctz_find+0xa8>
            return err;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	e012      	b.n	8004f8e <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8004f68:	2201      	movs	r2, #1
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8004f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d8c6      	bhi.n	8004f0e <lfs_ctz_find+0x4e>
    }

    *block = head;
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f84:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004f86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8a:	601a      	str	r2, [r3, #0]
    return 0;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	372c      	adds	r7, #44	; 0x2c
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd90      	pop	{r4, r7, pc}
	...

08004f98 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b092      	sub	sp, #72	; 0x48
 8004f9c:	af04      	add	r7, sp, #16
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004fa6:	f107 0320 	add.w	r3, r7, #32
 8004faa:	4619      	mov	r1, r3
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7fc fddb 	bl	8001b68 <lfs_alloc>
 8004fb2:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <lfs_ctz_extend+0x26>
            return err;
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	e0e9      	b.n	8005192 <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f7fc fa4a 	bl	800145c <lfs_bd_erase>
 8004fc8:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d006      	beq.n	8004fde <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004fd6:	f000 80cb 	beq.w	8005170 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	e0d9      	b.n	8005192 <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8004fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d107      	bne.n	8004ff4 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8004fe4:	6a3a      	ldr	r2, [r7, #32]
 8004fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe8:	601a      	str	r2, [r3, #0]
                *off = 0;
 8004fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
                return 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	e0ce      	b.n	8005192 <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8004ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8004ffa:	f107 031c 	add.w	r3, r7, #28
 8004ffe:	4619      	mov	r1, r3
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7ff ff25 	bl	8004e50 <lfs_ctz_index>
 8005006:	4603      	mov	r3, r0
 8005008:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	3301      	adds	r3, #1
 800500e:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005014:	69da      	ldr	r2, [r3, #28]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	429a      	cmp	r2, r3
 800501a:	d044      	beq.n	80050a6 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 800501c:	2300      	movs	r3, #0
 800501e:	637b      	str	r3, [r7, #52]	; 0x34
 8005020:	e035      	b.n	800508e <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005026:	1ad2      	subs	r2, r2, r3
 8005028:	2301      	movs	r3, #1
 800502a:	9303      	str	r3, [sp, #12]
 800502c:	f107 0317 	add.w	r3, r7, #23
 8005030:	9302      	str	r3, [sp, #8]
 8005032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	4613      	mov	r3, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	2100      	movs	r1, #0
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f7fb ff19 	bl	8000e78 <lfs_bd_read>
 8005046:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <lfs_ctz_extend+0xba>
                        return err;
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	e09f      	b.n	8005192 <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	2201      	movs	r2, #1
 8005056:	9203      	str	r2, [sp, #12]
 8005058:	f107 0217 	add.w	r2, r7, #23
 800505c:	9202      	str	r2, [sp, #8]
 800505e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005060:	9201      	str	r2, [sp, #4]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	2301      	movs	r3, #1
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f7fc f94a 	bl	8001304 <lfs_bd_prog>
 8005070:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d007      	beq.n	8005088 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8005078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800507e:	d101      	bne.n	8005084 <lfs_ctz_extend+0xec>
                            goto relocate;
 8005080:	bf00      	nop
                    goto relocate;
 8005082:	e075      	b.n	8005170 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8005086:	e084      	b.n	8005192 <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508a:	3301      	adds	r3, #1
 800508c:	637b      	str	r3, [r7, #52]	; 0x34
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005092:	429a      	cmp	r2, r3
 8005094:	d3c5      	bcc.n	8005022 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8005096:	6a3a      	ldr	r2, [r7, #32]
 8005098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800509a:	601a      	str	r2, [r3, #0]
                *off = noff;
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a0:	601a      	str	r2, [r3, #0]
                return 0;
 80050a2:	2300      	movs	r3, #0
 80050a4:	e075      	b.n	8005192 <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	3301      	adds	r3, #1
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 80050ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ae:	f7fb fe54 	bl	8000d5a <lfs_ctz>
 80050b2:	4603      	mov	r3, r0
 80050b4:	3301      	adds	r3, #1
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 80050bc:	2300      	movs	r3, #0
 80050be:	633b      	str	r3, [r7, #48]	; 0x30
 80050c0:	e049      	b.n	8005156 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fb fe79 	bl	8000dbc <lfs_tole32>
 80050ca:	4603      	mov	r3, r0
 80050cc:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d2:	0092      	lsls	r2, r2, #2
 80050d4:	2104      	movs	r1, #4
 80050d6:	9103      	str	r1, [sp, #12]
 80050d8:	f107 0118 	add.w	r1, r7, #24
 80050dc:	9102      	str	r1, [sp, #8]
 80050de:	9201      	str	r2, [sp, #4]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	2301      	movs	r3, #1
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7fc f90b 	bl	8001304 <lfs_bd_prog>
 80050ee:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fb fe58 	bl	8000da8 <lfs_fromle32>
 80050f8:	4603      	mov	r3, r0
 80050fa:	61bb      	str	r3, [r7, #24]
                if (err) {
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005108:	d034      	beq.n	8005174 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510c:	e041      	b.n	8005192 <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	3b01      	subs	r3, #1
 8005112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005114:	429a      	cmp	r2, r3
 8005116:	d01b      	beq.n	8005150 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800511c:	0092      	lsls	r2, r2, #2
 800511e:	2104      	movs	r1, #4
 8005120:	9103      	str	r1, [sp, #12]
 8005122:	f107 0118 	add.w	r1, r7, #24
 8005126:	9102      	str	r1, [sp, #8]
 8005128:	9201      	str	r2, [sp, #4]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	2304      	movs	r3, #4
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	2100      	movs	r1, #0
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f7fb fea0 	bl	8000e78 <lfs_bd_read>
 8005138:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	4618      	mov	r0, r3
 800513e:	f7fb fe33 	bl	8000da8 <lfs_fromle32>
 8005142:	4603      	mov	r3, r0
 8005144:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <lfs_ctz_extend+0x1b8>
                        return err;
 800514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514e:	e020      	b.n	8005192 <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	3301      	adds	r3, #1
 8005154:	633b      	str	r3, [r7, #48]	; 0x30
 8005156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	429a      	cmp	r2, r3
 800515c:	d3b1      	bcc.n	80050c2 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800515e:	6a3a      	ldr	r2, [r7, #32]
 8005160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005162:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	009a      	lsls	r2, r3, #2
 8005168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800516a:	601a      	str	r2, [r3, #0]
            return 0;
 800516c:	2300      	movs	r3, #0
 800516e:	e010      	b.n	8005192 <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8005170:	bf00      	nop
 8005172:	e000      	b.n	8005176 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8005174:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	4a08      	ldr	r2, [pc, #32]	; (800519c <lfs_ctz_extend+0x204>)
 800517a:	9200      	str	r2, [sp, #0]
 800517c:	f640 22dc 	movw	r2, #2780	; 0xadc
 8005180:	4907      	ldr	r1, [pc, #28]	; (80051a0 <lfs_ctz_extend+0x208>)
 8005182:	4808      	ldr	r0, [pc, #32]	; (80051a4 <lfs_ctz_extend+0x20c>)
 8005184:	f009 faf2 	bl	800e76c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f7fb fe50 	bl	8000e30 <lfs_cache_drop>
    while (true) {
 8005190:	e709      	b.n	8004fa6 <lfs_ctz_extend+0xe>
    }
}
 8005192:	4618      	mov	r0, r3
 8005194:	3738      	adds	r7, #56	; 0x38
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	0800f524 	.word	0x0800f524
 80051a0:	0800f430 	.word	0x0800f430
 80051a4:	0800f5a4 	.word	0x0800f5a4

080051a8 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b090      	sub	sp, #64	; 0x40
 80051ac:	af04      	add	r7, sp, #16
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80051b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <lfs_ctz_traverse+0x18>
        return 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	e06d      	b.n	800529c <lfs_ctz_traverse+0xf4>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c2:	3b01      	subs	r3, #1
 80051c4:	61fb      	str	r3, [r7, #28]
 80051c6:	f107 031c 	add.w	r3, r7, #28
 80051ca:	4619      	mov	r1, r3
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f7ff fe3f 	bl	8004e50 <lfs_ctz_index>
 80051d2:	4603      	mov	r3, r0
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 80051d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80051dc:	4798      	blx	r3
 80051de:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <lfs_ctz_traverse+0x42>
            return err;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	e058      	b.n	800529c <lfs_ctz_traverse+0xf4>
        }

        if (index == 0) {
 80051ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <lfs_ctz_traverse+0x4c>
            return 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	e053      	b.n	800529c <lfs_ctz_traverse+0xf4>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 80051f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	f1c3 0302 	rsb	r3, r3, #2
 80051fe:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8005200:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8005202:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8005204:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8005206:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8005208:	9303      	str	r3, [sp, #12]
 800520a:	f107 0314 	add.w	r3, r7, #20
 800520e:	9302      	str	r3, [sp, #8]
 8005210:	2300      	movs	r3, #0
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7fb fe2a 	bl	8000e78 <lfs_bd_read>
 8005224:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	4618      	mov	r0, r3
 800522a:	f7fb fdbd 	bl	8000da8 <lfs_fromle32>
 800522e:	4603      	mov	r3, r0
 8005230:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	4618      	mov	r0, r3
 8005236:	f7fb fdb7 	bl	8000da8 <lfs_fromle32>
 800523a:	4603      	mov	r3, r0
 800523c:	61bb      	str	r3, [r7, #24]
        if (err) {
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <lfs_ctz_traverse+0xa0>
            return err;
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	e029      	b.n	800529c <lfs_ctz_traverse+0xf4>
        }

        for (int i = 0; i < count-1; i++) {
 8005248:	2300      	movs	r3, #0
 800524a:	62bb      	str	r3, [r7, #40]	; 0x28
 800524c:	e013      	b.n	8005276 <lfs_ctz_traverse+0xce>
            err = cb(data, heads[i]);
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005256:	4413      	add	r3, r2
 8005258:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800525c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525e:	4611      	mov	r1, r2
 8005260:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005262:	4798      	blx	r3
 8005264:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <lfs_ctz_traverse+0xc8>
                return err;
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	e015      	b.n	800529c <lfs_ctz_traverse+0xf4>
        for (int i = 0; i < count-1; i++) {
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	3301      	adds	r3, #1
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	3b01      	subs	r3, #1
 800527a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800527c:	429a      	cmp	r2, r3
 800527e:	dbe6      	blt.n	800524e <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	3b01      	subs	r3, #1
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800528a:	4413      	add	r3, r2
 800528c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005290:	603b      	str	r3, [r7, #0]
        index -= count;
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 800529a:	e79c      	b.n	80051d6 <lfs_ctz_traverse+0x2e>
    }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3730      	adds	r7, #48	; 0x30
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 80052a4:	b5b0      	push	{r4, r5, r7, lr}
 80052a6:	b09a      	sub	sp, #104	; 0x68
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f001 ff8d 	bl	80071dc <lfs_fs_forceconsistency>
 80052c2:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 80052c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <lfs_file_rawopencfg+0x2a>
            return err;
 80052ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052cc:	e1b0      	b.n	8005630 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80052d2:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2200      	movs	r2, #0
 80052de:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2200      	movs	r2, #0
 80052e4:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2200      	movs	r2, #0
 80052ea:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f103 0108 	add.w	r1, r3, #8
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	3304      	adds	r3, #4
 80052f6:	1d3a      	adds	r2, r7, #4
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f7fd ffb1 	bl	8003260 <lfs_dir_find>
 80052fe:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8005300:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005302:	2b00      	cmp	r3, #0
 8005304:	da0c      	bge.n	8005320 <lfs_file_rawopencfg+0x7c>
 8005306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005308:	f113 0f02 	cmn.w	r3, #2
 800530c:	d105      	bne.n	800531a <lfs_file_rawopencfg+0x76>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	889b      	ldrh	r3, [r3, #4]
 8005312:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005316:	4293      	cmp	r3, r2
 8005318:	d102      	bne.n	8005320 <lfs_file_rawopencfg+0x7c>
        err = tag;
 800531a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800531c:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800531e:	e17c      	b.n	800561a <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2201      	movs	r2, #1
 8005324:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f7fc fbb7 	bl	8001a9c <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 800532e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005330:	f113 0f02 	cmn.w	r3, #2
 8005334:	d14e      	bne.n	80053d4 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d103      	bne.n	8005348 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8005340:	f06f 0301 	mvn.w	r3, #1
 8005344:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8005346:	e168      	b.n	800561a <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4618      	mov	r0, r3
 800534c:	f7fa ff08 	bl	8000160 <strlen>
 8005350:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005356:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005358:	429a      	cmp	r2, r3
 800535a:	d903      	bls.n	8005364 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 800535c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8005360:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8005362:	e15a      	b.n	800561a <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f103 0108 	add.w	r1, r3, #8
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	889b      	ldrh	r3, [r3, #4]
 800536e:	029b      	lsls	r3, r3, #10
 8005370:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005374:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800537a:	2300      	movs	r3, #0
 800537c:	633b      	str	r3, [r7, #48]	; 0x30
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	889b      	ldrh	r3, [r3, #4]
 8005382:	029a      	lsls	r2, r3, #10
 8005384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005386:	4313      	orrs	r3, r2
 8005388:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	63bb      	str	r3, [r7, #56]	; 0x38
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	889b      	ldrh	r3, [r3, #4]
 8005396:	029b      	lsls	r3, r3, #10
 8005398:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800539c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a2:	2300      	movs	r3, #0
 80053a4:	643b      	str	r3, [r7, #64]	; 0x40
 80053a6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80053aa:	2303      	movs	r3, #3
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f7ff fc1d 	bl	8004bec <lfs_dir_commit>
 80053b2:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80053b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053b6:	f113 0f1c 	cmn.w	r3, #28
 80053ba:	d001      	beq.n	80053c0 <lfs_file_rawopencfg+0x11c>
 80053bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053be:	e001      	b.n	80053c4 <lfs_file_rawopencfg+0x120>
 80053c0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80053c4:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 80053c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f040 8125 	bne.w	8005618 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 80053ce:	4b9a      	ldr	r3, [pc, #616]	; (8005638 <lfs_file_rawopencfg+0x394>)
 80053d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80053d2:	e044      	b.n	800545e <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 80053de:	f06f 0310 	mvn.w	r3, #16
 80053e2:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80053e4:	e119      	b.n	800561a <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 80053e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fc f94e 	bl	800168a <lfs_tag_type3>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d003      	beq.n	80053fc <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 80053f4:	f06f 0314 	mvn.w	r3, #20
 80053f8:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80053fa:	e10e      	b.n	800561a <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00e      	beq.n	8005424 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	889b      	ldrh	r3, [r3, #4]
 800540a:	029b      	lsls	r3, r3, #10
 800540c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005414:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	631a      	str	r2, [r3, #48]	; 0x30
 8005422:	e01c      	b.n	800545e <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	889b      	ldrh	r3, [r3, #4]
 800542e:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005430:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005434:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800543c:	9200      	str	r2, [sp, #0]
 800543e:	4a7f      	ldr	r2, [pc, #508]	; (800563c <lfs_file_rawopencfg+0x398>)
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7fc fd2b 	bl	8001e9c <lfs_dir_get>
 8005446:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8005448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800544a:	2b00      	cmp	r3, #0
 800544c:	da02      	bge.n	8005454 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 800544e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005450:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8005452:	e0e2      	b.n	800561a <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	3328      	adds	r3, #40	; 0x28
 8005458:	4618      	mov	r0, r3
 800545a:	f7fc fa42 	bl	80018e2 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800545e:	2300      	movs	r3, #0
 8005460:	657b      	str	r3, [r7, #84]	; 0x54
 8005462:	e063      	b.n	800552c <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d03c      	beq.n	80054ea <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547a:	6859      	ldr	r1, [r3, #4]
 800547c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800547e:	4613      	mov	r3, r2
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	440b      	add	r3, r1
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800548e:	051a      	lsls	r2, r3, #20
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	889b      	ldrh	r3, [r3, #4]
 8005494:	029b      	lsls	r3, r3, #10
 8005496:	ea42 0103 	orr.w	r1, r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800549e:	6858      	ldr	r0, [r3, #4]
 80054a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054a2:	4613      	mov	r3, r2
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4403      	add	r3, r0
 80054ac:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80054ae:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b6:	6859      	ldr	r1, [r3, #4]
 80054b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054ba:	4613      	mov	r3, r2
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	4603      	mov	r3, r0
 80054ca:	4a5d      	ldr	r2, [pc, #372]	; (8005640 <lfs_file_rawopencfg+0x39c>)
 80054cc:	4621      	mov	r1, r4
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f7fc fce4 	bl	8001e9c <lfs_dir_get>
 80054d4:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 80054d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d8:	2b00      	cmp	r3, #0
 80054da:	da06      	bge.n	80054ea <lfs_file_rawopencfg+0x246>
 80054dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054de:	f113 0f02 	cmn.w	r3, #2
 80054e2:	d002      	beq.n	80054ea <lfs_file_rawopencfg+0x246>
                err = res;
 80054e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80054e8:	e097      	b.n	800561a <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d017      	beq.n	8005526 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fa:	6859      	ldr	r1, [r3, #4]
 80054fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054fe:	4613      	mov	r3, r2
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550e:	429a      	cmp	r2, r3
 8005510:	d903      	bls.n	800551a <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8005512:	f06f 031b 	mvn.w	r3, #27
 8005516:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005518:	e07f      	b.n	800561a <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8005526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005528:	3301      	adds	r3, #1
 800552a:	657b      	str	r3, [r7, #84]	; 0x54
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005534:	429a      	cmp	r2, r3
 8005536:	d395      	bcc.n	8005464 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	64da      	str	r2, [r3, #76]	; 0x4c
 800554c:	e010      	b.n	8005570 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	4618      	mov	r0, r3
 8005556:	f7fb fc54 	bl	8000e02 <lfs_malloc>
 800555a:	4602      	mov	r2, r0
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d103      	bne.n	8005570 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8005568:	f06f 030b 	mvn.w	r3, #11
 800556c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800556e:	e054      	b.n	800561a <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	3340      	adds	r3, #64	; 0x40
 8005574:	4619      	mov	r1, r3
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f7fb fc68 	bl	8000e4c <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800557c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800557e:	4618      	mov	r0, r3
 8005580:	f7fc f883 	bl	800168a <lfs_tag_type3>
 8005584:	4603      	mov	r3, r0
 8005586:	461a      	mov	r2, r3
 8005588:	f240 2301 	movw	r3, #513	; 0x201
 800558c:	429a      	cmp	r2, r3
 800558e:	d141      	bne.n	8005614 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f06f 0201 	mvn.w	r2, #1
 8005596:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8005598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800559a:	4618      	mov	r0, r3
 800559c:	f7fc f8ac 	bl	80016f8 <lfs_tag_size>
 80055a0:	4602      	mov	r2, r0
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2200      	movs	r2, #0
 80055be:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d020      	beq.n	8005614 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	889b      	ldrh	r3, [r3, #4]
 80055dc:	029c      	lsls	r4, r3, #10
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e2:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fb fb73 	bl	8000cd2 <lfs_min>
 80055ec:	4603      	mov	r3, r0
 80055ee:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80055f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	4613      	mov	r3, r2
 80055fc:	4a0f      	ldr	r2, [pc, #60]	; (800563c <lfs_file_rawopencfg+0x398>)
 80055fe:	4629      	mov	r1, r5
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f7fc fc4b 	bl	8001e9c <lfs_dir_get>
 8005606:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8005608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800560a:	2b00      	cmp	r3, #0
 800560c:	da02      	bge.n	8005614 <lfs_file_rawopencfg+0x370>
                err = res;
 800560e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005610:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005612:	e002      	b.n	800561a <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8005614:	2300      	movs	r3, #0
 8005616:	e00b      	b.n	8005630 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8005618:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 f823 	bl	8005674 <lfs_file_rawclose>
    return err;
 800562e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8005630:	4618      	mov	r0, r3
 8005632:	3760      	adds	r7, #96	; 0x60
 8005634:	46bd      	mov	sp, r7
 8005636:	bdb0      	pop	{r4, r5, r7, pc}
 8005638:	20100000 	.word	0x20100000
 800563c:	700ffc00 	.word	0x700ffc00
 8005640:	7ffffc00 	.word	0x7ffffc00

08005644 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af02      	add	r7, sp, #8
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8005652:	4b07      	ldr	r3, [pc, #28]	; (8005670 <lfs_file_rawopen+0x2c>)
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f7ff fe21 	bl	80052a4 <lfs_file_rawopencfg>
 8005662:	6178      	str	r0, [r7, #20]
    return err;
 8005664:	697b      	ldr	r3, [r7, #20]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	0800ff98 	.word	0x0800ff98

08005674 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f9e5 	bl	8005a50 <lfs_file_rawsync>
 8005686:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fc f9e5 	bl	8001a5a <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d104      	bne.n	80056a4 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fb fbbb 	bl	8000e1a <lfs_free>
    }

    return err;
 80056a4:	68fb      	ldr	r3, [r7, #12]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 80056b0:	b590      	push	{r4, r7, lr}
 80056b2:	b08d      	sub	sp, #52	; 0x34
 80056b4:	af06      	add	r7, sp, #24
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80056ba:	f107 030c 	add.w	r3, r7, #12
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7fc fa51 	bl	8001b68 <lfs_alloc>
 80056c6:	6138      	str	r0, [r7, #16]
        if (err) {
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <lfs_file_relocate+0x22>
            return err;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	e0bb      	b.n	800584a <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fb fec0 	bl	800145c <lfs_bd_erase>
 80056dc:	6138      	str	r0, [r7, #16]
        if (err) {
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d006      	beq.n	80056f2 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80056ea:	f000 809b 	beq.w	8005824 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	e0ab      	b.n	800584a <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	e069      	b.n	80057cc <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d027      	beq.n	8005754 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	f103 0008 	add.w	r0, r3, #8
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	889b      	ldrh	r3, [r3, #4]
 800571c:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800571e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005726:	2101      	movs	r1, #1
 8005728:	9105      	str	r1, [sp, #20]
 800572a:	f107 010b 	add.w	r1, r7, #11
 800572e:	9104      	str	r1, [sp, #16]
 8005730:	6979      	ldr	r1, [r7, #20]
 8005732:	9103      	str	r1, [sp, #12]
 8005734:	9302      	str	r3, [sp, #8]
 8005736:	4b47      	ldr	r3, [pc, #284]	; (8005854 <lfs_file_relocate+0x1a4>)
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	9200      	str	r2, [sp, #0]
 800573c:	4623      	mov	r3, r4
 800573e:	2200      	movs	r2, #0
 8005740:	4601      	mov	r1, r0
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fc fbc5 	bl	8001ed2 <lfs_dir_getread>
 8005748:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01e      	beq.n	800578e <lfs_file_relocate+0xde>
                    return err;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	e07a      	b.n	800584a <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 800575a:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	1ad4      	subs	r4, r2, r3
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	2201      	movs	r2, #1
 800576a:	9203      	str	r2, [sp, #12]
 800576c:	f107 020b 	add.w	r2, r7, #11
 8005770:	9202      	str	r2, [sp, #8]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	9201      	str	r2, [sp, #4]
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	4623      	mov	r3, r4
 800577a:	4602      	mov	r2, r0
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7fb fb7b 	bl	8000e78 <lfs_bd_read>
 8005782:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <lfs_file_relocate+0xde>
                    return err;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	e05d      	b.n	800584a <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f103 0110 	add.w	r1, r3, #16
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	9203      	str	r2, [sp, #12]
 800579c:	f107 020b 	add.w	r2, r7, #11
 80057a0:	9202      	str	r2, [sp, #8]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	9201      	str	r2, [sp, #4]
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	2301      	movs	r3, #1
 80057aa:	4602      	mov	r2, r0
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7fb fda9 	bl	8001304 <lfs_bd_prog>
 80057b2:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80057c0:	d032      	beq.n	8005828 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	e041      	b.n	800584a <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	3301      	adds	r3, #1
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d390      	bcc.n	80056f8 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69d9      	ldr	r1, [r3, #28]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e4:	461a      	mov	r2, r3
 80057e6:	f008 fc17 	bl	800e018 <memcpy>
        file->cache.block = lfs->pcache.block;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695a      	ldr	r2, [r3, #20]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3310      	adds	r3, #16
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7fb fb1f 	bl	8000e4c <lfs_cache_zero>

        file->block = nblock;
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8005820:	2300      	movs	r3, #0
 8005822:	e012      	b.n	800584a <lfs_file_relocate+0x19a>
                goto relocate;
 8005824:	bf00      	nop
 8005826:	e000      	b.n	800582a <lfs_file_relocate+0x17a>
                    goto relocate;
 8005828:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4a0a      	ldr	r2, [pc, #40]	; (8005858 <lfs_file_relocate+0x1a8>)
 800582e:	9200      	str	r2, [sp, #0]
 8005830:	f640 4212 	movw	r2, #3090	; 0xc12
 8005834:	4909      	ldr	r1, [pc, #36]	; (800585c <lfs_file_relocate+0x1ac>)
 8005836:	480a      	ldr	r0, [pc, #40]	; (8005860 <lfs_file_relocate+0x1b0>)
 8005838:	f008 ff98 	bl	800e76c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3310      	adds	r3, #16
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fb faf4 	bl	8000e30 <lfs_cache_drop>
    while (true) {
 8005848:	e737      	b.n	80056ba <lfs_file_relocate+0xa>
    }
}
 800584a:	4618      	mov	r0, r3
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	bd90      	pop	{r4, r7, pc}
 8005852:	bf00      	nop
 8005854:	fff7fc00 	.word	0xfff7fc00
 8005858:	0800f524 	.word	0x0800f524
 800585c:	0800f430 	.word	0x0800f430
 8005860:	0800f5a4 	.word	0x0800f5a4

08005864 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fc f957 	bl	8001b2a <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 800587c:	6839      	ldr	r1, [r7, #0]
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff ff16 	bl	80056b0 <lfs_file_relocate>
 8005884:	60f8      	str	r0, [r7, #12]
    if (err) {
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <lfs_file_outline+0x2c>
        return err;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	e006      	b.n	800589e <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80058a8:	b590      	push	{r4, r7, lr}
 80058aa:	b09f      	sub	sp, #124	; 0x7c
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d011      	beq.n	80058e2 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d105      	bne.n	80058d6 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	3340      	adds	r3, #64	; 0x40
 80058ce:	4619      	mov	r1, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7fb faad 	bl	8000e30 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058da:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 80a4 	beq.w	8005a38 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f4:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d176      	bne.n	80059f0 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8005902:	f107 030c 	add.w	r3, r7, #12
 8005906:	2254      	movs	r2, #84	; 0x54
 8005908:	2100      	movs	r1, #0
 800590a:	4618      	mov	r0, r3
 800590c:	f008 fb92 	bl	800e034 <memset>
                .ctz.head = file->ctz.head,
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8005914:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38
 800591c:	2301      	movs	r3, #1
 800591e:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8005924:	643b      	str	r3, [r7, #64]	; 0x40
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800592c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800592e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4619      	mov	r1, r3
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fb fa7a 	bl	8000e30 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 800593c:	e02b      	b.n	8005996 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800593e:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8005942:	f107 010c 	add.w	r1, r7, #12
 8005946:	2301      	movs	r3, #1
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f90d 	bl	8005b68 <lfs_file_flushedread>
 800594e:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8005950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005952:	2b00      	cmp	r3, #0
 8005954:	da01      	bge.n	800595a <lfs_file_flush+0xb2>
                    return res;
 8005956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005958:	e06f      	b.n	8005a3a <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 800595a:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800595e:	2301      	movs	r3, #1
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f9d2 	bl	8005d0c <lfs_file_flushedwrite>
 8005968:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800596a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800596c:	2b00      	cmp	r3, #0
 800596e:	da01      	bge.n	8005974 <lfs_file_flush+0xcc>
                    return res;
 8005970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005972:	e062      	b.n	8005a3a <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597c:	d00b      	beq.n	8005996 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800597e:	f107 030c 	add.w	r3, r7, #12
 8005982:	3340      	adds	r3, #64	; 0x40
 8005984:	4619      	mov	r1, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fb fa52 	bl	8000e30 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fb fa4d 	bl	8000e30 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	429a      	cmp	r2, r3
 80059a0:	d3cd      	bcc.n	800593e <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	2301      	movs	r3, #1
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7fb fbf9 	bl	80011a4 <lfs_bd_flush>
 80059b2:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80059b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d026      	beq.n	8005a08 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 80059ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059bc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80059c0:	d001      	beq.n	80059c6 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 80059c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059c4:	e039      	b.n	8005a3a <lfs_file_flush+0x192>
                        goto relocate;
 80059c6:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	4a1d      	ldr	r2, [pc, #116]	; (8005a44 <lfs_file_flush+0x19c>)
 80059ce:	9200      	str	r2, [sp, #0]
 80059d0:	f640 4261 	movw	r2, #3169	; 0xc61
 80059d4:	491c      	ldr	r1, [pc, #112]	; (8005a48 <lfs_file_flush+0x1a0>)
 80059d6:	481d      	ldr	r0, [pc, #116]	; (8005a4c <lfs_file_flush+0x1a4>)
 80059d8:	f008 fec8 	bl	800e76c <iprintf>
                err = lfs_file_relocate(lfs, file);
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff fe66 	bl	80056b0 <lfs_file_relocate>
 80059e4:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80059e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0da      	beq.n	80059a2 <lfs_file_flush+0xfa>
                    return err;
 80059ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059ee:	e024      	b.n	8005a3a <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	4619      	mov	r1, r3
 80059fa:	4610      	mov	r0, r2
 80059fc:	f7fb f95a 	bl	8000cb4 <lfs_max>
 8005a00:	4602      	mov	r2, r0
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	635a      	str	r2, [r3, #52]	; 0x34
 8005a06:	e000      	b.n	8005a0a <lfs_file_flush+0x162>
                break;
 8005a08:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a36:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3774      	adds	r7, #116	; 0x74
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd90      	pop	{r4, r7, pc}
 8005a42:	bf00      	nop
 8005a44:	0800f524 	.word	0x0800f524
 8005a48:	0800f430 	.word	0x0800f430
 8005a4c:	0800f5a4 	.word	0x0800f5a4

08005a50 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b090      	sub	sp, #64	; 0x40
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	e07a      	b.n	8005b60 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8005a6a:	6839      	ldr	r1, [r7, #0]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff ff1b 	bl	80058a8 <lfs_file_flush>
 8005a72:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	e06a      	b.n	8005b60 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d063      	beq.n	8005b5e <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	3308      	adds	r3, #8
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fb fd24 	bl	80014e8 <lfs_pair_isnull>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f083 0301 	eor.w	r3, r3, #1
 8005aa6:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d058      	beq.n	8005b5e <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d009      	beq.n	8005acc <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8005ab8:	f240 2301 	movw	r3, #513	; 0x201
 8005abc:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac2:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aca:	e014      	b.n	8005af6 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8005acc:	f240 2302 	movw	r3, #514	; 0x202
 8005ad0:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ad8:	3228      	adds	r2, #40	; 0x28
 8005ada:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ade:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8005ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fb ff13 	bl	8001912 <lfs_ctz_tole32>
            buffer = &ctz;
 8005aec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005af0:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 8005af2:	2308      	movs	r3, #8
 8005af4:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	f103 0108 	add.w	r1, r3, #8
 8005afc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005afe:	051a      	lsls	r2, r3, #20
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	889b      	ldrh	r3, [r3, #4]
 8005b04:	029b      	lsls	r3, r3, #10
 8005b06:	431a      	orrs	r2, r3
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	61fb      	str	r3, [r7, #28]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	889b      	ldrh	r3, [r3, #4]
 8005b16:	029a      	lsls	r2, r3, #10
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2e:	f107 0218 	add.w	r2, r7, #24
 8005b32:	2302      	movs	r3, #2
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff f859 	bl	8004bec <lfs_dir_commit>
 8005b3a:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d007      	beq.n	8005b52 <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	e006      	b.n	8005b60 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3740      	adds	r7, #64	; 0x40
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005b68:	b5b0      	push	{r4, r5, r7, lr}
 8005b6a:	b090      	sub	sp, #64	; 0x40
 8005b6c:	af06      	add	r7, sp, #24
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d301      	bcc.n	8005b8e <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e0b7      	b.n	8005cfe <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6838      	ldr	r0, [r7, #0]
 8005b9c:	f7fb f899 	bl	8000cd2 <lfs_min>
 8005ba0:	6038      	str	r0, [r7, #0]
    nsize = size;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8005ba6:	e0a5      	b.n	8005cf4 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d006      	beq.n	8005bc2 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bbc:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d130      	bne.n	8005c24 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d11c      	bne.n	8005c08 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	3138      	adds	r1, #56	; 0x38
 8005be4:	68b8      	ldr	r0, [r7, #8]
 8005be6:	303c      	adds	r0, #60	; 0x3c
 8005be8:	9003      	str	r0, [sp, #12]
 8005bea:	9102      	str	r1, [sp, #8]
 8005bec:	9201      	str	r2, [sp, #4]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	462b      	mov	r3, r5
 8005bf2:	4622      	mov	r2, r4
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f7ff f962 	bl	8004ec0 <lfs_ctz_find>
 8005bfc:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d009      	beq.n	8005c18 <lfs_file_flushedread+0xb0>
                    return err;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	e07a      	b.n	8005cfe <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f06f 0201 	mvn.w	r2, #1
 8005c0e:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c28:	69da      	ldr	r2, [r3, #28]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	4619      	mov	r1, r3
 8005c32:	6a38      	ldr	r0, [r7, #32]
 8005c34:	f7fb f84d 	bl	8000cd2 <lfs_min>
 8005c38:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d026      	beq.n	8005c94 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f103 0408 	add.w	r4, r3, #8
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 8005c56:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	889b      	ldrh	r3, [r3, #4]
 8005c5c:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8005c5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005c6a:	69b8      	ldr	r0, [r7, #24]
 8005c6c:	9005      	str	r0, [sp, #20]
 8005c6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c70:	9004      	str	r0, [sp, #16]
 8005c72:	9103      	str	r1, [sp, #12]
 8005c74:	9302      	str	r3, [sp, #8]
 8005c76:	4b24      	ldr	r3, [pc, #144]	; (8005d08 <lfs_file_flushedread+0x1a0>)
 8005c78:	9301      	str	r3, [sp, #4]
 8005c7a:	9200      	str	r2, [sp, #0]
 8005c7c:	462b      	mov	r3, r5
 8005c7e:	2200      	movs	r2, #0
 8005c80:	4621      	mov	r1, r4
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f7fc f925 	bl	8001ed2 <lfs_dir_getread>
 8005c88:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01d      	beq.n	8005ccc <lfs_file_flushedread+0x164>
                return err;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	e034      	b.n	8005cfe <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8005c9e:	69dc      	ldr	r4, [r3, #28]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ca8:	69b9      	ldr	r1, [r7, #24]
 8005caa:	9103      	str	r1, [sp, #12]
 8005cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cae:	9102      	str	r1, [sp, #8]
 8005cb0:	9201      	str	r2, [sp, #4]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	4623      	mov	r3, r4
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	2100      	movs	r1, #0
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7fb f8dc 	bl	8000e78 <lfs_bd_read>
 8005cc0:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <lfs_file_flushedread+0x164>
                return err;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	e018      	b.n	8005cfe <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	441a      	add	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	441a      	add	r2, r3
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	4413      	add	r3, r2
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8005cec:	6a3a      	ldr	r2, [r7, #32]
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f47f af56 	bne.w	8005ba8 <lfs_file_flushedread+0x40>
    }

    return size;
 8005cfc:	683b      	ldr	r3, [r7, #0]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3728      	adds	r7, #40	; 0x28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bdb0      	pop	{r4, r5, r7, pc}
 8005d06:	bf00      	nop
 8005d08:	fff7fc00 	.word	0xfff7fc00

08005d0c <lfs_file_flushedwrite>:
}


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005d0c:	b5b0      	push	{r4, r5, r7, lr}
 8005d0e:	b090      	sub	sp, #64	; 0x40
 8005d10:	af04      	add	r7, sp, #16
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 810c 	beq.w	8005f48 <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	441a      	add	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	f7fa ffb8 	bl	8000cb4 <lfs_max>
 8005d44:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 8005d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d004      	beq.n	8005d60 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8005d5c:	08db      	lsrs	r3, r3, #3
 8005d5e:	e003      	b.n	8005d68 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d64:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8005d66:	08db      	lsrs	r3, r3, #3
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f7fa ffb1 	bl	8000cd2 <lfs_min>
 8005d70:	4603      	mov	r3, r0
 8005d72:	4619      	mov	r1, r3
 8005d74:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8005d78:	f7fa ffab 	bl	8000cd2 <lfs_min>
 8005d7c:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8005d7e:	429c      	cmp	r4, r3
 8005d80:	f240 80e2 	bls.w	8005f48 <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7ff fd6c 	bl	8005864 <lfs_file_outline>
 8005d8c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80d9 	beq.w	8005f48 <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	e0d5      	b.n	8005f52 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d006      	beq.n	8005dc0 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dba:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d16b      	bne.n	8005e98 <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d157      	bne.n	8005e7c <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d12d      	bne.n	8005e34 <lfs_file_flushedwrite+0x128>
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d029      	beq.n	8005e34 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005df2:	3a01      	subs	r2, #1
 8005df4:	68b9      	ldr	r1, [r7, #8]
 8005df6:	3138      	adds	r1, #56	; 0x38
 8005df8:	68b8      	ldr	r0, [r7, #8]
 8005dfa:	303c      	adds	r0, #60	; 0x3c
 8005dfc:	9003      	str	r0, [sp, #12]
 8005dfe:	9102      	str	r1, [sp, #8]
 8005e00:	9201      	str	r2, [sp, #4]
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	462b      	mov	r3, r5
 8005e06:	4622      	mov	r2, r4
 8005e08:	2100      	movs	r1, #0
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7ff f858 	bl	8004ec0 <lfs_ctz_find>
 8005e10:	6238      	str	r0, [r7, #32]
                    if (err) {
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	e094      	b.n	8005f52 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	3340      	adds	r3, #64	; 0x40
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7fb f80c 	bl	8000e4c <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7fb fe78 	bl	8001b2a <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005e40:	68fc      	ldr	r4, [r7, #12]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	3238      	adds	r2, #56	; 0x38
 8005e4e:	68b9      	ldr	r1, [r7, #8]
 8005e50:	313c      	adds	r1, #60	; 0x3c
 8005e52:	9102      	str	r1, [sp, #8]
 8005e54:	9201      	str	r2, [sp, #4]
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	462b      	mov	r3, r5
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	4601      	mov	r1, r0
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7ff f89a 	bl	8004f98 <lfs_ctz_extend>
 8005e64:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00f      	beq.n	8005e8c <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e70:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	e06a      	b.n	8005f52 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f06f 0201 	mvn.w	r2, #1
 8005e82:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e90:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ea8:	f7fa ff13 	bl	8000cd2 <lfs_min>
 8005eac:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005eb4:	68fc      	ldr	r4, [r7, #12]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ebe:	69b9      	ldr	r1, [r7, #24]
 8005ec0:	9103      	str	r1, [sp, #12]
 8005ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ec4:	9102      	str	r1, [sp, #8]
 8005ec6:	9201      	str	r2, [sp, #4]
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	2301      	movs	r3, #1
 8005ecc:	4622      	mov	r2, r4
 8005ece:	4601      	mov	r1, r0
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7fb fa17 	bl	8001304 <lfs_bd_prog>
 8005ed6:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01c      	beq.n	8005f18 <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005ee4:	d007      	beq.n	8005ef6 <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	e02d      	b.n	8005f52 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8005ef6:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005ef8:	68b9      	ldr	r1, [r7, #8]
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f7ff fbd8 	bl	80056b0 <lfs_file_relocate>
 8005f00:	6178      	str	r0, [r7, #20]
            if (err) {
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0d2      	beq.n	8005eae <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	e01c      	b.n	8005f52 <lfs_file_flushedwrite+0x246>
            break;
 8005f18:	bf00      	nop
            }
        }

        file->pos += diff;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	441a      	add	r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	441a      	add	r2, r3
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	4413      	add	r3, r2
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8005f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f7fb fdf1 	bl	8001b2a <lfs_alloc_ack>
    while (nsize > 0) {
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f47f af2b 	bne.w	8005da6 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8005f50:	683b      	ldr	r3, [r7, #0]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3730      	adds	r7, #48	; 0x30
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005f5c <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08a      	sub	sp, #40	; 0x28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <lfs_file_rawwrite+0x28>
 8005f76:	4b38      	ldr	r3, [pc, #224]	; (8006058 <lfs_file_rawwrite+0xfc>)
 8005f78:	4a38      	ldr	r2, [pc, #224]	; (800605c <lfs_file_rawwrite+0x100>)
 8005f7a:	f640 5157 	movw	r1, #3415	; 0xd57
 8005f7e:	4838      	ldr	r0, [pc, #224]	; (8006060 <lfs_file_rawwrite+0x104>)
 8005f80:	f007 ffd2 	bl	800df28 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d009      	beq.n	8005fa4 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f7ff fc88 	bl	80058a8 <lfs_file_flush>
 8005f98:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <lfs_file_rawwrite+0x48>
            return err;
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	e055      	b.n	8006050 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d009      	beq.n	8005fc4 <lfs_file_rawwrite+0x68>
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d203      	bcs.n	8005fc4 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	441a      	add	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d902      	bls.n	8005fda <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8005fd4:	f06f 031a 	mvn.w	r3, #26
 8005fd8:	e03a      	b.n	8006050 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d121      	bne.n	800602a <lfs_file_rawwrite+0xce>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d91b      	bls.n	800602a <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff6:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8006000:	e00e      	b.n	8006020 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8006002:	2300      	movs	r3, #0
 8006004:	75fb      	strb	r3, [r7, #23]
 8006006:	f107 0217 	add.w	r2, r7, #23
 800600a:	2301      	movs	r3, #1
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f7ff fe7c 	bl	8005d0c <lfs_file_flushedwrite>
 8006014:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	2b00      	cmp	r3, #0
 800601a:	da01      	bge.n	8006020 <lfs_file_rawwrite+0xc4>
                return res;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	e017      	b.n	8006050 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006024:	6a3a      	ldr	r2, [r7, #32]
 8006026:	429a      	cmp	r2, r3
 8006028:	d8eb      	bhi.n	8006002 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f7ff fe6b 	bl	8005d0c <lfs_file_flushedwrite>
 8006036:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	da01      	bge.n	8006042 <lfs_file_rawwrite+0xe6>
        return nsize;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	e006      	b.n	8006050 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 800604e:	69bb      	ldr	r3, [r7, #24]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3728      	adds	r7, #40	; 0x28
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	0800f77c 	.word	0x0800f77c
 800605c:	0800ffa4 	.word	0x0800ffa4
 8006060:	0800f430 	.word	0x0800f430

08006064 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8006064:	b580      	push	{r7, lr}
 8006066:	b08c      	sub	sp, #48	; 0x30
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d106      	bne.n	8006090 <lfs_init+0x2c>
 8006082:	4b9f      	ldr	r3, [pc, #636]	; (8006300 <lfs_init+0x29c>)
 8006084:	4a9f      	ldr	r2, [pc, #636]	; (8006304 <lfs_init+0x2a0>)
 8006086:	f640 7177 	movw	r1, #3959	; 0xf77
 800608a:	489f      	ldr	r0, [pc, #636]	; (8006308 <lfs_init+0x2a4>)
 800608c:	f007 ff4c 	bl	800df28 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <lfs_init+0x44>
 800609a:	4b9c      	ldr	r3, [pc, #624]	; (800630c <lfs_init+0x2a8>)
 800609c:	4a99      	ldr	r2, [pc, #612]	; (8006304 <lfs_init+0x2a0>)
 800609e:	f640 7178 	movw	r1, #3960	; 0xf78
 80060a2:	4899      	ldr	r0, [pc, #612]	; (8006308 <lfs_init+0x2a4>)
 80060a4:	f007 ff40 	bl	800df28 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <lfs_init+0x5c>
 80060b2:	4b97      	ldr	r3, [pc, #604]	; (8006310 <lfs_init+0x2ac>)
 80060b4:	4a93      	ldr	r2, [pc, #588]	; (8006304 <lfs_init+0x2a0>)
 80060b6:	f640 7179 	movw	r1, #3961	; 0xf79
 80060ba:	4893      	ldr	r0, [pc, #588]	; (8006308 <lfs_init+0x2a4>)
 80060bc:	f007 ff34 	bl	800df28 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80060ca:	6952      	ldr	r2, [r2, #20]
 80060cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80060d0:	fb02 f201 	mul.w	r2, r2, r1
 80060d4:	1a9b      	subs	r3, r3, r2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d006      	beq.n	80060e8 <lfs_init+0x84>
 80060da:	4b8e      	ldr	r3, [pc, #568]	; (8006314 <lfs_init+0x2b0>)
 80060dc:	4a89      	ldr	r2, [pc, #548]	; (8006304 <lfs_init+0x2a0>)
 80060de:	f640 717d 	movw	r1, #3965	; 0xf7d
 80060e2:	4889      	ldr	r0, [pc, #548]	; (8006308 <lfs_init+0x2a4>)
 80060e4:	f007 ff20 	bl	800df28 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80060f2:	6992      	ldr	r2, [r2, #24]
 80060f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80060f8:	fb02 f201 	mul.w	r2, r2, r1
 80060fc:	1a9b      	subs	r3, r3, r2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d006      	beq.n	8006110 <lfs_init+0xac>
 8006102:	4b85      	ldr	r3, [pc, #532]	; (8006318 <lfs_init+0x2b4>)
 8006104:	4a7f      	ldr	r2, [pc, #508]	; (8006304 <lfs_init+0x2a0>)
 8006106:	f640 717e 	movw	r1, #3966	; 0xf7e
 800610a:	487f      	ldr	r0, [pc, #508]	; (8006308 <lfs_init+0x2a4>)
 800610c:	f007 ff0c 	bl	800df28 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800611a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800611c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006120:	fb02 f201 	mul.w	r2, r2, r1
 8006124:	1a9b      	subs	r3, r3, r2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d006      	beq.n	8006138 <lfs_init+0xd4>
 800612a:	4b7c      	ldr	r3, [pc, #496]	; (800631c <lfs_init+0x2b8>)
 800612c:	4a75      	ldr	r2, [pc, #468]	; (8006304 <lfs_init+0x2a0>)
 800612e:	f640 717f 	movw	r1, #3967	; 0xf7f
 8006132:	4875      	ldr	r0, [pc, #468]	; (8006308 <lfs_init+0x2a4>)
 8006134:	f007 fef8 	bl	800df28 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	3b08      	subs	r3, #8
 8006140:	f04f 32ff 	mov.w	r2, #4294967295
 8006144:	fbb2 f3f3 	udiv	r3, r2, r3
 8006148:	4618      	mov	r0, r3
 800614a:	f7fa fdf7 	bl	8000d3c <lfs_npw2>
 800614e:	4603      	mov	r3, r0
 8006150:	009a      	lsls	r2, r3, #2
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	429a      	cmp	r2, r3
 800615a:	d906      	bls.n	800616a <lfs_init+0x106>
 800615c:	4b70      	ldr	r3, [pc, #448]	; (8006320 <lfs_init+0x2bc>)
 800615e:	4a69      	ldr	r2, [pc, #420]	; (8006304 <lfs_init+0x2a0>)
 8006160:	f640 7182 	movw	r1, #3970	; 0xf82
 8006164:	4868      	ldr	r0, [pc, #416]	; (8006308 <lfs_init+0x2a4>)
 8006166:	f007 fedf 	bl	800df28 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	2b00      	cmp	r3, #0
 8006172:	d106      	bne.n	8006182 <lfs_init+0x11e>
 8006174:	4b6b      	ldr	r3, [pc, #428]	; (8006324 <lfs_init+0x2c0>)
 8006176:	4a63      	ldr	r2, [pc, #396]	; (8006304 <lfs_init+0x2a0>)
 8006178:	f640 718b 	movw	r1, #3979	; 0xf8b
 800617c:	4862      	ldr	r0, [pc, #392]	; (8006308 <lfs_init+0x2a4>)
 800617e:	f007 fed3 	bl	800df28 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	60da      	str	r2, [r3, #12]
 8006196:	e010      	b.n	80061ba <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fa fe2f 	bl	8000e02 <lfs_malloc>
 80061a4:	4602      	mov	r2, r0
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d103      	bne.n	80061ba <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 80061b2:	f06f 030b 	mvn.w	r3, #11
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80061b8:	e0fe      	b.n	80063b8 <lfs_init+0x354>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	61da      	str	r2, [r3, #28]
 80061ce:	e010      	b.n	80061f2 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fa fe13 	bl	8000e02 <lfs_malloc>
 80061dc:	4602      	mov	r2, r0
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d103      	bne.n	80061f2 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 80061ea:	f06f 030b 	mvn.w	r3, #11
 80061ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80061f0:	e0e2      	b.n	80063b8 <lfs_init+0x354>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fa fe28 	bl	8000e4c <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3310      	adds	r3, #16
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fa fe22 	bl	8000e4c <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <lfs_init+0x1bc>
 8006212:	4b45      	ldr	r3, [pc, #276]	; (8006328 <lfs_init+0x2c4>)
 8006214:	4a3b      	ldr	r2, [pc, #236]	; (8006304 <lfs_init+0x2a0>)
 8006216:	f640 71a9 	movw	r1, #4009	; 0xfa9
 800621a:	483b      	ldr	r0, [pc, #236]	; (8006308 <lfs_init+0x2a4>)
 800621c:	f007 fe84 	bl	800df28 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <lfs_init+0x1d8>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d006      	beq.n	800624a <lfs_init+0x1e6>
 800623c:	4b3b      	ldr	r3, [pc, #236]	; (800632c <lfs_init+0x2c8>)
 800623e:	4a31      	ldr	r2, [pc, #196]	; (8006304 <lfs_init+0x2a0>)
 8006240:	f640 71aa 	movw	r1, #4010	; 0xfaa
 8006244:	4830      	ldr	r0, [pc, #192]	; (8006308 <lfs_init+0x2a4>)
 8006246:	f007 fe6f 	bl	800df28 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	665a      	str	r2, [r3, #100]	; 0x64
 800625e:	e010      	b.n	8006282 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	4618      	mov	r0, r3
 8006268:	f7fa fdcb 	bl	8000e02 <lfs_malloc>
 800626c:	4602      	mov	r2, r0
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006276:	2b00      	cmp	r3, #0
 8006278:	d103      	bne.n	8006282 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 800627a:	f06f 030b 	mvn.w	r3, #11
 800627e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8006280:	e09a      	b.n	80063b8 <lfs_init+0x354>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006288:	2bff      	cmp	r3, #255	; 0xff
 800628a:	d906      	bls.n	800629a <lfs_init+0x236>
 800628c:	4b28      	ldr	r3, [pc, #160]	; (8006330 <lfs_init+0x2cc>)
 800628e:	4a1d      	ldr	r2, [pc, #116]	; (8006304 <lfs_init+0x2a0>)
 8006290:	f640 71b7 	movw	r1, #4023	; 0xfb7
 8006294:	481c      	ldr	r0, [pc, #112]	; (8006308 <lfs_init+0x2a4>)
 8006296:	f007 fe47 	bl	800df28 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800629e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d102      	bne.n	80062b2 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	22ff      	movs	r2, #255	; 0xff
 80062b0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	da06      	bge.n	80062ca <lfs_init+0x266>
 80062bc:	4b1d      	ldr	r3, [pc, #116]	; (8006334 <lfs_init+0x2d0>)
 80062be:	4a11      	ldr	r2, [pc, #68]	; (8006304 <lfs_init+0x2a0>)
 80062c0:	f640 71bd 	movw	r1, #4029	; 0xfbd
 80062c4:	4810      	ldr	r0, [pc, #64]	; (8006308 <lfs_init+0x2a4>)
 80062c6:	f007 fe2f 	bl	800df28 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d103      	bne.n	80062e4 <lfs_init+0x280>
        lfs->file_max = LFS_FILE_MAX;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80062e2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ea:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d924      	bls.n	800633c <lfs_init+0x2d8>
 80062f2:	4b11      	ldr	r3, [pc, #68]	; (8006338 <lfs_init+0x2d4>)
 80062f4:	4a03      	ldr	r2, [pc, #12]	; (8006304 <lfs_init+0x2a0>)
 80062f6:	f640 71c3 	movw	r1, #4035	; 0xfc3
 80062fa:	4803      	ldr	r0, [pc, #12]	; (8006308 <lfs_init+0x2a4>)
 80062fc:	f007 fe14 	bl	800df28 <__assert_func>
 8006300:	0800f7ac 	.word	0x0800f7ac
 8006304:	0800ffb8 	.word	0x0800ffb8
 8006308:	0800f430 	.word	0x0800f430
 800630c:	0800f7c8 	.word	0x0800f7c8
 8006310:	0800f7e4 	.word	0x0800f7e4
 8006314:	0800f800 	.word	0x0800f800
 8006318:	0800f830 	.word	0x0800f830
 800631c:	0800f860 	.word	0x0800f860
 8006320:	0800f894 	.word	0x0800f894
 8006324:	0800f8e0 	.word	0x0800f8e0
 8006328:	0800f8fc 	.word	0x0800f8fc
 800632c:	0800f91c 	.word	0x0800f91c
 8006330:	0800f970 	.word	0x0800f970
 8006334:	0800f98c 	.word	0x0800f98c
 8006338:	0800f9b0 	.word	0x0800f9b0
    lfs->attr_max = lfs->cfg->attr_max;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800634a:	2b00      	cmp	r3, #0
 800634c:	d103      	bne.n	8006356 <lfs_init+0x2f2>
        lfs->attr_max = LFS_ATTR_MAX;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8006354:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800635a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	429a      	cmp	r2, r3
 8006364:	d906      	bls.n	8006374 <lfs_init+0x310>
 8006366:	4b18      	ldr	r3, [pc, #96]	; (80063c8 <lfs_init+0x364>)
 8006368:	4a18      	ldr	r2, [pc, #96]	; (80063cc <lfs_init+0x368>)
 800636a:	f640 71c9 	movw	r1, #4041	; 0xfc9
 800636e:	4818      	ldr	r0, [pc, #96]	; (80063d0 <lfs_init+0x36c>)
 8006370:	f007 fdda 	bl	800df28 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f04f 32ff 	mov.w	r2, #4294967295
 800637a:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f04f 32ff 	mov.w	r2, #4294967295
 8006382:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	333c      	adds	r3, #60	; 0x3c
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	605a      	str	r2, [r3, #4]
 800639a:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3330      	adds	r3, #48	; 0x30
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	605a      	str	r2, [r3, #4]
 80063a6:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3348      	adds	r3, #72	; 0x48
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	605a      	str	r2, [r3, #4]
 80063b2:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	e003      	b.n	80063c0 <lfs_init+0x35c>

cleanup:
    lfs_deinit(lfs);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f80b 	bl	80063d4 <lfs_deinit>
    return err;
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3730      	adds	r7, #48	; 0x30
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	0800f9cc 	.word	0x0800f9cc
 80063cc:	0800ffb8 	.word	0x0800ffb8
 80063d0:	0800f430 	.word	0x0800f430

080063d4 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d104      	bne.n	80063f0 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fa fd15 	bl	8000e1a <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d104      	bne.n	8006404 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fa fd0b 	bl	8000e1a <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640a:	2b00      	cmp	r3, #0
 800640c:	d104      	bne.n	8006418 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006412:	4618      	mov	r0, r3
 8006414:	f7fa fd01 	bl	8000e1a <lfs_free>
    }

    return 0;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
	...

08006424 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8006424:	b580      	push	{r7, lr}
 8006426:	b0a0      	sub	sp, #128	; 0x80
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
    int err = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff fe15 	bl	8006064 <lfs_init>
 800643a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800643c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <lfs_rawformat+0x22>
            return err;
 8006442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006444:	e082      	b.n	800654c <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	461a      	mov	r2, r3
 8006452:	2100      	movs	r1, #0
 8006454:	f007 fdee 	bl	800e034 <memset>
        lfs->free.off = 0;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006464:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	4619      	mov	r1, r3
 800646e:	4610      	mov	r0, r2
 8006470:	f7fa fc2f 	bl	8000cd2 <lfs_min>
 8006474:	4602      	mov	r2, r0
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7fb fb52 	bl	8001b2a <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8006486:	f107 030c 	add.w	r3, r7, #12
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7fd f9d3 	bl	8003838 <lfs_dir_alloc>
 8006492:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8006494:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d14f      	bne.n	800653a <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 800649a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800649e:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064a4:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 80064a6:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ac:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 80064ae:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 80064b4:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 80064ba:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 80064c0:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 80064c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fb fa73 	bl	80019b2 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80064cc:	4b21      	ldr	r3, [pc, #132]	; (8006554 <lfs_rawformat+0x130>)
 80064ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064d0:	2300      	movs	r3, #0
 80064d2:	653b      	str	r3, [r7, #80]	; 0x50
 80064d4:	4b20      	ldr	r3, [pc, #128]	; (8006558 <lfs_rawformat+0x134>)
 80064d6:	657b      	str	r3, [r7, #84]	; 0x54
 80064d8:	4b20      	ldr	r3, [pc, #128]	; (800655c <lfs_rawformat+0x138>)
 80064da:	65bb      	str	r3, [r7, #88]	; 0x58
 80064dc:	4b20      	ldr	r3, [pc, #128]	; (8006560 <lfs_rawformat+0x13c>)
 80064de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80064e4:	663b      	str	r3, [r7, #96]	; 0x60
 80064e6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80064ea:	f107 010c 	add.w	r1, r7, #12
 80064ee:	2303      	movs	r3, #3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7fe fb7b 	bl	8004bec <lfs_dir_commit>
 80064f6:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 80064f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d11f      	bne.n	800653e <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 80064fe:	2300      	movs	r3, #0
 8006500:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8006504:	f107 010c 	add.w	r1, r7, #12
 8006508:	2300      	movs	r3, #0
 800650a:	2200      	movs	r2, #0
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7fe fb6d 	bl	8004bec <lfs_dir_commit>
 8006512:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8006514:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006516:	2b00      	cmp	r3, #0
 8006518:	d113      	bne.n	8006542 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800651a:	2300      	movs	r3, #0
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800651e:	2301      	movs	r3, #1
 8006520:	633b      	str	r3, [r7, #48]	; 0x30
 8006522:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006526:	f107 030c 	add.w	r3, r7, #12
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7fc fd85 	bl	800303c <lfs_dir_fetch>
 8006532:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8006534:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006536:	2b00      	cmp	r3, #0
 8006538:	e004      	b.n	8006544 <lfs_rawformat+0x120>
            goto cleanup;
 800653a:	bf00      	nop
 800653c:	e002      	b.n	8006544 <lfs_rawformat+0x120>
            goto cleanup;
 800653e:	bf00      	nop
 8006540:	e000      	b.n	8006544 <lfs_rawformat+0x120>
            goto cleanup;
 8006542:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff ff45 	bl	80063d4 <lfs_deinit>
    return err;
 800654a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 800654c:	4618      	mov	r0, r3
 800654e:	3780      	adds	r7, #128	; 0x80
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	40100000 	.word	0x40100000
 8006558:	0ff00008 	.word	0x0ff00008
 800655c:	0800f9fc 	.word	0x0800f9fc
 8006560:	20100018 	.word	0x20100018

08006564 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8006564:	b580      	push	{r7, lr}
 8006566:	b09c      	sub	sp, #112	; 0x70
 8006568:	af04      	add	r7, sp, #16
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fd77 	bl	8006064 <lfs_init>
 8006576:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8006578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <lfs_rawmount+0x1e>
        return err;
 800657e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006580:	e192      	b.n	80068a8 <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8006582:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006586:	2220      	movs	r2, #32
 8006588:	2100      	movs	r1, #0
 800658a:	4618      	mov	r0, r3
 800658c:	f007 fd52 	bl	800e034 <memset>
 8006590:	2301      	movs	r3, #1
 8006592:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8006594:	2300      	movs	r3, #0
 8006596:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8006598:	e10b      	b.n	80067b2 <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d303      	bcc.n	80065b0 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 80065a8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80065ac:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80065ae:	e177      	b.n	80068a0 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 80065b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065b2:	3301      	adds	r3, #1
 80065b4:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ba:	4b8a      	ldr	r3, [pc, #552]	; (80067e4 <lfs_rawmount+0x280>)
 80065bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065be:	2308      	movs	r3, #8
 80065c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80065c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065c6:	f103 0218 	add.w	r2, r3, #24
 80065ca:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80065ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065d2:	9303      	str	r3, [sp, #12]
 80065d4:	4b84      	ldr	r3, [pc, #528]	; (80067e8 <lfs_rawmount+0x284>)
 80065d6:	9302      	str	r3, [sp, #8]
 80065d8:	2300      	movs	r3, #0
 80065da:	9301      	str	r3, [sp, #4]
 80065dc:	4b83      	ldr	r3, [pc, #524]	; (80067ec <lfs_rawmount+0x288>)
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	4b83      	ldr	r3, [pc, #524]	; (80067f0 <lfs_rawmount+0x28c>)
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7fc f9b6 	bl	8002954 <lfs_dir_fetchmatch>
 80065e8:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80065ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	da02      	bge.n	80065f6 <lfs_rawmount+0x92>
            err = tag;
 80065f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065f2:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80065f4:	e154      	b.n	80068a0 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80065f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 80cd 	beq.w	8006798 <lfs_rawmount+0x234>
 80065fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006600:	4618      	mov	r0, r3
 8006602:	f7fb f821 	bl	8001648 <lfs_tag_isdelete>
 8006606:	4603      	mov	r3, r0
 8006608:	f083 0301 	eor.w	r3, r3, #1
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 80c2 	beq.w	8006798 <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8006614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800661a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8006620:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006624:	f107 030c 	add.w	r3, r7, #12
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	4b72      	ldr	r3, [pc, #456]	; (80067f4 <lfs_rawmount+0x290>)
 800662c:	4a70      	ldr	r2, [pc, #448]	; (80067f0 <lfs_rawmount+0x28c>)
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fb fc34 	bl	8001e9c <lfs_dir_get>
 8006634:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8006636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006638:	2b00      	cmp	r3, #0
 800663a:	da02      	bge.n	8006642 <lfs_rawmount+0xde>
                err = tag;
 800663c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800663e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006640:	e12e      	b.n	80068a0 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 8006642:	f107 030c 	add.w	r3, r7, #12
 8006646:	4618      	mov	r0, r3
 8006648:	f7fb f97b 	bl	8001942 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	0c1b      	lsrs	r3, r3, #16
 8006650:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 800665a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800665e:	2b02      	cmp	r3, #2
 8006660:	d103      	bne.n	800666a <lfs_rawmount+0x106>
 8006662:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006666:	2b00      	cmp	r3, #0
 8006668:	d011      	beq.n	800668e <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 800666a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800666e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006672:	4961      	ldr	r1, [pc, #388]	; (80067f8 <lfs_rawmount+0x294>)
 8006674:	9101      	str	r1, [sp, #4]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	4613      	mov	r3, r2
 800667a:	f241 0264 	movw	r2, #4196	; 0x1064
 800667e:	495f      	ldr	r1, [pc, #380]	; (80067fc <lfs_rawmount+0x298>)
 8006680:	485f      	ldr	r0, [pc, #380]	; (8006800 <lfs_rawmount+0x29c>)
 8006682:	f008 f873 	bl	800e76c <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8006686:	f06f 0315 	mvn.w	r3, #21
 800668a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800668c:	e083      	b.n	8006796 <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d018      	beq.n	80066c6 <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800669a:	429a      	cmp	r2, r3
 800669c:	d910      	bls.n	80066c0 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066a4:	4954      	ldr	r1, [pc, #336]	; (80067f8 <lfs_rawmount+0x294>)
 80066a6:	9101      	str	r1, [sp, #4]
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	4613      	mov	r3, r2
 80066ac:	f241 026d 	movw	r2, #4205	; 0x106d
 80066b0:	4952      	ldr	r1, [pc, #328]	; (80067fc <lfs_rawmount+0x298>)
 80066b2:	4854      	ldr	r0, [pc, #336]	; (8006804 <lfs_rawmount+0x2a0>)
 80066b4:	f008 f85a 	bl	800e76c <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 80066b8:	f06f 0315 	mvn.w	r3, #21
 80066bc:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80066be:	e06a      	b.n	8006796 <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d018      	beq.n	80066fe <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 80066cc:	69fa      	ldr	r2, [r7, #28]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d910      	bls.n	80066f8 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 80066d6:	69fa      	ldr	r2, [r7, #28]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066dc:	4946      	ldr	r1, [pc, #280]	; (80067f8 <lfs_rawmount+0x294>)
 80066de:	9101      	str	r1, [sp, #4]
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	4613      	mov	r3, r2
 80066e4:	f241 0278 	movw	r2, #4216	; 0x1078
 80066e8:	4944      	ldr	r1, [pc, #272]	; (80067fc <lfs_rawmount+0x298>)
 80066ea:	4847      	ldr	r0, [pc, #284]	; (8006808 <lfs_rawmount+0x2a4>)
 80066ec:	f008 f83e 	bl	800e76c <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 80066f0:	f06f 0315 	mvn.w	r3, #21
 80066f4:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80066f6:	e04e      	b.n	8006796 <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 80066f8:	69fa      	ldr	r2, [r7, #28]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d018      	beq.n	8006736 <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 8006704:	6a3a      	ldr	r2, [r7, #32]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800670a:	429a      	cmp	r2, r3
 800670c:	d910      	bls.n	8006730 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800670e:	6a3a      	ldr	r2, [r7, #32]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006714:	4938      	ldr	r1, [pc, #224]	; (80067f8 <lfs_rawmount+0x294>)
 8006716:	9101      	str	r1, [sp, #4]
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	4613      	mov	r3, r2
 800671c:	f241 0283 	movw	r2, #4227	; 0x1083
 8006720:	4936      	ldr	r1, [pc, #216]	; (80067fc <lfs_rawmount+0x298>)
 8006722:	483a      	ldr	r0, [pc, #232]	; (800680c <lfs_rawmount+0x2a8>)
 8006724:	f008 f822 	bl	800e76c <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8006728:	f06f 0315 	mvn.w	r3, #21
 800672c:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800672e:	e032      	b.n	8006796 <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 8006730:	6a3a      	ldr	r2, [r7, #32]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	429a      	cmp	r2, r3
 8006740:	d011      	beq.n	8006766 <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	492b      	ldr	r1, [pc, #172]	; (80067f8 <lfs_rawmount+0x294>)
 800674c:	9101      	str	r1, [sp, #4]
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	4613      	mov	r3, r2
 8006752:	f241 028d 	movw	r2, #4237	; 0x108d
 8006756:	4929      	ldr	r1, [pc, #164]	; (80067fc <lfs_rawmount+0x298>)
 8006758:	482d      	ldr	r0, [pc, #180]	; (8006810 <lfs_rawmount+0x2ac>)
 800675a:	f008 f807 	bl	800e76c <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 800675e:	f06f 0315 	mvn.w	r3, #21
 8006762:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006764:	e017      	b.n	8006796 <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	429a      	cmp	r2, r3
 8006770:	d012      	beq.n	8006798 <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	491f      	ldr	r1, [pc, #124]	; (80067f8 <lfs_rawmount+0x294>)
 800677c:	9101      	str	r1, [sp, #4]
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	4613      	mov	r3, r2
 8006782:	f241 0294 	movw	r2, #4244	; 0x1094
 8006786:	491d      	ldr	r1, [pc, #116]	; (80067fc <lfs_rawmount+0x298>)
 8006788:	4822      	ldr	r0, [pc, #136]	; (8006814 <lfs_rawmount+0x2b0>)
 800678a:	f007 ffef 	bl	800e76c <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 800678e:	f06f 0315 	mvn.w	r3, #21
 8006792:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006794:	bf00      	nop
            goto cleanup;
 8006796:	e083      	b.n	80068a0 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800679e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7fc fc65 	bl	8003074 <lfs_dir_getgstate>
 80067aa:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 80067ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d175      	bne.n	800689e <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 80067b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80067b6:	3318      	adds	r3, #24
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fa fe95 	bl	80014e8 <lfs_pair_isnull>
 80067be:	4603      	mov	r3, r0
 80067c0:	f083 0301 	eor.w	r3, r3, #1
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f47f aee7 	bne.w	800659a <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3320      	adds	r3, #32
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fa fe89 	bl	80014e8 <lfs_pair_isnull>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01d      	beq.n	8006818 <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 80067dc:	f06f 0315 	mvn.w	r3, #21
 80067e0:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80067e2:	e05d      	b.n	80068a0 <lfs_rawmount+0x33c>
 80067e4:	0800f9fc 	.word	0x0800f9fc
 80067e8:	080031cd 	.word	0x080031cd
 80067ec:	0ff00008 	.word	0x0ff00008
 80067f0:	7ffffc00 	.word	0x7ffffc00
 80067f4:	20100018 	.word	0x20100018
 80067f8:	0800f524 	.word	0x0800f524
 80067fc:	0800f430 	.word	0x0800f430
 8006800:	0800fa08 	.word	0x0800fa08
 8006804:	0800fa34 	.word	0x0800fa34
 8006808:	0800fa68 	.word	0x0800fa68
 800680c:	0800fa9c 	.word	0x0800fa9c
 8006810:	0800fad0 	.word	0x0800fad0
 8006814:	0800fb04 	.word	0x0800fb04
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3330      	adds	r3, #48	; 0x30
 800681c:	4618      	mov	r0, r3
 800681e:	f7fa ffaf 	bl	8001780 <lfs_gstate_iszero>
 8006822:	4603      	mov	r3, r0
 8006824:	f083 0301 	eor.w	r3, r3, #1
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d010      	beq.n	8006850 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800683a:	481d      	ldr	r0, [pc, #116]	; (80068b0 <lfs_rawmount+0x34c>)
 800683c:	9002      	str	r0, [sp, #8]
 800683e:	9201      	str	r2, [sp, #4]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	460b      	mov	r3, r1
 8006844:	f241 02aa 	movw	r2, #4266	; 0x10aa
 8006848:	491a      	ldr	r1, [pc, #104]	; (80068b4 <lfs_rawmount+0x350>)
 800684a:	481b      	ldr	r0, [pc, #108]	; (80068b8 <lfs_rawmount+0x354>)
 800684c:	f007 ff8e 	bl	800e76c <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006854:	4618      	mov	r0, r3
 8006856:	f7fa feea 	bl	800162e <lfs_tag_isvalid>
 800685a:	4603      	mov	r3, r0
 800685c:	f083 0301 	eor.w	r3, r3, #1
 8006860:	b2db      	uxtb	r3, r3
 8006862:	461a      	mov	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	441a      	add	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	333c      	adds	r3, #60	; 0x3c
 8006874:	3230      	adds	r2, #48	; 0x30
 8006876:	ca07      	ldmia	r2, {r0, r1, r2}
 8006878:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006884:	6a12      	ldr	r2, [r2, #32]
 8006886:	fbb3 f1f2 	udiv	r1, r3, r2
 800688a:	fb02 f201 	mul.w	r2, r2, r1
 800688e:	1a9a      	subs	r2, r3, r2
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7fb f956 	bl	8001b46 <lfs_alloc_drop>

    return 0;
 800689a:	2300      	movs	r3, #0
 800689c:	e004      	b.n	80068a8 <lfs_rawmount+0x344>
            goto cleanup;
 800689e:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f80b 	bl	80068bc <lfs_rawunmount>
    return err;
 80068a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3760      	adds	r7, #96	; 0x60
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	0800f524 	.word	0x0800f524
 80068b4:	0800f430 	.word	0x0800f430
 80068b8:	0800fb34 	.word	0x0800fb34

080068bc <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff fd85 	bl	80063d4 <lfs_deinit>
 80068ca:	4603      	mov	r3, r0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80068d4:	b590      	push	{r4, r7, lr}
 80068d6:	b09d      	sub	sp, #116	; 0x74
 80068d8:	af04      	add	r7, sp, #16
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 80068e2:	f107 0318 	add.w	r3, r7, #24
 80068e6:	2220      	movs	r2, #32
 80068e8:	2100      	movs	r1, #0
 80068ea:	4618      	mov	r0, r3
 80068ec:	f007 fba2 	bl	800e034 <memset>
 80068f0:	2301      	movs	r3, #1
 80068f2:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 80068f8:	e0a8      	b.n	8006a4c <lfs_fs_rawtraverse+0x178>
        if (cycle >= lfs->cfg->block_count/2) {
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	085b      	lsrs	r3, r3, #1
 8006902:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006904:	429a      	cmp	r2, r3
 8006906:	d302      	bcc.n	800690e <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8006908:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800690c:	e103      	b.n	8006b16 <lfs_fs_rawtraverse+0x242>
        }
        cycle += 1;
 800690e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006910:	3301      	adds	r3, #1
 8006912:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8006914:	2300      	movs	r3, #0
 8006916:	65bb      	str	r3, [r7, #88]	; 0x58
 8006918:	e014      	b.n	8006944 <lfs_fs_rawtraverse+0x70>
            int err = cb(data, dir.tail[i]);
 800691a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800691c:	3306      	adds	r3, #6
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006924:	4413      	add	r3, r2
 8006926:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	4611      	mov	r1, r2
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	4798      	blx	r3
 8006932:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <lfs_fs_rawtraverse+0x6a>
                return err;
 800693a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693c:	e0eb      	b.n	8006b16 <lfs_fs_rawtraverse+0x242>
        for (int i = 0; i < 2; i++) {
 800693e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006940:	3301      	adds	r3, #1
 8006942:	65bb      	str	r3, [r7, #88]	; 0x58
 8006944:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006946:	2b01      	cmp	r3, #1
 8006948:	dde7      	ble.n	800691a <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800694a:	f107 0318 	add.w	r3, r7, #24
 800694e:	f103 0218 	add.w	r2, r3, #24
 8006952:	f107 0318 	add.w	r3, r7, #24
 8006956:	4619      	mov	r1, r3
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7fc fb6f 	bl	800303c <lfs_dir_fetch>
 800695e:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8006960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <lfs_fs_rawtraverse+0x96>
            return err;
 8006966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006968:	e0d5      	b.n	8006b16 <lfs_fs_rawtraverse+0x242>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800696a:	2300      	movs	r3, #0
 800696c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006970:	e067      	b.n	8006a42 <lfs_fs_rawtraverse+0x16e>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8006972:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006976:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006978:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800697c:	f043 0308 	orr.w	r3, r3, #8
 8006980:	f107 0118 	add.w	r1, r7, #24
 8006984:	f107 0210 	add.w	r2, r7, #16
 8006988:	9200      	str	r2, [sp, #0]
 800698a:	4a65      	ldr	r2, [pc, #404]	; (8006b20 <lfs_fs_rawtraverse+0x24c>)
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7fb fa85 	bl	8001e9c <lfs_dir_get>
 8006992:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 8006994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006996:	2b00      	cmp	r3, #0
 8006998:	da05      	bge.n	80069a6 <lfs_fs_rawtraverse+0xd2>
                if (tag == LFS_ERR_NOENT) {
 800699a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699c:	f113 0f02 	cmn.w	r3, #2
 80069a0:	d049      	beq.n	8006a36 <lfs_fs_rawtraverse+0x162>
                    continue;
                }
                return tag;
 80069a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a4:	e0b7      	b.n	8006b16 <lfs_fs_rawtraverse+0x242>
            }
            lfs_ctz_fromle32(&ctz);
 80069a6:	f107 0310 	add.w	r3, r7, #16
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fa ff99 	bl	80018e2 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80069b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fa fe69 	bl	800168a <lfs_tag_type3>
 80069b8:	4603      	mov	r3, r0
 80069ba:	461a      	mov	r2, r3
 80069bc:	f240 2302 	movw	r3, #514	; 0x202
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d113      	bne.n	80069ec <lfs_fs_rawtraverse+0x118>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80069c4:	68f9      	ldr	r1, [r7, #12]
 80069c6:	6938      	ldr	r0, [r7, #16]
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	9202      	str	r2, [sp, #8]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	9201      	str	r2, [sp, #4]
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	4603      	mov	r3, r0
 80069d6:	460a      	mov	r2, r1
 80069d8:	2100      	movs	r1, #0
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7fe fbe4 	bl	80051a8 <lfs_ctz_traverse>
 80069e0:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 80069e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d027      	beq.n	8006a38 <lfs_fs_rawtraverse+0x164>
                    return err;
 80069e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ea:	e094      	b.n	8006b16 <lfs_fs_rawtraverse+0x242>
                }
            } else if (includeorphans &&
 80069ec:	78fb      	ldrb	r3, [r7, #3]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d022      	beq.n	8006a38 <lfs_fs_rawtraverse+0x164>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 80069f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fa fe48 	bl	800168a <lfs_tag_type3>
 80069fa:	4603      	mov	r3, r0
            } else if (includeorphans &&
 80069fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a00:	d11a      	bne.n	8006a38 <lfs_fs_rawtraverse+0x164>
                for (int i = 0; i < 2; i++) {
 8006a02:	2300      	movs	r3, #0
 8006a04:	653b      	str	r3, [r7, #80]	; 0x50
 8006a06:	e012      	b.n	8006a2e <lfs_fs_rawtraverse+0x15a>
                    err = cb(data, (&ctz.head)[i]);
 8006a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	f107 0210 	add.w	r2, r7, #16
 8006a10:	4413      	add	r3, r2
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4611      	mov	r1, r2
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	4798      	blx	r3
 8006a1c:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 8006a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <lfs_fs_rawtraverse+0x154>
                        return err;
 8006a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a26:	e076      	b.n	8006b16 <lfs_fs_rawtraverse+0x242>
                for (int i = 0; i < 2; i++) {
 8006a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	653b      	str	r3, [r7, #80]	; 0x50
 8006a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	dde9      	ble.n	8006a08 <lfs_fs_rawtraverse+0x134>
 8006a34:	e000      	b.n	8006a38 <lfs_fs_rawtraverse+0x164>
                    continue;
 8006a36:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8006a38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006a42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a44:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d392      	bcc.n	8006972 <lfs_fs_rawtraverse+0x9e>
    while (!lfs_pair_isnull(dir.tail)) {
 8006a4c:	f107 0318 	add.w	r3, r7, #24
 8006a50:	3318      	adds	r3, #24
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fa fd48 	bl	80014e8 <lfs_pair_isnull>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f083 0301 	eor.w	r3, r3, #1
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f47f af4a 	bne.w	80068fa <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a6c:	e04f      	b.n	8006b0e <lfs_fs_rawtraverse+0x23a>
        if (f->type != LFS_TYPE_REG) {
 8006a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a70:	799b      	ldrb	r3, [r3, #6]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d147      	bne.n	8006b06 <lfs_fs_rawtraverse+0x232>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8006a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d01d      	beq.n	8006abe <lfs_fs_rawtraverse+0x1ea>
 8006a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d117      	bne.n	8006abe <lfs_fs_rawtraverse+0x1ea>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a90:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a98:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	9202      	str	r2, [sp, #8]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	9201      	str	r2, [sp, #4]
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	4623      	mov	r3, r4
 8006aaa:	4602      	mov	r2, r0
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f7fe fb7b 	bl	80051a8 <lfs_ctz_traverse>
 8006ab2:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8006ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <lfs_fs_rawtraverse+0x1ea>
                return err;
 8006aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006abc:	e02b      	b.n	8006b16 <lfs_fs_rawtraverse+0x242>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8006abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d01e      	beq.n	8006b08 <lfs_fs_rawtraverse+0x234>
 8006aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d118      	bne.n	8006b08 <lfs_fs_rawtraverse+0x234>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8006ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	9202      	str	r2, [sp, #8]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	9201      	str	r2, [sp, #4]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	4623      	mov	r3, r4
 8006af2:	4602      	mov	r2, r0
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f7fe fb57 	bl	80051a8 <lfs_ctz_traverse>
 8006afa:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8006afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <lfs_fs_rawtraverse+0x234>
                return err;
 8006b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b04:	e007      	b.n	8006b16 <lfs_fs_rawtraverse+0x242>
            continue;
 8006b06:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1ac      	bne.n	8006a6e <lfs_fs_rawtraverse+0x19a>
            }
        }
    }
#endif

    return 0;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3764      	adds	r7, #100	; 0x64
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd90      	pop	{r4, r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	700ffc00 	.word	0x700ffc00

08006b24 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 8006b40:	e024      	b.n	8006b8c <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	085b      	lsrs	r3, r3, #1
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d302      	bcc.n	8006b56 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8006b50:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006b54:	e027      	b.n	8006ba6 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3318      	adds	r3, #24
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fa fcda 	bl	800151c <lfs_pair_cmp>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <lfs_fs_pred+0x4e>
            return 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e019      	b.n	8006ba6 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3318      	adds	r3, #24
 8006b76:	461a      	mov	r2, r3
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f7fc fa5e 	bl	800303c <lfs_dir_fetch>
 8006b80:	6138      	str	r0, [r7, #16]
        if (err) {
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <lfs_fs_pred+0x68>
            return err;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	e00c      	b.n	8006ba6 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3318      	adds	r3, #24
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fa fca9 	bl	80014e8 <lfs_pair_isnull>
 8006b96:	4603      	mov	r3, r0
 8006b98:	f083 0301 	eor.w	r3, r3, #1
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1cf      	bne.n	8006b42 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8006ba2:	f06f 0301 	mvn.w	r3, #1
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006bae:	b5b0      	push	{r4, r5, r7, lr}
 8006bb0:	b08e      	sub	sp, #56	; 0x38
 8006bb2:	af04      	add	r7, sp, #16
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8006bce:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 8006bd4:	69dd      	ldr	r5, [r3, #28]
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	69fa      	ldr	r2, [r7, #28]
 8006bdc:	6852      	ldr	r2, [r2, #4]
 8006bde:	2108      	movs	r1, #8
 8006be0:	9103      	str	r1, [sp, #12]
 8006be2:	f107 0110 	add.w	r1, r7, #16
 8006be6:	9102      	str	r1, [sp, #8]
 8006be8:	9201      	str	r2, [sp, #4]
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	462b      	mov	r3, r5
 8006bee:	4622      	mov	r2, r4
 8006bf0:	4601      	mov	r1, r0
 8006bf2:	6a38      	ldr	r0, [r7, #32]
 8006bf4:	f7fa f940 	bl	8000e78 <lfs_bd_read>
 8006bf8:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <lfs_fs_parent_match+0x56>
        return err;
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	e012      	b.n	8006c2a <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8006c04:	f107 0310 	add.w	r3, r7, #16
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fa fcdc 	bl	80015c6 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	1d1a      	adds	r2, r3, #4
 8006c12:	f107 0310 	add.w	r3, r7, #16
 8006c16:	4611      	mov	r1, r2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fa fc7f 	bl	800151c <lfs_pair_cmp>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bf14      	ite	ne
 8006c24:	2301      	movne	r3, #1
 8006c26:	2300      	moveq	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3728      	adds	r7, #40	; 0x28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006c34 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08e      	sub	sp, #56	; 0x38
 8006c38:	af04      	add	r7, sp, #16
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 8006c50:	e02f      	b.n	8006cb2 <lfs_fs_parent+0x7e>
        if (cycle >= lfs->cfg->block_count/2) {
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	085b      	lsrs	r3, r3, #1
 8006c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d302      	bcc.n	8006c66 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8006c60:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006c64:	e032      	b.n	8006ccc <lfs_fs_parent+0x98>
        }
        cycle += 1;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	3301      	adds	r3, #1
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006c7a:	61bb      	str	r3, [r7, #24]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006c82:	f107 0314 	add.w	r3, r7, #20
 8006c86:	9303      	str	r3, [sp, #12]
 8006c88:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <lfs_fs_parent+0xa0>)
 8006c8a:	9302      	str	r3, [sp, #8]
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9301      	str	r3, [sp, #4]
 8006c90:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <lfs_fs_parent+0xa4>)
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	4b11      	ldr	r3, [pc, #68]	; (8006cdc <lfs_fs_parent+0xa8>)
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f7fb fe5b 	bl	8002954 <lfs_dir_fetchmatch>
 8006c9e:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <lfs_fs_parent+0x7e>
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	f113 0f02 	cmn.w	r3, #2
 8006cac:	d001      	beq.n	8006cb2 <lfs_fs_parent+0x7e>
            return tag;
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	e00c      	b.n	8006ccc <lfs_fs_parent+0x98>
    while (!lfs_pair_isnull(parent->tail)) {
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3318      	adds	r3, #24
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fa fc16 	bl	80014e8 <lfs_pair_isnull>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	f083 0301 	eor.w	r3, r3, #1
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1c4      	bne.n	8006c52 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8006cc8:	f06f 0301 	mvn.w	r3, #1
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3728      	adds	r7, #40	; 0x28
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	08006baf 	.word	0x08006baf
 8006cd8:	20000008 	.word	0x20000008
 8006cdc:	7ff003ff 	.word	0x7ff003ff

08006ce0 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8006ce0:	b590      	push	{r4, r7, lr}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fa fd01 	bl	80016f8 <lfs_tag_size>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10a      	bne.n	8006d12 <lfs_fs_preporphans+0x32>
 8006cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	da06      	bge.n	8006d12 <lfs_fs_preporphans+0x32>
 8006d04:	4b10      	ldr	r3, [pc, #64]	; (8006d48 <lfs_fs_preporphans+0x68>)
 8006d06:	4a11      	ldr	r2, [pc, #68]	; (8006d4c <lfs_fs_preporphans+0x6c>)
 8006d08:	f241 117d 	movw	r1, #4477	; 0x117d
 8006d0c:	4810      	ldr	r0, [pc, #64]	; (8006d50 <lfs_fs_preporphans+0x70>)
 8006d0e:	f007 f90b 	bl	800df28 <__assert_func>
    lfs->gstate.tag += orphans;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d1a:	441a      	add	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d24:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3330      	adds	r3, #48	; 0x30
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fa fd43 	bl	80017b8 <lfs_gstate_hasorphans>
 8006d32:	4603      	mov	r3, r0
 8006d34:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006d36:	ea44 0203 	orr.w	r2, r4, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd90      	pop	{r4, r7, pc}
 8006d48:	0800fb6c 	.word	0x0800fb6c
 8006d4c:	0800ffc4 	.word	0x0800ffc4
 8006d50:	0800f430 	.word	0x0800f430

08006d54 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d66:	4a17      	ldr	r2, [pc, #92]	; (8006dc4 <lfs_fs_prepmove+0x70>)
 8006d68:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8006d6a:	897b      	ldrh	r3, [r7, #10]
 8006d6c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006d70:	428b      	cmp	r3, r1
 8006d72:	d006      	beq.n	8006d82 <lfs_fs_prepmove+0x2e>
 8006d74:	897b      	ldrh	r3, [r7, #10]
 8006d76:	029b      	lsls	r3, r3, #10
 8006d78:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006d7c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006d80:	e000      	b.n	8006d84 <lfs_fs_prepmove+0x30>
 8006d82:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006d84:	431a      	orrs	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8006d8a:	897b      	ldrh	r3, [r7, #10]
 8006d8c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d002      	beq.n	8006d9a <lfs_fs_prepmove+0x46>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	e000      	b.n	8006d9c <lfs_fs_prepmove+0x48>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8006da0:	897b      	ldrh	r3, [r7, #10]
 8006da2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d003      	beq.n	8006db2 <lfs_fs_prepmove+0x5e>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3304      	adds	r3, #4
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	e000      	b.n	8006db4 <lfs_fs_prepmove+0x60>
 8006db2:	2300      	movs	r3, #0
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006db8:	bf00      	nop
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bc80      	pop	{r7}
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	800003ff 	.word	0x800003ff

08006dc8 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8006dc8:	b5b0      	push	{r4, r5, r7, lr}
 8006dca:	b094      	sub	sp, #80	; 0x50
 8006dcc:	af04      	add	r7, sp, #16
 8006dce:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	333c      	adds	r3, #60	; 0x3c
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fa fd11 	bl	80017fc <lfs_gstate_hasmove>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f083 0301 	eor.w	r3, r3, #1
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <lfs_fs_demove+0x22>
        return 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	e049      	b.n	8006e7e <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fa fc6f 	bl	80016da <lfs_tag_id>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	461a      	mov	r2, r3
 8006e00:	4b21      	ldr	r3, [pc, #132]	; (8006e88 <lfs_fs_demove+0xc0>)
 8006e02:	9302      	str	r3, [sp, #8]
 8006e04:	9201      	str	r2, [sp, #4]
 8006e06:	9400      	str	r4, [sp, #0]
 8006e08:	462b      	mov	r3, r5
 8006e0a:	f241 1297 	movw	r2, #4503	; 0x1197
 8006e0e:	491f      	ldr	r1, [pc, #124]	; (8006e8c <lfs_fs_demove+0xc4>)
 8006e10:	481f      	ldr	r0, [pc, #124]	; (8006e90 <lfs_fs_demove+0xc8>)
 8006e12:	f007 fcab 	bl	800e76c <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006e1c:	f107 0318 	add.w	r3, r7, #24
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7fc f90a 	bl	800303c <lfs_dir_fetch>
 8006e28:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <lfs_fs_demove+0x6c>
        return err;
 8006e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e32:	e024      	b.n	8006e7e <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fa fc4e 	bl	80016da <lfs_tag_id>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006e42:	2200      	movs	r2, #0
 8006e44:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7ff ff83 	bl	8006d54 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8006e4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006e50:	029b      	lsls	r3, r3, #10
 8006e52:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006e56:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	617b      	str	r3, [r7, #20]
 8006e60:	f107 0210 	add.w	r2, r7, #16
 8006e64:	f107 0118 	add.w	r1, r7, #24
 8006e68:	2301      	movs	r3, #1
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fd febe 	bl	8004bec <lfs_dir_commit>
 8006e70:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8006e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <lfs_fs_demove+0xb4>
        return err;
 8006e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7a:	e000      	b.n	8006e7e <lfs_fs_demove+0xb6>
    }

    return 0;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3740      	adds	r7, #64	; 0x40
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bdb0      	pop	{r4, r5, r7, pc}
 8006e86:	bf00      	nop
 8006e88:	0800f524 	.word	0x0800f524
 8006e8c:	0800f430 	.word	0x0800f430
 8006e90:	0800fba0 	.word	0x0800fba0

08006e94 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8006e94:	b5b0      	push	{r4, r5, r7, lr}
 8006e96:	b0b2      	sub	sp, #200	; 0xc8
 8006e98:	af04      	add	r7, sp, #16
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3330      	adds	r3, #48	; 0x30
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fa fc87 	bl	80017b8 <lfs_gstate_hasorphans>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	f083 0301 	eor.w	r3, r3, #1
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <lfs_fs_deorphan+0x26>
        return 0;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e17c      	b.n	80071b4 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8006ec0:	f107 030c 	add.w	r3, r7, #12
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f007 f8b3 	bl	800e034 <memset>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8006ed8:	e148      	b.n	800716c <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8006eda:	f107 030c 	add.w	r3, r7, #12
 8006ede:	f103 0218 	add.w	r2, r3, #24
 8006ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fc f8a7 	bl	800303c <lfs_dir_fetch>
 8006eee:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 8006ef2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <lfs_fs_deorphan+0x6c>
                return err;
 8006efa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006efe:	e159      	b.n	80071b4 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8006f00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f04:	f083 0301 	eor.w	r3, r3, #1
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 8124 	beq.w	8007158 <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8006f10:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8006f14:	f107 030c 	add.w	r3, r7, #12
 8006f18:	3318      	adds	r3, #24
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff fe89 	bl	8006c34 <lfs_fs_parent>
 8006f22:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	da07      	bge.n	8006f3e <lfs_fs_deorphan+0xaa>
 8006f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f32:	f113 0f02 	cmn.w	r3, #2
 8006f36:	d002      	beq.n	8006f3e <lfs_fs_deorphan+0xaa>
                    return tag;
 8006f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f3c:	e13a      	b.n	80071b4 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 8006f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f42:	f113 0f02 	cmn.w	r3, #2
 8006f46:	d157      	bne.n	8006ff8 <lfs_fs_deorphan+0x164>
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d054      	beq.n	8006ff8 <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8006f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	499a      	ldr	r1, [pc, #616]	; (80071bc <lfs_fs_deorphan+0x328>)
 8006f54:	9101      	str	r1, [sp, #4]
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	f241 12d2 	movw	r2, #4562	; 0x11d2
 8006f5e:	4998      	ldr	r1, [pc, #608]	; (80071c0 <lfs_fs_deorphan+0x32c>)
 8006f60:	4898      	ldr	r0, [pc, #608]	; (80071c4 <lfs_fs_deorphan+0x330>)
 8006f62:	f007 fc03 	bl	800e76c <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fc f87e 	bl	8003074 <lfs_dir_getgstate>
 8006f78:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 8006f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <lfs_fs_deorphan+0xf6>
                        return err;
 8006f84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f88:	e114      	b.n	80071b4 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8006f8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f8e:	3318      	adds	r3, #24
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fa fb32 	bl	80015fa <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006f96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f9a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006f9e:	051a      	lsls	r2, r3, #20
 8006fa0:	4b89      	ldr	r3, [pc, #548]	; (80071c8 <lfs_fs_deorphan+0x334>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006fac:	3318      	adds	r3, #24
 8006fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006fb2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8006fb6:	f107 010c 	add.w	r1, r7, #12
 8006fba:	2301      	movs	r3, #1
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7fd fb1b 	bl	80045f8 <lfs_dir_orphaningcommit>
 8006fc2:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8006fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006fca:	3318      	adds	r3, #24
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fa fafa 	bl	80015c6 <lfs_pair_fromle32>
                    if (state < 0) {
 8006fd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	da02      	bge.n	8006fe0 <lfs_fs_deorphan+0x14c>
                        return state;
 8006fda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 8006fde:	e0e9      	b.n	80071b4 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 8006fe0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8006fec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	f040 80af 	bne.w	8007154 <lfs_fs_deorphan+0x2c0>
                        goto restart;
 8006ff6:	e763      	b.n	8006ec0 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 8006ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ffc:	f113 0f02 	cmn.w	r3, #2
 8007000:	f000 80aa 	beq.w	8007158 <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8007004:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007008:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800700c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	4613      	mov	r3, r2
 8007014:	4a6d      	ldr	r2, [pc, #436]	; (80071cc <lfs_fs_deorphan+0x338>)
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7fa ff40 	bl	8001e9c <lfs_dir_get>
 800701c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8007020:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007024:	2b00      	cmp	r3, #0
 8007026:	da02      	bge.n	800702e <lfs_fs_deorphan+0x19a>
                        return state;
 8007028:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800702c:	e0c2      	b.n	80071b4 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 800702e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007032:	4618      	mov	r0, r3
 8007034:	f7fa fac7 	bl	80015c6 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 8007038:	f107 030c 	add.w	r3, r7, #12
 800703c:	f103 0218 	add.w	r2, r3, #24
 8007040:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007044:	4611      	mov	r1, r2
 8007046:	4618      	mov	r0, r3
 8007048:	f7fa fa91 	bl	800156e <lfs_pair_sync>
 800704c:	4603      	mov	r3, r0
 800704e:	f083 0301 	eor.w	r3, r3, #1
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d07f      	beq.n	8007158 <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8007058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007060:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007064:	4c55      	ldr	r4, [pc, #340]	; (80071bc <lfs_fs_deorphan+0x328>)
 8007066:	9403      	str	r4, [sp, #12]
 8007068:	9102      	str	r1, [sp, #8]
 800706a:	9201      	str	r2, [sp, #4]
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	4603      	mov	r3, r0
 8007070:	f241 12fb 	movw	r2, #4603	; 0x11fb
 8007074:	4952      	ldr	r1, [pc, #328]	; (80071c0 <lfs_fs_deorphan+0x32c>)
 8007076:	4856      	ldr	r0, [pc, #344]	; (80071d0 <lfs_fs_deorphan+0x33c>)
 8007078:	f007 fb78 	bl	800e76c <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 800707c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007080:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	3330      	adds	r3, #48	; 0x30
 8007088:	f107 020c 	add.w	r2, r7, #12
 800708c:	4611      	mov	r1, r2
 800708e:	4618      	mov	r0, r3
 8007090:	f7fa fbc7 	bl	8001822 <lfs_gstate_hasmovehere>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d01c      	beq.n	80070d4 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fa fb1b 	bl	80016da <lfs_tag_id>
 80070a4:	4603      	mov	r3, r0
 80070a6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 80070aa:	68f9      	ldr	r1, [r7, #12]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 80070b2:	4842      	ldr	r0, [pc, #264]	; (80071bc <lfs_fs_deorphan+0x328>)
 80070b4:	9002      	str	r0, [sp, #8]
 80070b6:	9201      	str	r2, [sp, #4]
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	460b      	mov	r3, r1
 80070bc:	f241 2206 	movw	r2, #4614	; 0x1206
 80070c0:	493f      	ldr	r1, [pc, #252]	; (80071c0 <lfs_fs_deorphan+0x32c>)
 80070c2:	4844      	ldr	r0, [pc, #272]	; (80071d4 <lfs_fs_deorphan+0x340>)
 80070c4:	f007 fb52 	bl	800e76c <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80070c8:	2200      	movs	r2, #0
 80070ca:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff fe40 	bl	8006d54 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 80070d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fa fa8e 	bl	80015fa <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80070de:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80070e2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d007      	beq.n	80070fa <lfs_fs_deorphan+0x266>
 80070ea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80070ee:	029b      	lsls	r3, r3, #10
 80070f0:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80070f4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80070f8:	e000      	b.n	80070fc <lfs_fs_deorphan+0x268>
 80070fa:	2300      	movs	r3, #0
 80070fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80070fe:	2300      	movs	r3, #0
 8007100:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007104:	4b34      	ldr	r3, [pc, #208]	; (80071d8 <lfs_fs_deorphan+0x344>)
 8007106:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800710a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800710e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007112:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007116:	f107 010c 	add.w	r1, r7, #12
 800711a:	2302      	movs	r3, #2
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7fd fa6b 	bl	80045f8 <lfs_dir_orphaningcommit>
 8007122:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8007126:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800712a:	4618      	mov	r0, r3
 800712c:	f7fa fa4b 	bl	80015c6 <lfs_pair_fromle32>
                        if (state < 0) {
 8007130:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007134:	2b00      	cmp	r3, #0
 8007136:	da02      	bge.n	800713e <lfs_fs_deorphan+0x2aa>
                            return state;
 8007138:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 800713c:	e03a      	b.n	80071b4 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 800713e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8007142:	3301      	adds	r3, #1
 8007144:	b2db      	uxtb	r3, r3
 8007146:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 800714a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800714e:	2b03      	cmp	r3, #3
 8007150:	d10c      	bne.n	800716c <lfs_fs_deorphan+0x2d8>
 8007152:	e6b5      	b.n	8006ec0 <lfs_fs_deorphan+0x2c>
                    continue;
 8007154:	bf00      	nop
 8007156:	e009      	b.n	800716c <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 8007158:	f107 040c 	add.w	r4, r7, #12
 800715c:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8007160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007164:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 800716c:	f107 030c 	add.w	r3, r7, #12
 8007170:	3318      	adds	r3, #24
 8007172:	4618      	mov	r0, r3
 8007174:	f7fa f9b8 	bl	80014e8 <lfs_pair_isnull>
 8007178:	4603      	mov	r3, r0
 800717a:	f083 0301 	eor.w	r3, r3, #1
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	f47f aeaa 	bne.w	8006eda <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3330      	adds	r3, #48	; 0x30
 800718a:	4618      	mov	r0, r3
 800718c:	f7fa fb27 	bl	80017de <lfs_gstate_getorphans>
 8007190:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 8007192:	461a      	mov	r2, r3
 8007194:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8007198:	4619      	mov	r1, r3
 800719a:	4610      	mov	r0, r2
 800719c:	f7f9 fd99 	bl	8000cd2 <lfs_min>
 80071a0:	4603      	mov	r3, r0
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	425b      	negs	r3, r3
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	b25b      	sxtb	r3, r3
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff fd97 	bl	8006ce0 <lfs_fs_preporphans>
 80071b2:	4603      	mov	r3, r0
            found));
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	37b8      	adds	r7, #184	; 0xb8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bdb0      	pop	{r4, r5, r7, pc}
 80071bc:	0800f524 	.word	0x0800f524
 80071c0:	0800f430 	.word	0x0800f430
 80071c4:	0800fbd4 	.word	0x0800fbd4
 80071c8:	000ffc08 	.word	0x000ffc08
 80071cc:	7ffffc00 	.word	0x7ffffc00
 80071d0:	0800fc04 	.word	0x0800fc04
 80071d4:	0800fc48 	.word	0x0800fc48
 80071d8:	600ffc08 	.word	0x600ffc08

080071dc <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff fdef 	bl	8006dc8 <lfs_fs_demove>
 80071ea:	60f8      	str	r0, [r7, #12]
    if (err) {
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <lfs_fs_forceconsistency+0x1a>
        return err;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	e00a      	b.n	800720c <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 80071f6:	2101      	movs	r1, #1
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff fe4b 	bl	8006e94 <lfs_fs_deorphan>
 80071fe:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <lfs_fs_forceconsistency+0x2e>
        return err;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	e000      	b.n	800720c <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	601a      	str	r2, [r3, #0]
    return 0;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	bc80      	pop	{r7}
 8007236:	4770      	bx	lr

08007238 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8007240:	2300      	movs	r3, #0
 8007242:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8007244:	f107 0208 	add.w	r2, r7, #8
 8007248:	2300      	movs	r3, #0
 800724a:	4907      	ldr	r1, [pc, #28]	; (8007268 <lfs_fs_rawsize+0x30>)
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff fb41 	bl	80068d4 <lfs_fs_rawtraverse>
 8007252:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <lfs_fs_rawsize+0x26>
        return err;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	e000      	b.n	8007260 <lfs_fs_rawsize+0x28>
    }

    return size;
 800725e:	68bb      	ldr	r3, [r7, #8]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	08007215 	.word	0x08007215

0800726c <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8007276:	2300      	movs	r3, #0
 8007278:	60fb      	str	r3, [r7, #12]
    if (err) {
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <lfs_format+0x18>
        return err;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	e005      	b.n	8007290 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7ff f8cc 	bl	8006424 <lfs_rawformat>
 800728c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800728e:	68fb      	ldr	r3, [r7, #12]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80072a2:	2300      	movs	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]
    if (err) {
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <lfs_mount+0x18>
        return err;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	e005      	b.n	80072bc <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff f956 	bl	8006564 <lfs_rawmount>
 80072b8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80072ba:	68fb      	ldr	r3, [r7, #12]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]
    if (err) {
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <lfs_unmount+0x16>
        return err;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	e004      	b.n	80072e4 <lfs_unmount+0x20>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_rawunmount(lfs);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff faee 	bl	80068bc <lfs_rawunmount>
 80072e0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80072e2:	68fb      	ldr	r3, [r7, #12]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80072fa:	2300      	movs	r3, #0
 80072fc:	617b      	str	r3, [r7, #20]
    if (err) {
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <lfs_file_open+0x1c>
        return err;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	e01a      	b.n	800733e <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730c:	68b9      	ldr	r1, [r7, #8]
 800730e:	4618      	mov	r0, r3
 8007310:	f7fa fb87 	bl	8001a22 <lfs_mlist_isopen>
 8007314:	4603      	mov	r3, r0
 8007316:	f083 0301 	eor.w	r3, r3, #1
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d106      	bne.n	800732e <lfs_file_open+0x42>
 8007320:	4b09      	ldr	r3, [pc, #36]	; (8007348 <lfs_file_open+0x5c>)
 8007322:	4a0a      	ldr	r2, [pc, #40]	; (800734c <lfs_file_open+0x60>)
 8007324:	f241 5197 	movw	r1, #5527	; 0x1597
 8007328:	4809      	ldr	r0, [pc, #36]	; (8007350 <lfs_file_open+0x64>)
 800732a:	f006 fdfd 	bl	800df28 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	68b9      	ldr	r1, [r7, #8]
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f7fe f985 	bl	8005644 <lfs_file_rawopen>
 800733a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800733c:	697b      	ldr	r3, [r7, #20]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	0800fc90 	.word	0x0800fc90
 800734c:	0800ffd8 	.word	0x0800ffd8
 8007350:	0800f430 	.word	0x0800f430

08007354 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <lfs_file_close+0x18>
        return err;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	e015      	b.n	8007398 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f7fa fb55 	bl	8001a22 <lfs_mlist_isopen>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d106      	bne.n	800738c <lfs_file_close+0x38>
 800737e:	4b08      	ldr	r3, [pc, #32]	; (80073a0 <lfs_file_close+0x4c>)
 8007380:	4a08      	ldr	r2, [pc, #32]	; (80073a4 <lfs_file_close+0x50>)
 8007382:	f241 51bb 	movw	r1, #5563	; 0x15bb
 8007386:	4808      	ldr	r0, [pc, #32]	; (80073a8 <lfs_file_close+0x54>)
 8007388:	f006 fdce 	bl	800df28 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7fe f970 	bl	8005674 <lfs_file_rawclose>
 8007394:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007396:	68fb      	ldr	r3, [r7, #12]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	0800fcc8 	.word	0x0800fcc8
 80073a4:	0800ffe8 	.word	0x0800ffe8
 80073a8:	0800f430 	.word	0x0800f430

080073ac <lfs_file_write>:
    return res;
}

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80073ba:	2300      	movs	r3, #0
 80073bc:	617b      	str	r3, [r7, #20]
    if (err) {
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <lfs_file_write+0x1c>
        return err;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	e017      	b.n	80073f8 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073cc:	68b9      	ldr	r1, [r7, #8]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fa fb27 	bl	8001a22 <lfs_mlist_isopen>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d106      	bne.n	80073e8 <lfs_file_write+0x3c>
 80073da:	4b09      	ldr	r3, [pc, #36]	; (8007400 <lfs_file_write+0x54>)
 80073dc:	4a09      	ldr	r2, [pc, #36]	; (8007404 <lfs_file_write+0x58>)
 80073de:	f241 51ef 	movw	r1, #5615	; 0x15ef
 80073e2:	4809      	ldr	r0, [pc, #36]	; (8007408 <lfs_file_write+0x5c>)
 80073e4:	f006 fda0 	bl	800df28 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7fe fdb4 	bl	8005f5c <lfs_file_rawwrite>
 80073f4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 80073f6:	693b      	ldr	r3, [r7, #16]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	0800fcc8 	.word	0x0800fcc8
 8007404:	0800fff8 	.word	0x0800fff8
 8007408:	0800f430 	.word	0x0800f430

0800740c <lfs_dir_open>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8007418:	2300      	movs	r3, #0
 800741a:	617b      	str	r3, [r7, #20]
    if (err) {
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <lfs_dir_open+0x1a>
        return err;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	e019      	b.n	800745a <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	4618      	mov	r0, r3
 800742e:	f7fa faf8 	bl	8001a22 <lfs_mlist_isopen>
 8007432:	4603      	mov	r3, r0
 8007434:	f083 0301 	eor.w	r3, r3, #1
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d106      	bne.n	800744c <lfs_dir_open+0x40>
 800743e:	4b09      	ldr	r3, [pc, #36]	; (8007464 <lfs_dir_open+0x58>)
 8007440:	4a09      	ldr	r2, [pc, #36]	; (8007468 <lfs_dir_open+0x5c>)
 8007442:	f241 616e 	movw	r1, #5742	; 0x166e
 8007446:	4809      	ldr	r0, [pc, #36]	; (800746c <lfs_dir_open+0x60>)
 8007448:	f006 fd6e 	bl	800df28 <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	68b9      	ldr	r1, [r7, #8]
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f7fd fbf1 	bl	8004c38 <lfs_dir_rawopen>
 8007456:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007458:	697b      	ldr	r3, [r7, #20]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	0800fd00 	.word	0x0800fd00
 8007468:	08010008 	.word	0x08010008
 800746c:	0800f430 	.word	0x0800f430

08007470 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <lfs_dir_close+0x18>
        return err;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	e005      	b.n	8007494 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7fd fc4e 	bl	8004d2c <lfs_dir_rawclose>
 8007490:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007492:	68fb      	ldr	r3, [r7, #12]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 80074a8:	2300      	movs	r3, #0
 80074aa:	617b      	str	r3, [r7, #20]
    if (err) {
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <lfs_dir_read+0x1a>
        return err;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	e006      	b.n	80074c4 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	68b9      	ldr	r1, [r7, #8]
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f7fd fc44 	bl	8004d48 <lfs_dir_rawread>
 80074c0:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80074c2:	697b      	ldr	r3, [r7, #20]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	e024      	b.n	800752c <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	091a      	lsrs	r2, r3, #4
 80074e6:	6939      	ldr	r1, [r7, #16]
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	440b      	add	r3, r1
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	4619      	mov	r1, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	404b      	eors	r3, r1
 80074f4:	f003 030f 	and.w	r3, r3, #15
 80074f8:	4911      	ldr	r1, [pc, #68]	; (8007540 <lfs_crc+0x74>)
 80074fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80074fe:	4053      	eors	r3, r2
 8007500:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	091a      	lsrs	r2, r3, #4
 8007506:	6939      	ldr	r1, [r7, #16]
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	440b      	add	r3, r1
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	091b      	lsrs	r3, r3, #4
 8007510:	b2db      	uxtb	r3, r3
 8007512:	4619      	mov	r1, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	404b      	eors	r3, r1
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	4908      	ldr	r1, [pc, #32]	; (8007540 <lfs_crc+0x74>)
 800751e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007522:	4053      	eors	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	3301      	adds	r3, #1
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	429a      	cmp	r2, r3
 8007532:	d3d6      	bcc.n	80074e2 <lfs_crc+0x16>
    }

    return crc;
 8007534:	68fb      	ldr	r3, [r7, #12]
}
 8007536:	4618      	mov	r0, r3
 8007538:	371c      	adds	r7, #28
 800753a:	46bd      	mov	sp, r7
 800753c:	bc80      	pop	{r7}
 800753e:	4770      	bx	lr
 8007540:	08010018 	.word	0x08010018

08007544 <nor_delay_us>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
	DmaEnd = 1;
}

void nor_delay_us(uint32_t us){
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 800754c:	2001      	movs	r0, #1
 800754e:	f001 fc4d 	bl	8008dec <HAL_Delay>
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <nor_cs_assert>:

void nor_cs_assert(){
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_FLASH_MEMORY_PORT, CS_FLASH_MEMORY_PIN, GPIO_PIN_RESET);
 8007560:	2200      	movs	r2, #0
 8007562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007566:	4802      	ldr	r0, [pc, #8]	; (8007570 <nor_cs_assert+0x14>)
 8007568:	f001 ff6e 	bl	8009448 <HAL_GPIO_WritePin>
}
 800756c:	bf00      	nop
 800756e:	bd80      	pop	{r7, pc}
 8007570:	40010c00 	.word	0x40010c00

08007574 <nor_cs_deassert>:

void nor_cs_deassert(){
 8007574:	b580      	push	{r7, lr}
 8007576:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_FLASH_MEMORY_PORT, CS_FLASH_MEMORY_PIN, GPIO_PIN_SET);
 8007578:	2201      	movs	r2, #1
 800757a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800757e:	4802      	ldr	r0, [pc, #8]	; (8007588 <nor_cs_deassert+0x14>)
 8007580:	f001 ff62 	bl	8009448 <HAL_GPIO_WritePin>
}
 8007584:	bf00      	nop
 8007586:	bd80      	pop	{r7, pc}
 8007588:	40010c00 	.word	0x40010c00

0800758c <nor_spi_tx>:

void nor_spi_tx(uint8_t *pData, uint32_t Size){
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
	DmaEnd = 0;
 8007596:	4b07      	ldr	r3, [pc, #28]	; (80075b4 <nor_spi_tx+0x28>)
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&SPI_PIN_FLASH, pData, Size, 1000);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	b29a      	uxth	r2, r3
 80075a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075a4:	6879      	ldr	r1, [r7, #4]
 80075a6:	4804      	ldr	r0, [pc, #16]	; (80075b8 <nor_spi_tx+0x2c>)
 80075a8:	f004 fa28 	bl	800b9fc <HAL_SPI_Transmit>

}
 80075ac:	bf00      	nop
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20000174 	.word	0x20000174
 80075b8:	20000514 	.word	0x20000514

080075bc <nor_spi_rx>:

void nor_spi_rx(uint8_t *pData, uint32_t Size){
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
	DmaEnd = 0;
 80075c6:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <nor_spi_rx+0x28>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&SPI_PIN_FLASH, pData, Size, 1000);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075d4:	6879      	ldr	r1, [r7, #4]
 80075d6:	4804      	ldr	r0, [pc, #16]	; (80075e8 <nor_spi_rx+0x2c>)
 80075d8:	f004 fb54 	bl	800bc84 <HAL_SPI_Receive>

}
 80075dc:	bf00      	nop
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	20000174 	.word	0x20000174
 80075e8:	20000514 	.word	0x20000514

080075ec <__init_nor>:

void __init_nor(){
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
	Nor.config.CsAssert = nor_cs_assert;
 80075f0:	4b0c      	ldr	r3, [pc, #48]	; (8007624 <__init_nor+0x38>)
 80075f2:	4a0d      	ldr	r2, [pc, #52]	; (8007628 <__init_nor+0x3c>)
 80075f4:	609a      	str	r2, [r3, #8]
	Nor.config.CsDeassert = nor_cs_deassert;
 80075f6:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <__init_nor+0x38>)
 80075f8:	4a0c      	ldr	r2, [pc, #48]	; (800762c <__init_nor+0x40>)
 80075fa:	60da      	str	r2, [r3, #12]
	Nor.config.DelayUs = nor_delay_us;
 80075fc:	4b09      	ldr	r3, [pc, #36]	; (8007624 <__init_nor+0x38>)
 80075fe:	4a0c      	ldr	r2, [pc, #48]	; (8007630 <__init_nor+0x44>)
 8007600:	611a      	str	r2, [r3, #16]
	Nor.config.SpiRxFxn = nor_spi_rx;
 8007602:	4b08      	ldr	r3, [pc, #32]	; (8007624 <__init_nor+0x38>)
 8007604:	4a0b      	ldr	r2, [pc, #44]	; (8007634 <__init_nor+0x48>)
 8007606:	605a      	str	r2, [r3, #4]
	Nor.config.SpiTxFxn = nor_spi_tx;
 8007608:	4b06      	ldr	r3, [pc, #24]	; (8007624 <__init_nor+0x38>)
 800760a:	4a0b      	ldr	r2, [pc, #44]	; (8007638 <__init_nor+0x4c>)
 800760c:	601a      	str	r2, [r3, #0]

	if (NOR_Init(&Nor) != NOR_OK){ //NOR_Init
 800760e:	4805      	ldr	r0, [pc, #20]	; (8007624 <__init_nor+0x38>)
 8007610:	f000 fdb4 	bl	800817c <NOR_Init>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <__init_nor+0x32>
		Error_Handler();
 800761a:	f000 fc3b 	bl	8007e94 <Error_Handler>
	}
}
 800761e:	bf00      	nop
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20000438 	.word	0x20000438
 8007628:	0800755d 	.word	0x0800755d
 800762c:	08007575 	.word	0x08007575
 8007630:	08007545 	.word	0x08007545
 8007634:	080075bd 	.word	0x080075bd
 8007638:	0800758d 	.word	0x0800758d

0800763c <_fs_read>:

/** Start LittleFs **/

int _fs_read(const struct lfs_config *c, lfs_block_t block,
            lfs_off_t off, void *buffer, lfs_size_t size){
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af02      	add	r7, sp, #8
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	603b      	str	r3, [r7, #0]

	if (NOR_ReadSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	4806      	ldr	r0, [pc, #24]	; (8007670 <_fs_read+0x34>)
 8007656:	f000 ffe3 	bl	8008620 <NOR_ReadSector>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <_fs_read+0x28>
		return 0;
 8007660:	2300      	movs	r3, #0
 8007662:	e001      	b.n	8007668 <_fs_read+0x2c>
	}

	return LFS_ERR_IO;
 8007664:	f06f 0304 	mvn.w	r3, #4
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20000438 	.word	0x20000438

08007674 <_fs_write>:

int _fs_write(const struct lfs_config *c, lfs_block_t block,
        lfs_off_t off, const void *buffer, lfs_size_t size){
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af02      	add	r7, sp, #8
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]

	if (NOR_WriteSector(&Nor, (uint8_t*)buffer, block, off, size) == NOR_OK){
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	4806      	ldr	r0, [pc, #24]	; (80076a8 <_fs_write+0x34>)
 800768e:	f000 ff21 	bl	80084d4 <NOR_WriteSector>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <_fs_write+0x28>
		return 0;
 8007698:	2300      	movs	r3, #0
 800769a:	e001      	b.n	80076a0 <_fs_write+0x2c>
	}

	return LFS_ERR_IO;
 800769c:	f06f 0304 	mvn.w	r3, #4
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000438 	.word	0x20000438

080076ac <_fs_erase>:

int _fs_erase(const struct lfs_config *c, lfs_block_t block){
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
	if (NOR_EraseSector(&Nor, block) == NOR_OK){
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	4806      	ldr	r0, [pc, #24]	; (80076d4 <_fs_erase+0x28>)
 80076ba:	f000 fe77 	bl	80083ac <NOR_EraseSector>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <_fs_erase+0x1c>
		return 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	e001      	b.n	80076cc <_fs_erase+0x20>
	}

	return LFS_ERR_IO;
 80076c8:	f06f 0304 	mvn.w	r3, #4
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	20000438 	.word	0x20000438

080076d8 <_fs_sync>:

int _fs_sync(const struct lfs_config *c){
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
	return 0;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bc80      	pop	{r7}
 80076ea:	4770      	bx	lr

080076ec <__init_littefs>:
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
}
void __init_littefs(){
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
	// because of static qualifier, this variable
	// will have a dedicated address
		int Error;

		LfsConfig.read_size = 256;
 80076f2:	4b3e      	ldr	r3, [pc, #248]	; (80077ec <__init_littefs+0x100>)
 80076f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076f8:	615a      	str	r2, [r3, #20]
		LfsConfig.prog_size = 256;
 80076fa:	4b3c      	ldr	r3, [pc, #240]	; (80077ec <__init_littefs+0x100>)
 80076fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007700:	619a      	str	r2, [r3, #24]
		LfsConfig.block_size = Nor.info.u16SectorSize;
 8007702:	4b3b      	ldr	r3, [pc, #236]	; (80077f0 <__init_littefs+0x104>)
 8007704:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007706:	461a      	mov	r2, r3
 8007708:	4b38      	ldr	r3, [pc, #224]	; (80077ec <__init_littefs+0x100>)
 800770a:	61da      	str	r2, [r3, #28]
		LfsConfig.block_count =  16384;//Nor.info.u32SectorCount;
 800770c:	4b37      	ldr	r3, [pc, #220]	; (80077ec <__init_littefs+0x100>)
 800770e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007712:	621a      	str	r2, [r3, #32]
		LfsConfig.cache_size = Nor.info.u16PageSize;
 8007714:	4b36      	ldr	r3, [pc, #216]	; (80077f0 <__init_littefs+0x104>)
 8007716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007718:	461a      	mov	r2, r3
 800771a:	4b34      	ldr	r3, [pc, #208]	; (80077ec <__init_littefs+0x100>)
 800771c:	629a      	str	r2, [r3, #40]	; 0x28
		LfsConfig.lookahead_size = 15000;//Nor.info.u32SectorCount/8;
 800771e:	4b33      	ldr	r3, [pc, #204]	; (80077ec <__init_littefs+0x100>)
 8007720:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007724:	62da      	str	r2, [r3, #44]	; 0x2c
		LfsConfig.block_cycles = 100;
 8007726:	4b31      	ldr	r3, [pc, #196]	; (80077ec <__init_littefs+0x100>)
 8007728:	2264      	movs	r2, #100	; 0x64
 800772a:	625a      	str	r2, [r3, #36]	; 0x24
		LfsConfig.context = (void*) (40* 16384 * Nor.info.u16SectorSize);
 800772c:	4b30      	ldr	r3, [pc, #192]	; (80077f0 <__init_littefs+0x104>)
 800772e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007730:	461a      	mov	r2, r3
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	045b      	lsls	r3, r3, #17
 800773a:	461a      	mov	r2, r3
 800773c:	4b2b      	ldr	r3, [pc, #172]	; (80077ec <__init_littefs+0x100>)
 800773e:	601a      	str	r2, [r3, #0]

		LfsConfig.read = _fs_read;
 8007740:	4b2a      	ldr	r3, [pc, #168]	; (80077ec <__init_littefs+0x100>)
 8007742:	4a2c      	ldr	r2, [pc, #176]	; (80077f4 <__init_littefs+0x108>)
 8007744:	605a      	str	r2, [r3, #4]
		LfsConfig.prog = _fs_write;
 8007746:	4b29      	ldr	r3, [pc, #164]	; (80077ec <__init_littefs+0x100>)
 8007748:	4a2b      	ldr	r2, [pc, #172]	; (80077f8 <__init_littefs+0x10c>)
 800774a:	609a      	str	r2, [r3, #8]
		LfsConfig.erase = _fs_erase;
 800774c:	4b27      	ldr	r3, [pc, #156]	; (80077ec <__init_littefs+0x100>)
 800774e:	4a2b      	ldr	r2, [pc, #172]	; (80077fc <__init_littefs+0x110>)
 8007750:	60da      	str	r2, [r3, #12]
		LfsConfig.sync = _fs_sync;
 8007752:	4b26      	ldr	r3, [pc, #152]	; (80077ec <__init_littefs+0x100>)
 8007754:	4a2a      	ldr	r2, [pc, #168]	; (8007800 <__init_littefs+0x114>)
 8007756:	611a      	str	r2, [r3, #16]

		Error = lfs_mount(&Lfs, &LfsConfig);
 8007758:	4924      	ldr	r1, [pc, #144]	; (80077ec <__init_littefs+0x100>)
 800775a:	482a      	ldr	r0, [pc, #168]	; (8007804 <__init_littefs+0x118>)
 800775c:	f7ff fd9c 	bl	8007298 <lfs_mount>
 8007760:	6078      	str	r0, [r7, #4]
		if (Error != LFS_ERR_OK){
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00d      	beq.n	8007784 <__init_littefs+0x98>
			lfs_format(&Lfs, &LfsConfig);
 8007768:	4920      	ldr	r1, [pc, #128]	; (80077ec <__init_littefs+0x100>)
 800776a:	4826      	ldr	r0, [pc, #152]	; (8007804 <__init_littefs+0x118>)
 800776c:	f7ff fd7e 	bl	800726c <lfs_format>
			Error = lfs_mount(&Lfs, &LfsConfig);
 8007770:	491e      	ldr	r1, [pc, #120]	; (80077ec <__init_littefs+0x100>)
 8007772:	4824      	ldr	r0, [pc, #144]	; (8007804 <__init_littefs+0x118>)
 8007774:	f7ff fd90 	bl	8007298 <lfs_mount>
 8007778:	6078      	str	r0, [r7, #4]
			if (Error != LFS_ERR_OK){
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <__init_littefs+0x98>
				Error_Handler();
 8007780:	f000 fb88 	bl	8007e94 <Error_Handler>
			}
		}


		LfsConfig2.read_size = 256;
 8007784:	4b20      	ldr	r3, [pc, #128]	; (8007808 <__init_littefs+0x11c>)
 8007786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800778a:	615a      	str	r2, [r3, #20]
		LfsConfig2.prog_size = 256;
 800778c:	4b1e      	ldr	r3, [pc, #120]	; (8007808 <__init_littefs+0x11c>)
 800778e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007792:	619a      	str	r2, [r3, #24]
		LfsConfig2.block_size = Nor.info.u16SectorSize;
 8007794:	4b16      	ldr	r3, [pc, #88]	; (80077f0 <__init_littefs+0x104>)
 8007796:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007798:	461a      	mov	r2, r3
 800779a:	4b1b      	ldr	r3, [pc, #108]	; (8007808 <__init_littefs+0x11c>)
 800779c:	61da      	str	r2, [r3, #28]
		LfsConfig2.block_count =  16384;//Nor.info.u32SectorCount;
 800779e:	4b1a      	ldr	r3, [pc, #104]	; (8007808 <__init_littefs+0x11c>)
 80077a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80077a4:	621a      	str	r2, [r3, #32]
		LfsConfig2.cache_size = Nor.info.u16PageSize;//1024
 80077a6:	4b12      	ldr	r3, [pc, #72]	; (80077f0 <__init_littefs+0x104>)
 80077a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077aa:	461a      	mov	r2, r3
 80077ac:	4b16      	ldr	r3, [pc, #88]	; (8007808 <__init_littefs+0x11c>)
 80077ae:	629a      	str	r2, [r3, #40]	; 0x28
		LfsConfig2.lookahead_size = 5256;//Nor.info.u32SectorCount/8;
 80077b0:	4b15      	ldr	r3, [pc, #84]	; (8007808 <__init_littefs+0x11c>)
 80077b2:	f241 4288 	movw	r2, #5256	; 0x1488
 80077b6:	62da      	str	r2, [r3, #44]	; 0x2c
		LfsConfig2.block_cycles = 100;
 80077b8:	4b13      	ldr	r3, [pc, #76]	; (8007808 <__init_littefs+0x11c>)
 80077ba:	2264      	movs	r2, #100	; 0x64
 80077bc:	625a      	str	r2, [r3, #36]	; 0x24

		LfsConfig2.read = _fs_read;
 80077be:	4b12      	ldr	r3, [pc, #72]	; (8007808 <__init_littefs+0x11c>)
 80077c0:	4a0c      	ldr	r2, [pc, #48]	; (80077f4 <__init_littefs+0x108>)
 80077c2:	605a      	str	r2, [r3, #4]
		LfsConfig2.prog = _fs_write;
 80077c4:	4b10      	ldr	r3, [pc, #64]	; (8007808 <__init_littefs+0x11c>)
 80077c6:	4a0c      	ldr	r2, [pc, #48]	; (80077f8 <__init_littefs+0x10c>)
 80077c8:	609a      	str	r2, [r3, #8]
		LfsConfig2.erase = _fs_erase;
 80077ca:	4b0f      	ldr	r3, [pc, #60]	; (8007808 <__init_littefs+0x11c>)
 80077cc:	4a0b      	ldr	r2, [pc, #44]	; (80077fc <__init_littefs+0x110>)
 80077ce:	60da      	str	r2, [r3, #12]
		LfsConfig2.sync = _fs_sync;
 80077d0:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <__init_littefs+0x11c>)
 80077d2:	4a0b      	ldr	r2, [pc, #44]	; (8007800 <__init_littefs+0x114>)
 80077d4:	611a      	str	r2, [r3, #16]

		LfsConfig2.context = (void*) (4* 16384 * Nor.info.u16SectorSize);
 80077d6:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <__init_littefs+0x104>)
 80077d8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80077da:	041b      	lsls	r3, r3, #16
 80077dc:	461a      	mov	r2, r3
 80077de:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <__init_littefs+0x11c>)
 80077e0:	601a      	str	r2, [r3, #0]
//					if (Error != LFS_ERR_OK){
//						Error_Handler();
//					}
//				}

}
 80077e2:	bf00      	nop
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	200000dc 	.word	0x200000dc
 80077f0:	20000438 	.word	0x20000438
 80077f4:	0800763d 	.word	0x0800763d
 80077f8:	08007675 	.word	0x08007675
 80077fc:	080076ad 	.word	0x080076ad
 8007800:	080076d9 	.word	0x080076d9
 8007804:	20000488 	.word	0x20000488
 8007808:	20000128 	.word	0x20000128

0800780c <count_files_in_directory>:


// Function to count the number of files in a directory
int count_files_in_directory(lfs_t *lfs, const char *path) {
 800780c:	b580      	push	{r7, lr}
 800780e:	b0d4      	sub	sp, #336	; 0x150
 8007810:	af00      	add	r7, sp, #0
 8007812:	1d3b      	adds	r3, r7, #4
 8007814:	6018      	str	r0, [r3, #0]
 8007816:	463b      	mov	r3, r7
 8007818:	6019      	str	r1, [r3, #0]
    lfs_dir_t dir;
    struct lfs_info info;
    int file_count = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    // Open the directory at the given path
    int err = lfs_dir_open(lfs, &dir, path);
 8007820:	463a      	mov	r2, r7
 8007822:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8007826:	1d3b      	adds	r3, r7, #4
 8007828:	6812      	ldr	r2, [r2, #0]
 800782a:	6818      	ldr	r0, [r3, #0]
 800782c:	f7ff fdee 	bl	800740c <lfs_dir_open>
 8007830:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
    if (err) {
 8007834:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007838:	2b00      	cmp	r3, #0
 800783a:	d007      	beq.n	800784c <count_files_in_directory+0x40>
        printf("Failed to open directory: %s\n", path);
 800783c:	463b      	mov	r3, r7
 800783e:	6819      	ldr	r1, [r3, #0]
 8007840:	481b      	ldr	r0, [pc, #108]	; (80078b0 <count_files_in_directory+0xa4>)
 8007842:	f006 ff93 	bl	800e76c <iprintf>
        return -1;
 8007846:	f04f 33ff 	mov.w	r3, #4294967295
 800784a:	e02c      	b.n	80078a6 <count_files_in_directory+0x9a>
    }

    // Loop through all files in the directory
    while (true) {
        err = lfs_dir_read(lfs, &dir, &info);
 800784c:	f107 020c 	add.w	r2, r7, #12
 8007850:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8007854:	1d3b      	adds	r3, r7, #4
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	f7ff fe20 	bl	800749c <lfs_dir_read>
 800785c:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
        if (err < 0) {
 8007860:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007864:	2b00      	cmp	r3, #0
 8007866:	da05      	bge.n	8007874 <count_files_in_directory+0x68>
            printf("Failed to read directory: %s\n", path);
 8007868:	463b      	mov	r3, r7
 800786a:	6819      	ldr	r1, [r3, #0]
 800786c:	4811      	ldr	r0, [pc, #68]	; (80078b4 <count_files_in_directory+0xa8>)
 800786e:	f006 ff7d 	bl	800e76c <iprintf>
            break;
 8007872:	e00f      	b.n	8007894 <count_files_in_directory+0x88>
        }

        // If no more files, break
        if (err == 0) {
 8007874:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00a      	beq.n	8007892 <count_files_in_directory+0x86>
            break;
        }

        // Check if the entry is a file
        if (info.type == LFS_TYPE_REG) {
 800787c:	f107 030c 	add.w	r3, r7, #12
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d1e2      	bne.n	800784c <count_files_in_directory+0x40>
            file_count++;
 8007886:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800788a:	3301      	adds	r3, #1
 800788c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
        err = lfs_dir_read(lfs, &dir, &info);
 8007890:	e7dc      	b.n	800784c <count_files_in_directory+0x40>
            break;
 8007892:	bf00      	nop
        }
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
 8007894:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8007898:	1d3b      	adds	r3, r7, #4
 800789a:	4611      	mov	r1, r2
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	f7ff fde7 	bl	8007470 <lfs_dir_close>

    return file_count;
 80078a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	0800fe38 	.word	0x0800fe38
 80078b4:	0800fe58 	.word	0x0800fe58

080078b8 <list_directories_with_file_count>:
// Function to list directories and their contents
void list_directories_with_file_count(lfs_t *lfs, const char *path) {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 80078be:	af02      	add	r7, sp, #8
 80078c0:	1d3b      	adds	r3, r7, #4
 80078c2:	6018      	str	r0, [r3, #0]
 80078c4:	463b      	mov	r3, r7
 80078c6:	6019      	str	r1, [r3, #0]
    lfs_dir_t dir;
    struct lfs_info info;

    // Open the directory at the given path
    int err = lfs_dir_open(lfs, &dir, path);
 80078c8:	463a      	mov	r2, r7
 80078ca:	f207 4104 	addw	r1, r7, #1028	; 0x404
 80078ce:	1d3b      	adds	r3, r7, #4
 80078d0:	6812      	ldr	r2, [r2, #0]
 80078d2:	6818      	ldr	r0, [r3, #0]
 80078d4:	f7ff fd9a 	bl	800740c <lfs_dir_open>
 80078d8:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
    if (err) {
 80078dc:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d005      	beq.n	80078f0 <list_directories_with_file_count+0x38>
        printf("Failed to open directory: %s\n", path);
 80078e4:	463b      	mov	r3, r7
 80078e6:	6819      	ldr	r1, [r3, #0]
 80078e8:	483a      	ldr	r0, [pc, #232]	; (80079d4 <list_directories_with_file_count+0x11c>)
 80078ea:	f006 ff3f 	bl	800e76c <iprintf>
 80078ee:	e06d      	b.n	80079cc <list_directories_with_file_count+0x114>
        return;
    }

    // Loop through all entries in the directory
    while (true) {
        err = lfs_dir_read(lfs, &dir, &info);
 80078f0:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 80078f4:	f207 4104 	addw	r1, r7, #1028	; 0x404
 80078f8:	1d3b      	adds	r3, r7, #4
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	f7ff fdce 	bl	800749c <lfs_dir_read>
 8007900:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
        if (err < 0) {
 8007904:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8007908:	2b00      	cmp	r3, #0
 800790a:	da05      	bge.n	8007918 <list_directories_with_file_count+0x60>
            printf("Failed to read directory: %s\n", path);
 800790c:	463b      	mov	r3, r7
 800790e:	6819      	ldr	r1, [r3, #0]
 8007910:	4831      	ldr	r0, [pc, #196]	; (80079d8 <list_directories_with_file_count+0x120>)
 8007912:	f006 ff2b 	bl	800e76c <iprintf>
            break;
 8007916:	e052      	b.n	80079be <list_directories_with_file_count+0x106>
        }

        // If no more entries, break
        if (err == 0) {
 8007918:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d04d      	beq.n	80079bc <list_directories_with_file_count+0x104>
            break;
        }

        // Build the full path for the current file/directory
        char full_path[PATH_MAX_LEN];
        snprintf(full_path, sizeof(full_path), "%s/%s", path, info.name);
 8007920:	463b      	mov	r3, r7
 8007922:	f107 0008 	add.w	r0, r7, #8
 8007926:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 800792a:	3208      	adds	r2, #8
 800792c:	9200      	str	r2, [sp, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a2a      	ldr	r2, [pc, #168]	; (80079dc <list_directories_with_file_count+0x124>)
 8007932:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007936:	f006 ff41 	bl	800e7bc <sniprintf>

        // Check if the entry is a directory (excluding "." and "..")
        if (info.type == LFS_TYPE_DIR && strcmp(info.name, ".") != 0 && strcmp(info.name, "..") != 0) {
 800793a:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b02      	cmp	r3, #2
 8007942:	d1d5      	bne.n	80078f0 <list_directories_with_file_count+0x38>
 8007944:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8007948:	3308      	adds	r3, #8
 800794a:	4925      	ldr	r1, [pc, #148]	; (80079e0 <list_directories_with_file_count+0x128>)
 800794c:	4618      	mov	r0, r3
 800794e:	f7f8 fbfd 	bl	800014c <strcmp>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0cb      	beq.n	80078f0 <list_directories_with_file_count+0x38>
 8007958:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800795c:	3308      	adds	r3, #8
 800795e:	4921      	ldr	r1, [pc, #132]	; (80079e4 <list_directories_with_file_count+0x12c>)
 8007960:	4618      	mov	r0, r3
 8007962:	f7f8 fbf3 	bl	800014c <strcmp>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d0c1      	beq.n	80078f0 <list_directories_with_file_count+0x38>
            int file_count = count_files_in_directory(lfs, full_path);
 800796c:	f107 0208 	add.w	r2, r7, #8
 8007970:	1d3b      	adds	r3, r7, #4
 8007972:	4611      	mov	r1, r2
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	f7ff ff49 	bl	800780c <count_files_in_directory>
 800797a:	f8c7 0438 	str.w	r0, [r7, #1080]	; 0x438
            char pa[500];
            sprintf(pa, "Directory: %s, Number of files: %d\n", full_path, file_count);
 800797e:	f107 0208 	add.w	r2, r7, #8
 8007982:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007986:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800798a:	4917      	ldr	r1, [pc, #92]	; (80079e8 <list_directories_with_file_count+0x130>)
 800798c:	f006 ff4a 	bl	800e824 <siprintf>
            HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)pa, strlen(pa), 1000);
 8007990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007994:	4618      	mov	r0, r3
 8007996:	f7f8 fbe3 	bl	8000160 <strlen>
 800799a:	4603      	mov	r3, r0
 800799c:	b29a      	uxth	r2, r3
 800799e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80079a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079a6:	4811      	ldr	r0, [pc, #68]	; (80079ec <list_directories_with_file_count+0x134>)
 80079a8:	f004 fe8d 	bl	800c6c6 <HAL_UART_Transmit>

            // Recursively list the contents of the directory
            list_directories_with_file_count(lfs, full_path);
 80079ac:	f107 0208 	add.w	r2, r7, #8
 80079b0:	1d3b      	adds	r3, r7, #4
 80079b2:	4611      	mov	r1, r2
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	f7ff ff7f 	bl	80078b8 <list_directories_with_file_count>
    while (true) {
 80079ba:	e799      	b.n	80078f0 <list_directories_with_file_count+0x38>
            break;
 80079bc:	bf00      	nop
        }
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
 80079be:	f207 4204 	addw	r2, r7, #1028	; 0x404
 80079c2:	1d3b      	adds	r3, r7, #4
 80079c4:	4611      	mov	r1, r2
 80079c6:	6818      	ldr	r0, [r3, #0]
 80079c8:	f7ff fd52 	bl	8007470 <lfs_dir_close>
}
 80079cc:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	0800fe38 	.word	0x0800fe38
 80079d8:	0800fe58 	.word	0x0800fe58
 80079dc:	0800fe78 	.word	0x0800fe78
 80079e0:	0800fe80 	.word	0x0800fe80
 80079e4:	0800fe84 	.word	0x0800fe84
 80079e8:	0800fe88 	.word	0x0800fe88
 80079ec:	2000074c 	.word	0x2000074c

080079f0 <__init_storage>:
    }

    // Close the directory
    lfs_dir_close(lfs, &dir);
}
void __init_storage(){
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
	__init_nor();
 80079f4:	f7ff fdfa 	bl	80075ec <__init_nor>
	__init_littefs();
 80079f8:	f7ff fe78 	bl	80076ec <__init_littefs>
}
 80079fc:	bf00      	nop
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <write_to_file>:

void write_to_file(char *filename, uint8_t *data, uint32_t data_length){
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
	  __init_storage();
 8007a0c:	f7ff fff0 	bl	80079f0 <__init_storage>
	  list_directories_with_file_count(&Lfs,"");
 8007a10:	490d      	ldr	r1, [pc, #52]	; (8007a48 <write_to_file+0x48>)
 8007a12:	480e      	ldr	r0, [pc, #56]	; (8007a4c <write_to_file+0x4c>)
 8007a14:	f7ff ff50 	bl	80078b8 <list_directories_with_file_count>
	  lfs_file_open(&Lfs, &File, filename, LFS_O_CREAT | LFS_O_RDWR  | LFS_O_APPEND );
 8007a18:	f640 1303 	movw	r3, #2307	; 0x903
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	490c      	ldr	r1, [pc, #48]	; (8007a50 <write_to_file+0x50>)
 8007a20:	480a      	ldr	r0, [pc, #40]	; (8007a4c <write_to_file+0x4c>)
 8007a22:	f7ff fc63 	bl	80072ec <lfs_file_open>
	  lfs_file_write(&Lfs, &File, data, data_length);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	4909      	ldr	r1, [pc, #36]	; (8007a50 <write_to_file+0x50>)
 8007a2c:	4807      	ldr	r0, [pc, #28]	; (8007a4c <write_to_file+0x4c>)
 8007a2e:	f7ff fcbd 	bl	80073ac <lfs_file_write>
	  lfs_file_close(&Lfs, &File);
 8007a32:	4907      	ldr	r1, [pc, #28]	; (8007a50 <write_to_file+0x50>)
 8007a34:	4805      	ldr	r0, [pc, #20]	; (8007a4c <write_to_file+0x4c>)
 8007a36:	f7ff fc8d 	bl	8007354 <lfs_file_close>
	  lfs_unmount(&Lfs);
 8007a3a:	4804      	ldr	r0, [pc, #16]	; (8007a4c <write_to_file+0x4c>)
 8007a3c:	f7ff fc42 	bl	80072c4 <lfs_unmount>
}
 8007a40:	bf00      	nop
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	0800fed8 	.word	0x0800fed8
 8007a4c:	20000488 	.word	0x20000488
 8007a50:	20000368 	.word	0x20000368

08007a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007a5a:	f001 f965 	bl	8008d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007a5e:	f000 f859 	bl	8007b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007a62:	f000 f9b5 	bl	8007dd0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8007a66:	f000 f8d1 	bl	8007c0c <MX_SPI1_Init>
  MX_SPI2_Init();
 8007a6a:	f000 f905 	bl	8007c78 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8007a6e:	f000 f939 	bl	8007ce4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8007a72:	f000 f961 	bl	8007d38 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8007a76:	f000 f8ad 	bl	8007bd4 <MX_RTC_Init>
  MX_USB_PCD_Init();
 8007a7a:	f000 f987 	bl	8007d8c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, MSN_EN1_Pin, SET); // Set PB9 high
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a84:	4821      	ldr	r0, [pc, #132]	; (8007b0c <main+0xb8>)
 8007a86:	f001 fcdf 	bl	8009448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN2_Pin, SET); // Set PB8 high
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a90:	481e      	ldr	r0, [pc, #120]	; (8007b0c <main+0xb8>)
 8007a92:	f001 fcd9 	bl	8009448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN3_Pin, SET); // Set PA15 high
 8007a96:	2201      	movs	r2, #1
 8007a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a9c:	481b      	ldr	r0, [pc, #108]	; (8007b0c <main+0xb8>)
 8007a9e:	f001 fcd3 	bl	8009448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MSN_EN4_Pin, SET); // Set PA8 high
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007aa8:	4818      	ldr	r0, [pc, #96]	; (8007b0c <main+0xb8>)
 8007aaa:	f001 fccd 	bl	8009448 <HAL_GPIO_WritePin>
  uint8_t data[20];
 Read_ID(&hspi2, GPIOB, GPIO_PIN_12, data);
 8007aae:	1d3b      	adds	r3, r7, #4
 8007ab0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ab4:	4915      	ldr	r1, [pc, #84]	; (8007b0c <main+0xb8>)
 8007ab6:	4816      	ldr	r0, [pc, #88]	; (8007b10 <main+0xbc>)
 8007ab8:	f000 f9f2 	bl	8007ea0 <Read_ID>
    HAL_Delay(100);
 8007abc:	2064      	movs	r0, #100	; 0x64
 8007abe:	f001 f995 	bl	8008dec <HAL_Delay>
    for(int i=0;i<4;i++){
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	61fb      	str	r3, [r7, #28]
 8007ac6:	e00b      	b.n	8007ae0 <main+0x8c>
    	SET_COUNT(i);
 8007ac8:	69f8      	ldr	r0, [r7, #28]
 8007aca:	f7f8 fde9 	bl	80006a0 <SET_COUNT>
    	Continuous_Mode(i);
 8007ace:	69f8      	ldr	r0, [r7, #28]
 8007ad0:	f7f8 fe58 	bl	8000784 <Continuous_Mode>
    	 TMRC_Mode(i);
 8007ad4:	69f8      	ldr	r0, [r7, #28]
 8007ad6:	f7f8 fe99 	bl	800080c <TMRC_Mode>
    for(int i=0;i<4;i++){
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	3301      	adds	r3, #1
 8007ade:	61fb      	str	r3, [r7, #28]
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	ddf0      	ble.n	8007ac8 <main+0x74>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  for(int i=0;i<4;i++){
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	61bb      	str	r3, [r7, #24]
 8007aea:	e00b      	b.n	8007b04 <main+0xb0>
			  Mea_Result(i);
 8007aec:	69b8      	ldr	r0, [r7, #24]
 8007aee:	f7f8 fed1 	bl	8000894 <Mea_Result>
			  Comb_measurement(i);
 8007af2:	69b8      	ldr	r0, [r7, #24]
 8007af4:	f7f8 ff6c 	bl	80009d0 <Comb_measurement>
			  HAL_Delay(100);
 8007af8:	2064      	movs	r0, #100	; 0x64
 8007afa:	f001 f977 	bl	8008dec <HAL_Delay>
		  for(int i=0;i<4;i++){
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	3301      	adds	r3, #1
 8007b02:	61bb      	str	r3, [r7, #24]
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	ddf0      	ble.n	8007aec <main+0x98>
 8007b0a:	e7ec      	b.n	8007ae6 <main+0x92>
 8007b0c:	40010c00 	.word	0x40010c00
 8007b10:	20000514 	.word	0x20000514

08007b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b094      	sub	sp, #80	; 0x50
 8007b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b1e:	2228      	movs	r2, #40	; 0x28
 8007b20:	2100      	movs	r1, #0
 8007b22:	4618      	mov	r0, r3
 8007b24:	f006 fa86 	bl	800e034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b28:	f107 0314 	add.w	r3, r7, #20
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	605a      	str	r2, [r3, #4]
 8007b32:	609a      	str	r2, [r3, #8]
 8007b34:	60da      	str	r2, [r3, #12]
 8007b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007b38:	1d3b      	adds	r3, r7, #4
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	605a      	str	r2, [r3, #4]
 8007b40:	609a      	str	r2, [r3, #8]
 8007b42:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8007b44:	2309      	movs	r3, #9
 8007b46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007b52:	2301      	movs	r3, #1
 8007b54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007b56:	2301      	movs	r3, #1
 8007b58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8007b64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f002 fff4 	bl	800ab5c <HAL_RCC_OscConfig>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8007b7a:	f000 f98b 	bl	8007e94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b7e:	230f      	movs	r3, #15
 8007b80:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b82:	2302      	movs	r3, #2
 8007b84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007b86:	2300      	movs	r3, #0
 8007b88:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b8e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007b90:	2300      	movs	r3, #0
 8007b92:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007b94:	f107 0314 	add.w	r3, r7, #20
 8007b98:	2101      	movs	r1, #1
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f003 fa5e 	bl	800b05c <HAL_RCC_ClockConfig>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8007ba6:	f000 f975 	bl	8007e94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8007baa:	2311      	movs	r3, #17
 8007bac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bb2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8007bb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007bb8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007bba:	1d3b      	adds	r3, r7, #4
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f003 fbdb 	bl	800b378 <HAL_RCCEx_PeriphCLKConfig>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8007bc8:	f000 f964 	bl	8007e94 <Error_Handler>
  }
}
 8007bcc:	bf00      	nop
 8007bce:	3750      	adds	r7, #80	; 0x50
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007bd8:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <MX_RTC_Init+0x30>)
 8007bda:	4a0b      	ldr	r2, [pc, #44]	; (8007c08 <MX_RTC_Init+0x34>)
 8007bdc:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8007bde:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <MX_RTC_Init+0x30>)
 8007be0:	f04f 32ff 	mov.w	r2, #4294967295
 8007be4:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8007be6:	4b07      	ldr	r3, [pc, #28]	; (8007c04 <MX_RTC_Init+0x30>)
 8007be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bec:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007bee:	4805      	ldr	r0, [pc, #20]	; (8007c04 <MX_RTC_Init+0x30>)
 8007bf0:	f003 fd2e 	bl	800b650 <HAL_RTC_Init>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8007bfa:	f000 f94b 	bl	8007e94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007bfe:	bf00      	nop
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	200006cc 	.word	0x200006cc
 8007c08:	40002800 	.word	0x40002800

08007c0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007c10:	4b17      	ldr	r3, [pc, #92]	; (8007c70 <MX_SPI1_Init+0x64>)
 8007c12:	4a18      	ldr	r2, [pc, #96]	; (8007c74 <MX_SPI1_Init+0x68>)
 8007c14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007c16:	4b16      	ldr	r3, [pc, #88]	; (8007c70 <MX_SPI1_Init+0x64>)
 8007c18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007c1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007c1e:	4b14      	ldr	r3, [pc, #80]	; (8007c70 <MX_SPI1_Init+0x64>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007c24:	4b12      	ldr	r3, [pc, #72]	; (8007c70 <MX_SPI1_Init+0x64>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c2a:	4b11      	ldr	r3, [pc, #68]	; (8007c70 <MX_SPI1_Init+0x64>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007c30:	4b0f      	ldr	r3, [pc, #60]	; (8007c70 <MX_SPI1_Init+0x64>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007c36:	4b0e      	ldr	r3, [pc, #56]	; (8007c70 <MX_SPI1_Init+0x64>)
 8007c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8007c3e:	4b0c      	ldr	r3, [pc, #48]	; (8007c70 <MX_SPI1_Init+0x64>)
 8007c40:	2228      	movs	r2, #40	; 0x28
 8007c42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007c44:	4b0a      	ldr	r3, [pc, #40]	; (8007c70 <MX_SPI1_Init+0x64>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007c4a:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <MX_SPI1_Init+0x64>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c50:	4b07      	ldr	r3, [pc, #28]	; (8007c70 <MX_SPI1_Init+0x64>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007c56:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <MX_SPI1_Init+0x64>)
 8007c58:	220a      	movs	r2, #10
 8007c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007c5c:	4804      	ldr	r0, [pc, #16]	; (8007c70 <MX_SPI1_Init+0x64>)
 8007c5e:	f003 fe49 	bl	800b8f4 <HAL_SPI_Init>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007c68:	f000 f914 	bl	8007e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007c6c:	bf00      	nop
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	200006f4 	.word	0x200006f4
 8007c74:	40013000 	.word	0x40013000

08007c78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007c7c:	4b17      	ldr	r3, [pc, #92]	; (8007cdc <MX_SPI2_Init+0x64>)
 8007c7e:	4a18      	ldr	r2, [pc, #96]	; (8007ce0 <MX_SPI2_Init+0x68>)
 8007c80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007c82:	4b16      	ldr	r3, [pc, #88]	; (8007cdc <MX_SPI2_Init+0x64>)
 8007c84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007c88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007c8a:	4b14      	ldr	r3, [pc, #80]	; (8007cdc <MX_SPI2_Init+0x64>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007c90:	4b12      	ldr	r3, [pc, #72]	; (8007cdc <MX_SPI2_Init+0x64>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c96:	4b11      	ldr	r3, [pc, #68]	; (8007cdc <MX_SPI2_Init+0x64>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007c9c:	4b0f      	ldr	r3, [pc, #60]	; (8007cdc <MX_SPI2_Init+0x64>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007ca2:	4b0e      	ldr	r3, [pc, #56]	; (8007cdc <MX_SPI2_Init+0x64>)
 8007ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ca8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8007caa:	4b0c      	ldr	r3, [pc, #48]	; (8007cdc <MX_SPI2_Init+0x64>)
 8007cac:	2220      	movs	r2, #32
 8007cae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007cb0:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <MX_SPI2_Init+0x64>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007cb6:	4b09      	ldr	r3, [pc, #36]	; (8007cdc <MX_SPI2_Init+0x64>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007cbc:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <MX_SPI2_Init+0x64>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007cc2:	4b06      	ldr	r3, [pc, #24]	; (8007cdc <MX_SPI2_Init+0x64>)
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007cc8:	4804      	ldr	r0, [pc, #16]	; (8007cdc <MX_SPI2_Init+0x64>)
 8007cca:	f003 fe13 	bl	800b8f4 <HAL_SPI_Init>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007cd4:	f000 f8de 	bl	8007e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007cd8:	bf00      	nop
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	20000514 	.word	0x20000514
 8007ce0:	40003800 	.word	0x40003800

08007ce4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007ce8:	4b11      	ldr	r3, [pc, #68]	; (8007d30 <MX_USART1_UART_Init+0x4c>)
 8007cea:	4a12      	ldr	r2, [pc, #72]	; (8007d34 <MX_USART1_UART_Init+0x50>)
 8007cec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007cee:	4b10      	ldr	r3, [pc, #64]	; (8007d30 <MX_USART1_UART_Init+0x4c>)
 8007cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007cf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007cf6:	4b0e      	ldr	r3, [pc, #56]	; (8007d30 <MX_USART1_UART_Init+0x4c>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007cfc:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <MX_USART1_UART_Init+0x4c>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007d02:	4b0b      	ldr	r3, [pc, #44]	; (8007d30 <MX_USART1_UART_Init+0x4c>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007d08:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <MX_USART1_UART_Init+0x4c>)
 8007d0a:	220c      	movs	r2, #12
 8007d0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d0e:	4b08      	ldr	r3, [pc, #32]	; (8007d30 <MX_USART1_UART_Init+0x4c>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d14:	4b06      	ldr	r3, [pc, #24]	; (8007d30 <MX_USART1_UART_Init+0x4c>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007d1a:	4805      	ldr	r0, [pc, #20]	; (8007d30 <MX_USART1_UART_Init+0x4c>)
 8007d1c:	f004 fc83 	bl	800c626 <HAL_UART_Init>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007d26:	f000 f8b5 	bl	8007e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007d2a:	bf00      	nop
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	2000056c 	.word	0x2000056c
 8007d34:	40013800 	.word	0x40013800

08007d38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007d3c:	4b11      	ldr	r3, [pc, #68]	; (8007d84 <MX_USART2_UART_Init+0x4c>)
 8007d3e:	4a12      	ldr	r2, [pc, #72]	; (8007d88 <MX_USART2_UART_Init+0x50>)
 8007d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007d42:	4b10      	ldr	r3, [pc, #64]	; (8007d84 <MX_USART2_UART_Init+0x4c>)
 8007d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007d4a:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <MX_USART2_UART_Init+0x4c>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007d50:	4b0c      	ldr	r3, [pc, #48]	; (8007d84 <MX_USART2_UART_Init+0x4c>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007d56:	4b0b      	ldr	r3, [pc, #44]	; (8007d84 <MX_USART2_UART_Init+0x4c>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007d5c:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <MX_USART2_UART_Init+0x4c>)
 8007d5e:	220c      	movs	r2, #12
 8007d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d62:	4b08      	ldr	r3, [pc, #32]	; (8007d84 <MX_USART2_UART_Init+0x4c>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d68:	4b06      	ldr	r3, [pc, #24]	; (8007d84 <MX_USART2_UART_Init+0x4c>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007d6e:	4805      	ldr	r0, [pc, #20]	; (8007d84 <MX_USART2_UART_Init+0x4c>)
 8007d70:	f004 fc59 	bl	800c626 <HAL_UART_Init>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007d7a:	f000 f88b 	bl	8007e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007d7e:	bf00      	nop
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	2000074c 	.word	0x2000074c
 8007d88:	40004400 	.word	0x40004400

08007d8c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8007d90:	4b0d      	ldr	r3, [pc, #52]	; (8007dc8 <MX_USB_PCD_Init+0x3c>)
 8007d92:	4a0e      	ldr	r2, [pc, #56]	; (8007dcc <MX_USB_PCD_Init+0x40>)
 8007d94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007d96:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <MX_USB_PCD_Init+0x3c>)
 8007d98:	2208      	movs	r2, #8
 8007d9a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <MX_USB_PCD_Init+0x3c>)
 8007d9e:	2202      	movs	r2, #2
 8007da0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007da2:	4b09      	ldr	r3, [pc, #36]	; (8007dc8 <MX_USB_PCD_Init+0x3c>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007da8:	4b07      	ldr	r3, [pc, #28]	; (8007dc8 <MX_USB_PCD_Init+0x3c>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007dae:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <MX_USB_PCD_Init+0x3c>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007db4:	4804      	ldr	r0, [pc, #16]	; (8007dc8 <MX_USB_PCD_Init+0x3c>)
 8007db6:	f001 fb5f 	bl	8009478 <HAL_PCD_Init>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8007dc0:	f000 f868 	bl	8007e94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8007dc4:	bf00      	nop
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	20000794 	.word	0x20000794
 8007dcc:	40005c00 	.word	0x40005c00

08007dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b088      	sub	sp, #32
 8007dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dd6:	f107 0310 	add.w	r3, r7, #16
 8007dda:	2200      	movs	r2, #0
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	605a      	str	r2, [r3, #4]
 8007de0:	609a      	str	r2, [r3, #8]
 8007de2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007de4:	4b28      	ldr	r3, [pc, #160]	; (8007e88 <MX_GPIO_Init+0xb8>)
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	4a27      	ldr	r2, [pc, #156]	; (8007e88 <MX_GPIO_Init+0xb8>)
 8007dea:	f043 0320 	orr.w	r3, r3, #32
 8007dee:	6193      	str	r3, [r2, #24]
 8007df0:	4b25      	ldr	r3, [pc, #148]	; (8007e88 <MX_GPIO_Init+0xb8>)
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dfc:	4b22      	ldr	r3, [pc, #136]	; (8007e88 <MX_GPIO_Init+0xb8>)
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	4a21      	ldr	r2, [pc, #132]	; (8007e88 <MX_GPIO_Init+0xb8>)
 8007e02:	f043 0304 	orr.w	r3, r3, #4
 8007e06:	6193      	str	r3, [r2, #24]
 8007e08:	4b1f      	ldr	r3, [pc, #124]	; (8007e88 <MX_GPIO_Init+0xb8>)
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	f003 0304 	and.w	r3, r3, #4
 8007e10:	60bb      	str	r3, [r7, #8]
 8007e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e14:	4b1c      	ldr	r3, [pc, #112]	; (8007e88 <MX_GPIO_Init+0xb8>)
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	4a1b      	ldr	r2, [pc, #108]	; (8007e88 <MX_GPIO_Init+0xb8>)
 8007e1a:	f043 0308 	orr.w	r3, r3, #8
 8007e1e:	6193      	str	r3, [r2, #24]
 8007e20:	4b19      	ldr	r3, [pc, #100]	; (8007e88 <MX_GPIO_Init+0xb8>)
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	607b      	str	r3, [r7, #4]
 8007e2a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f241 717f 	movw	r1, #6015	; 0x177f
 8007e32:	4816      	ldr	r0, [pc, #88]	; (8007e8c <MX_GPIO_Init+0xbc>)
 8007e34:	f001 fb08 	bl	8009448 <HAL_GPIO_WritePin>
                          |CS_FM_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin|MSN_EN3_Pin|MSN_EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MSN_EN4_Pin|MSN_EN2_Pin, GPIO_PIN_RESET);
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8007e3e:	4814      	ldr	r0, [pc, #80]	; (8007e90 <MX_GPIO_Init+0xc0>)
 8007e40:	f001 fb02 	bl	8009448 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SS1_Pin SS2_Pin SS3_Pin SS4_Pin
                           CS_FM_Pin DRDY4_Pin DRDY3_Pin DRDY2_Pin
                           DRDY1_Pin MSN_EN3_Pin MSN_EN1_Pin */
  GPIO_InitStruct.Pin = SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 8007e44:	f241 737f 	movw	r3, #6015	; 0x177f
 8007e48:	613b      	str	r3, [r7, #16]
                          |CS_FM_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin|MSN_EN3_Pin|MSN_EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e52:	2302      	movs	r3, #2
 8007e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e56:	f107 0310 	add.w	r3, r7, #16
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	480b      	ldr	r0, [pc, #44]	; (8007e8c <MX_GPIO_Init+0xbc>)
 8007e5e:	f001 f96f 	bl	8009140 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSN_EN4_Pin MSN_EN2_Pin */
  GPIO_InitStruct.Pin = MSN_EN4_Pin|MSN_EN2_Pin;
 8007e62:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8007e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e70:	2302      	movs	r3, #2
 8007e72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e74:	f107 0310 	add.w	r3, r7, #16
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4805      	ldr	r0, [pc, #20]	; (8007e90 <MX_GPIO_Init+0xc0>)
 8007e7c:	f001 f960 	bl	8009140 <HAL_GPIO_Init>

}
 8007e80:	bf00      	nop
 8007e82:	3720      	adds	r7, #32
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	40021000 	.word	0x40021000
 8007e8c:	40010c00 	.word	0x40010c00
 8007e90:	40010800 	.word	0x40010800

08007e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007e98:	b672      	cpsid	i
}
 8007e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007e9c:	e7fe      	b.n	8007e9c <Error_Handler+0x8>
	...

08007ea0 <Read_ID>:
	_SELECT_SR1,
	_SELECT_SR2,
	_SELECT_SR3,
};

void Read_ID(SPI_HandleTypeDef *SPI, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t *data) {
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	603b      	str	r3, [r7, #0]
 8007eac:	4613      	mov	r3, r2
 8007eae:	80fb      	strh	r3, [r7, #6]
	uint8_t cmd = 0x9E;
 8007eb0:	239e      	movs	r3, #158	; 0x9e
 8007eb2:	75fb      	strb	r3, [r7, #23]
//	uint8_t data[20];
	int i;
	HAL_GPIO_WritePin(GPIOx,GPIO_Pin, GPIO_PIN_RESET);
 8007eb4:	88fb      	ldrh	r3, [r7, #6]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	4619      	mov	r1, r3
 8007eba:	68b8      	ldr	r0, [r7, #8]
 8007ebc:	f001 fac4 	bl	8009448 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8007ec0:	2064      	movs	r0, #100	; 0x64
 8007ec2:	f000 ff93 	bl	8008dec <HAL_Delay>
	HAL_SPI_Transmit(SPI, &cmd, 1, 300);
 8007ec6:	f107 0117 	add.w	r1, r7, #23
 8007eca:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007ece:	2201      	movs	r2, #1
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f003 fd93 	bl	800b9fc <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, data, 20, 1000);
 8007ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007eda:	2214      	movs	r2, #20
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f003 fed0 	bl	800bc84 <HAL_SPI_Receive>
	HAL_Delay(100);
 8007ee4:	2064      	movs	r0, #100	; 0x64
 8007ee6:	f000 ff81 	bl	8008dec <HAL_Delay>

	HAL_GPIO_WritePin(GPIOx,GPIO_Pin, GPIO_PIN_SET);
 8007eea:	88fb      	ldrh	r3, [r7, #6]
 8007eec:	2201      	movs	r2, #1
 8007eee:	4619      	mov	r1, r3
 8007ef0:	68b8      	ldr	r0, [r7, #8]
 8007ef2:	f001 faa9 	bl	8009448 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8007ef6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007efa:	f000 ff77 	bl	8008dec <HAL_Delay>
//	buff.EXT_ID = data[4];
//	buff.DEV_INFO = data[5];
//	for (i = 6; i < 20; i++) {
//		buff.UID[i] = data[i];
//	}
	HAL_UART_Transmit(&huart2, data, sizeof(data), 1000);
 8007efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f02:	2204      	movs	r2, #4
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	4807      	ldr	r0, [pc, #28]	; (8007f24 <Read_ID+0x84>)
 8007f08:	f004 fbdd 	bl	800c6c6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "Data received\n--------------", sizeof("Data received-----------\n"), 1000);
 8007f0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f10:	221a      	movs	r2, #26
 8007f12:	4905      	ldr	r1, [pc, #20]	; (8007f28 <Read_ID+0x88>)
 8007f14:	4803      	ldr	r0, [pc, #12]	; (8007f24 <Read_ID+0x84>)
 8007f16:	f004 fbd6 	bl	800c6c6 <HAL_UART_Transmit>

//	*rxData = buff;
	return;
 8007f1a:	bf00      	nop
}
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	2000074c 	.word	0x2000074c
 8007f28:	0800fedc 	.word	0x0800fedc

08007f2c <_nor_cs_assert>:
/* Functions */

static void _nor_cs_assert(nor_t *nor){
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
	nor->config.CsAssert();
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
}
 8007f3a:	bf00      	nop
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <_nor_cs_deassert>:

static void _nor_cs_deassert(nor_t *nor){
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b082      	sub	sp, #8
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
	nor->config.CsDeassert();
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	4798      	blx	r3
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <_nor_spi_tx>:

static void _nor_spi_tx(nor_t *nor, uint8_t *txBuf, uint32_t size){
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
	nor->config.SpiTxFxn(txBuf, size);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6879      	ldr	r1, [r7, #4]
 8007f6a:	68b8      	ldr	r0, [r7, #8]
 8007f6c:	4798      	blx	r3
}
 8007f6e:	bf00      	nop
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <_nor_spi_rx>:

static void _nor_spi_rx(nor_t *nor, uint8_t *rxBuf, uint32_t size){
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	607a      	str	r2, [r7, #4]
	nor->config.SpiRxFxn(rxBuf, size);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	68b8      	ldr	r0, [r7, #8]
 8007f8a:	4798      	blx	r3
}
 8007f8c:	bf00      	nop
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <_nor_delay_us>:

static void _nor_delay_us(nor_t *nor, uint32_t us){
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
	nor->config.DelayUs(us);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	6838      	ldr	r0, [r7, #0]
 8007fa4:	4798      	blx	r3
}
 8007fa6:	bf00      	nop
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <_nor_ReadID>:

static uint32_t _nor_ReadID(nor_t *nor)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
	uint8_t JedecIdCmd = NOR_JEDEC_ID;
 8007fb6:	239e      	movs	r3, #158	; 0x9e
 8007fb8:	73fb      	strb	r3, [r7, #15]
	uint32_t ID = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60bb      	str	r3, [r7, #8]

	_nor_cs_assert(nor);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7ff ffb4 	bl	8007f2c <_nor_cs_assert>
	_nor_spi_tx(nor, &JedecIdCmd, sizeof(JedecIdCmd));
 8007fc4:	f107 030f 	add.w	r3, r7, #15
 8007fc8:	2201      	movs	r2, #1
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7ff ffc3 	bl	8007f58 <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&ID, 3);
 8007fd2:	f107 0308 	add.w	r3, r7, #8
 8007fd6:	2203      	movs	r2, #3
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7ff ffcb 	bl	8007f76 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f7ff ffae 	bl	8007f42 <_nor_cs_deassert>

	return ID;
 8007fe6:	68bb      	ldr	r3, [r7, #8]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <_nor_ReadUniqID>:

static uint64_t _nor_ReadUniqID(nor_t *nor)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b088      	sub	sp, #32
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
	uint8_t UniqueIdCmd = NOR_UNIQUE_ID;
 8007ff8:	234b      	movs	r3, #75	; 0x4b
 8007ffa:	77fb      	strb	r3, [r7, #31]
	uint64_t UniqueId = 0;
 8007ffc:	f04f 0200 	mov.w	r2, #0
 8008000:	f04f 0300 	mov.w	r3, #0
 8008004:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint32_t DummyU32 = (~0UL);
 8008008:	f04f 33ff 	mov.w	r3, #4294967295
 800800c:	60fb      	str	r3, [r7, #12]

	_nor_cs_assert(nor);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff ff8c 	bl	8007f2c <_nor_cs_assert>
	_nor_spi_tx(nor, &UniqueIdCmd, sizeof(UniqueIdCmd));
 8008014:	f107 031f 	add.w	r3, r7, #31
 8008018:	2201      	movs	r2, #1
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7ff ff9b 	bl	8007f58 <_nor_spi_tx>
	// this if the 4 dummy byte
	_nor_spi_tx(nor, (uint8_t*)&DummyU32, 4);
 8008022:	f107 030c 	add.w	r3, r7, #12
 8008026:	2204      	movs	r2, #4
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff ff94 	bl	8007f58 <_nor_spi_tx>
	_nor_spi_rx(nor, (uint8_t*)&UniqueId, sizeof(UniqueId));
 8008030:	f107 0310 	add.w	r3, r7, #16
 8008034:	2208      	movs	r2, #8
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff ff9c 	bl	8007f76 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff ff7f 	bl	8007f42 <_nor_cs_deassert>

	return UniqueId;
 8008044:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8008048:	4610      	mov	r0, r2
 800804a:	4619      	mov	r1, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <_nor_WriteEnable>:

static void _nor_WriteEnable(nor_t *nor)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
	uint8_t WriteEnCmd = NOR_CMD_WRITE_EN;
 800805a:	2306      	movs	r3, #6
 800805c:	73fb      	strb	r3, [r7, #15]

	_nor_cs_assert(nor);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7ff ff64 	bl	8007f2c <_nor_cs_assert>
	_nor_spi_tx(nor, &WriteEnCmd, sizeof(WriteEnCmd));
 8008064:	f107 030f 	add.w	r3, r7, #15
 8008068:	2201      	movs	r2, #1
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f7ff ff73 	bl	8007f58 <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7ff ff65 	bl	8007f42 <_nor_cs_deassert>
	// TODO Check if a delay was needed here
}
 8008078:	bf00      	nop
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <_nor_ReadStatusRegister>:
	_nor_spi_tx(nor, &WriteDisCmd, sizeof(WriteDisCmd));
	_nor_cs_deassert(nor);
}

uint8_t _nor_ReadStatusRegister(nor_t *nor, enum _nor_sr_select_e SelectSR)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0, ReadSRCmd;
 800808c:	2300      	movs	r3, #0
 800808e:	72fb      	strb	r3, [r7, #11]
	uint8_t *SrUpdateHandler;

	switch (SelectSR){
 8008090:	78fb      	ldrb	r3, [r7, #3]
 8008092:	2b02      	cmp	r3, #2
 8008094:	d012      	beq.n	80080bc <_nor_ReadStatusRegister+0x3c>
 8008096:	2b02      	cmp	r3, #2
 8008098:	dc16      	bgt.n	80080c8 <_nor_ReadStatusRegister+0x48>
 800809a:	2b00      	cmp	r3, #0
 800809c:	d002      	beq.n	80080a4 <_nor_ReadStatusRegister+0x24>
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d006      	beq.n	80080b0 <_nor_ReadStatusRegister+0x30>
 80080a2:	e011      	b.n	80080c8 <_nor_ReadStatusRegister+0x48>
	case _SELECT_SR1:
		ReadSRCmd = NOR_READ_SR1;
 80080a4:	2305      	movs	r3, #5
 80080a6:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	3342      	adds	r3, #66	; 0x42
 80080ac:	60fb      	str	r3, [r7, #12]
		break;
 80080ae:	e00d      	b.n	80080cc <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR2:
		ReadSRCmd = NOR_READ_SR2;
 80080b0:	2370      	movs	r3, #112	; 0x70
 80080b2:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	3342      	adds	r3, #66	; 0x42
 80080b8:	60fb      	str	r3, [r7, #12]
		break;
 80080ba:	e007      	b.n	80080cc <_nor_ReadStatusRegister+0x4c>
	case _SELECT_SR3:
		ReadSRCmd = NOR_READ_SR3;
 80080bc:	2315      	movs	r3, #21
 80080be:	72bb      	strb	r3, [r7, #10]
		SrUpdateHandler = &nor->_internal.u8StatusReg1;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3342      	adds	r3, #66	; 0x42
 80080c4:	60fb      	str	r3, [r7, #12]
		break;
 80080c6:	e001      	b.n	80080cc <_nor_ReadStatusRegister+0x4c>
	default:
		return 0xFF;
 80080c8:	23ff      	movs	r3, #255	; 0xff
 80080ca:	e017      	b.n	80080fc <_nor_ReadStatusRegister+0x7c>
	}
	_nor_cs_assert(nor);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff ff2d 	bl	8007f2c <_nor_cs_assert>
	_nor_spi_tx(nor, &ReadSRCmd, sizeof(ReadSRCmd));
 80080d2:	f107 030a 	add.w	r3, r7, #10
 80080d6:	2201      	movs	r2, #1
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7ff ff3c 	bl	8007f58 <_nor_spi_tx>
	_nor_spi_rx(nor, &status, sizeof(status));
 80080e0:	f107 030b 	add.w	r3, r7, #11
 80080e4:	2201      	movs	r2, #1
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff ff44 	bl	8007f76 <_nor_spi_rx>
	_nor_cs_deassert(nor);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7ff ff27 	bl	8007f42 <_nor_cs_deassert>

	*SrUpdateHandler = status;
 80080f4:	7afa      	ldrb	r2, [r7, #11]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	701a      	strb	r2, [r3, #0]

	return status;
 80080fa:	7afb      	ldrb	r3, [r7, #11]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <_nor_WaitForWriteEnd>:
	_nor_spi_tx(nor, WriteSR, sizeof(WriteSR));
	_nor_cs_deassert(nor);
}

nor_err_e _nor_WaitForWriteEnd(nor_t *nor, uint32_t msTimeout)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
	uint8_t ReadSr1Cmd = NOR_READ_SR1;
 800810e:	2305      	movs	r3, #5
 8008110:	73fb      	strb	r3, [r7, #15]

	// multply timeout for 10, we must run a delay of 100us on each iteraction
	msTimeout *= 10;
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	603b      	str	r3, [r7, #0]
	_nor_cs_assert(nor);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff ff04 	bl	8007f2c <_nor_cs_assert>
	_nor_spi_tx(nor, (uint8_t*)&ReadSr1Cmd, sizeof(ReadSr1Cmd));
 8008124:	f107 030f 	add.w	r3, r7, #15
 8008128:	2201      	movs	r2, #1
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff ff13 	bl	8007f58 <_nor_spi_tx>
	do{
		_nor_spi_rx(nor, &nor->_internal.u8StatusReg1, sizeof(uint8_t));
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3342      	adds	r3, #66	; 0x42
 8008136:	2201      	movs	r2, #1
 8008138:	4619      	mov	r1, r3
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7ff ff1b 	bl	8007f76 <_nor_spi_rx>
		_nor_delay_us(nor, 100);
 8008140:	2164      	movs	r1, #100	; 0x64
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7ff ff26 	bl	8007f94 <_nor_delay_us>
		msTimeout -= 100;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	3b64      	subs	r3, #100	; 0x64
 800814c:	603b      	str	r3, [r7, #0]
	}while ((nor->_internal.u8StatusReg1 & SR1_BUSY_BIT) && (msTimeout > 0));
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <_nor_WaitForWriteEnd+0x5e>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e7      	bne.n	8008132 <_nor_WaitForWriteEnd+0x2e>
	_nor_cs_deassert(nor);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7ff feed 	bl	8007f42 <_nor_cs_deassert>

	if (msTimeout == 0){
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <_nor_WaitForWriteEnd+0x6e>
		return NOR_FAIL;
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <_nor_WaitForWriteEnd+0x70>
	}
	return NOR_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <NOR_Init>:

/*
 * Publics
 */

nor_err_e NOR_Init(nor_t *nor){
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
	uint8_t ExitPDCmd = NOR_RELEASE_PD;
 8008184:	23ab      	movs	r3, #171	; 0xab
 8008186:	73fb      	strb	r3, [r7, #15]

	if (nor == NULL || nor->config.CsAssert == NULL ||
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d013      	beq.n	80081b6 <NOR_Init+0x3a>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00f      	beq.n	80081b6 <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68db      	ldr	r3, [r3, #12]
	if (nor == NULL || nor->config.CsAssert == NULL ||
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00b      	beq.n	80081b6 <NOR_Init+0x3a>
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d007      	beq.n	80081b6 <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
			nor->config.CsDeassert == NULL || nor->config.DelayUs == NULL ||
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <NOR_Init+0x3a>
			nor->config.SpiRxFxn == NULL || nor->config.SpiTxFxn == NULL){
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <NOR_Init+0x3e>
		NOR_PRINTF("ERROR: Invalid Parameters on %s function\n", __func__);
		return NOR_INVALID_PARAMS;
 80081b6:	2302      	movs	r3, #2
 80081b8:	e09a      	b.n	80082f0 <NOR_Init+0x174>
	}
	if (nor->_internal.u16Initialized == NOR_INITIALIZED_FLAG){
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80081c0:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d101      	bne.n	80081cc <NOR_Init+0x50>
		// the flash instance is already initialized
		NOR_PRINTF("Warning: Flash is already initialized.\n");
		return NOR_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	e091      	b.n	80082f0 <NOR_Init+0x174>
	}
	// we must have sure that the NOR has your CS pin deasserted
	_nor_cs_deassert(nor);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7ff feb8 	bl	8007f42 <_nor_cs_deassert>
	_nor_delay_us(nor, 100);
 80081d2:	2164      	movs	r1, #100	; 0x64
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff fedd 	bl	8007f94 <_nor_delay_us>

	// we are assuming, on startup, that the Flash is on Power Down State
	nor->_internal.u8PdCount = 0;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	nor->pdState = NOR_IN_IDLE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	_nor_cs_assert(nor);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7ff fe9e 	bl	8007f2c <_nor_cs_assert>
	_nor_spi_tx(nor, &ExitPDCmd, sizeof(ExitPDCmd));
 80081f0:	f107 030f 	add.w	r3, r7, #15
 80081f4:	2201      	movs	r2, #1
 80081f6:	4619      	mov	r1, r3
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff fead 	bl	8007f58 <_nor_spi_tx>
	_nor_cs_deassert(nor);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7ff fe9f 	bl	8007f42 <_nor_cs_deassert>

	nor->info.u32JedecID = _nor_ReadID(nor);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff fed2 	bl	8007fae <_nor_ReadID>
 800820a:	4602      	mov	r2, r0
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	621a      	str	r2, [r3, #32]
	if (nor->info.u32JedecID == 0x000000 || nor->info.u32JedecID == 0xFFFFFF){
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d005      	beq.n	8008224 <NOR_Init+0xa8>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008220:	4293      	cmp	r3, r2
 8008222:	d101      	bne.n	8008228 <NOR_Init+0xac>
		// invalid Id, I thing we don't has any flash on SPI
		NOR_PRINTF("ERROR: Flash memory bus fault.\n");
		return NOR_NO_MEMORY_FOUND;
 8008224:	2303      	movs	r3, #3
 8008226:	e063      	b.n	80082f0 <NOR_Init+0x174>
	}
	nor->Manufacturer = NOR_IDS_Interpret_Manufacturer(nor->info.u32JedecID);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	4618      	mov	r0, r3
 800822e:	f000 fa2f 	bl	8008690 <NOR_IDS_Interpret_Manufacturer>
 8008232:	4603      	mov	r3, r0
 8008234:	461a      	mov	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	nor->Model = NOR_IDS_Interpret_Model(nor->info.u32JedecID);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fa30 	bl	80086a6 <NOR_IDS_Interpret_Model>
 8008246:	4603      	mov	r3, r0
 8008248:	461a      	mov	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	if (nor->Model == NOR_MODEL_UNKNOWN){
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800825a:	4293      	cmp	r3, r2
 800825c:	d101      	bne.n	8008262 <NOR_Init+0xe6>
		NOR_PRINTF("ERROR: The flash memory model wasn't reconignized.\n"
				"You can, yet, start with NOR_Init_wo_ID to ignore the Flash ID.");
		return NOR_UNKNOWN_DEVICE;
 800825e:	2304      	movs	r3, #4
 8008260:	e046      	b.n	80082f0 <NOR_Init+0x174>
	}

	nor->info.u64UniqueId = _nor_ReadUniqID(nor);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7ff fec4 	bl	8007ff0 <_nor_ReadUniqID>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	6879      	ldr	r1, [r7, #4]
 800826e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	nor->info.u32BlockCount = NOR_IDS_GetQtdBlocks(nor->info.u32JedecID);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fa39 	bl	80086ee <NOR_IDS_GetQtdBlocks>
 800827c:	4602      	mov	r2, r0
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	63da      	str	r2, [r3, #60]	; 0x3c

	nor->info.u16PageSize = NOR_PAGE_SIZE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008288:	851a      	strh	r2, [r3, #40]	; 0x28
	nor->info.u16SectorSize = NOR_SECTOR_SIZE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008290:	861a      	strh	r2, [r3, #48]	; 0x30
	nor->info.u32BlockSize = NOR_BLOCK_SIZE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008298:	639a      	str	r2, [r3, #56]	; 0x38
	nor->info.u32SectorCount = nor->info.u32BlockCount * (NOR_BLOCK_SIZE / NOR_SECTOR_SIZE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829e:	011a      	lsls	r2, r3, #4
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	635a      	str	r2, [r3, #52]	; 0x34
	nor->info.u32PageCount = (nor->info.u32SectorCount * nor->info.u16SectorSize) / nor->info.u16PageSize;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80082ac:	fb02 f303 	mul.w	r3, r2, r3
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80082b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	62da      	str	r2, [r3, #44]	; 0x2c
	nor->info.u32Size = (nor->info.u32SectorCount * nor->info.u16SectorSize);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80082c4:	fb02 f203 	mul.w	r2, r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	625a      	str	r2, [r3, #36]	; 0x24

	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 80082cc:	2100      	movs	r1, #0
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f7ff fed6 	bl	8008080 <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 80082d4:	2100      	movs	r1, #0
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7ff fed2 	bl	8008080 <_nor_ReadStatusRegister>
	_nor_ReadStatusRegister(nor, _SELECT_SR1);
 80082dc:	2100      	movs	r1, #0
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7ff fece 	bl	8008080 <_nor_ReadStatusRegister>

	nor->_internal.u16Initialized = NOR_INITIALIZED_FLAG;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 80082ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	NOR_PRINTF(" Sector Count | %d Sectors\n", (uint)nor->info.u32SectorCount);
	NOR_PRINTF(" Block Count  | %d Blocks\n", (uint)nor->info.u32BlockCount);
	NOR_PRINTF(" Capacity     | %d %d KB\n", nor->info.u32Size,(uint)(nor->info.u32Size/1024));
	NOR_PRINTF(" == NOR Initialization Done ==\n");

	return NOR_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <NOR_EraseAddress>:
	}
	NOR_PRINTF("Done!\n");
	return err;
}

nor_err_e NOR_EraseAddress(nor_t *nor, uint32_t Address, nor_erase_method_e method){
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	4613      	mov	r3, r2
 8008304:	71fb      	strb	r3, [r7, #7]
	uint8_t EraseChipCmd[4];
	uint32_t expectedTimeoutUs;
	nor_err_e err;

	_SANITY_CHECK(nor);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <NOR_EraseAddress+0x18>
 800830c:	2302      	movs	r3, #2
 800830e:	e043      	b.n	8008398 <NOR_EraseAddress+0xa0>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008316:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 800831a:	4293      	cmp	r3, r2
 800831c:	d001      	beq.n	8008322 <NOR_EraseAddress+0x2a>
 800831e:	2306      	movs	r3, #6
 8008320:	e03a      	b.n	8008398 <NOR_EraseAddress+0xa0>

	switch (method){
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	2b02      	cmp	r3, #2
 8008326:	d010      	beq.n	800834a <NOR_EraseAddress+0x52>
 8008328:	2b02      	cmp	r3, #2
 800832a:	dc13      	bgt.n	8008354 <NOR_EraseAddress+0x5c>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <NOR_EraseAddress+0x3e>
 8008330:	2b01      	cmp	r3, #1
 8008332:	d005      	beq.n	8008340 <NOR_EraseAddress+0x48>
 8008334:	e00e      	b.n	8008354 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_4K:
		NOR_PRINTF("Erasing 4K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_4K;
 8008336:	2320      	movs	r3, #32
 8008338:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_4K_ERASE_TIME;
 800833a:	4b19      	ldr	r3, [pc, #100]	; (80083a0 <NOR_EraseAddress+0xa8>)
 800833c:	61fb      	str	r3, [r7, #28]
		break;
 800833e:	e009      	b.n	8008354 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_32K:
		NOR_PRINTF("Erasing 32K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_32K;
 8008340:	2352      	movs	r3, #82	; 0x52
 8008342:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_32K_ERASE_TIME;
 8008344:	4b17      	ldr	r3, [pc, #92]	; (80083a4 <NOR_EraseAddress+0xac>)
 8008346:	61fb      	str	r3, [r7, #28]
		break;
 8008348:	e004      	b.n	8008354 <NOR_EraseAddress+0x5c>
	case NOR_ERASE_64K:
		NOR_PRINTF("Erasing 64K bytes on 0x%08X Address\n", (uint)Address);
		EraseChipCmd[0] = NOR_SECTOR_ERASE_64K;
 800834a:	23d8      	movs	r3, #216	; 0xd8
 800834c:	753b      	strb	r3, [r7, #20]
		expectedTimeoutUs = NOR_EXPECT_64K_ERASE_TIME;
 800834e:	4b16      	ldr	r3, [pc, #88]	; (80083a8 <NOR_EraseAddress+0xb0>)
 8008350:	61fb      	str	r3, [r7, #28]
		break;
 8008352:	bf00      	nop
	}
	EraseChipCmd[1] = ((Address >> 16) & 0xFF);
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	0c1b      	lsrs	r3, r3, #16
 8008358:	b2db      	uxtb	r3, r3
 800835a:	757b      	strb	r3, [r7, #21]
	EraseChipCmd[2] = ((Address >> 8) & 0xFF);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	0a1b      	lsrs	r3, r3, #8
 8008360:	b2db      	uxtb	r3, r3
 8008362:	75bb      	strb	r3, [r7, #22]
	EraseChipCmd[3] = ((Address) & 0xFF);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	b2db      	uxtb	r3, r3
 8008368:	75fb      	strb	r3, [r7, #23]

	_nor_WriteEnable(nor);
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f7ff fe71 	bl	8008052 <_nor_WriteEnable>
	_nor_cs_assert(nor);
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f7ff fddb 	bl	8007f2c <_nor_cs_assert>
	_nor_spi_tx(nor, EraseChipCmd, sizeof(EraseChipCmd));
 8008376:	f107 0314 	add.w	r3, r7, #20
 800837a:	2204      	movs	r2, #4
 800837c:	4619      	mov	r1, r3
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f7ff fdea 	bl	8007f58 <_nor_spi_tx>
	_nor_cs_deassert(nor);
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f7ff fddc 	bl	8007f42 <_nor_cs_deassert>
	err = _nor_WaitForWriteEnd(nor, expectedTimeoutUs);
 800838a:	69f9      	ldr	r1, [r7, #28]
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f7ff feb9 	bl	8008104 <_nor_WaitForWriteEnd>
 8008392:	4603      	mov	r3, r0
 8008394:	76fb      	strb	r3, [r7, #27]
	if (err != NOR_OK){
		NOR_PRINTF("ERROR: Failed to erase flash\n");
	}
	NOR_PRINTF("Done!\n");

	return err;
 8008396:	7efb      	ldrb	r3, [r7, #27]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3720      	adds	r7, #32
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	00061a80 	.word	0x00061a80
 80083a4:	00186a00 	.word	0x00186a00
 80083a8:	001e8480 	.word	0x001e8480

080083ac <NOR_EraseSector>:

nor_err_e NOR_EraseSector(nor_t *nor, uint32_t SectorAddr){
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d101      	bne.n	80083c0 <NOR_EraseSector+0x14>
 80083bc:	2302      	movs	r3, #2
 80083be:	e015      	b.n	80083ec <NOR_EraseSector+0x40>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80083c6:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d001      	beq.n	80083d2 <NOR_EraseSector+0x26>
 80083ce:	2306      	movs	r3, #6
 80083d0:	e00c      	b.n	80083ec <NOR_EraseSector+0x40>

	Address = SectorAddr * nor->info.u16SectorSize;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80083d6:	461a      	mov	r2, r3
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	fb02 f303 	mul.w	r3, r2, r3
 80083de:	60fb      	str	r3, [r7, #12]
	return NOR_EraseAddress(nor, Address, NOR_ERASE_4K);
 80083e0:	2200      	movs	r2, #0
 80083e2:	68f9      	ldr	r1, [r7, #12]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f7ff ff87 	bl	80082f8 <NOR_EraseAddress>
 80083ea:	4603      	mov	r3, r0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <NOR_WriteBytes>:

	ActAddress = (nor->info.u32BlockSize * BlockAddr) + Offset;
	return NOR_IsEmptyAddress(nor, ActAddress, NumBytesToCheck);
}

nor_err_e NOR_WriteBytes(nor_t *nor, uint8_t *pBuffer, uint32_t WriteAddr, uint32_t NumBytesToWrite){
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b088      	sub	sp, #32
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	603b      	str	r3, [r7, #0]
	uint8_t WriteCmd[4];
	uint32_t _BytesToWrite;

	_SANITY_CHECK(nor);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <NOR_WriteBytes+0x18>
 8008408:	2302      	movs	r3, #2
 800840a:	e05f      	b.n	80084cc <NOR_WriteBytes+0xd8>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008412:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8008416:	4293      	cmp	r3, r2
 8008418:	d001      	beq.n	800841e <NOR_WriteBytes+0x2a>
 800841a:	2306      	movs	r3, #6
 800841c:	e056      	b.n	80084cc <NOR_WriteBytes+0xd8>

	if (NumBytesToWrite == 0){
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <NOR_WriteBytes+0x34>
		NOR_PRINTF("ERROR: Invalid parameters on NOR_WriteBytes\n");
		return NOR_INVALID_PARAMS;
 8008424:	2302      	movs	r3, #2
 8008426:	e051      	b.n	80084cc <NOR_WriteBytes+0xd8>
	}
	// TODO check if Address is not grater than the Flash size
	NOR_PRINTF("Writing %d bytes into Address %08X.\n", (uint)NumBytesToWrite, (uint)WriteAddr);
	NOR_PRINTF("Buffer to Write into Flash:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < NumBytesToWrite; i++)
 8008428:	2300      	movs	r3, #0
 800842a:	61bb      	str	r3, [r7, #24]
 800842c:	e002      	b.n	8008434 <NOR_WriteBytes+0x40>
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	3301      	adds	r3, #1
 8008432:	61bb      	str	r3, [r7, #24]
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	429a      	cmp	r2, r3
 800843a:	d3f8      	bcc.n	800842e <NOR_WriteBytes+0x3a>
		}
		NOR_PRINTF("%02X ", pBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	do{
		if (((WriteAddr%nor->info.u16PageSize)+NumBytesToWrite) > nor->info.u16PageSize){
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008440:	461a      	mov	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	fbb3 f1f2 	udiv	r1, r3, r2
 8008448:	fb02 f201 	mul.w	r2, r2, r1
 800844c:	1a9a      	subs	r2, r3, r2
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	4413      	add	r3, r2
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008456:	4293      	cmp	r3, r2
 8008458:	d903      	bls.n	8008462 <NOR_WriteBytes+0x6e>
			_BytesToWrite = nor->info.u16PageSize;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800845e:	61fb      	str	r3, [r7, #28]
 8008460:	e001      	b.n	8008466 <NOR_WriteBytes+0x72>
		}
		else{
			_BytesToWrite = NumBytesToWrite;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	61fb      	str	r3, [r7, #28]
		}
		_nor_WriteEnable(nor);
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f7ff fdf3 	bl	8008052 <_nor_WriteEnable>
		WriteCmd[0] = NOR_PAGE_PROGRAM;
 800846c:	2302      	movs	r3, #2
 800846e:	753b      	strb	r3, [r7, #20]
		WriteCmd[1] = ((WriteAddr >> 16) & 0xFF);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	0c1b      	lsrs	r3, r3, #16
 8008474:	b2db      	uxtb	r3, r3
 8008476:	757b      	strb	r3, [r7, #21]
		WriteCmd[2] = ((WriteAddr >> 8) & 0xFF);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	0a1b      	lsrs	r3, r3, #8
 800847c:	b2db      	uxtb	r3, r3
 800847e:	75bb      	strb	r3, [r7, #22]
		WriteCmd[3] = ((WriteAddr) & 0xFF);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	75fb      	strb	r3, [r7, #23]
		_nor_cs_assert(nor);
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f7ff fd50 	bl	8007f2c <_nor_cs_assert>
		_nor_spi_tx(nor, WriteCmd, sizeof(WriteCmd));
 800848c:	f107 0314 	add.w	r3, r7, #20
 8008490:	2204      	movs	r2, #4
 8008492:	4619      	mov	r1, r3
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f7ff fd5f 	bl	8007f58 <_nor_spi_tx>
		_nor_spi_tx(nor, pBuffer, _BytesToWrite);
 800849a:	69fa      	ldr	r2, [r7, #28]
 800849c:	68b9      	ldr	r1, [r7, #8]
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f7ff fd5a 	bl	8007f58 <_nor_spi_tx>
		_nor_cs_deassert(nor);
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f7ff fd4c 	bl	8007f42 <_nor_cs_deassert>
		_nor_WaitForWriteEnd(nor, NOR_EXPECT_PAGE_PROG_TIME);
 80084aa:	f242 7110 	movw	r1, #10000	; 0x2710
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f7ff fe28 	bl	8008104 <_nor_WaitForWriteEnd>
		pBuffer += _BytesToWrite;
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	4413      	add	r3, r2
 80084ba:	60bb      	str	r3, [r7, #8]
		NumBytesToWrite -= _BytesToWrite;
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	603b      	str	r3, [r7, #0]
	}while (NumBytesToWrite > 0);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1b8      	bne.n	800843c <NOR_WriteBytes+0x48>
	NOR_PRINTF("Write done.!\n");

	return NOR_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3720      	adds	r7, #32
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <NOR_WriteSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_WriteSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumBytesToWrite){
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <NOR_WriteSector+0x18>
 80084e8:	2302      	movs	r3, #2
 80084ea:	e027      	b.n	800853c <NOR_WriteSector+0x68>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80084f2:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d00a      	beq.n	8008510 <NOR_WriteSector+0x3c>
 80084fa:	2306      	movs	r3, #6
 80084fc:	e01e      	b.n	800853c <NOR_WriteSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3301      	adds	r3, #1
 8008502:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008508:	461a      	mov	r2, r3
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	1a9b      	subs	r3, r3, r2
 800850e:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008514:	461a      	mov	r2, r3
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	4293      	cmp	r3, r2
 800851a:	d2f0      	bcs.n	80084fe <NOR_WriteSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008520:	461a      	mov	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	fb03 f302 	mul.w	r3, r3, r2
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	4413      	add	r3, r2
 800852c:	617b      	str	r3, [r7, #20]
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	68b9      	ldr	r1, [r7, #8]
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7ff ff5d 	bl	80083f4 <NOR_WriteBytes>
 800853a:	4603      	mov	r3, r0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <NOR_ReadBytes>:

	Address = (BlockAddr * nor->info.u32BlockSize) + Offset;
	return NOR_WriteBytes(nor, pBuffer, Address, NumBytesToWrite);
}

nor_err_e NOR_ReadBytes(nor_t *nor, uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead){
 8008544:	b580      	push	{r7, lr}
 8008546:	b08a      	sub	sp, #40	; 0x28
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
	uint8_t ReadCmd[5];
	uint32_t _BytesToRead;
	uint8_t *originalBuffer;
	uint32_t originalNumBytes;

	_SANITY_CHECK(nor);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <NOR_ReadBytes+0x18>
 8008558:	2302      	movs	r3, #2
 800855a:	e05d      	b.n	8008618 <NOR_ReadBytes+0xd4>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008562:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8008566:	4293      	cmp	r3, r2
 8008568:	d001      	beq.n	800856e <NOR_ReadBytes+0x2a>
 800856a:	2306      	movs	r3, #6
 800856c:	e054      	b.n	8008618 <NOR_ReadBytes+0xd4>

	if (NumByteToRead == 0){
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <NOR_ReadBytes+0x34>
		return NOR_INVALID_PARAMS;
 8008574:	2302      	movs	r3, #2
 8008576:	e04f      	b.n	8008618 <NOR_ReadBytes+0xd4>
	}
	// TODO check if Address is not grater than the Flash size

	originalBuffer = pBuffer;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	61fb      	str	r3, [r7, #28]
	originalNumBytes = NumByteToRead;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	61bb      	str	r3, [r7, #24]
	NOR_PRINTF("Reading %d bytes on the Address %08X.\n", (uint)NumByteToRead, (uint)ReadAddr);
	do{
		if (((ReadAddr%nor->info.u16PageSize)+NumByteToRead) > nor->info.u16PageSize){
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008584:	461a      	mov	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	fbb3 f1f2 	udiv	r1, r3, r2
 800858c:	fb02 f201 	mul.w	r2, r2, r1
 8008590:	1a9a      	subs	r2, r3, r2
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	4413      	add	r3, r2
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800859a:	4293      	cmp	r3, r2
 800859c:	d903      	bls.n	80085a6 <NOR_ReadBytes+0x62>
			_BytesToRead = nor->info.u16PageSize;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085a2:	627b      	str	r3, [r7, #36]	; 0x24
 80085a4:	e001      	b.n	80085aa <NOR_ReadBytes+0x66>
		}
		else{
			_BytesToRead = NumByteToRead;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		ReadCmd[0] = NOR_READ_FAST_DATA;
 80085aa:	230b      	movs	r3, #11
 80085ac:	743b      	strb	r3, [r7, #16]
		ReadCmd[1] = ((ReadAddr >> 16) & 0xFF);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	0c1b      	lsrs	r3, r3, #16
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	747b      	strb	r3, [r7, #17]
		ReadCmd[2] = ((ReadAddr >> 8) & 0xFF);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	0a1b      	lsrs	r3, r3, #8
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	74bb      	strb	r3, [r7, #18]
		ReadCmd[3] = ((ReadAddr) & 0xFF);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	74fb      	strb	r3, [r7, #19]
		ReadCmd[4] = 0x00;
 80085c4:	2300      	movs	r3, #0
 80085c6:	753b      	strb	r3, [r7, #20]
		_nor_cs_assert(nor);
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f7ff fcaf 	bl	8007f2c <_nor_cs_assert>
		_nor_spi_tx(nor, ReadCmd, sizeof(ReadCmd));
 80085ce:	f107 0310 	add.w	r3, r7, #16
 80085d2:	2205      	movs	r2, #5
 80085d4:	4619      	mov	r1, r3
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f7ff fcbe 	bl	8007f58 <_nor_spi_tx>
		_nor_spi_rx(nor, pBuffer, _BytesToRead);
 80085dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085de:	68b9      	ldr	r1, [r7, #8]
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f7ff fcc8 	bl	8007f76 <_nor_spi_rx>
		_nor_cs_deassert(nor);
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f7ff fcab 	bl	8007f42 <_nor_cs_deassert>
		pBuffer += _BytesToRead;
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	4413      	add	r3, r2
 80085f2:	60bb      	str	r3, [r7, #8]
		NumByteToRead -= _BytesToRead;
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	603b      	str	r3, [r7, #0]
	}while(NumByteToRead > 0);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1be      	bne.n	8008580 <NOR_ReadBytes+0x3c>

	NOR_PRINTF("Buffer readed from NOR:\n");
	NOR_PRINTF("====================== Values in HEX ========================");
	for (uint32_t i = 0; i < originalNumBytes; i++)
 8008602:	2300      	movs	r3, #0
 8008604:	623b      	str	r3, [r7, #32]
 8008606:	e002      	b.n	800860e <NOR_ReadBytes+0xca>
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	3301      	adds	r3, #1
 800860c:	623b      	str	r3, [r7, #32]
 800860e:	6a3a      	ldr	r2, [r7, #32]
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	429a      	cmp	r2, r3
 8008614:	d3f8      	bcc.n	8008608 <NOR_ReadBytes+0xc4>
		NOR_PRINTF("%02X ", originalBuffer[i]);
	}
	NOR_PRINTF("\n=============================================================\n");
	NOR_PRINTF("mt25qxx ReadBytes done.\n");

	return NOR_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3728      	adds	r7, #40	; 0x28
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <NOR_ReadSector>:

	Address = (PageAddr * nor->info.u16PageSize) + Offset;
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
}

nor_err_e NOR_ReadSector(nor_t *nor, uint8_t *pBuffer, uint32_t SectorAddr, uint32_t Offset, uint32_t NumByteToRead){
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
	uint32_t Address;

	_SANITY_CHECK(nor);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <NOR_ReadSector+0x18>
 8008634:	2302      	movs	r3, #2
 8008636:	e027      	b.n	8008688 <NOR_ReadSector+0x68>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800863e:	f64c 72fe 	movw	r2, #53246	; 0xcffe
 8008642:	4293      	cmp	r3, r2
 8008644:	d00a      	beq.n	800865c <NOR_ReadSector+0x3c>
 8008646:	2306      	movs	r3, #6
 8008648:	e01e      	b.n	8008688 <NOR_ReadSector+0x68>

	while (Offset >= nor->info.u16SectorSize){
		SectorAddr++;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3301      	adds	r3, #1
 800864e:	607b      	str	r3, [r7, #4]
		Offset -= nor->info.u16SectorSize;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008654:	461a      	mov	r2, r3
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	1a9b      	subs	r3, r3, r2
 800865a:	603b      	str	r3, [r7, #0]
	while (Offset >= nor->info.u16SectorSize){
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008660:	461a      	mov	r2, r3
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	4293      	cmp	r3, r2
 8008666:	d2f0      	bcs.n	800864a <NOR_ReadSector+0x2a>
	}

	Address = (SectorAddr * nor->info.u16SectorSize) + Offset;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800866c:	461a      	mov	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	fb03 f302 	mul.w	r3, r3, r2
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	4413      	add	r3, r2
 8008678:	617b      	str	r3, [r7, #20]
	return NOR_ReadBytes(nor, pBuffer, Address, NumByteToRead);
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f7ff ff5f 	bl	8008544 <NOR_ReadBytes>
 8008686:	4603      	mov	r3, r0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <NOR_IDS_Interpret_Manufacturer>:
 *      Author: Sangam
 */

#include "nor_ids.h"

nor_manuf_e NOR_IDS_Interpret_Manufacturer (uint32_t JedecID){
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
	return (nor_manuf_e)(JedecID & 0xFF);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	b2db      	uxtb	r3, r3
}
 800869c:	4618      	mov	r0, r3
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc80      	pop	{r7}
 80086a4:	4770      	bx	lr

080086a6 <NOR_IDS_Interpret_Model>:

nor_model_e NOR_IDS_Interpret_Model (uint32_t JedecID){
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b084      	sub	sp, #16
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7ff ffee 	bl	8008690 <NOR_IDS_Interpret_Manufacturer>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73fb      	strb	r3, [r7, #15]

	switch (Manuf){
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
 80086ba:	2bef      	cmp	r3, #239	; 0xef
 80086bc:	d00e      	beq.n	80086dc <NOR_IDS_Interpret_Model+0x36>
 80086be:	2bef      	cmp	r3, #239	; 0xef
 80086c0:	dc03      	bgt.n	80086ca <NOR_IDS_Interpret_Model+0x24>
 80086c2:	2b20      	cmp	r3, #32
 80086c4:	d00e      	beq.n	80086e4 <NOR_IDS_Interpret_Model+0x3e>
 80086c6:	2bc2      	cmp	r3, #194	; 0xc2
 80086c8:	d002      	beq.n	80086d0 <NOR_IDS_Interpret_Model+0x2a>
	case	MANUF_PUYA:
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	default:
		return NOR_MODEL_UNKNOWN;
 80086ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086ce:	e00a      	b.n	80086e6 <NOR_IDS_Interpret_Model+0x40>
	case 	MANUF_MXIC:
		return ((JedecID >> 16) & 0xFF);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	0c1b      	lsrs	r3, r3, #16
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	b29b      	uxth	r3, r3
 80086da:	e004      	b.n	80086e6 <NOR_IDS_Interpret_Model+0x40>
		break;
	case	MANUF_WINBOND:
		return ((JedecID >> 8) & 0xFFFF);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	0a1b      	lsrs	r3, r3, #8
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	e000      	b.n	80086e6 <NOR_IDS_Interpret_Model+0x40>
		break;

	case    MANUF_MT25QL: return MANUF_MT25QL; break;
 80086e4:	2320      	movs	r3, #32
	}
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <NOR_IDS_GetQtdBlocks>:

uint32_t NOR_IDS_GetQtdBlocks(uint32_t JedecID){
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b086      	sub	sp, #24
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
	nor_manuf_e Manuf = NOR_IDS_Interpret_Manufacturer(JedecID);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7ff ffca 	bl	8008690 <NOR_IDS_Interpret_Manufacturer>
 80086fc:	4603      	mov	r3, r0
 80086fe:	73fb      	strb	r3, [r7, #15]
	uint8_t density, i;
	uint32_t blocks;

	switch (Manuf){
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	2bef      	cmp	r3, #239	; 0xef
 8008704:	d008      	beq.n	8008718 <NOR_IDS_GetQtdBlocks+0x2a>
 8008706:	2bef      	cmp	r3, #239	; 0xef
 8008708:	dc03      	bgt.n	8008712 <NOR_IDS_GetQtdBlocks+0x24>
 800870a:	2b85      	cmp	r3, #133	; 0x85
 800870c:	d004      	beq.n	8008718 <NOR_IDS_GetQtdBlocks+0x2a>
 800870e:	2bc2      	cmp	r3, #194	; 0xc2
 8008710:	d002      	beq.n	8008718 <NOR_IDS_GetQtdBlocks+0x2a>
	case	MANUF_ADESTO:
	case	MANUF_MICROCHIP:
	default:
		blocks = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	613b      	str	r3, [r7, #16]
		break;
 8008716:	e015      	b.n	8008744 <NOR_IDS_GetQtdBlocks+0x56>
	case	MANUF_PUYA:
	case 	MANUF_MXIC:
	case	MANUF_WINBOND:
		density = ((JedecID >> 16) & 0xFF);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	0c1b      	lsrs	r3, r3, #16
 800871c:	73bb      	strb	r3, [r7, #14]
		density -= 0x11;
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	3b11      	subs	r3, #17
 8008722:	73bb      	strb	r3, [r7, #14]
		blocks = 2;
 8008724:	2302      	movs	r3, #2
 8008726:	613b      	str	r3, [r7, #16]
		// yes, I'm doing this only to prevent the use of math lib
		for (i=0 ; i<density ; i++){
 8008728:	2300      	movs	r3, #0
 800872a:	75fb      	strb	r3, [r7, #23]
 800872c:	e005      	b.n	800873a <NOR_IDS_GetQtdBlocks+0x4c>
			blocks *= 2;
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	005b      	lsls	r3, r3, #1
 8008732:	613b      	str	r3, [r7, #16]
		for (i=0 ; i<density ; i++){
 8008734:	7dfb      	ldrb	r3, [r7, #23]
 8008736:	3301      	adds	r3, #1
 8008738:	75fb      	strb	r3, [r7, #23]
 800873a:	7dfa      	ldrb	r2, [r7, #23]
 800873c:	7bbb      	ldrb	r3, [r7, #14]
 800873e:	429a      	cmp	r2, r3
 8008740:	d3f5      	bcc.n	800872e <NOR_IDS_GetQtdBlocks+0x40>
		}
		break;
 8008742:	bf00      	nop
	}

	return blocks;
 8008744:	693b      	ldr	r3, [r7, #16]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008756:	4b15      	ldr	r3, [pc, #84]	; (80087ac <HAL_MspInit+0x5c>)
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	4a14      	ldr	r2, [pc, #80]	; (80087ac <HAL_MspInit+0x5c>)
 800875c:	f043 0301 	orr.w	r3, r3, #1
 8008760:	6193      	str	r3, [r2, #24]
 8008762:	4b12      	ldr	r3, [pc, #72]	; (80087ac <HAL_MspInit+0x5c>)
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	60bb      	str	r3, [r7, #8]
 800876c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800876e:	4b0f      	ldr	r3, [pc, #60]	; (80087ac <HAL_MspInit+0x5c>)
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	4a0e      	ldr	r2, [pc, #56]	; (80087ac <HAL_MspInit+0x5c>)
 8008774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008778:	61d3      	str	r3, [r2, #28]
 800877a:	4b0c      	ldr	r3, [pc, #48]	; (80087ac <HAL_MspInit+0x5c>)
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008782:	607b      	str	r3, [r7, #4]
 8008784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008786:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <HAL_MspInit+0x60>)
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	4a04      	ldr	r2, [pc, #16]	; (80087b0 <HAL_MspInit+0x60>)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087a2:	bf00      	nop
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr
 80087ac:	40021000 	.word	0x40021000
 80087b0:	40010000 	.word	0x40010000

080087b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a0f      	ldr	r2, [pc, #60]	; (8008800 <HAL_RTC_MspInit+0x4c>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d118      	bne.n	80087f8 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80087c6:	f002 f9bd 	bl	800ab44 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80087ca:	4b0e      	ldr	r3, [pc, #56]	; (8008804 <HAL_RTC_MspInit+0x50>)
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	4a0d      	ldr	r2, [pc, #52]	; (8008804 <HAL_RTC_MspInit+0x50>)
 80087d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087d4:	61d3      	str	r3, [r2, #28]
 80087d6:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <HAL_RTC_MspInit+0x50>)
 80087d8:	69db      	ldr	r3, [r3, #28]
 80087da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087de:	60fb      	str	r3, [r7, #12]
 80087e0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80087e2:	4b09      	ldr	r3, [pc, #36]	; (8008808 <HAL_RTC_MspInit+0x54>)
 80087e4:	2201      	movs	r2, #1
 80087e6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80087e8:	2200      	movs	r2, #0
 80087ea:	2100      	movs	r1, #0
 80087ec:	2003      	movs	r0, #3
 80087ee:	f000 fbf8 	bl	8008fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80087f2:	2003      	movs	r0, #3
 80087f4:	f000 fc11 	bl	800901a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80087f8:	bf00      	nop
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	40002800 	.word	0x40002800
 8008804:	40021000 	.word	0x40021000
 8008808:	4242043c 	.word	0x4242043c

0800880c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08a      	sub	sp, #40	; 0x28
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008814:	f107 0318 	add.w	r3, r7, #24
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	605a      	str	r2, [r3, #4]
 800881e:	609a      	str	r2, [r3, #8]
 8008820:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a3f      	ldr	r2, [pc, #252]	; (8008924 <HAL_SPI_MspInit+0x118>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d138      	bne.n	800889e <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800882c:	4b3e      	ldr	r3, [pc, #248]	; (8008928 <HAL_SPI_MspInit+0x11c>)
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	4a3d      	ldr	r2, [pc, #244]	; (8008928 <HAL_SPI_MspInit+0x11c>)
 8008832:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008836:	6193      	str	r3, [r2, #24]
 8008838:	4b3b      	ldr	r3, [pc, #236]	; (8008928 <HAL_SPI_MspInit+0x11c>)
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008840:	617b      	str	r3, [r7, #20]
 8008842:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008844:	4b38      	ldr	r3, [pc, #224]	; (8008928 <HAL_SPI_MspInit+0x11c>)
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	4a37      	ldr	r2, [pc, #220]	; (8008928 <HAL_SPI_MspInit+0x11c>)
 800884a:	f043 0304 	orr.w	r3, r3, #4
 800884e:	6193      	str	r3, [r2, #24]
 8008850:	4b35      	ldr	r3, [pc, #212]	; (8008928 <HAL_SPI_MspInit+0x11c>)
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	f003 0304 	and.w	r3, r3, #4
 8008858:	613b      	str	r3, [r7, #16]
 800885a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800885c:	23a0      	movs	r3, #160	; 0xa0
 800885e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008860:	2302      	movs	r3, #2
 8008862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008864:	2303      	movs	r3, #3
 8008866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008868:	f107 0318 	add.w	r3, r7, #24
 800886c:	4619      	mov	r1, r3
 800886e:	482f      	ldr	r0, [pc, #188]	; (800892c <HAL_SPI_MspInit+0x120>)
 8008870:	f000 fc66 	bl	8009140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008874:	2340      	movs	r3, #64	; 0x40
 8008876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008878:	2300      	movs	r3, #0
 800887a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800887c:	2300      	movs	r3, #0
 800887e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008880:	f107 0318 	add.w	r3, r7, #24
 8008884:	4619      	mov	r1, r3
 8008886:	4829      	ldr	r0, [pc, #164]	; (800892c <HAL_SPI_MspInit+0x120>)
 8008888:	f000 fc5a 	bl	8009140 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800888c:	2200      	movs	r2, #0
 800888e:	2100      	movs	r1, #0
 8008890:	2023      	movs	r0, #35	; 0x23
 8008892:	f000 fba6 	bl	8008fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8008896:	2023      	movs	r0, #35	; 0x23
 8008898:	f000 fbbf 	bl	800901a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800889c:	e03e      	b.n	800891c <HAL_SPI_MspInit+0x110>
  else if(hspi->Instance==SPI2)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a23      	ldr	r2, [pc, #140]	; (8008930 <HAL_SPI_MspInit+0x124>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d139      	bne.n	800891c <HAL_SPI_MspInit+0x110>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80088a8:	4b1f      	ldr	r3, [pc, #124]	; (8008928 <HAL_SPI_MspInit+0x11c>)
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	4a1e      	ldr	r2, [pc, #120]	; (8008928 <HAL_SPI_MspInit+0x11c>)
 80088ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088b2:	61d3      	str	r3, [r2, #28]
 80088b4:	4b1c      	ldr	r3, [pc, #112]	; (8008928 <HAL_SPI_MspInit+0x11c>)
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80088c0:	4b19      	ldr	r3, [pc, #100]	; (8008928 <HAL_SPI_MspInit+0x11c>)
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	4a18      	ldr	r2, [pc, #96]	; (8008928 <HAL_SPI_MspInit+0x11c>)
 80088c6:	f043 0308 	orr.w	r3, r3, #8
 80088ca:	6193      	str	r3, [r2, #24]
 80088cc:	4b16      	ldr	r3, [pc, #88]	; (8008928 <HAL_SPI_MspInit+0x11c>)
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	f003 0308 	and.w	r3, r3, #8
 80088d4:	60bb      	str	r3, [r7, #8]
 80088d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80088d8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80088dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088de:	2302      	movs	r3, #2
 80088e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80088e2:	2303      	movs	r3, #3
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088e6:	f107 0318 	add.w	r3, r7, #24
 80088ea:	4619      	mov	r1, r3
 80088ec:	4811      	ldr	r0, [pc, #68]	; (8008934 <HAL_SPI_MspInit+0x128>)
 80088ee:	f000 fc27 	bl	8009140 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80088f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80088f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088f8:	2300      	movs	r3, #0
 80088fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088fc:	2300      	movs	r3, #0
 80088fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008900:	f107 0318 	add.w	r3, r7, #24
 8008904:	4619      	mov	r1, r3
 8008906:	480b      	ldr	r0, [pc, #44]	; (8008934 <HAL_SPI_MspInit+0x128>)
 8008908:	f000 fc1a 	bl	8009140 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800890c:	2200      	movs	r2, #0
 800890e:	2100      	movs	r1, #0
 8008910:	2024      	movs	r0, #36	; 0x24
 8008912:	f000 fb66 	bl	8008fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008916:	2024      	movs	r0, #36	; 0x24
 8008918:	f000 fb7f 	bl	800901a <HAL_NVIC_EnableIRQ>
}
 800891c:	bf00      	nop
 800891e:	3728      	adds	r7, #40	; 0x28
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	40013000 	.word	0x40013000
 8008928:	40021000 	.word	0x40021000
 800892c:	40010800 	.word	0x40010800
 8008930:	40003800 	.word	0x40003800
 8008934:	40010c00 	.word	0x40010c00

08008938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08a      	sub	sp, #40	; 0x28
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008940:	f107 0318 	add.w	r3, r7, #24
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	605a      	str	r2, [r3, #4]
 800894a:	609a      	str	r2, [r3, #8]
 800894c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a37      	ldr	r2, [pc, #220]	; (8008a30 <HAL_UART_MspInit+0xf8>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d132      	bne.n	80089be <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008958:	4b36      	ldr	r3, [pc, #216]	; (8008a34 <HAL_UART_MspInit+0xfc>)
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	4a35      	ldr	r2, [pc, #212]	; (8008a34 <HAL_UART_MspInit+0xfc>)
 800895e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008962:	6193      	str	r3, [r2, #24]
 8008964:	4b33      	ldr	r3, [pc, #204]	; (8008a34 <HAL_UART_MspInit+0xfc>)
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800896c:	617b      	str	r3, [r7, #20]
 800896e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008970:	4b30      	ldr	r3, [pc, #192]	; (8008a34 <HAL_UART_MspInit+0xfc>)
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	4a2f      	ldr	r2, [pc, #188]	; (8008a34 <HAL_UART_MspInit+0xfc>)
 8008976:	f043 0304 	orr.w	r3, r3, #4
 800897a:	6193      	str	r3, [r2, #24]
 800897c:	4b2d      	ldr	r3, [pc, #180]	; (8008a34 <HAL_UART_MspInit+0xfc>)
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	613b      	str	r3, [r7, #16]
 8008986:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800898c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800898e:	2302      	movs	r3, #2
 8008990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008992:	2303      	movs	r3, #3
 8008994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008996:	f107 0318 	add.w	r3, r7, #24
 800899a:	4619      	mov	r1, r3
 800899c:	4826      	ldr	r0, [pc, #152]	; (8008a38 <HAL_UART_MspInit+0x100>)
 800899e:	f000 fbcf 	bl	8009140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80089a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089a8:	2300      	movs	r3, #0
 80089aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ac:	2300      	movs	r3, #0
 80089ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089b0:	f107 0318 	add.w	r3, r7, #24
 80089b4:	4619      	mov	r1, r3
 80089b6:	4820      	ldr	r0, [pc, #128]	; (8008a38 <HAL_UART_MspInit+0x100>)
 80089b8:	f000 fbc2 	bl	8009140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80089bc:	e034      	b.n	8008a28 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a1e      	ldr	r2, [pc, #120]	; (8008a3c <HAL_UART_MspInit+0x104>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d12f      	bne.n	8008a28 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80089c8:	4b1a      	ldr	r3, [pc, #104]	; (8008a34 <HAL_UART_MspInit+0xfc>)
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	4a19      	ldr	r2, [pc, #100]	; (8008a34 <HAL_UART_MspInit+0xfc>)
 80089ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089d2:	61d3      	str	r3, [r2, #28]
 80089d4:	4b17      	ldr	r3, [pc, #92]	; (8008a34 <HAL_UART_MspInit+0xfc>)
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089dc:	60fb      	str	r3, [r7, #12]
 80089de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089e0:	4b14      	ldr	r3, [pc, #80]	; (8008a34 <HAL_UART_MspInit+0xfc>)
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	4a13      	ldr	r2, [pc, #76]	; (8008a34 <HAL_UART_MspInit+0xfc>)
 80089e6:	f043 0304 	orr.w	r3, r3, #4
 80089ea:	6193      	str	r3, [r2, #24]
 80089ec:	4b11      	ldr	r3, [pc, #68]	; (8008a34 <HAL_UART_MspInit+0xfc>)
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	60bb      	str	r3, [r7, #8]
 80089f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80089f8:	2304      	movs	r3, #4
 80089fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089fc:	2302      	movs	r3, #2
 80089fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008a00:	2303      	movs	r3, #3
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a04:	f107 0318 	add.w	r3, r7, #24
 8008a08:	4619      	mov	r1, r3
 8008a0a:	480b      	ldr	r0, [pc, #44]	; (8008a38 <HAL_UART_MspInit+0x100>)
 8008a0c:	f000 fb98 	bl	8009140 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008a10:	2308      	movs	r3, #8
 8008a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a14:	2300      	movs	r3, #0
 8008a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a1c:	f107 0318 	add.w	r3, r7, #24
 8008a20:	4619      	mov	r1, r3
 8008a22:	4805      	ldr	r0, [pc, #20]	; (8008a38 <HAL_UART_MspInit+0x100>)
 8008a24:	f000 fb8c 	bl	8009140 <HAL_GPIO_Init>
}
 8008a28:	bf00      	nop
 8008a2a:	3728      	adds	r7, #40	; 0x28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	40013800 	.word	0x40013800
 8008a34:	40021000 	.word	0x40021000
 8008a38:	40010800 	.word	0x40010800
 8008a3c:	40004400 	.word	0x40004400

08008a40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a11      	ldr	r2, [pc, #68]	; (8008a94 <HAL_PCD_MspInit+0x54>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d11b      	bne.n	8008a8a <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008a52:	4b11      	ldr	r3, [pc, #68]	; (8008a98 <HAL_PCD_MspInit+0x58>)
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	4a10      	ldr	r2, [pc, #64]	; (8008a98 <HAL_PCD_MspInit+0x58>)
 8008a58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a5c:	61d3      	str	r3, [r2, #28]
 8008a5e:	4b0e      	ldr	r3, [pc, #56]	; (8008a98 <HAL_PCD_MspInit+0x58>)
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	2013      	movs	r0, #19
 8008a70:	f000 fab7 	bl	8008fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8008a74:	2013      	movs	r0, #19
 8008a76:	f000 fad0 	bl	800901a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	2014      	movs	r0, #20
 8008a80:	f000 faaf 	bl	8008fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008a84:	2014      	movs	r0, #20
 8008a86:	f000 fac8 	bl	800901a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8008a8a:	bf00      	nop
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	40005c00 	.word	0x40005c00
 8008a98:	40021000 	.word	0x40021000

08008a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008aa0:	e7fe      	b.n	8008aa0 <NMI_Handler+0x4>

08008aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008aa6:	e7fe      	b.n	8008aa6 <HardFault_Handler+0x4>

08008aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008aac:	e7fe      	b.n	8008aac <MemManage_Handler+0x4>

08008aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ab2:	e7fe      	b.n	8008ab2 <BusFault_Handler+0x4>

08008ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ab8:	e7fe      	b.n	8008ab8 <UsageFault_Handler+0x4>

08008aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008aba:	b480      	push	{r7}
 8008abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008abe:	bf00      	nop
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bc80      	pop	{r7}
 8008ac4:	4770      	bx	lr

08008ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008aca:	bf00      	nop
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bc80      	pop	{r7}
 8008ad0:	4770      	bx	lr

08008ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008ad6:	bf00      	nop
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bc80      	pop	{r7}
 8008adc:	4770      	bx	lr

08008ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ae2:	f000 f967 	bl	8008db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ae6:	bf00      	nop
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8008af0:	4802      	ldr	r0, [pc, #8]	; (8008afc <RTC_IRQHandler+0x10>)
 8008af2:	f002 feb6 	bl	800b862 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8008af6:	bf00      	nop
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	200006cc 	.word	0x200006cc

08008b00 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008b04:	4802      	ldr	r0, [pc, #8]	; (8008b10 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8008b06:	f000 fdad 	bl	8009664 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8008b0a:	bf00      	nop
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20000794 	.word	0x20000794

08008b14 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008b18:	4802      	ldr	r0, [pc, #8]	; (8008b24 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8008b1a:	f000 fda3 	bl	8009664 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8008b1e:	bf00      	nop
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20000794 	.word	0x20000794

08008b28 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008b2c:	4802      	ldr	r0, [pc, #8]	; (8008b38 <SPI1_IRQHandler+0x10>)
 8008b2e:	f003 fb6b 	bl	800c208 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8008b32:	bf00      	nop
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	200006f4 	.word	0x200006f4

08008b3c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008b40:	4802      	ldr	r0, [pc, #8]	; (8008b4c <SPI2_IRQHandler+0x10>)
 8008b42:	f003 fb61 	bl	800c208 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008b46:	bf00      	nop
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20000514 	.word	0x20000514

08008b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008b50:	b480      	push	{r7}
 8008b52:	af00      	add	r7, sp, #0
	return 1;
 8008b54:	2301      	movs	r3, #1
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bc80      	pop	{r7}
 8008b5c:	4770      	bx	lr

08008b5e <_kill>:

int _kill(int pid, int sig)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b082      	sub	sp, #8
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008b68:	f005 f9fc 	bl	800df64 <__errno>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2216      	movs	r2, #22
 8008b70:	601a      	str	r2, [r3, #0]
	return -1;
 8008b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <_exit>:

void _exit (int status)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b082      	sub	sp, #8
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008b86:	f04f 31ff 	mov.w	r1, #4294967295
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff ffe7 	bl	8008b5e <_kill>
	while (1) {}		/* Make sure we hang here */
 8008b90:	e7fe      	b.n	8008b90 <_exit+0x12>

08008b92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b086      	sub	sp, #24
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	60f8      	str	r0, [r7, #12]
 8008b9a:	60b9      	str	r1, [r7, #8]
 8008b9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	617b      	str	r3, [r7, #20]
 8008ba2:	e00a      	b.n	8008bba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008ba4:	f3af 8000 	nop.w
 8008ba8:	4601      	mov	r1, r0
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	60ba      	str	r2, [r7, #8]
 8008bb0:	b2ca      	uxtb	r2, r1
 8008bb2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	617b      	str	r3, [r7, #20]
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	dbf0      	blt.n	8008ba4 <_read+0x12>
	}

return len;
 8008bc2:	687b      	ldr	r3, [r7, #4]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008bd8:	2300      	movs	r3, #0
 8008bda:	617b      	str	r3, [r7, #20]
 8008bdc:	e009      	b.n	8008bf2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	60ba      	str	r2, [r7, #8]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	617b      	str	r3, [r7, #20]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	dbf1      	blt.n	8008bde <_write+0x12>
	}
	return len;
 8008bfa:	687b      	ldr	r3, [r7, #4]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <_close>:

int _close(int file)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
	return -1;
 8008c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bc80      	pop	{r7}
 8008c18:	4770      	bx	lr

08008c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b083      	sub	sp, #12
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008c2a:	605a      	str	r2, [r3, #4]
	return 0;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bc80      	pop	{r7}
 8008c36:	4770      	bx	lr

08008c38 <_isatty>:

int _isatty(int file)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
	return 1;
 8008c40:	2301      	movs	r3, #1
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bc80      	pop	{r7}
 8008c4a:	4770      	bx	lr

08008c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
	return 0;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bc80      	pop	{r7}
 8008c62:	4770      	bx	lr

08008c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008c6c:	4a14      	ldr	r2, [pc, #80]	; (8008cc0 <_sbrk+0x5c>)
 8008c6e:	4b15      	ldr	r3, [pc, #84]	; (8008cc4 <_sbrk+0x60>)
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008c78:	4b13      	ldr	r3, [pc, #76]	; (8008cc8 <_sbrk+0x64>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d102      	bne.n	8008c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008c80:	4b11      	ldr	r3, [pc, #68]	; (8008cc8 <_sbrk+0x64>)
 8008c82:	4a12      	ldr	r2, [pc, #72]	; (8008ccc <_sbrk+0x68>)
 8008c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008c86:	4b10      	ldr	r3, [pc, #64]	; (8008cc8 <_sbrk+0x64>)
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d207      	bcs.n	8008ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008c94:	f005 f966 	bl	800df64 <__errno>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	220c      	movs	r2, #12
 8008c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca2:	e009      	b.n	8008cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008ca4:	4b08      	ldr	r3, [pc, #32]	; (8008cc8 <_sbrk+0x64>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008caa:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <_sbrk+0x64>)
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	4a05      	ldr	r2, [pc, #20]	; (8008cc8 <_sbrk+0x64>)
 8008cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3718      	adds	r7, #24
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	20005000 	.word	0x20005000
 8008cc4:	00000400 	.word	0x00000400
 8008cc8:	20000178 	.word	0x20000178
 8008ccc:	20000a80 	.word	0x20000a80

08008cd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008cd4:	bf00      	nop
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bc80      	pop	{r7}
 8008cda:	4770      	bx	lr

08008cdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008cdc:	f7ff fff8 	bl	8008cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ce0:	480b      	ldr	r0, [pc, #44]	; (8008d10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8008ce2:	490c      	ldr	r1, [pc, #48]	; (8008d14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008ce4:	4a0c      	ldr	r2, [pc, #48]	; (8008d18 <LoopFillZerobss+0x16>)
  movs r3, #0
 8008ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008ce8:	e002      	b.n	8008cf0 <LoopCopyDataInit>

08008cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008cee:	3304      	adds	r3, #4

08008cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008cf4:	d3f9      	bcc.n	8008cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008cf6:	4a09      	ldr	r2, [pc, #36]	; (8008d1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8008cf8:	4c09      	ldr	r4, [pc, #36]	; (8008d20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008cfc:	e001      	b.n	8008d02 <LoopFillZerobss>

08008cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008d00:	3204      	adds	r2, #4

08008d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008d04:	d3fb      	bcc.n	8008cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008d06:	f005 f945 	bl	800df94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008d0a:	f7fe fea3 	bl	8007a54 <main>
  bx lr
 8008d0e:	4770      	bx	lr
  ldr r0, =_sdata
 8008d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008d14:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8008d18:	08010174 	.word	0x08010174
  ldr r2, =_sbss
 8008d1c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8008d20:	20000a80 	.word	0x20000a80

08008d24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008d24:	e7fe      	b.n	8008d24 <ADC1_2_IRQHandler>
	...

08008d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d2c:	4b08      	ldr	r3, [pc, #32]	; (8008d50 <HAL_Init+0x28>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a07      	ldr	r2, [pc, #28]	; (8008d50 <HAL_Init+0x28>)
 8008d32:	f043 0310 	orr.w	r3, r3, #16
 8008d36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d38:	2003      	movs	r0, #3
 8008d3a:	f000 f947 	bl	8008fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d3e:	200f      	movs	r0, #15
 8008d40:	f000 f808 	bl	8008d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008d44:	f7ff fd04 	bl	8008750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	40022000 	.word	0x40022000

08008d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008d5c:	4b12      	ldr	r3, [pc, #72]	; (8008da8 <HAL_InitTick+0x54>)
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	4b12      	ldr	r3, [pc, #72]	; (8008dac <HAL_InitTick+0x58>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	4619      	mov	r1, r3
 8008d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 f95f 	bl	8009036 <HAL_SYSTICK_Config>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e00e      	b.n	8008da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2b0f      	cmp	r3, #15
 8008d86:	d80a      	bhi.n	8008d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d88:	2200      	movs	r2, #0
 8008d8a:	6879      	ldr	r1, [r7, #4]
 8008d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d90:	f000 f927 	bl	8008fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008d94:	4a06      	ldr	r2, [pc, #24]	; (8008db0 <HAL_InitTick+0x5c>)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e000      	b.n	8008da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	20000040 	.word	0x20000040
 8008dac:	20000048 	.word	0x20000048
 8008db0:	20000044 	.word	0x20000044

08008db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008db4:	b480      	push	{r7}
 8008db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008db8:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <HAL_IncTick+0x1c>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <HAL_IncTick+0x20>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	4a03      	ldr	r2, [pc, #12]	; (8008dd4 <HAL_IncTick+0x20>)
 8008dc6:	6013      	str	r3, [r2, #0]
}
 8008dc8:	bf00      	nop
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bc80      	pop	{r7}
 8008dce:	4770      	bx	lr
 8008dd0:	20000048 	.word	0x20000048
 8008dd4:	20000a6c 	.word	0x20000a6c

08008dd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	af00      	add	r7, sp, #0
  return uwTick;
 8008ddc:	4b02      	ldr	r3, [pc, #8]	; (8008de8 <HAL_GetTick+0x10>)
 8008dde:	681b      	ldr	r3, [r3, #0]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bc80      	pop	{r7}
 8008de6:	4770      	bx	lr
 8008de8:	20000a6c 	.word	0x20000a6c

08008dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008df4:	f7ff fff0 	bl	8008dd8 <HAL_GetTick>
 8008df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e04:	d005      	beq.n	8008e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e06:	4b0a      	ldr	r3, [pc, #40]	; (8008e30 <HAL_Delay+0x44>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	4413      	add	r3, r2
 8008e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008e12:	bf00      	nop
 8008e14:	f7ff ffe0 	bl	8008dd8 <HAL_GetTick>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d8f7      	bhi.n	8008e14 <HAL_Delay+0x28>
  {
  }
}
 8008e24:	bf00      	nop
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20000048 	.word	0x20000048

08008e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f003 0307 	and.w	r3, r3, #7
 8008e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008e44:	4b0c      	ldr	r3, [pc, #48]	; (8008e78 <__NVIC_SetPriorityGrouping+0x44>)
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008e50:	4013      	ands	r3, r2
 8008e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008e66:	4a04      	ldr	r2, [pc, #16]	; (8008e78 <__NVIC_SetPriorityGrouping+0x44>)
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	60d3      	str	r3, [r2, #12]
}
 8008e6c:	bf00      	nop
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bc80      	pop	{r7}
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	e000ed00 	.word	0xe000ed00

08008e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008e80:	4b04      	ldr	r3, [pc, #16]	; (8008e94 <__NVIC_GetPriorityGrouping+0x18>)
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	0a1b      	lsrs	r3, r3, #8
 8008e86:	f003 0307 	and.w	r3, r3, #7
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bc80      	pop	{r7}
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	e000ed00 	.word	0xe000ed00

08008e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	db0b      	blt.n	8008ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008eaa:	79fb      	ldrb	r3, [r7, #7]
 8008eac:	f003 021f 	and.w	r2, r3, #31
 8008eb0:	4906      	ldr	r1, [pc, #24]	; (8008ecc <__NVIC_EnableIRQ+0x34>)
 8008eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eb6:	095b      	lsrs	r3, r3, #5
 8008eb8:	2001      	movs	r0, #1
 8008eba:	fa00 f202 	lsl.w	r2, r0, r2
 8008ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008ec2:	bf00      	nop
 8008ec4:	370c      	adds	r7, #12
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bc80      	pop	{r7}
 8008eca:	4770      	bx	lr
 8008ecc:	e000e100 	.word	0xe000e100

08008ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	6039      	str	r1, [r7, #0]
 8008eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	db0a      	blt.n	8008efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	b2da      	uxtb	r2, r3
 8008ee8:	490c      	ldr	r1, [pc, #48]	; (8008f1c <__NVIC_SetPriority+0x4c>)
 8008eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eee:	0112      	lsls	r2, r2, #4
 8008ef0:	b2d2      	uxtb	r2, r2
 8008ef2:	440b      	add	r3, r1
 8008ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008ef8:	e00a      	b.n	8008f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	4908      	ldr	r1, [pc, #32]	; (8008f20 <__NVIC_SetPriority+0x50>)
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	f003 030f 	and.w	r3, r3, #15
 8008f06:	3b04      	subs	r3, #4
 8008f08:	0112      	lsls	r2, r2, #4
 8008f0a:	b2d2      	uxtb	r2, r2
 8008f0c:	440b      	add	r3, r1
 8008f0e:	761a      	strb	r2, [r3, #24]
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bc80      	pop	{r7}
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	e000e100 	.word	0xe000e100
 8008f20:	e000ed00 	.word	0xe000ed00

08008f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b089      	sub	sp, #36	; 0x24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f003 0307 	and.w	r3, r3, #7
 8008f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	f1c3 0307 	rsb	r3, r3, #7
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	bf28      	it	cs
 8008f42:	2304      	movcs	r3, #4
 8008f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	2b06      	cmp	r3, #6
 8008f4c:	d902      	bls.n	8008f54 <NVIC_EncodePriority+0x30>
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	3b03      	subs	r3, #3
 8008f52:	e000      	b.n	8008f56 <NVIC_EncodePriority+0x32>
 8008f54:	2300      	movs	r3, #0
 8008f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f58:	f04f 32ff 	mov.w	r2, #4294967295
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f62:	43da      	mvns	r2, r3
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	401a      	ands	r2, r3
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	fa01 f303 	lsl.w	r3, r1, r3
 8008f76:	43d9      	mvns	r1, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f7c:	4313      	orrs	r3, r2
         );
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3724      	adds	r7, #36	; 0x24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bc80      	pop	{r7}
 8008f86:	4770      	bx	lr

08008f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	3b01      	subs	r3, #1
 8008f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f98:	d301      	bcc.n	8008f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e00f      	b.n	8008fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008f9e:	4a0a      	ldr	r2, [pc, #40]	; (8008fc8 <SysTick_Config+0x40>)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008fa6:	210f      	movs	r1, #15
 8008fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fac:	f7ff ff90 	bl	8008ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008fb0:	4b05      	ldr	r3, [pc, #20]	; (8008fc8 <SysTick_Config+0x40>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008fb6:	4b04      	ldr	r3, [pc, #16]	; (8008fc8 <SysTick_Config+0x40>)
 8008fb8:	2207      	movs	r2, #7
 8008fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	e000e010 	.word	0xe000e010

08008fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff ff2d 	bl	8008e34 <__NVIC_SetPriorityGrouping>
}
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b086      	sub	sp, #24
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	4603      	mov	r3, r0
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	607a      	str	r2, [r7, #4]
 8008fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ff4:	f7ff ff42 	bl	8008e7c <__NVIC_GetPriorityGrouping>
 8008ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	68b9      	ldr	r1, [r7, #8]
 8008ffe:	6978      	ldr	r0, [r7, #20]
 8009000:	f7ff ff90 	bl	8008f24 <NVIC_EncodePriority>
 8009004:	4602      	mov	r2, r0
 8009006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800900a:	4611      	mov	r1, r2
 800900c:	4618      	mov	r0, r3
 800900e:	f7ff ff5f 	bl	8008ed0 <__NVIC_SetPriority>
}
 8009012:	bf00      	nop
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	4603      	mov	r3, r0
 8009022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009028:	4618      	mov	r0, r3
 800902a:	f7ff ff35 	bl	8008e98 <__NVIC_EnableIRQ>
}
 800902e:	bf00      	nop
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b082      	sub	sp, #8
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7ff ffa2 	bl	8008f88 <SysTick_Config>
 8009044:	4603      	mov	r3, r0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b02      	cmp	r3, #2
 8009066:	d005      	beq.n	8009074 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2204      	movs	r2, #4
 800906c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	73fb      	strb	r3, [r7, #15]
 8009072:	e051      	b.n	8009118 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f022 020e 	bic.w	r2, r2, #14
 8009082:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0201 	bic.w	r2, r2, #1
 8009092:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a22      	ldr	r2, [pc, #136]	; (8009124 <HAL_DMA_Abort_IT+0xd4>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d029      	beq.n	80090f2 <HAL_DMA_Abort_IT+0xa2>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a21      	ldr	r2, [pc, #132]	; (8009128 <HAL_DMA_Abort_IT+0xd8>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d022      	beq.n	80090ee <HAL_DMA_Abort_IT+0x9e>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a1f      	ldr	r2, [pc, #124]	; (800912c <HAL_DMA_Abort_IT+0xdc>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d01a      	beq.n	80090e8 <HAL_DMA_Abort_IT+0x98>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a1e      	ldr	r2, [pc, #120]	; (8009130 <HAL_DMA_Abort_IT+0xe0>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d012      	beq.n	80090e2 <HAL_DMA_Abort_IT+0x92>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a1c      	ldr	r2, [pc, #112]	; (8009134 <HAL_DMA_Abort_IT+0xe4>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d00a      	beq.n	80090dc <HAL_DMA_Abort_IT+0x8c>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a1b      	ldr	r2, [pc, #108]	; (8009138 <HAL_DMA_Abort_IT+0xe8>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d102      	bne.n	80090d6 <HAL_DMA_Abort_IT+0x86>
 80090d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80090d4:	e00e      	b.n	80090f4 <HAL_DMA_Abort_IT+0xa4>
 80090d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090da:	e00b      	b.n	80090f4 <HAL_DMA_Abort_IT+0xa4>
 80090dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80090e0:	e008      	b.n	80090f4 <HAL_DMA_Abort_IT+0xa4>
 80090e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090e6:	e005      	b.n	80090f4 <HAL_DMA_Abort_IT+0xa4>
 80090e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090ec:	e002      	b.n	80090f4 <HAL_DMA_Abort_IT+0xa4>
 80090ee:	2310      	movs	r3, #16
 80090f0:	e000      	b.n	80090f4 <HAL_DMA_Abort_IT+0xa4>
 80090f2:	2301      	movs	r3, #1
 80090f4:	4a11      	ldr	r2, [pc, #68]	; (800913c <HAL_DMA_Abort_IT+0xec>)
 80090f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910c:	2b00      	cmp	r3, #0
 800910e:	d003      	beq.n	8009118 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	4798      	blx	r3
    } 
  }
  return status;
 8009118:	7bfb      	ldrb	r3, [r7, #15]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	40020008 	.word	0x40020008
 8009128:	4002001c 	.word	0x4002001c
 800912c:	40020030 	.word	0x40020030
 8009130:	40020044 	.word	0x40020044
 8009134:	40020058 	.word	0x40020058
 8009138:	4002006c 	.word	0x4002006c
 800913c:	40020000 	.word	0x40020000

08009140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009140:	b480      	push	{r7}
 8009142:	b08b      	sub	sp, #44	; 0x2c
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800914a:	2300      	movs	r3, #0
 800914c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800914e:	2300      	movs	r3, #0
 8009150:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009152:	e169      	b.n	8009428 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009154:	2201      	movs	r2, #1
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	fa02 f303 	lsl.w	r3, r2, r3
 800915c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	69fa      	ldr	r2, [r7, #28]
 8009164:	4013      	ands	r3, r2
 8009166:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009168:	69ba      	ldr	r2, [r7, #24]
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	429a      	cmp	r2, r3
 800916e:	f040 8158 	bne.w	8009422 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	4a9a      	ldr	r2, [pc, #616]	; (80093e0 <HAL_GPIO_Init+0x2a0>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d05e      	beq.n	800923a <HAL_GPIO_Init+0xfa>
 800917c:	4a98      	ldr	r2, [pc, #608]	; (80093e0 <HAL_GPIO_Init+0x2a0>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d875      	bhi.n	800926e <HAL_GPIO_Init+0x12e>
 8009182:	4a98      	ldr	r2, [pc, #608]	; (80093e4 <HAL_GPIO_Init+0x2a4>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d058      	beq.n	800923a <HAL_GPIO_Init+0xfa>
 8009188:	4a96      	ldr	r2, [pc, #600]	; (80093e4 <HAL_GPIO_Init+0x2a4>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d86f      	bhi.n	800926e <HAL_GPIO_Init+0x12e>
 800918e:	4a96      	ldr	r2, [pc, #600]	; (80093e8 <HAL_GPIO_Init+0x2a8>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d052      	beq.n	800923a <HAL_GPIO_Init+0xfa>
 8009194:	4a94      	ldr	r2, [pc, #592]	; (80093e8 <HAL_GPIO_Init+0x2a8>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d869      	bhi.n	800926e <HAL_GPIO_Init+0x12e>
 800919a:	4a94      	ldr	r2, [pc, #592]	; (80093ec <HAL_GPIO_Init+0x2ac>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d04c      	beq.n	800923a <HAL_GPIO_Init+0xfa>
 80091a0:	4a92      	ldr	r2, [pc, #584]	; (80093ec <HAL_GPIO_Init+0x2ac>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d863      	bhi.n	800926e <HAL_GPIO_Init+0x12e>
 80091a6:	4a92      	ldr	r2, [pc, #584]	; (80093f0 <HAL_GPIO_Init+0x2b0>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d046      	beq.n	800923a <HAL_GPIO_Init+0xfa>
 80091ac:	4a90      	ldr	r2, [pc, #576]	; (80093f0 <HAL_GPIO_Init+0x2b0>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d85d      	bhi.n	800926e <HAL_GPIO_Init+0x12e>
 80091b2:	2b12      	cmp	r3, #18
 80091b4:	d82a      	bhi.n	800920c <HAL_GPIO_Init+0xcc>
 80091b6:	2b12      	cmp	r3, #18
 80091b8:	d859      	bhi.n	800926e <HAL_GPIO_Init+0x12e>
 80091ba:	a201      	add	r2, pc, #4	; (adr r2, 80091c0 <HAL_GPIO_Init+0x80>)
 80091bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c0:	0800923b 	.word	0x0800923b
 80091c4:	08009215 	.word	0x08009215
 80091c8:	08009227 	.word	0x08009227
 80091cc:	08009269 	.word	0x08009269
 80091d0:	0800926f 	.word	0x0800926f
 80091d4:	0800926f 	.word	0x0800926f
 80091d8:	0800926f 	.word	0x0800926f
 80091dc:	0800926f 	.word	0x0800926f
 80091e0:	0800926f 	.word	0x0800926f
 80091e4:	0800926f 	.word	0x0800926f
 80091e8:	0800926f 	.word	0x0800926f
 80091ec:	0800926f 	.word	0x0800926f
 80091f0:	0800926f 	.word	0x0800926f
 80091f4:	0800926f 	.word	0x0800926f
 80091f8:	0800926f 	.word	0x0800926f
 80091fc:	0800926f 	.word	0x0800926f
 8009200:	0800926f 	.word	0x0800926f
 8009204:	0800921d 	.word	0x0800921d
 8009208:	08009231 	.word	0x08009231
 800920c:	4a79      	ldr	r2, [pc, #484]	; (80093f4 <HAL_GPIO_Init+0x2b4>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d013      	beq.n	800923a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009212:	e02c      	b.n	800926e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	623b      	str	r3, [r7, #32]
          break;
 800921a:	e029      	b.n	8009270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	3304      	adds	r3, #4
 8009222:	623b      	str	r3, [r7, #32]
          break;
 8009224:	e024      	b.n	8009270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	3308      	adds	r3, #8
 800922c:	623b      	str	r3, [r7, #32]
          break;
 800922e:	e01f      	b.n	8009270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	330c      	adds	r3, #12
 8009236:	623b      	str	r3, [r7, #32]
          break;
 8009238:	e01a      	b.n	8009270 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d102      	bne.n	8009248 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009242:	2304      	movs	r3, #4
 8009244:	623b      	str	r3, [r7, #32]
          break;
 8009246:	e013      	b.n	8009270 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d105      	bne.n	800925c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009250:	2308      	movs	r3, #8
 8009252:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	69fa      	ldr	r2, [r7, #28]
 8009258:	611a      	str	r2, [r3, #16]
          break;
 800925a:	e009      	b.n	8009270 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800925c:	2308      	movs	r3, #8
 800925e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	69fa      	ldr	r2, [r7, #28]
 8009264:	615a      	str	r2, [r3, #20]
          break;
 8009266:	e003      	b.n	8009270 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009268:	2300      	movs	r3, #0
 800926a:	623b      	str	r3, [r7, #32]
          break;
 800926c:	e000      	b.n	8009270 <HAL_GPIO_Init+0x130>
          break;
 800926e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	2bff      	cmp	r3, #255	; 0xff
 8009274:	d801      	bhi.n	800927a <HAL_GPIO_Init+0x13a>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	e001      	b.n	800927e <HAL_GPIO_Init+0x13e>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	3304      	adds	r3, #4
 800927e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	2bff      	cmp	r3, #255	; 0xff
 8009284:	d802      	bhi.n	800928c <HAL_GPIO_Init+0x14c>
 8009286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	e002      	b.n	8009292 <HAL_GPIO_Init+0x152>
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	3b08      	subs	r3, #8
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	210f      	movs	r1, #15
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	fa01 f303 	lsl.w	r3, r1, r3
 80092a0:	43db      	mvns	r3, r3
 80092a2:	401a      	ands	r2, r3
 80092a4:	6a39      	ldr	r1, [r7, #32]
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	fa01 f303 	lsl.w	r3, r1, r3
 80092ac:	431a      	orrs	r2, r3
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 80b1 	beq.w	8009422 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80092c0:	4b4d      	ldr	r3, [pc, #308]	; (80093f8 <HAL_GPIO_Init+0x2b8>)
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	4a4c      	ldr	r2, [pc, #304]	; (80093f8 <HAL_GPIO_Init+0x2b8>)
 80092c6:	f043 0301 	orr.w	r3, r3, #1
 80092ca:	6193      	str	r3, [r2, #24]
 80092cc:	4b4a      	ldr	r3, [pc, #296]	; (80093f8 <HAL_GPIO_Init+0x2b8>)
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	60bb      	str	r3, [r7, #8]
 80092d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80092d8:	4a48      	ldr	r2, [pc, #288]	; (80093fc <HAL_GPIO_Init+0x2bc>)
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	089b      	lsrs	r3, r3, #2
 80092de:	3302      	adds	r3, #2
 80092e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	f003 0303 	and.w	r3, r3, #3
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	220f      	movs	r2, #15
 80092f0:	fa02 f303 	lsl.w	r3, r2, r3
 80092f4:	43db      	mvns	r3, r3
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	4013      	ands	r3, r2
 80092fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a40      	ldr	r2, [pc, #256]	; (8009400 <HAL_GPIO_Init+0x2c0>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d013      	beq.n	800932c <HAL_GPIO_Init+0x1ec>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a3f      	ldr	r2, [pc, #252]	; (8009404 <HAL_GPIO_Init+0x2c4>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d00d      	beq.n	8009328 <HAL_GPIO_Init+0x1e8>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a3e      	ldr	r2, [pc, #248]	; (8009408 <HAL_GPIO_Init+0x2c8>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d007      	beq.n	8009324 <HAL_GPIO_Init+0x1e4>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a3d      	ldr	r2, [pc, #244]	; (800940c <HAL_GPIO_Init+0x2cc>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d101      	bne.n	8009320 <HAL_GPIO_Init+0x1e0>
 800931c:	2303      	movs	r3, #3
 800931e:	e006      	b.n	800932e <HAL_GPIO_Init+0x1ee>
 8009320:	2304      	movs	r3, #4
 8009322:	e004      	b.n	800932e <HAL_GPIO_Init+0x1ee>
 8009324:	2302      	movs	r3, #2
 8009326:	e002      	b.n	800932e <HAL_GPIO_Init+0x1ee>
 8009328:	2301      	movs	r3, #1
 800932a:	e000      	b.n	800932e <HAL_GPIO_Init+0x1ee>
 800932c:	2300      	movs	r3, #0
 800932e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009330:	f002 0203 	and.w	r2, r2, #3
 8009334:	0092      	lsls	r2, r2, #2
 8009336:	4093      	lsls	r3, r2
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	4313      	orrs	r3, r2
 800933c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800933e:	492f      	ldr	r1, [pc, #188]	; (80093fc <HAL_GPIO_Init+0x2bc>)
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	089b      	lsrs	r3, r3, #2
 8009344:	3302      	adds	r3, #2
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009354:	2b00      	cmp	r3, #0
 8009356:	d006      	beq.n	8009366 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009358:	4b2d      	ldr	r3, [pc, #180]	; (8009410 <HAL_GPIO_Init+0x2d0>)
 800935a:	689a      	ldr	r2, [r3, #8]
 800935c:	492c      	ldr	r1, [pc, #176]	; (8009410 <HAL_GPIO_Init+0x2d0>)
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	4313      	orrs	r3, r2
 8009362:	608b      	str	r3, [r1, #8]
 8009364:	e006      	b.n	8009374 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009366:	4b2a      	ldr	r3, [pc, #168]	; (8009410 <HAL_GPIO_Init+0x2d0>)
 8009368:	689a      	ldr	r2, [r3, #8]
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	43db      	mvns	r3, r3
 800936e:	4928      	ldr	r1, [pc, #160]	; (8009410 <HAL_GPIO_Init+0x2d0>)
 8009370:	4013      	ands	r3, r2
 8009372:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d006      	beq.n	800938e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009380:	4b23      	ldr	r3, [pc, #140]	; (8009410 <HAL_GPIO_Init+0x2d0>)
 8009382:	68da      	ldr	r2, [r3, #12]
 8009384:	4922      	ldr	r1, [pc, #136]	; (8009410 <HAL_GPIO_Init+0x2d0>)
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	4313      	orrs	r3, r2
 800938a:	60cb      	str	r3, [r1, #12]
 800938c:	e006      	b.n	800939c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800938e:	4b20      	ldr	r3, [pc, #128]	; (8009410 <HAL_GPIO_Init+0x2d0>)
 8009390:	68da      	ldr	r2, [r3, #12]
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	43db      	mvns	r3, r3
 8009396:	491e      	ldr	r1, [pc, #120]	; (8009410 <HAL_GPIO_Init+0x2d0>)
 8009398:	4013      	ands	r3, r2
 800939a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d006      	beq.n	80093b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80093a8:	4b19      	ldr	r3, [pc, #100]	; (8009410 <HAL_GPIO_Init+0x2d0>)
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	4918      	ldr	r1, [pc, #96]	; (8009410 <HAL_GPIO_Init+0x2d0>)
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	604b      	str	r3, [r1, #4]
 80093b4:	e006      	b.n	80093c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80093b6:	4b16      	ldr	r3, [pc, #88]	; (8009410 <HAL_GPIO_Init+0x2d0>)
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	43db      	mvns	r3, r3
 80093be:	4914      	ldr	r1, [pc, #80]	; (8009410 <HAL_GPIO_Init+0x2d0>)
 80093c0:	4013      	ands	r3, r2
 80093c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d021      	beq.n	8009414 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80093d0:	4b0f      	ldr	r3, [pc, #60]	; (8009410 <HAL_GPIO_Init+0x2d0>)
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	490e      	ldr	r1, [pc, #56]	; (8009410 <HAL_GPIO_Init+0x2d0>)
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	4313      	orrs	r3, r2
 80093da:	600b      	str	r3, [r1, #0]
 80093dc:	e021      	b.n	8009422 <HAL_GPIO_Init+0x2e2>
 80093de:	bf00      	nop
 80093e0:	10320000 	.word	0x10320000
 80093e4:	10310000 	.word	0x10310000
 80093e8:	10220000 	.word	0x10220000
 80093ec:	10210000 	.word	0x10210000
 80093f0:	10120000 	.word	0x10120000
 80093f4:	10110000 	.word	0x10110000
 80093f8:	40021000 	.word	0x40021000
 80093fc:	40010000 	.word	0x40010000
 8009400:	40010800 	.word	0x40010800
 8009404:	40010c00 	.word	0x40010c00
 8009408:	40011000 	.word	0x40011000
 800940c:	40011400 	.word	0x40011400
 8009410:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009414:	4b0b      	ldr	r3, [pc, #44]	; (8009444 <HAL_GPIO_Init+0x304>)
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	43db      	mvns	r3, r3
 800941c:	4909      	ldr	r1, [pc, #36]	; (8009444 <HAL_GPIO_Init+0x304>)
 800941e:	4013      	ands	r3, r2
 8009420:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009424:	3301      	adds	r3, #1
 8009426:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	fa22 f303 	lsr.w	r3, r2, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	f47f ae8e 	bne.w	8009154 <HAL_GPIO_Init+0x14>
  }
}
 8009438:	bf00      	nop
 800943a:	bf00      	nop
 800943c:	372c      	adds	r7, #44	; 0x2c
 800943e:	46bd      	mov	sp, r7
 8009440:	bc80      	pop	{r7}
 8009442:	4770      	bx	lr
 8009444:	40010400 	.word	0x40010400

08009448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	807b      	strh	r3, [r7, #2]
 8009454:	4613      	mov	r3, r2
 8009456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009458:	787b      	ldrb	r3, [r7, #1]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d003      	beq.n	8009466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800945e:	887a      	ldrh	r2, [r7, #2]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009464:	e003      	b.n	800946e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009466:	887b      	ldrh	r3, [r7, #2]
 8009468:	041a      	lsls	r2, r3, #16
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	611a      	str	r2, [r3, #16]
}
 800946e:	bf00      	nop
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	bc80      	pop	{r7}
 8009476:	4770      	bx	lr

08009478 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d101      	bne.n	800948a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e0e8      	b.n	800965c <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	d106      	bne.n	80094a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff face 	bl	8008a40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2203      	movs	r2, #3
 80094a8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f003 fae7 	bl	800ca8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6818      	ldr	r0, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3304      	adds	r3, #4
 80094c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094c6:	f003 fad3 	bl	800ca70 <USB_CoreInit>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d005      	beq.n	80094dc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2202      	movs	r2, #2
 80094d4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e0bf      	b.n	800965c <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2100      	movs	r1, #0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f003 faeb 	bl	800cabe <USB_SetCurrentMode>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d005      	beq.n	80094fa <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2202      	movs	r2, #2
 80094f2:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e0b0      	b.n	800965c <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094fa:	2300      	movs	r3, #0
 80094fc:	73fb      	strb	r3, [r7, #15]
 80094fe:	e03e      	b.n	800957e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009500:	7bfa      	ldrb	r2, [r7, #15]
 8009502:	6879      	ldr	r1, [r7, #4]
 8009504:	4613      	mov	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	00db      	lsls	r3, r3, #3
 800950c:	440b      	add	r3, r1
 800950e:	3311      	adds	r3, #17
 8009510:	2201      	movs	r2, #1
 8009512:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009514:	7bfa      	ldrb	r2, [r7, #15]
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	4613      	mov	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	00db      	lsls	r3, r3, #3
 8009520:	440b      	add	r3, r1
 8009522:	3310      	adds	r3, #16
 8009524:	7bfa      	ldrb	r2, [r7, #15]
 8009526:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009528:	7bfa      	ldrb	r2, [r7, #15]
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	4613      	mov	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	00db      	lsls	r3, r3, #3
 8009534:	440b      	add	r3, r1
 8009536:	3313      	adds	r3, #19
 8009538:	2200      	movs	r2, #0
 800953a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800953c:	7bfa      	ldrb	r2, [r7, #15]
 800953e:	6879      	ldr	r1, [r7, #4]
 8009540:	4613      	mov	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	4413      	add	r3, r2
 8009546:	00db      	lsls	r3, r3, #3
 8009548:	440b      	add	r3, r1
 800954a:	3320      	adds	r3, #32
 800954c:	2200      	movs	r2, #0
 800954e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009550:	7bfa      	ldrb	r2, [r7, #15]
 8009552:	6879      	ldr	r1, [r7, #4]
 8009554:	4613      	mov	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	440b      	add	r3, r1
 800955e:	3324      	adds	r3, #36	; 0x24
 8009560:	2200      	movs	r2, #0
 8009562:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	6879      	ldr	r1, [r7, #4]
 8009568:	1c5a      	adds	r2, r3, #1
 800956a:	4613      	mov	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	440b      	add	r3, r1
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	3301      	adds	r3, #1
 800957c:	73fb      	strb	r3, [r7, #15]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	791b      	ldrb	r3, [r3, #4]
 8009582:	7bfa      	ldrb	r2, [r7, #15]
 8009584:	429a      	cmp	r2, r3
 8009586:	d3bb      	bcc.n	8009500 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009588:	2300      	movs	r3, #0
 800958a:	73fb      	strb	r3, [r7, #15]
 800958c:	e044      	b.n	8009618 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800958e:	7bfa      	ldrb	r2, [r7, #15]
 8009590:	6879      	ldr	r1, [r7, #4]
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	00db      	lsls	r3, r3, #3
 800959a:	440b      	add	r3, r1
 800959c:	f203 1351 	addw	r3, r3, #337	; 0x151
 80095a0:	2200      	movs	r2, #0
 80095a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80095a4:	7bfa      	ldrb	r2, [r7, #15]
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	4613      	mov	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4413      	add	r3, r2
 80095ae:	00db      	lsls	r3, r3, #3
 80095b0:	440b      	add	r3, r1
 80095b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095b6:	7bfa      	ldrb	r2, [r7, #15]
 80095b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80095ba:	7bfa      	ldrb	r2, [r7, #15]
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	00db      	lsls	r3, r3, #3
 80095c6:	440b      	add	r3, r1
 80095c8:	f203 1353 	addw	r3, r3, #339	; 0x153
 80095cc:	2200      	movs	r2, #0
 80095ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80095d0:	7bfa      	ldrb	r2, [r7, #15]
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	440b      	add	r3, r1
 80095de:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80095e6:	7bfa      	ldrb	r2, [r7, #15]
 80095e8:	6879      	ldr	r1, [r7, #4]
 80095ea:	4613      	mov	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	00db      	lsls	r3, r3, #3
 80095f2:	440b      	add	r3, r1
 80095f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095f8:	2200      	movs	r2, #0
 80095fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80095fc:	7bfa      	ldrb	r2, [r7, #15]
 80095fe:	6879      	ldr	r1, [r7, #4]
 8009600:	4613      	mov	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	440b      	add	r3, r1
 800960a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800960e:	2200      	movs	r2, #0
 8009610:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	3301      	adds	r3, #1
 8009616:	73fb      	strb	r3, [r7, #15]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	791b      	ldrb	r3, [r3, #4]
 800961c:	7bfa      	ldrb	r2, [r7, #15]
 800961e:	429a      	cmp	r2, r3
 8009620:	d3b5      	bcc.n	800958e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	3304      	adds	r3, #4
 800962a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800962c:	f003 fa53 	bl	800cad6 <USB_DevInit>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d005      	beq.n	8009642 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2202      	movs	r2, #2
 800963a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e00c      	b.n	800965c <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4618      	mov	r0, r3
 8009656:	f004 fbba 	bl	800ddce <USB_DevDisconnect>

  return HAL_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b088      	sub	sp, #32
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4618      	mov	r0, r3
 8009672:	f004 fbb6 	bl	800dde2 <USB_ReadInterrupts>
 8009676:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f987 	bl	8009996 <PCD_EP_ISR_Handler>

    return;
 8009688:	e11b      	b.n	80098c2 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009690:	2b00      	cmp	r3, #0
 8009692:	d013      	beq.n	80096bc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800969c:	b29a      	uxth	r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096a6:	b292      	uxth	r2, r2
 80096a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f933 	bl	8009918 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80096b2:	2100      	movs	r1, #0
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f94a 	bl	800994e <HAL_PCD_SetAddress>

    return;
 80096ba:	e102      	b.n	80098c2 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00c      	beq.n	80096e0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80096d8:	b292      	uxth	r2, r2
 80096da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80096de:	e0f0      	b.n	80098c2 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00c      	beq.n	8009704 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096fc:	b292      	uxth	r2, r2
 80096fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009702:	e0de      	b.n	80098c2 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d027      	beq.n	800975e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009716:	b29a      	uxth	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f022 0204 	bic.w	r2, r2, #4
 8009720:	b292      	uxth	r2, r2
 8009722:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800972e:	b29a      	uxth	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f022 0208 	bic.w	r2, r2, #8
 8009738:	b292      	uxth	r2, r2
 800973a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f8fc 	bl	800993c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800974c:	b29a      	uxth	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009756:	b292      	uxth	r2, r2
 8009758:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800975c:	e0b1      	b.n	80098c2 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 8085 	beq.w	8009874 <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800976a:	2300      	movs	r3, #0
 800976c:	77fb      	strb	r3, [r7, #31]
 800976e:	e011      	b.n	8009794 <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	461a      	mov	r2, r3
 8009776:	7ffb      	ldrb	r3, [r7, #31]
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	441a      	add	r2, r3
 800977c:	7ffb      	ldrb	r3, [r7, #31]
 800977e:	8812      	ldrh	r2, [r2, #0]
 8009780:	b292      	uxth	r2, r2
 8009782:	005b      	lsls	r3, r3, #1
 8009784:	f107 0120 	add.w	r1, r7, #32
 8009788:	440b      	add	r3, r1
 800978a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800978e:	7ffb      	ldrb	r3, [r7, #31]
 8009790:	3301      	adds	r3, #1
 8009792:	77fb      	strb	r3, [r7, #31]
 8009794:	7ffb      	ldrb	r3, [r7, #31]
 8009796:	2b07      	cmp	r3, #7
 8009798:	d9ea      	bls.n	8009770 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f042 0201 	orr.w	r2, r2, #1
 80097ac:	b292      	uxth	r2, r2
 80097ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f022 0201 	bic.w	r2, r2, #1
 80097c4:	b292      	uxth	r2, r2
 80097c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80097ca:	bf00      	nop
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0f6      	beq.n	80097cc <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097f0:	b292      	uxth	r2, r2
 80097f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80097f6:	2300      	movs	r3, #0
 80097f8:	77fb      	strb	r3, [r7, #31]
 80097fa:	e010      	b.n	800981e <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80097fc:	7ffb      	ldrb	r3, [r7, #31]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	6812      	ldr	r2, [r2, #0]
 8009802:	4611      	mov	r1, r2
 8009804:	7ffa      	ldrb	r2, [r7, #31]
 8009806:	0092      	lsls	r2, r2, #2
 8009808:	440a      	add	r2, r1
 800980a:	005b      	lsls	r3, r3, #1
 800980c:	f107 0120 	add.w	r1, r7, #32
 8009810:	440b      	add	r3, r1
 8009812:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8009816:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8009818:	7ffb      	ldrb	r3, [r7, #31]
 800981a:	3301      	adds	r3, #1
 800981c:	77fb      	strb	r3, [r7, #31]
 800981e:	7ffb      	ldrb	r3, [r7, #31]
 8009820:	2b07      	cmp	r3, #7
 8009822:	d9eb      	bls.n	80097fc <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800982c:	b29a      	uxth	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f042 0208 	orr.w	r2, r2, #8
 8009836:	b292      	uxth	r2, r2
 8009838:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009844:	b29a      	uxth	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800984e:	b292      	uxth	r2, r2
 8009850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800985c:	b29a      	uxth	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f042 0204 	orr.w	r2, r2, #4
 8009866:	b292      	uxth	r2, r2
 8009868:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f85c 	bl	800992a <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009872:	e026      	b.n	80098c2 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00f      	beq.n	800989e <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009886:	b29a      	uxth	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009890:	b292      	uxth	r2, r2
 8009892:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f835 	bl	8009906 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800989c:	e011      	b.n	80098c2 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00c      	beq.n	80098c2 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098ba:	b292      	uxth	r2, r2
 80098bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80098c0:	bf00      	nop
  }
}
 80098c2:	3720      	adds	r7, #32
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	460b      	mov	r3, r1
 80098d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	bc80      	pop	{r7}
 80098dc:	4770      	bx	lr

080098de <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80098de:	b480      	push	{r7}
 80098e0:	b083      	sub	sp, #12
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	460b      	mov	r3, r1
 80098e8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80098ea:	bf00      	nop
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bc80      	pop	{r7}
 80098f2:	4770      	bx	lr

080098f4 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	bc80      	pop	{r7}
 8009904:	4770      	bx	lr

08009906 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8009906:	b480      	push	{r7}
 8009908:	b083      	sub	sp, #12
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800990e:	bf00      	nop
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	bc80      	pop	{r7}
 8009916:	4770      	bx	lr

08009918 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	bc80      	pop	{r7}
 8009928:	4770      	bx	lr

0800992a <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800992a:	b480      	push	{r7}
 800992c:	b083      	sub	sp, #12
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8009932:	bf00      	nop
 8009934:	370c      	adds	r7, #12
 8009936:	46bd      	mov	sp, r7
 8009938:	bc80      	pop	{r7}
 800993a:	4770      	bx	lr

0800993c <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	bc80      	pop	{r7}
 800994c:	4770      	bx	lr

0800994e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b082      	sub	sp, #8
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
 8009956:	460b      	mov	r3, r1
 8009958:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009960:	2b01      	cmp	r3, #1
 8009962:	d101      	bne.n	8009968 <HAL_PCD_SetAddress+0x1a>
 8009964:	2302      	movs	r3, #2
 8009966:	e012      	b.n	800998e <HAL_PCD_SetAddress+0x40>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	78fa      	ldrb	r2, [r7, #3]
 8009974:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	78fa      	ldrb	r2, [r7, #3]
 800997c:	4611      	mov	r1, r2
 800997e:	4618      	mov	r0, r3
 8009980:	f004 fa12 	bl	800dda8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b096      	sub	sp, #88	; 0x58
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800999e:	e3bc      	b.n	800a11a <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80099a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80099ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	f003 030f 	and.w	r3, r3, #15
 80099b6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80099ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f040 8176 	bne.w	8009cb0 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80099c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80099c8:	f003 0310 	and.w	r3, r3, #16
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d14f      	bne.n	8009a70 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80099dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e0:	81fb      	strh	r3, [r7, #14]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	89fb      	ldrh	r3, [r7, #14]
 80099e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	3310      	adds	r3, #16
 80099f8:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	461a      	mov	r2, r3
 8009a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	4413      	add	r3, r2
 8009a0e:	3302      	adds	r3, #2
 8009a10:	005b      	lsls	r3, r3, #1
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	6812      	ldr	r2, [r2, #0]
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a1c:	881b      	ldrh	r3, [r3, #0]
 8009a1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a24:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a28:	695a      	ldr	r2, [r3, #20]
 8009a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	441a      	add	r2, r3
 8009a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a32:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009a34:	2100      	movs	r1, #0
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7ff ff51 	bl	80098de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	7b5b      	ldrb	r3, [r3, #13]
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 8369 	beq.w	800a11a <PCD_EP_ISR_Handler+0x784>
 8009a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f040 8364 	bne.w	800a11a <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	7b5b      	ldrb	r3, [r3, #13]
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	b292      	uxth	r2, r2
 8009a64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	735a      	strb	r2, [r3, #13]
 8009a6e:	e354      	b.n	800a11a <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a76:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009a82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d034      	beq.n	8009af8 <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	461a      	mov	r2, r3
 8009a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	00db      	lsls	r3, r3, #3
 8009aa0:	4413      	add	r3, r2
 8009aa2:	3306      	adds	r3, #6
 8009aa4:	005b      	lsls	r3, r3, #1
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	6812      	ldr	r2, [r2, #0]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ab0:	881b      	ldrh	r3, [r3, #0]
 8009ab2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ab8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6818      	ldr	r0, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8009ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ac6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	f004 f9dc 	bl	800de8a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	881b      	ldrh	r3, [r3, #0]
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009ade:	4013      	ands	r3, r2
 8009ae0:	823b      	strh	r3, [r7, #16]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	8a3a      	ldrh	r2, [r7, #16]
 8009ae8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009aec:	b292      	uxth	r2, r2
 8009aee:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f7ff feff 	bl	80098f4 <HAL_PCD_SetupStageCallback>
 8009af6:	e310      	b.n	800a11a <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009af8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f280 830c 	bge.w	800a11a <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	881b      	ldrh	r3, [r3, #0]
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009b0e:	4013      	ands	r3, r2
 8009b10:	83fb      	strh	r3, [r7, #30]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	8bfa      	ldrh	r2, [r7, #30]
 8009b18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009b1c:	b292      	uxth	r2, r2
 8009b1e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	00db      	lsls	r3, r3, #3
 8009b32:	4413      	add	r3, r2
 8009b34:	3306      	adds	r3, #6
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	6812      	ldr	r2, [r2, #0]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b42:	881b      	ldrh	r3, [r3, #0]
 8009b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b4a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d019      	beq.n	8009b88 <PCD_EP_ISR_Handler+0x1f2>
 8009b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d015      	beq.n	8009b88 <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6818      	ldr	r0, [r3, #0]
 8009b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b62:	6959      	ldr	r1, [r3, #20]
 8009b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b66:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b6a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	f004 f98c 	bl	800de8a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b74:	695a      	ldr	r2, [r3, #20]
 8009b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b78:	69db      	ldr	r3, [r3, #28]
 8009b7a:	441a      	add	r2, r3
 8009b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b7e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009b80:	2100      	movs	r1, #0
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff fea0 	bl	80098c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	881b      	ldrh	r3, [r3, #0]
 8009b8e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009b92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f040 82bd 	bne.w	800a11a <PCD_EP_ISR_Handler+0x784>
 8009ba0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009ba4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009ba8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009bac:	f000 82b5 	beq.w	800a11a <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	61bb      	str	r3, [r7, #24]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	61bb      	str	r3, [r7, #24]
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	881b      	ldrh	r3, [r3, #0]
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	801a      	strh	r2, [r3, #0]
 8009be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	2b3e      	cmp	r3, #62	; 0x3e
 8009be6:	d91d      	bls.n	8009c24 <PCD_EP_ISR_Handler+0x28e>
 8009be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	095b      	lsrs	r3, r3, #5
 8009bee:	647b      	str	r3, [r7, #68]	; 0x44
 8009bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	f003 031f 	and.w	r3, r3, #31
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d102      	bne.n	8009c02 <PCD_EP_ISR_Handler+0x26c>
 8009bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	647b      	str	r3, [r7, #68]	; 0x44
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	029b      	lsls	r3, r3, #10
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	4313      	orrs	r3, r2
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	801a      	strh	r2, [r3, #0]
 8009c22:	e026      	b.n	8009c72 <PCD_EP_ISR_Handler+0x2dc>
 8009c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10a      	bne.n	8009c42 <PCD_EP_ISR_Handler+0x2ac>
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	881b      	ldrh	r3, [r3, #0]
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	801a      	strh	r2, [r3, #0]
 8009c40:	e017      	b.n	8009c72 <PCD_EP_ISR_Handler+0x2dc>
 8009c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	085b      	lsrs	r3, r3, #1
 8009c48:	647b      	str	r3, [r7, #68]	; 0x44
 8009c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d002      	beq.n	8009c5c <PCD_EP_ISR_Handler+0x2c6>
 8009c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c58:	3301      	adds	r3, #1
 8009c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	029b      	lsls	r3, r3, #10
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	881b      	ldrh	r3, [r3, #0]
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c82:	827b      	strh	r3, [r7, #18]
 8009c84:	8a7b      	ldrh	r3, [r7, #18]
 8009c86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c8a:	827b      	strh	r3, [r7, #18]
 8009c8c:	8a7b      	ldrh	r3, [r7, #18]
 8009c8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c92:	827b      	strh	r3, [r7, #18]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	8a7b      	ldrh	r3, [r7, #18]
 8009c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	8013      	strh	r3, [r2, #0]
 8009cae:	e234      	b.n	800a11a <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009cc4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f280 80fc 	bge.w	8009ec6 <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	881b      	ldrh	r3, [r3, #0]
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8009cfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d00:	b292      	uxth	r2, r2
 8009d02:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009d04:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8009d08:	4613      	mov	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	00db      	lsls	r3, r3, #3
 8009d10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	4413      	add	r3, r2
 8009d18:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8009d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d1c:	7b1b      	ldrb	r3, [r3, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d125      	bne.n	8009d6e <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	00db      	lsls	r3, r3, #3
 8009d34:	4413      	add	r3, r2
 8009d36:	3306      	adds	r3, #6
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	6812      	ldr	r2, [r2, #0]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d4a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8009d4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 8092 	beq.w	8009e7c <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6818      	ldr	r0, [r3, #0]
 8009d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d5e:	6959      	ldr	r1, [r3, #20]
 8009d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d62:	88da      	ldrh	r2, [r3, #6]
 8009d64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009d68:	f004 f88f 	bl	800de8a <USB_ReadPMA>
 8009d6c:	e086      	b.n	8009e7c <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d70:	78db      	ldrb	r3, [r3, #3]
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d10a      	bne.n	8009d8c <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009d76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f9d9 	bl	800a136 <HAL_PCD_EP_DB_Receive>
 8009d84:	4603      	mov	r3, r0
 8009d86:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8009d8a:	e077      	b.n	8009e7c <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	461a      	mov	r2, r3
 8009d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009da6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	441a      	add	r2, r3
 8009db8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d024      	beq.n	8009e34 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	461a      	mov	r2, r3
 8009df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	4413      	add	r3, r2
 8009dfe:	3302      	adds	r3, #2
 8009e00:	005b      	lsls	r3, r3, #1
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	6812      	ldr	r2, [r2, #0]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e0c:	881b      	ldrh	r3, [r3, #0]
 8009e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e12:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8009e16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d02e      	beq.n	8009e7c <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e24:	6959      	ldr	r1, [r3, #20]
 8009e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e28:	891a      	ldrh	r2, [r3, #8]
 8009e2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009e2e:	f004 f82c 	bl	800de8a <USB_ReadPMA>
 8009e32:	e023      	b.n	8009e7c <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	461a      	mov	r2, r3
 8009e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	00db      	lsls	r3, r3, #3
 8009e46:	4413      	add	r3, r2
 8009e48:	3306      	adds	r3, #6
 8009e4a:	005b      	lsls	r3, r3, #1
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	6812      	ldr	r2, [r2, #0]
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e56:	881b      	ldrh	r3, [r3, #0]
 8009e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e5c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8009e60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d009      	beq.n	8009e7c <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6818      	ldr	r0, [r3, #0]
 8009e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e6e:	6959      	ldr	r1, [r3, #20]
 8009e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e72:	895a      	ldrh	r2, [r3, #10]
 8009e74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009e78:	f004 f807 	bl	800de8a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e7e:	69da      	ldr	r2, [r3, #28]
 8009e80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009e84:	441a      	add	r2, r3
 8009e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e88:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e8c:	695a      	ldr	r2, [r3, #20]
 8009e8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009e92:	441a      	add	r2, r3
 8009e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e96:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d005      	beq.n	8009eac <PCD_EP_ISR_Handler+0x516>
 8009ea0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8009ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d206      	bcs.n	8009eba <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7ff fd08 	bl	80098c8 <HAL_PCD_DataOutStageCallback>
 8009eb8:	e005      	b.n	8009ec6 <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f002 fe25 	bl	800cb10 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009ec6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f000 8123 	beq.w	800a11a <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8009ed4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8009ed8:	4613      	mov	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	00db      	lsls	r3, r3, #3
 8009ee0:	3310      	adds	r3, #16
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	461a      	mov	r2, r3
 8009eee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4413      	add	r3, r2
 8009ef6:	881b      	ldrh	r3, [r3, #0]
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	441a      	add	r2, r3
 8009f14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f26:	78db      	ldrb	r3, [r3, #3]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	f040 80a2 	bne.w	800a072 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 8009f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f30:	2200      	movs	r2, #0
 8009f32:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f36:	7b1b      	ldrb	r3, [r3, #12]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f000 8093 	beq.w	800a064 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009f3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d046      	beq.n	8009fd8 <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f4c:	785b      	ldrb	r3, [r3, #1]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d126      	bne.n	8009fa0 <PCD_EP_ISR_Handler+0x60a>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	627b      	str	r3, [r7, #36]	; 0x24
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	461a      	mov	r2, r3
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	4413      	add	r3, r2
 8009f68:	627b      	str	r3, [r7, #36]	; 0x24
 8009f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	011a      	lsls	r2, r3, #4
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	4413      	add	r3, r2
 8009f74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f78:	623b      	str	r3, [r7, #32]
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
 8009f7c:	881b      	ldrh	r3, [r3, #0]
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	801a      	strh	r2, [r3, #0]
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	801a      	strh	r2, [r3, #0]
 8009f9e:	e061      	b.n	800a064 <PCD_EP_ISR_Handler+0x6ce>
 8009fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fa2:	785b      	ldrb	r3, [r3, #1]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d15d      	bne.n	800a064 <PCD_EP_ISR_Handler+0x6ce>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	461a      	mov	r2, r3
 8009fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbc:	4413      	add	r3, r2
 8009fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	011a      	lsls	r2, r3, #4
 8009fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc8:	4413      	add	r3, r2
 8009fca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	801a      	strh	r2, [r3, #0]
 8009fd6:	e045      	b.n	800a064 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fe0:	785b      	ldrb	r3, [r3, #1]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d126      	bne.n	800a034 <PCD_EP_ISR_Handler+0x69e>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	637b      	str	r3, [r7, #52]	; 0x34
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffa:	4413      	add	r3, r2
 8009ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8009ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	011a      	lsls	r2, r3, #4
 800a004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a006:	4413      	add	r3, r2
 800a008:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a00c:	633b      	str	r3, [r7, #48]	; 0x30
 800a00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	b29b      	uxth	r3, r3
 800a014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a018:	b29a      	uxth	r2, r3
 800a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01c:	801a      	strh	r2, [r3, #0]
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	881b      	ldrh	r3, [r3, #0]
 800a022:	b29b      	uxth	r3, r3
 800a024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	801a      	strh	r2, [r3, #0]
 800a032:	e017      	b.n	800a064 <PCD_EP_ISR_Handler+0x6ce>
 800a034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a036:	785b      	ldrb	r3, [r3, #1]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d113      	bne.n	800a064 <PCD_EP_ISR_Handler+0x6ce>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a044:	b29b      	uxth	r3, r3
 800a046:	461a      	mov	r2, r3
 800a048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a04a:	4413      	add	r3, r2
 800a04c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a04e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	011a      	lsls	r2, r3, #4
 800a054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a056:	4413      	add	r3, r2
 800a058:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a05c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a060:	2200      	movs	r2, #0
 800a062:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	4619      	mov	r1, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7ff fc37 	bl	80098de <HAL_PCD_DataInStageCallback>
 800a070:	e053      	b.n	800a11a <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800a072:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d146      	bne.n	800a10c <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a086:	b29b      	uxth	r3, r3
 800a088:	461a      	mov	r2, r3
 800a08a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	00db      	lsls	r3, r3, #3
 800a090:	4413      	add	r3, r2
 800a092:	3302      	adds	r3, #2
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	6812      	ldr	r2, [r2, #0]
 800a09a:	4413      	add	r3, r2
 800a09c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800a0aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0ac:	699a      	ldr	r2, [r3, #24]
 800a0ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d907      	bls.n	800a0c6 <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 800a0b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0b8:	699a      	ldr	r2, [r3, #24]
 800a0ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a0be:	1ad2      	subs	r2, r2, r3
 800a0c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0c2:	619a      	str	r2, [r3, #24]
 800a0c4:	e002      	b.n	800a0cc <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 800a0c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800a0cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d106      	bne.n	800a0e2 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a0d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7ff fbff 	bl	80098de <HAL_PCD_DataInStageCallback>
 800a0e0:	e01b      	b.n	800a11a <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a0e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0e4:	695a      	ldr	r2, [r3, #20]
 800a0e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a0ea:	441a      	add	r2, r3
 800a0ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0ee:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a0f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0f2:	69da      	ldr	r2, [r3, #28]
 800a0f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a0f8:	441a      	add	r2, r3
 800a0fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0fc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a104:	4618      	mov	r0, r3
 800a106:	f002 fd03 	bl	800cb10 <USB_EPStartXfer>
 800a10a:	e006      	b.n	800a11a <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a10c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a110:	461a      	mov	r2, r3
 800a112:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f91b 	bl	800a350 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a122:	b29b      	uxth	r3, r3
 800a124:	b21b      	sxth	r3, r3
 800a126:	2b00      	cmp	r3, #0
 800a128:	f6ff ac3a 	blt.w	80099a0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3758      	adds	r7, #88	; 0x58
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b088      	sub	sp, #32
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	60f8      	str	r0, [r7, #12]
 800a13e:	60b9      	str	r1, [r7, #8]
 800a140:	4613      	mov	r3, r2
 800a142:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a144:	88fb      	ldrh	r3, [r7, #6]
 800a146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d07e      	beq.n	800a24c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a156:	b29b      	uxth	r3, r3
 800a158:	461a      	mov	r2, r3
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	4413      	add	r3, r2
 800a162:	3302      	adds	r3, #2
 800a164:	005b      	lsls	r3, r3, #1
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	6812      	ldr	r2, [r2, #0]
 800a16a:	4413      	add	r3, r2
 800a16c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a176:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	699a      	ldr	r2, [r3, #24]
 800a17c:	8b7b      	ldrh	r3, [r7, #26]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d306      	bcc.n	800a190 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	699a      	ldr	r2, [r3, #24]
 800a186:	8b7b      	ldrh	r3, [r7, #26]
 800a188:	1ad2      	subs	r2, r2, r3
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	619a      	str	r2, [r3, #24]
 800a18e:	e002      	b.n	800a196 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	2200      	movs	r2, #0
 800a194:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d123      	bne.n	800a1e6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	4413      	add	r3, r2
 800a1ac:	881b      	ldrh	r3, [r3, #0]
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b8:	833b      	strh	r3, [r7, #24]
 800a1ba:	8b3b      	ldrh	r3, [r7, #24]
 800a1bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a1c0:	833b      	strh	r3, [r7, #24]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	441a      	add	r2, r3
 800a1d0:	8b3b      	ldrh	r3, [r7, #24]
 800a1d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a1e6:	88fb      	ldrh	r3, [r7, #6]
 800a1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d01f      	beq.n	800a230 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4413      	add	r3, r2
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	b29b      	uxth	r3, r3
 800a202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a20a:	82fb      	strh	r3, [r7, #22]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	461a      	mov	r2, r3
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	441a      	add	r2, r3
 800a21a:	8afb      	ldrh	r3, [r7, #22]
 800a21c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a228:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a230:	8b7b      	ldrh	r3, [r7, #26]
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 8087 	beq.w	800a346 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6818      	ldr	r0, [r3, #0]
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	6959      	ldr	r1, [r3, #20]
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	891a      	ldrh	r2, [r3, #8]
 800a244:	8b7b      	ldrh	r3, [r7, #26]
 800a246:	f003 fe20 	bl	800de8a <USB_ReadPMA>
 800a24a:	e07c      	b.n	800a346 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a254:	b29b      	uxth	r3, r3
 800a256:	461a      	mov	r2, r3
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	00db      	lsls	r3, r3, #3
 800a25e:	4413      	add	r3, r2
 800a260:	3306      	adds	r3, #6
 800a262:	005b      	lsls	r3, r3, #1
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	6812      	ldr	r2, [r2, #0]
 800a268:	4413      	add	r3, r2
 800a26a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a274:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	699a      	ldr	r2, [r3, #24]
 800a27a:	8b7b      	ldrh	r3, [r7, #26]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d306      	bcc.n	800a28e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	699a      	ldr	r2, [r3, #24]
 800a284:	8b7b      	ldrh	r3, [r7, #26]
 800a286:	1ad2      	subs	r2, r2, r3
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	619a      	str	r2, [r3, #24]
 800a28c:	e002      	b.n	800a294 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2200      	movs	r2, #0
 800a292:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d123      	bne.n	800a2e4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2b6:	83fb      	strh	r3, [r7, #30]
 800a2b8:	8bfb      	ldrh	r3, [r7, #30]
 800a2ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a2be:	83fb      	strh	r3, [r7, #30]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	441a      	add	r2, r3
 800a2ce:	8bfb      	ldrh	r3, [r7, #30]
 800a2d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a2e4:	88fb      	ldrh	r3, [r7, #6]
 800a2e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d11f      	bne.n	800a32e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	4413      	add	r3, r2
 800a2fc:	881b      	ldrh	r3, [r3, #0]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a308:	83bb      	strh	r3, [r7, #28]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	461a      	mov	r2, r3
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	441a      	add	r2, r3
 800a318:	8bbb      	ldrh	r3, [r7, #28]
 800a31a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a31e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a326:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a32e:	8b7b      	ldrh	r3, [r7, #26]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d008      	beq.n	800a346 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6818      	ldr	r0, [r3, #0]
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	6959      	ldr	r1, [r3, #20]
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	895a      	ldrh	r2, [r3, #10]
 800a340:	8b7b      	ldrh	r3, [r7, #26]
 800a342:	f003 fda2 	bl	800de8a <USB_ReadPMA>
    }
  }

  return count;
 800a346:	8b7b      	ldrh	r3, [r7, #26]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3720      	adds	r7, #32
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b0a4      	sub	sp, #144	; 0x90
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	4613      	mov	r3, r2
 800a35c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a35e:	88fb      	ldrh	r3, [r7, #6]
 800a360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 81dd 	beq.w	800a724 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a372:	b29b      	uxth	r3, r3
 800a374:	461a      	mov	r2, r3
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	00db      	lsls	r3, r3, #3
 800a37c:	4413      	add	r3, r2
 800a37e:	3302      	adds	r3, #2
 800a380:	005b      	lsls	r3, r3, #1
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	6812      	ldr	r2, [r2, #0]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a38c:	881b      	ldrh	r3, [r3, #0]
 800a38e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a392:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	699a      	ldr	r2, [r3, #24]
 800a39a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d907      	bls.n	800a3b2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	699a      	ldr	r2, [r3, #24]
 800a3a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a3aa:	1ad2      	subs	r2, r2, r3
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	619a      	str	r2, [r3, #24]
 800a3b0:	e002      	b.n	800a3b8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	699b      	ldr	r3, [r3, #24]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f040 80b9 	bne.w	800a534 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	785b      	ldrb	r3, [r3, #1]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d126      	bne.n	800a418 <HAL_PCD_EP_DB_Transmit+0xc8>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	461a      	mov	r2, r3
 800a3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3de:	4413      	add	r3, r2
 800a3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	011a      	lsls	r2, r3, #4
 800a3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a3f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f4:	881b      	ldrh	r3, [r3, #0]
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a400:	801a      	strh	r2, [r3, #0]
 800a402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a404:	881b      	ldrh	r3, [r3, #0]
 800a406:	b29b      	uxth	r3, r3
 800a408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a40c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a410:	b29a      	uxth	r2, r3
 800a412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a414:	801a      	strh	r2, [r3, #0]
 800a416:	e01a      	b.n	800a44e <HAL_PCD_EP_DB_Transmit+0xfe>
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	785b      	ldrb	r3, [r3, #1]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d116      	bne.n	800a44e <HAL_PCD_EP_DB_Transmit+0xfe>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	637b      	str	r3, [r7, #52]	; 0x34
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a42e:	b29b      	uxth	r3, r3
 800a430:	461a      	mov	r2, r3
 800a432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a434:	4413      	add	r3, r2
 800a436:	637b      	str	r3, [r7, #52]	; 0x34
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	011a      	lsls	r2, r3, #4
 800a43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a440:	4413      	add	r3, r2
 800a442:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a446:	633b      	str	r3, [r7, #48]	; 0x30
 800a448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44a:	2200      	movs	r2, #0
 800a44c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	785b      	ldrb	r3, [r3, #1]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d126      	bne.n	800a4aa <HAL_PCD_EP_DB_Transmit+0x15a>
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	61fb      	str	r3, [r7, #28]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	461a      	mov	r2, r3
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	4413      	add	r3, r2
 800a472:	61fb      	str	r3, [r7, #28]
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	011a      	lsls	r2, r3, #4
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	4413      	add	r3, r2
 800a47e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a482:	61bb      	str	r3, [r7, #24]
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	881b      	ldrh	r3, [r3, #0]
 800a488:	b29b      	uxth	r3, r3
 800a48a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a48e:	b29a      	uxth	r2, r3
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	801a      	strh	r2, [r3, #0]
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	b29b      	uxth	r3, r3
 800a49a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a49e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	801a      	strh	r2, [r3, #0]
 800a4a8:	e017      	b.n	800a4da <HAL_PCD_EP_DB_Transmit+0x18a>
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	785b      	ldrb	r3, [r3, #1]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d113      	bne.n	800a4da <HAL_PCD_EP_DB_Transmit+0x18a>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	4413      	add	r3, r2
 800a4c2:	627b      	str	r3, [r7, #36]	; 0x24
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	011a      	lsls	r2, r3, #4
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a4d2:	623b      	str	r3, [r7, #32]
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	4619      	mov	r1, r3
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f7ff f9fc 	bl	80098de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a4e6:	88fb      	ldrh	r3, [r7, #6]
 800a4e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f000 82fc 	beq.w	800aaea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4413      	add	r3, r2
 800a500:	881b      	ldrh	r3, [r3, #0]
 800a502:	b29b      	uxth	r3, r3
 800a504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a50c:	82fb      	strh	r3, [r7, #22]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	461a      	mov	r2, r3
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	441a      	add	r2, r3
 800a51c:	8afb      	ldrh	r3, [r7, #22]
 800a51e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a526:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a52a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a52e:	b29b      	uxth	r3, r3
 800a530:	8013      	strh	r3, [r2, #0]
 800a532:	e2da      	b.n	800aaea <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a534:	88fb      	ldrh	r3, [r7, #6]
 800a536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d021      	beq.n	800a582 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	461a      	mov	r2, r3
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	4413      	add	r3, r2
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	b29b      	uxth	r3, r3
 800a550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a558:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	461a      	mov	r2, r3
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	441a      	add	r2, r3
 800a56a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a56e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a57a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a57e:	b29b      	uxth	r3, r3
 800a580:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a588:	2b01      	cmp	r3, #1
 800a58a:	f040 82ae 	bne.w	800aaea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	695a      	ldr	r2, [r3, #20]
 800a592:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a596:	441a      	add	r2, r3
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	69da      	ldr	r2, [r3, #28]
 800a5a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a5a4:	441a      	add	r2, r3
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	6a1a      	ldr	r2, [r3, #32]
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d30b      	bcc.n	800a5ce <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	6a1a      	ldr	r2, [r3, #32]
 800a5c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5c6:	1ad2      	subs	r2, r2, r3
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	621a      	str	r2, [r3, #32]
 800a5cc:	e017      	b.n	800a5fe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	6a1b      	ldr	r3, [r3, #32]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d108      	bne.n	800a5e8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800a5d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a5da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a5e6:	e00a      	b.n	800a5fe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	6a1b      	ldr	r3, [r3, #32]
 800a5f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	785b      	ldrb	r3, [r3, #1]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d165      	bne.n	800a6d2 <HAL_PCD_EP_DB_Transmit+0x382>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a614:	b29b      	uxth	r3, r3
 800a616:	461a      	mov	r2, r3
 800a618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a61a:	4413      	add	r3, r2
 800a61c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	011a      	lsls	r2, r3, #4
 800a624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a626:	4413      	add	r3, r2
 800a628:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a62c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	b29b      	uxth	r3, r3
 800a634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a638:	b29a      	uxth	r2, r3
 800a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63c:	801a      	strh	r2, [r3, #0]
 800a63e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a642:	2b3e      	cmp	r3, #62	; 0x3e
 800a644:	d91d      	bls.n	800a682 <HAL_PCD_EP_DB_Transmit+0x332>
 800a646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a64a:	095b      	lsrs	r3, r3, #5
 800a64c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a64e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a652:	f003 031f 	and.w	r3, r3, #31
 800a656:	2b00      	cmp	r3, #0
 800a658:	d102      	bne.n	800a660 <HAL_PCD_EP_DB_Transmit+0x310>
 800a65a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a65c:	3b01      	subs	r3, #1
 800a65e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a662:	881b      	ldrh	r3, [r3, #0]
 800a664:	b29a      	uxth	r2, r3
 800a666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a668:	b29b      	uxth	r3, r3
 800a66a:	029b      	lsls	r3, r3, #10
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	4313      	orrs	r3, r2
 800a670:	b29b      	uxth	r3, r3
 800a672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67e:	801a      	strh	r2, [r3, #0]
 800a680:	e044      	b.n	800a70c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a682:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10a      	bne.n	800a6a0 <HAL_PCD_EP_DB_Transmit+0x350>
 800a68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	b29b      	uxth	r3, r3
 800a690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a698:	b29a      	uxth	r2, r3
 800a69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69c:	801a      	strh	r2, [r3, #0]
 800a69e:	e035      	b.n	800a70c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a6a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6a4:	085b      	lsrs	r3, r3, #1
 800a6a6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6ac:	f003 0301 	and.w	r3, r3, #1
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d002      	beq.n	800a6ba <HAL_PCD_EP_DB_Transmit+0x36a>
 800a6b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	029b      	lsls	r3, r3, #10
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ce:	801a      	strh	r2, [r3, #0]
 800a6d0:	e01c      	b.n	800a70c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	785b      	ldrb	r3, [r3, #1]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d118      	bne.n	800a70c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	647b      	str	r3, [r7, #68]	; 0x44
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6ee:	4413      	add	r3, r2
 800a6f0:	647b      	str	r3, [r7, #68]	; 0x44
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	011a      	lsls	r2, r3, #4
 800a6f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a700:	643b      	str	r3, [r7, #64]	; 0x40
 800a702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a706:	b29a      	uxth	r2, r3
 800a708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a70a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6818      	ldr	r0, [r3, #0]
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	6959      	ldr	r1, [r3, #20]
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	891a      	ldrh	r2, [r3, #8]
 800a718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	f003 fb6f 	bl	800de00 <USB_WritePMA>
 800a722:	e1e2      	b.n	800aaea <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	461a      	mov	r2, r3
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	00db      	lsls	r3, r3, #3
 800a736:	4413      	add	r3, r2
 800a738:	3306      	adds	r3, #6
 800a73a:	005b      	lsls	r3, r3, #1
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	6812      	ldr	r2, [r2, #0]
 800a740:	4413      	add	r3, r2
 800a742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a746:	881b      	ldrh	r3, [r3, #0]
 800a748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a74c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	699a      	ldr	r2, [r3, #24]
 800a754:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a758:	429a      	cmp	r2, r3
 800a75a:	d307      	bcc.n	800a76c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	699a      	ldr	r2, [r3, #24]
 800a760:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a764:	1ad2      	subs	r2, r2, r3
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	619a      	str	r2, [r3, #24]
 800a76a:	e002      	b.n	800a772 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	2200      	movs	r2, #0
 800a770:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	2b00      	cmp	r3, #0
 800a778:	f040 80c0 	bne.w	800a8fc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	785b      	ldrb	r3, [r3, #1]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d126      	bne.n	800a7d2 <HAL_PCD_EP_DB_Transmit+0x482>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a792:	b29b      	uxth	r3, r3
 800a794:	461a      	mov	r2, r3
 800a796:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a798:	4413      	add	r3, r2
 800a79a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	011a      	lsls	r2, r3, #4
 800a7a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a7a4:	4413      	add	r3, r2
 800a7a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a7aa:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7ae:	881b      	ldrh	r3, [r3, #0]
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7ba:	801a      	strh	r2, [r3, #0]
 800a7bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7be:	881b      	ldrh	r3, [r3, #0]
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7ce:	801a      	strh	r2, [r3, #0]
 800a7d0:	e01a      	b.n	800a808 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	785b      	ldrb	r3, [r3, #1]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d116      	bne.n	800a808 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	667b      	str	r3, [r7, #100]	; 0x64
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7ee:	4413      	add	r3, r2
 800a7f0:	667b      	str	r3, [r7, #100]	; 0x64
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	011a      	lsls	r2, r3, #4
 800a7f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7fa:	4413      	add	r3, r2
 800a7fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a800:	663b      	str	r3, [r7, #96]	; 0x60
 800a802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a804:	2200      	movs	r2, #0
 800a806:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	677b      	str	r3, [r7, #116]	; 0x74
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	785b      	ldrb	r3, [r3, #1]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d12b      	bne.n	800a86e <HAL_PCD_EP_DB_Transmit+0x51e>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a824:	b29b      	uxth	r3, r3
 800a826:	461a      	mov	r2, r3
 800a828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a82a:	4413      	add	r3, r2
 800a82c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	011a      	lsls	r2, r3, #4
 800a834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a836:	4413      	add	r3, r2
 800a838:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a83c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a840:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	b29b      	uxth	r3, r3
 800a848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a852:	801a      	strh	r2, [r3, #0]
 800a854:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a858:	881b      	ldrh	r3, [r3, #0]
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a864:	b29a      	uxth	r2, r3
 800a866:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a86a:	801a      	strh	r2, [r3, #0]
 800a86c:	e017      	b.n	800a89e <HAL_PCD_EP_DB_Transmit+0x54e>
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	785b      	ldrb	r3, [r3, #1]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d113      	bne.n	800a89e <HAL_PCD_EP_DB_Transmit+0x54e>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a87e:	b29b      	uxth	r3, r3
 800a880:	461a      	mov	r2, r3
 800a882:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a884:	4413      	add	r3, r2
 800a886:	677b      	str	r3, [r7, #116]	; 0x74
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	011a      	lsls	r2, r3, #4
 800a88e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a890:	4413      	add	r3, r2
 800a892:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a896:	673b      	str	r3, [r7, #112]	; 0x70
 800a898:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a89a:	2200      	movs	r2, #0
 800a89c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f7ff f81a 	bl	80098de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a8aa:	88fb      	ldrh	r3, [r7, #6]
 800a8ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f040 811a 	bne.w	800aaea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	4413      	add	r3, r2
 800a8c4:	881b      	ldrh	r3, [r3, #0]
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8d0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	441a      	add	r2, r3
 800a8e2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800a8e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a8f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	8013      	strh	r3, [r2, #0]
 800a8fa:	e0f6      	b.n	800aaea <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a8fc:	88fb      	ldrh	r3, [r7, #6]
 800a8fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a902:	2b00      	cmp	r3, #0
 800a904:	d121      	bne.n	800a94a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	461a      	mov	r2, r3
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	4413      	add	r3, r2
 800a914:	881b      	ldrh	r3, [r3, #0]
 800a916:	b29b      	uxth	r3, r3
 800a918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a91c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a920:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	461a      	mov	r2, r3
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	441a      	add	r2, r3
 800a932:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a93a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a93e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a946:	b29b      	uxth	r3, r3
 800a948:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a950:	2b01      	cmp	r3, #1
 800a952:	f040 80ca 	bne.w	800aaea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	695a      	ldr	r2, [r3, #20]
 800a95a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a95e:	441a      	add	r2, r3
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	69da      	ldr	r2, [r3, #28]
 800a968:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a96c:	441a      	add	r2, r3
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	6a1a      	ldr	r2, [r3, #32]
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d30b      	bcc.n	800a996 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	6a1a      	ldr	r2, [r3, #32]
 800a98a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a98e:	1ad2      	subs	r2, r2, r3
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	621a      	str	r2, [r3, #32]
 800a994:	e017      	b.n	800a9c6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d108      	bne.n	800a9b0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800a99e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a9a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a9ae:	e00a      	b.n	800a9c6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	6a1b      	ldr	r3, [r3, #32]
 800a9b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	657b      	str	r3, [r7, #84]	; 0x54
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	785b      	ldrb	r3, [r3, #1]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d165      	bne.n	800aaa0 <HAL_PCD_EP_DB_Transmit+0x750>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9e8:	4413      	add	r3, r2
 800a9ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	011a      	lsls	r2, r3, #4
 800a9f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9f4:	4413      	add	r3, r2
 800a9f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a9fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9fe:	881b      	ldrh	r3, [r3, #0]
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa0a:	801a      	strh	r2, [r3, #0]
 800aa0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa10:	2b3e      	cmp	r3, #62	; 0x3e
 800aa12:	d91d      	bls.n	800aa50 <HAL_PCD_EP_DB_Transmit+0x700>
 800aa14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa18:	095b      	lsrs	r3, r3, #5
 800aa1a:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa20:	f003 031f 	and.w	r3, r3, #31
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d102      	bne.n	800aa2e <HAL_PCD_EP_DB_Transmit+0x6de>
 800aa28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	029b      	lsls	r3, r3, #10
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa4c:	801a      	strh	r2, [r3, #0]
 800aa4e:	e041      	b.n	800aad4 <HAL_PCD_EP_DB_Transmit+0x784>
 800aa50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10a      	bne.n	800aa6e <HAL_PCD_EP_DB_Transmit+0x71e>
 800aa58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa5a:	881b      	ldrh	r3, [r3, #0]
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa6a:	801a      	strh	r2, [r3, #0]
 800aa6c:	e032      	b.n	800aad4 <HAL_PCD_EP_DB_Transmit+0x784>
 800aa6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa72:	085b      	lsrs	r3, r3, #1
 800aa74:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa7a:	f003 0301 	and.w	r3, r3, #1
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d002      	beq.n	800aa88 <HAL_PCD_EP_DB_Transmit+0x738>
 800aa82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa84:	3301      	adds	r3, #1
 800aa86:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa8a:	881b      	ldrh	r3, [r3, #0]
 800aa8c:	b29a      	uxth	r2, r3
 800aa8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	029b      	lsls	r3, r3, #10
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	4313      	orrs	r3, r2
 800aa98:	b29a      	uxth	r2, r3
 800aa9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa9c:	801a      	strh	r2, [r3, #0]
 800aa9e:	e019      	b.n	800aad4 <HAL_PCD_EP_DB_Transmit+0x784>
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	785b      	ldrb	r3, [r3, #1]
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d115      	bne.n	800aad4 <HAL_PCD_EP_DB_Transmit+0x784>
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	461a      	mov	r2, r3
 800aab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aab6:	4413      	add	r3, r2
 800aab8:	657b      	str	r3, [r7, #84]	; 0x54
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	011a      	lsls	r2, r3, #4
 800aac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aac2:	4413      	add	r3, r2
 800aac4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800aac8:	653b      	str	r3, [r7, #80]	; 0x50
 800aaca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aace:	b29a      	uxth	r2, r3
 800aad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aad2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6818      	ldr	r0, [r3, #0]
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	6959      	ldr	r1, [r3, #20]
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	895a      	ldrh	r2, [r3, #10]
 800aae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	f003 f98b 	bl	800de00 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	4413      	add	r3, r2
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab04:	82bb      	strh	r3, [r7, #20]
 800ab06:	8abb      	ldrh	r3, [r7, #20]
 800ab08:	f083 0310 	eor.w	r3, r3, #16
 800ab0c:	82bb      	strh	r3, [r7, #20]
 800ab0e:	8abb      	ldrh	r3, [r7, #20]
 800ab10:	f083 0320 	eor.w	r3, r3, #32
 800ab14:	82bb      	strh	r3, [r7, #20]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	441a      	add	r2, r3
 800ab24:	8abb      	ldrh	r3, [r7, #20]
 800ab26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3790      	adds	r7, #144	; 0x90
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ab44:	b480      	push	{r7}
 800ab46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800ab48:	4b03      	ldr	r3, [pc, #12]	; (800ab58 <HAL_PWR_EnableBkUpAccess+0x14>)
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	601a      	str	r2, [r3, #0]
}
 800ab4e:	bf00      	nop
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bc80      	pop	{r7}
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	420e0020 	.word	0x420e0020

0800ab5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b086      	sub	sp, #24
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e26c      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 8087 	beq.w	800ac8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ab7c:	4b92      	ldr	r3, [pc, #584]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f003 030c 	and.w	r3, r3, #12
 800ab84:	2b04      	cmp	r3, #4
 800ab86:	d00c      	beq.n	800aba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ab88:	4b8f      	ldr	r3, [pc, #572]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	f003 030c 	and.w	r3, r3, #12
 800ab90:	2b08      	cmp	r3, #8
 800ab92:	d112      	bne.n	800abba <HAL_RCC_OscConfig+0x5e>
 800ab94:	4b8c      	ldr	r3, [pc, #560]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aba0:	d10b      	bne.n	800abba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aba2:	4b89      	ldr	r3, [pc, #548]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d06c      	beq.n	800ac88 <HAL_RCC_OscConfig+0x12c>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d168      	bne.n	800ac88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e246      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abc2:	d106      	bne.n	800abd2 <HAL_RCC_OscConfig+0x76>
 800abc4:	4b80      	ldr	r3, [pc, #512]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a7f      	ldr	r2, [pc, #508]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800abca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abce:	6013      	str	r3, [r2, #0]
 800abd0:	e02e      	b.n	800ac30 <HAL_RCC_OscConfig+0xd4>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10c      	bne.n	800abf4 <HAL_RCC_OscConfig+0x98>
 800abda:	4b7b      	ldr	r3, [pc, #492]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a7a      	ldr	r2, [pc, #488]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800abe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	4b78      	ldr	r3, [pc, #480]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a77      	ldr	r2, [pc, #476]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800abec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abf0:	6013      	str	r3, [r2, #0]
 800abf2:	e01d      	b.n	800ac30 <HAL_RCC_OscConfig+0xd4>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abfc:	d10c      	bne.n	800ac18 <HAL_RCC_OscConfig+0xbc>
 800abfe:	4b72      	ldr	r3, [pc, #456]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a71      	ldr	r2, [pc, #452]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ac04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac08:	6013      	str	r3, [r2, #0]
 800ac0a:	4b6f      	ldr	r3, [pc, #444]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a6e      	ldr	r2, [pc, #440]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ac10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	e00b      	b.n	800ac30 <HAL_RCC_OscConfig+0xd4>
 800ac18:	4b6b      	ldr	r3, [pc, #428]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a6a      	ldr	r2, [pc, #424]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ac1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac22:	6013      	str	r3, [r2, #0]
 800ac24:	4b68      	ldr	r3, [pc, #416]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a67      	ldr	r2, [pc, #412]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ac2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d013      	beq.n	800ac60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac38:	f7fe f8ce 	bl	8008dd8 <HAL_GetTick>
 800ac3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac3e:	e008      	b.n	800ac52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac40:	f7fe f8ca 	bl	8008dd8 <HAL_GetTick>
 800ac44:	4602      	mov	r2, r0
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	1ad3      	subs	r3, r2, r3
 800ac4a:	2b64      	cmp	r3, #100	; 0x64
 800ac4c:	d901      	bls.n	800ac52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ac4e:	2303      	movs	r3, #3
 800ac50:	e1fa      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac52:	4b5d      	ldr	r3, [pc, #372]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d0f0      	beq.n	800ac40 <HAL_RCC_OscConfig+0xe4>
 800ac5e:	e014      	b.n	800ac8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac60:	f7fe f8ba 	bl	8008dd8 <HAL_GetTick>
 800ac64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac66:	e008      	b.n	800ac7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac68:	f7fe f8b6 	bl	8008dd8 <HAL_GetTick>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	2b64      	cmp	r3, #100	; 0x64
 800ac74:	d901      	bls.n	800ac7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ac76:	2303      	movs	r3, #3
 800ac78:	e1e6      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac7a:	4b53      	ldr	r3, [pc, #332]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1f0      	bne.n	800ac68 <HAL_RCC_OscConfig+0x10c>
 800ac86:	e000      	b.n	800ac8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 0302 	and.w	r3, r3, #2
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d063      	beq.n	800ad5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ac96:	4b4c      	ldr	r3, [pc, #304]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	f003 030c 	and.w	r3, r3, #12
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00b      	beq.n	800acba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800aca2:	4b49      	ldr	r3, [pc, #292]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	f003 030c 	and.w	r3, r3, #12
 800acaa:	2b08      	cmp	r3, #8
 800acac:	d11c      	bne.n	800ace8 <HAL_RCC_OscConfig+0x18c>
 800acae:	4b46      	ldr	r3, [pc, #280]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d116      	bne.n	800ace8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800acba:	4b43      	ldr	r3, [pc, #268]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0302 	and.w	r3, r3, #2
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d005      	beq.n	800acd2 <HAL_RCC_OscConfig+0x176>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d001      	beq.n	800acd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	e1ba      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acd2:	4b3d      	ldr	r3, [pc, #244]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	00db      	lsls	r3, r3, #3
 800ace0:	4939      	ldr	r1, [pc, #228]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ace2:	4313      	orrs	r3, r2
 800ace4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ace6:	e03a      	b.n	800ad5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d020      	beq.n	800ad32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800acf0:	4b36      	ldr	r3, [pc, #216]	; (800adcc <HAL_RCC_OscConfig+0x270>)
 800acf2:	2201      	movs	r2, #1
 800acf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acf6:	f7fe f86f 	bl	8008dd8 <HAL_GetTick>
 800acfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acfc:	e008      	b.n	800ad10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acfe:	f7fe f86b 	bl	8008dd8 <HAL_GetTick>
 800ad02:	4602      	mov	r2, r0
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d901      	bls.n	800ad10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	e19b      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad10:	4b2d      	ldr	r3, [pc, #180]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 0302 	and.w	r3, r3, #2
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d0f0      	beq.n	800acfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad1c:	4b2a      	ldr	r3, [pc, #168]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	695b      	ldr	r3, [r3, #20]
 800ad28:	00db      	lsls	r3, r3, #3
 800ad2a:	4927      	ldr	r1, [pc, #156]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	600b      	str	r3, [r1, #0]
 800ad30:	e015      	b.n	800ad5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad32:	4b26      	ldr	r3, [pc, #152]	; (800adcc <HAL_RCC_OscConfig+0x270>)
 800ad34:	2200      	movs	r2, #0
 800ad36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad38:	f7fe f84e 	bl	8008dd8 <HAL_GetTick>
 800ad3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ad3e:	e008      	b.n	800ad52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad40:	f7fe f84a 	bl	8008dd8 <HAL_GetTick>
 800ad44:	4602      	mov	r2, r0
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	d901      	bls.n	800ad52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800ad4e:	2303      	movs	r3, #3
 800ad50:	e17a      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ad52:	4b1d      	ldr	r3, [pc, #116]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 0302 	and.w	r3, r3, #2
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1f0      	bne.n	800ad40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0308 	and.w	r3, r3, #8
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d03a      	beq.n	800ade0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	699b      	ldr	r3, [r3, #24]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d019      	beq.n	800ada6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad72:	4b17      	ldr	r3, [pc, #92]	; (800add0 <HAL_RCC_OscConfig+0x274>)
 800ad74:	2201      	movs	r2, #1
 800ad76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad78:	f7fe f82e 	bl	8008dd8 <HAL_GetTick>
 800ad7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad7e:	e008      	b.n	800ad92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad80:	f7fe f82a 	bl	8008dd8 <HAL_GetTick>
 800ad84:	4602      	mov	r2, r0
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d901      	bls.n	800ad92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e15a      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad92:	4b0d      	ldr	r3, [pc, #52]	; (800adc8 <HAL_RCC_OscConfig+0x26c>)
 800ad94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad96:	f003 0302 	and.w	r3, r3, #2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d0f0      	beq.n	800ad80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ad9e:	2001      	movs	r0, #1
 800ada0:	f000 facc 	bl	800b33c <RCC_Delay>
 800ada4:	e01c      	b.n	800ade0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ada6:	4b0a      	ldr	r3, [pc, #40]	; (800add0 <HAL_RCC_OscConfig+0x274>)
 800ada8:	2200      	movs	r2, #0
 800adaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800adac:	f7fe f814 	bl	8008dd8 <HAL_GetTick>
 800adb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800adb2:	e00f      	b.n	800add4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adb4:	f7fe f810 	bl	8008dd8 <HAL_GetTick>
 800adb8:	4602      	mov	r2, r0
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d908      	bls.n	800add4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800adc2:	2303      	movs	r3, #3
 800adc4:	e140      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
 800adc6:	bf00      	nop
 800adc8:	40021000 	.word	0x40021000
 800adcc:	42420000 	.word	0x42420000
 800add0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800add4:	4b9e      	ldr	r3, [pc, #632]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	f003 0302 	and.w	r3, r3, #2
 800addc:	2b00      	cmp	r3, #0
 800adde:	d1e9      	bne.n	800adb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 0304 	and.w	r3, r3, #4
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f000 80a6 	beq.w	800af3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800adee:	2300      	movs	r3, #0
 800adf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800adf2:	4b97      	ldr	r3, [pc, #604]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800adf4:	69db      	ldr	r3, [r3, #28]
 800adf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d10d      	bne.n	800ae1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800adfe:	4b94      	ldr	r3, [pc, #592]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800ae00:	69db      	ldr	r3, [r3, #28]
 800ae02:	4a93      	ldr	r2, [pc, #588]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800ae04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae08:	61d3      	str	r3, [r2, #28]
 800ae0a:	4b91      	ldr	r3, [pc, #580]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800ae0c:	69db      	ldr	r3, [r3, #28]
 800ae0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae12:	60bb      	str	r3, [r7, #8]
 800ae14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae16:	2301      	movs	r3, #1
 800ae18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae1a:	4b8e      	ldr	r3, [pc, #568]	; (800b054 <HAL_RCC_OscConfig+0x4f8>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d118      	bne.n	800ae58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ae26:	4b8b      	ldr	r3, [pc, #556]	; (800b054 <HAL_RCC_OscConfig+0x4f8>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a8a      	ldr	r2, [pc, #552]	; (800b054 <HAL_RCC_OscConfig+0x4f8>)
 800ae2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ae32:	f7fd ffd1 	bl	8008dd8 <HAL_GetTick>
 800ae36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae38:	e008      	b.n	800ae4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae3a:	f7fd ffcd 	bl	8008dd8 <HAL_GetTick>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	2b64      	cmp	r3, #100	; 0x64
 800ae46:	d901      	bls.n	800ae4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	e0fd      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae4c:	4b81      	ldr	r3, [pc, #516]	; (800b054 <HAL_RCC_OscConfig+0x4f8>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d0f0      	beq.n	800ae3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d106      	bne.n	800ae6e <HAL_RCC_OscConfig+0x312>
 800ae60:	4b7b      	ldr	r3, [pc, #492]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800ae62:	6a1b      	ldr	r3, [r3, #32]
 800ae64:	4a7a      	ldr	r2, [pc, #488]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800ae66:	f043 0301 	orr.w	r3, r3, #1
 800ae6a:	6213      	str	r3, [r2, #32]
 800ae6c:	e02d      	b.n	800aeca <HAL_RCC_OscConfig+0x36e>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10c      	bne.n	800ae90 <HAL_RCC_OscConfig+0x334>
 800ae76:	4b76      	ldr	r3, [pc, #472]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	4a75      	ldr	r2, [pc, #468]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800ae7c:	f023 0301 	bic.w	r3, r3, #1
 800ae80:	6213      	str	r3, [r2, #32]
 800ae82:	4b73      	ldr	r3, [pc, #460]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	4a72      	ldr	r2, [pc, #456]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800ae88:	f023 0304 	bic.w	r3, r3, #4
 800ae8c:	6213      	str	r3, [r2, #32]
 800ae8e:	e01c      	b.n	800aeca <HAL_RCC_OscConfig+0x36e>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	2b05      	cmp	r3, #5
 800ae96:	d10c      	bne.n	800aeb2 <HAL_RCC_OscConfig+0x356>
 800ae98:	4b6d      	ldr	r3, [pc, #436]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
 800ae9c:	4a6c      	ldr	r2, [pc, #432]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800ae9e:	f043 0304 	orr.w	r3, r3, #4
 800aea2:	6213      	str	r3, [r2, #32]
 800aea4:	4b6a      	ldr	r3, [pc, #424]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800aea6:	6a1b      	ldr	r3, [r3, #32]
 800aea8:	4a69      	ldr	r2, [pc, #420]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800aeaa:	f043 0301 	orr.w	r3, r3, #1
 800aeae:	6213      	str	r3, [r2, #32]
 800aeb0:	e00b      	b.n	800aeca <HAL_RCC_OscConfig+0x36e>
 800aeb2:	4b67      	ldr	r3, [pc, #412]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	4a66      	ldr	r2, [pc, #408]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800aeb8:	f023 0301 	bic.w	r3, r3, #1
 800aebc:	6213      	str	r3, [r2, #32]
 800aebe:	4b64      	ldr	r3, [pc, #400]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	4a63      	ldr	r2, [pc, #396]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800aec4:	f023 0304 	bic.w	r3, r3, #4
 800aec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d015      	beq.n	800aefe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aed2:	f7fd ff81 	bl	8008dd8 <HAL_GetTick>
 800aed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aed8:	e00a      	b.n	800aef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aeda:	f7fd ff7d 	bl	8008dd8 <HAL_GetTick>
 800aede:	4602      	mov	r2, r0
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	1ad3      	subs	r3, r2, r3
 800aee4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d901      	bls.n	800aef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800aeec:	2303      	movs	r3, #3
 800aeee:	e0ab      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aef0:	4b57      	ldr	r3, [pc, #348]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800aef2:	6a1b      	ldr	r3, [r3, #32]
 800aef4:	f003 0302 	and.w	r3, r3, #2
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d0ee      	beq.n	800aeda <HAL_RCC_OscConfig+0x37e>
 800aefc:	e014      	b.n	800af28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aefe:	f7fd ff6b 	bl	8008dd8 <HAL_GetTick>
 800af02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af04:	e00a      	b.n	800af1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af06:	f7fd ff67 	bl	8008dd8 <HAL_GetTick>
 800af0a:	4602      	mov	r2, r0
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	1ad3      	subs	r3, r2, r3
 800af10:	f241 3288 	movw	r2, #5000	; 0x1388
 800af14:	4293      	cmp	r3, r2
 800af16:	d901      	bls.n	800af1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800af18:	2303      	movs	r3, #3
 800af1a:	e095      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af1c:	4b4c      	ldr	r3, [pc, #304]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800af1e:	6a1b      	ldr	r3, [r3, #32]
 800af20:	f003 0302 	and.w	r3, r3, #2
 800af24:	2b00      	cmp	r3, #0
 800af26:	d1ee      	bne.n	800af06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800af28:	7dfb      	ldrb	r3, [r7, #23]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d105      	bne.n	800af3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af2e:	4b48      	ldr	r3, [pc, #288]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800af30:	69db      	ldr	r3, [r3, #28]
 800af32:	4a47      	ldr	r2, [pc, #284]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800af34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f000 8081 	beq.w	800b046 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800af44:	4b42      	ldr	r3, [pc, #264]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	f003 030c 	and.w	r3, r3, #12
 800af4c:	2b08      	cmp	r3, #8
 800af4e:	d061      	beq.n	800b014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	69db      	ldr	r3, [r3, #28]
 800af54:	2b02      	cmp	r3, #2
 800af56:	d146      	bne.n	800afe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af58:	4b3f      	ldr	r3, [pc, #252]	; (800b058 <HAL_RCC_OscConfig+0x4fc>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af5e:	f7fd ff3b 	bl	8008dd8 <HAL_GetTick>
 800af62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af64:	e008      	b.n	800af78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af66:	f7fd ff37 	bl	8008dd8 <HAL_GetTick>
 800af6a:	4602      	mov	r2, r0
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	2b02      	cmp	r3, #2
 800af72:	d901      	bls.n	800af78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800af74:	2303      	movs	r3, #3
 800af76:	e067      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800af78:	4b35      	ldr	r3, [pc, #212]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1f0      	bne.n	800af66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a1b      	ldr	r3, [r3, #32]
 800af88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af8c:	d108      	bne.n	800afa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800af8e:	4b30      	ldr	r3, [pc, #192]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	492d      	ldr	r1, [pc, #180]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800af9c:	4313      	orrs	r3, r2
 800af9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800afa0:	4b2b      	ldr	r3, [pc, #172]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a19      	ldr	r1, [r3, #32]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb0:	430b      	orrs	r3, r1
 800afb2:	4927      	ldr	r1, [pc, #156]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800afb4:	4313      	orrs	r3, r2
 800afb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800afb8:	4b27      	ldr	r3, [pc, #156]	; (800b058 <HAL_RCC_OscConfig+0x4fc>)
 800afba:	2201      	movs	r2, #1
 800afbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afbe:	f7fd ff0b 	bl	8008dd8 <HAL_GetTick>
 800afc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800afc4:	e008      	b.n	800afd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afc6:	f7fd ff07 	bl	8008dd8 <HAL_GetTick>
 800afca:	4602      	mov	r2, r0
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	1ad3      	subs	r3, r2, r3
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d901      	bls.n	800afd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800afd4:	2303      	movs	r3, #3
 800afd6:	e037      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800afd8:	4b1d      	ldr	r3, [pc, #116]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d0f0      	beq.n	800afc6 <HAL_RCC_OscConfig+0x46a>
 800afe4:	e02f      	b.n	800b046 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afe6:	4b1c      	ldr	r3, [pc, #112]	; (800b058 <HAL_RCC_OscConfig+0x4fc>)
 800afe8:	2200      	movs	r2, #0
 800afea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afec:	f7fd fef4 	bl	8008dd8 <HAL_GetTick>
 800aff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aff2:	e008      	b.n	800b006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aff4:	f7fd fef0 	bl	8008dd8 <HAL_GetTick>
 800aff8:	4602      	mov	r2, r0
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	2b02      	cmp	r3, #2
 800b000:	d901      	bls.n	800b006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b002:	2303      	movs	r3, #3
 800b004:	e020      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b006:	4b12      	ldr	r3, [pc, #72]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1f0      	bne.n	800aff4 <HAL_RCC_OscConfig+0x498>
 800b012:	e018      	b.n	800b046 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	69db      	ldr	r3, [r3, #28]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d101      	bne.n	800b020 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	e013      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b020:	4b0b      	ldr	r3, [pc, #44]	; (800b050 <HAL_RCC_OscConfig+0x4f4>)
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a1b      	ldr	r3, [r3, #32]
 800b030:	429a      	cmp	r2, r3
 800b032:	d106      	bne.n	800b042 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b03e:	429a      	cmp	r2, r3
 800b040:	d001      	beq.n	800b046 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e000      	b.n	800b048 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3718      	adds	r7, #24
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	40021000 	.word	0x40021000
 800b054:	40007000 	.word	0x40007000
 800b058:	42420060 	.word	0x42420060

0800b05c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d101      	bne.n	800b070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	e0d0      	b.n	800b212 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b070:	4b6a      	ldr	r3, [pc, #424]	; (800b21c <HAL_RCC_ClockConfig+0x1c0>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 0307 	and.w	r3, r3, #7
 800b078:	683a      	ldr	r2, [r7, #0]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d910      	bls.n	800b0a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b07e:	4b67      	ldr	r3, [pc, #412]	; (800b21c <HAL_RCC_ClockConfig+0x1c0>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f023 0207 	bic.w	r2, r3, #7
 800b086:	4965      	ldr	r1, [pc, #404]	; (800b21c <HAL_RCC_ClockConfig+0x1c0>)
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	4313      	orrs	r3, r2
 800b08c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b08e:	4b63      	ldr	r3, [pc, #396]	; (800b21c <HAL_RCC_ClockConfig+0x1c0>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f003 0307 	and.w	r3, r3, #7
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d001      	beq.n	800b0a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b09c:	2301      	movs	r3, #1
 800b09e:	e0b8      	b.n	800b212 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f003 0302 	and.w	r3, r3, #2
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d020      	beq.n	800b0ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f003 0304 	and.w	r3, r3, #4
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d005      	beq.n	800b0c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b0b8:	4b59      	ldr	r3, [pc, #356]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	4a58      	ldr	r2, [pc, #352]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b0be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b0c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 0308 	and.w	r3, r3, #8
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d005      	beq.n	800b0dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b0d0:	4b53      	ldr	r3, [pc, #332]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	4a52      	ldr	r2, [pc, #328]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b0d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b0da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0dc:	4b50      	ldr	r3, [pc, #320]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	494d      	ldr	r1, [pc, #308]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 0301 	and.w	r3, r3, #1
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d040      	beq.n	800b17c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d107      	bne.n	800b112 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b102:	4b47      	ldr	r3, [pc, #284]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d115      	bne.n	800b13a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	e07f      	b.n	800b212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	2b02      	cmp	r3, #2
 800b118:	d107      	bne.n	800b12a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b11a:	4b41      	ldr	r3, [pc, #260]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b122:	2b00      	cmp	r3, #0
 800b124:	d109      	bne.n	800b13a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	e073      	b.n	800b212 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b12a:	4b3d      	ldr	r3, [pc, #244]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 0302 	and.w	r3, r3, #2
 800b132:	2b00      	cmp	r3, #0
 800b134:	d101      	bne.n	800b13a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b136:	2301      	movs	r3, #1
 800b138:	e06b      	b.n	800b212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b13a:	4b39      	ldr	r3, [pc, #228]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	f023 0203 	bic.w	r2, r3, #3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	4936      	ldr	r1, [pc, #216]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b148:	4313      	orrs	r3, r2
 800b14a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b14c:	f7fd fe44 	bl	8008dd8 <HAL_GetTick>
 800b150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b152:	e00a      	b.n	800b16a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b154:	f7fd fe40 	bl	8008dd8 <HAL_GetTick>
 800b158:	4602      	mov	r2, r0
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b162:	4293      	cmp	r3, r2
 800b164:	d901      	bls.n	800b16a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b166:	2303      	movs	r3, #3
 800b168:	e053      	b.n	800b212 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b16a:	4b2d      	ldr	r3, [pc, #180]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	f003 020c 	and.w	r2, r3, #12
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	429a      	cmp	r2, r3
 800b17a:	d1eb      	bne.n	800b154 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b17c:	4b27      	ldr	r3, [pc, #156]	; (800b21c <HAL_RCC_ClockConfig+0x1c0>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 0307 	and.w	r3, r3, #7
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	429a      	cmp	r2, r3
 800b188:	d210      	bcs.n	800b1ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b18a:	4b24      	ldr	r3, [pc, #144]	; (800b21c <HAL_RCC_ClockConfig+0x1c0>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f023 0207 	bic.w	r2, r3, #7
 800b192:	4922      	ldr	r1, [pc, #136]	; (800b21c <HAL_RCC_ClockConfig+0x1c0>)
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	4313      	orrs	r3, r2
 800b198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b19a:	4b20      	ldr	r3, [pc, #128]	; (800b21c <HAL_RCC_ClockConfig+0x1c0>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 0307 	and.w	r3, r3, #7
 800b1a2:	683a      	ldr	r2, [r7, #0]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d001      	beq.n	800b1ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e032      	b.n	800b212 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 0304 	and.w	r3, r3, #4
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d008      	beq.n	800b1ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b1b8:	4b19      	ldr	r3, [pc, #100]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	4916      	ldr	r1, [pc, #88]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 0308 	and.w	r3, r3, #8
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d009      	beq.n	800b1ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b1d6:	4b12      	ldr	r3, [pc, #72]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	00db      	lsls	r3, r3, #3
 800b1e4:	490e      	ldr	r1, [pc, #56]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b1ea:	f000 f821 	bl	800b230 <HAL_RCC_GetSysClockFreq>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	4b0b      	ldr	r3, [pc, #44]	; (800b220 <HAL_RCC_ClockConfig+0x1c4>)
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	091b      	lsrs	r3, r3, #4
 800b1f6:	f003 030f 	and.w	r3, r3, #15
 800b1fa:	490a      	ldr	r1, [pc, #40]	; (800b224 <HAL_RCC_ClockConfig+0x1c8>)
 800b1fc:	5ccb      	ldrb	r3, [r1, r3]
 800b1fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b202:	4a09      	ldr	r2, [pc, #36]	; (800b228 <HAL_RCC_ClockConfig+0x1cc>)
 800b204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b206:	4b09      	ldr	r3, [pc, #36]	; (800b22c <HAL_RCC_ClockConfig+0x1d0>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fd fda2 	bl	8008d54 <HAL_InitTick>

  return HAL_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	40022000 	.word	0x40022000
 800b220:	40021000 	.word	0x40021000
 800b224:	08010058 	.word	0x08010058
 800b228:	20000040 	.word	0x20000040
 800b22c:	20000044 	.word	0x20000044

0800b230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b230:	b480      	push	{r7}
 800b232:	b087      	sub	sp, #28
 800b234:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b236:	2300      	movs	r3, #0
 800b238:	60fb      	str	r3, [r7, #12]
 800b23a:	2300      	movs	r3, #0
 800b23c:	60bb      	str	r3, [r7, #8]
 800b23e:	2300      	movs	r3, #0
 800b240:	617b      	str	r3, [r7, #20]
 800b242:	2300      	movs	r3, #0
 800b244:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b246:	2300      	movs	r3, #0
 800b248:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b24a:	4b1e      	ldr	r3, [pc, #120]	; (800b2c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f003 030c 	and.w	r3, r3, #12
 800b256:	2b04      	cmp	r3, #4
 800b258:	d002      	beq.n	800b260 <HAL_RCC_GetSysClockFreq+0x30>
 800b25a:	2b08      	cmp	r3, #8
 800b25c:	d003      	beq.n	800b266 <HAL_RCC_GetSysClockFreq+0x36>
 800b25e:	e027      	b.n	800b2b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b260:	4b19      	ldr	r3, [pc, #100]	; (800b2c8 <HAL_RCC_GetSysClockFreq+0x98>)
 800b262:	613b      	str	r3, [r7, #16]
      break;
 800b264:	e027      	b.n	800b2b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	0c9b      	lsrs	r3, r3, #18
 800b26a:	f003 030f 	and.w	r3, r3, #15
 800b26e:	4a17      	ldr	r2, [pc, #92]	; (800b2cc <HAL_RCC_GetSysClockFreq+0x9c>)
 800b270:	5cd3      	ldrb	r3, [r2, r3]
 800b272:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d010      	beq.n	800b2a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b27e:	4b11      	ldr	r3, [pc, #68]	; (800b2c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	0c5b      	lsrs	r3, r3, #17
 800b284:	f003 0301 	and.w	r3, r3, #1
 800b288:	4a11      	ldr	r2, [pc, #68]	; (800b2d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b28a:	5cd3      	ldrb	r3, [r2, r3]
 800b28c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a0d      	ldr	r2, [pc, #52]	; (800b2c8 <HAL_RCC_GetSysClockFreq+0x98>)
 800b292:	fb02 f203 	mul.w	r2, r2, r3
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	fbb2 f3f3 	udiv	r3, r2, r3
 800b29c:	617b      	str	r3, [r7, #20]
 800b29e:	e004      	b.n	800b2aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a0c      	ldr	r2, [pc, #48]	; (800b2d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b2a4:	fb02 f303 	mul.w	r3, r2, r3
 800b2a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	613b      	str	r3, [r7, #16]
      break;
 800b2ae:	e002      	b.n	800b2b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b2b0:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <HAL_RCC_GetSysClockFreq+0x98>)
 800b2b2:	613b      	str	r3, [r7, #16]
      break;
 800b2b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b2b6:	693b      	ldr	r3, [r7, #16]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	371c      	adds	r7, #28
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bc80      	pop	{r7}
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	40021000 	.word	0x40021000
 800b2c8:	007a1200 	.word	0x007a1200
 800b2cc:	08010070 	.word	0x08010070
 800b2d0:	08010080 	.word	0x08010080
 800b2d4:	003d0900 	.word	0x003d0900

0800b2d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b2dc:	4b02      	ldr	r3, [pc, #8]	; (800b2e8 <HAL_RCC_GetHCLKFreq+0x10>)
 800b2de:	681b      	ldr	r3, [r3, #0]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bc80      	pop	{r7}
 800b2e6:	4770      	bx	lr
 800b2e8:	20000040 	.word	0x20000040

0800b2ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b2f0:	f7ff fff2 	bl	800b2d8 <HAL_RCC_GetHCLKFreq>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	4b05      	ldr	r3, [pc, #20]	; (800b30c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	0a1b      	lsrs	r3, r3, #8
 800b2fc:	f003 0307 	and.w	r3, r3, #7
 800b300:	4903      	ldr	r1, [pc, #12]	; (800b310 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b302:	5ccb      	ldrb	r3, [r1, r3]
 800b304:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b308:	4618      	mov	r0, r3
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	40021000 	.word	0x40021000
 800b310:	08010068 	.word	0x08010068

0800b314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b318:	f7ff ffde 	bl	800b2d8 <HAL_RCC_GetHCLKFreq>
 800b31c:	4602      	mov	r2, r0
 800b31e:	4b05      	ldr	r3, [pc, #20]	; (800b334 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	0adb      	lsrs	r3, r3, #11
 800b324:	f003 0307 	and.w	r3, r3, #7
 800b328:	4903      	ldr	r1, [pc, #12]	; (800b338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b32a:	5ccb      	ldrb	r3, [r1, r3]
 800b32c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b330:	4618      	mov	r0, r3
 800b332:	bd80      	pop	{r7, pc}
 800b334:	40021000 	.word	0x40021000
 800b338:	08010068 	.word	0x08010068

0800b33c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b085      	sub	sp, #20
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b344:	4b0a      	ldr	r3, [pc, #40]	; (800b370 <RCC_Delay+0x34>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a0a      	ldr	r2, [pc, #40]	; (800b374 <RCC_Delay+0x38>)
 800b34a:	fba2 2303 	umull	r2, r3, r2, r3
 800b34e:	0a5b      	lsrs	r3, r3, #9
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	fb02 f303 	mul.w	r3, r2, r3
 800b356:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b358:	bf00      	nop
  }
  while (Delay --);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	1e5a      	subs	r2, r3, #1
 800b35e:	60fa      	str	r2, [r7, #12]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1f9      	bne.n	800b358 <RCC_Delay+0x1c>
}
 800b364:	bf00      	nop
 800b366:	bf00      	nop
 800b368:	3714      	adds	r7, #20
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bc80      	pop	{r7}
 800b36e:	4770      	bx	lr
 800b370:	20000040 	.word	0x20000040
 800b374:	10624dd3 	.word	0x10624dd3

0800b378 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b086      	sub	sp, #24
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800b380:	2300      	movs	r3, #0
 800b382:	613b      	str	r3, [r7, #16]
 800b384:	2300      	movs	r3, #0
 800b386:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 0301 	and.w	r3, r3, #1
 800b390:	2b00      	cmp	r3, #0
 800b392:	d07d      	beq.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800b394:	2300      	movs	r3, #0
 800b396:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b398:	4b4f      	ldr	r3, [pc, #316]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b39a:	69db      	ldr	r3, [r3, #28]
 800b39c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10d      	bne.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b3a4:	4b4c      	ldr	r3, [pc, #304]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b3a6:	69db      	ldr	r3, [r3, #28]
 800b3a8:	4a4b      	ldr	r2, [pc, #300]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b3aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3ae:	61d3      	str	r3, [r2, #28]
 800b3b0:	4b49      	ldr	r3, [pc, #292]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b3b2:	69db      	ldr	r3, [r3, #28]
 800b3b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3b8:	60bb      	str	r3, [r7, #8]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3c0:	4b46      	ldr	r3, [pc, #280]	; (800b4dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d118      	bne.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b3cc:	4b43      	ldr	r3, [pc, #268]	; (800b4dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a42      	ldr	r2, [pc, #264]	; (800b4dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b3d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b3d8:	f7fd fcfe 	bl	8008dd8 <HAL_GetTick>
 800b3dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3de:	e008      	b.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3e0:	f7fd fcfa 	bl	8008dd8 <HAL_GetTick>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	2b64      	cmp	r3, #100	; 0x64
 800b3ec:	d901      	bls.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800b3ee:	2303      	movs	r3, #3
 800b3f0:	e06d      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3f2:	4b3a      	ldr	r3, [pc, #232]	; (800b4dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d0f0      	beq.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b3fe:	4b36      	ldr	r3, [pc, #216]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b406:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d02e      	beq.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	429a      	cmp	r2, r3
 800b41a:	d027      	beq.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b41c:	4b2e      	ldr	r3, [pc, #184]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b41e:	6a1b      	ldr	r3, [r3, #32]
 800b420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b424:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b426:	4b2e      	ldr	r3, [pc, #184]	; (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b428:	2201      	movs	r2, #1
 800b42a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b42c:	4b2c      	ldr	r3, [pc, #176]	; (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b42e:	2200      	movs	r2, #0
 800b430:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800b432:	4a29      	ldr	r2, [pc, #164]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f003 0301 	and.w	r3, r3, #1
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d014      	beq.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b442:	f7fd fcc9 	bl	8008dd8 <HAL_GetTick>
 800b446:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b448:	e00a      	b.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b44a:	f7fd fcc5 	bl	8008dd8 <HAL_GetTick>
 800b44e:	4602      	mov	r2, r0
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	f241 3288 	movw	r2, #5000	; 0x1388
 800b458:	4293      	cmp	r3, r2
 800b45a:	d901      	bls.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800b45c:	2303      	movs	r3, #3
 800b45e:	e036      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b460:	4b1d      	ldr	r3, [pc, #116]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b462:	6a1b      	ldr	r3, [r3, #32]
 800b464:	f003 0302 	and.w	r3, r3, #2
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d0ee      	beq.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b46c:	4b1a      	ldr	r3, [pc, #104]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b46e:	6a1b      	ldr	r3, [r3, #32]
 800b470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	4917      	ldr	r1, [pc, #92]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b47a:	4313      	orrs	r3, r2
 800b47c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d105      	bne.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b484:	4b14      	ldr	r3, [pc, #80]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b486:	69db      	ldr	r3, [r3, #28]
 800b488:	4a13      	ldr	r2, [pc, #76]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b48a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b48e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f003 0302 	and.w	r3, r3, #2
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d008      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b49c:	4b0e      	ldr	r3, [pc, #56]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	490b      	ldr	r1, [pc, #44]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f003 0310 	and.w	r3, r3, #16
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d008      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b4ba:	4b07      	ldr	r3, [pc, #28]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	4904      	ldr	r1, [pc, #16]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3718      	adds	r7, #24
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	40021000 	.word	0x40021000
 800b4dc:	40007000 	.word	0x40007000
 800b4e0:	42420440 	.word	0x42420440

0800b4e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b088      	sub	sp, #32
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	617b      	str	r3, [r7, #20]
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	61fb      	str	r3, [r7, #28]
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	60fb      	str	r3, [r7, #12]
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2b10      	cmp	r3, #16
 800b504:	d00a      	beq.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b10      	cmp	r3, #16
 800b50a:	f200 808a 	bhi.w	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d045      	beq.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2b02      	cmp	r3, #2
 800b518:	d075      	beq.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800b51a:	e082      	b.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800b51c:	4b46      	ldr	r3, [pc, #280]	; (800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800b522:	4b45      	ldr	r3, [pc, #276]	; (800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d07b      	beq.n	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	0c9b      	lsrs	r3, r3, #18
 800b532:	f003 030f 	and.w	r3, r3, #15
 800b536:	4a41      	ldr	r2, [pc, #260]	; (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800b538:	5cd3      	ldrb	r3, [r2, r3]
 800b53a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b542:	2b00      	cmp	r3, #0
 800b544:	d015      	beq.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b546:	4b3c      	ldr	r3, [pc, #240]	; (800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	0c5b      	lsrs	r3, r3, #17
 800b54c:	f003 0301 	and.w	r3, r3, #1
 800b550:	4a3b      	ldr	r2, [pc, #236]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800b552:	5cd3      	ldrb	r3, [r2, r3]
 800b554:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00d      	beq.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800b560:	4a38      	ldr	r2, [pc, #224]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	fbb2 f2f3 	udiv	r2, r2, r3
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	fb02 f303 	mul.w	r3, r2, r3
 800b56e:	61fb      	str	r3, [r7, #28]
 800b570:	e004      	b.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	4a34      	ldr	r2, [pc, #208]	; (800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800b576:	fb02 f303 	mul.w	r3, r2, r3
 800b57a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800b57c:	4b2e      	ldr	r3, [pc, #184]	; (800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b588:	d102      	bne.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	61bb      	str	r3, [r7, #24]
      break;
 800b58e:	e04a      	b.n	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	005b      	lsls	r3, r3, #1
 800b594:	4a2d      	ldr	r2, [pc, #180]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800b596:	fba2 2303 	umull	r2, r3, r2, r3
 800b59a:	085b      	lsrs	r3, r3, #1
 800b59c:	61bb      	str	r3, [r7, #24]
      break;
 800b59e:	e042      	b.n	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800b5a0:	4b25      	ldr	r3, [pc, #148]	; (800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b5a2:	6a1b      	ldr	r3, [r3, #32]
 800b5a4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5b0:	d108      	bne.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f003 0302 	and.w	r3, r3, #2
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d003      	beq.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800b5bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5c0:	61bb      	str	r3, [r7, #24]
 800b5c2:	e01f      	b.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5ce:	d109      	bne.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800b5d0:	4b19      	ldr	r3, [pc, #100]	; (800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d4:	f003 0302 	and.w	r3, r3, #2
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800b5dc:	f649 4340 	movw	r3, #40000	; 0x9c40
 800b5e0:	61bb      	str	r3, [r7, #24]
 800b5e2:	e00f      	b.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5ee:	d11c      	bne.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800b5f0:	4b11      	ldr	r3, [pc, #68]	; (800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d016      	beq.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800b5fc:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b600:	61bb      	str	r3, [r7, #24]
      break;
 800b602:	e012      	b.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800b604:	e011      	b.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800b606:	f7ff fe85 	bl	800b314 <HAL_RCC_GetPCLK2Freq>
 800b60a:	4602      	mov	r2, r0
 800b60c:	4b0a      	ldr	r3, [pc, #40]	; (800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	0b9b      	lsrs	r3, r3, #14
 800b612:	f003 0303 	and.w	r3, r3, #3
 800b616:	3301      	adds	r3, #1
 800b618:	005b      	lsls	r3, r3, #1
 800b61a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b61e:	61bb      	str	r3, [r7, #24]
      break;
 800b620:	e004      	b.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800b622:	bf00      	nop
 800b624:	e002      	b.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800b626:	bf00      	nop
 800b628:	e000      	b.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800b62a:	bf00      	nop
    }
  }
  return (frequency);
 800b62c:	69bb      	ldr	r3, [r7, #24]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3720      	adds	r7, #32
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	40021000 	.word	0x40021000
 800b63c:	08010084 	.word	0x08010084
 800b640:	08010094 	.word	0x08010094
 800b644:	007a1200 	.word	0x007a1200
 800b648:	003d0900 	.word	0x003d0900
 800b64c:	aaaaaaab 	.word	0xaaaaaaab

0800b650 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800b658:	2300      	movs	r3, #0
 800b65a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d101      	bne.n	800b666 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	e07a      	b.n	800b75c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	7c5b      	ldrb	r3, [r3, #17]
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d105      	bne.n	800b67c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f7fd f89c 	bl	80087b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2202      	movs	r2, #2
 800b680:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f870 	bl	800b768 <HAL_RTC_WaitForSynchro>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d004      	beq.n	800b698 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2204      	movs	r2, #4
 800b692:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	e061      	b.n	800b75c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 f892 	bl	800b7c2 <RTC_EnterInitMode>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d004      	beq.n	800b6ae <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2204      	movs	r2, #4
 800b6a8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e056      	b.n	800b75c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	685a      	ldr	r2, [r3, #4]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f022 0207 	bic.w	r2, r2, #7
 800b6bc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d005      	beq.n	800b6d2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800b6c6:	4b27      	ldr	r3, [pc, #156]	; (800b764 <HAL_RTC_Init+0x114>)
 800b6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ca:	4a26      	ldr	r2, [pc, #152]	; (800b764 <HAL_RTC_Init+0x114>)
 800b6cc:	f023 0301 	bic.w	r3, r3, #1
 800b6d0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800b6d2:	4b24      	ldr	r3, [pc, #144]	; (800b764 <HAL_RTC_Init+0x114>)
 800b6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	4921      	ldr	r1, [pc, #132]	; (800b764 <HAL_RTC_Init+0x114>)
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ec:	d003      	beq.n	800b6f6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	60fb      	str	r3, [r7, #12]
 800b6f4:	e00e      	b.n	800b714 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800b6f6:	2001      	movs	r0, #1
 800b6f8:	f7ff fef4 	bl	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b6fc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d104      	bne.n	800b70e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2204      	movs	r2, #4
 800b708:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e026      	b.n	800b75c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	3b01      	subs	r3, #1
 800b712:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	0c1a      	lsrs	r2, r3, #16
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f002 020f 	and.w	r2, r2, #15
 800b720:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	b292      	uxth	r2, r2
 800b72a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 f870 	bl	800b812 <RTC_ExitInitMode>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d004      	beq.n	800b742 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2204      	movs	r2, #4
 800b73c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	e00c      	b.n	800b75c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2201      	movs	r2, #1
 800b74c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2201      	movs	r2, #1
 800b752:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2201      	movs	r2, #1
 800b758:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800b75a:	2300      	movs	r3, #0
  }
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	40006c00 	.word	0x40006c00

0800b768 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b770:	2300      	movs	r3, #0
 800b772:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d101      	bne.n	800b77e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	e01d      	b.n	800b7ba <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	685a      	ldr	r2, [r3, #4]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f022 0208 	bic.w	r2, r2, #8
 800b78c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800b78e:	f7fd fb23 	bl	8008dd8 <HAL_GetTick>
 800b792:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800b794:	e009      	b.n	800b7aa <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800b796:	f7fd fb1f 	bl	8008dd8 <HAL_GetTick>
 800b79a:	4602      	mov	r2, r0
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	1ad3      	subs	r3, r2, r3
 800b7a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7a4:	d901      	bls.n	800b7aa <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	e007      	b.n	800b7ba <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	f003 0308 	and.w	r3, r3, #8
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d0ee      	beq.n	800b796 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b084      	sub	sp, #16
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800b7ce:	f7fd fb03 	bl	8008dd8 <HAL_GetTick>
 800b7d2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b7d4:	e009      	b.n	800b7ea <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800b7d6:	f7fd faff 	bl	8008dd8 <HAL_GetTick>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	1ad3      	subs	r3, r2, r3
 800b7e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7e4:	d901      	bls.n	800b7ea <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800b7e6:	2303      	movs	r3, #3
 800b7e8:	e00f      	b.n	800b80a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	f003 0320 	and.w	r3, r3, #32
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d0ee      	beq.n	800b7d6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f042 0210 	orr.w	r2, r2, #16
 800b806:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b084      	sub	sp, #16
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b81a:	2300      	movs	r3, #0
 800b81c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	685a      	ldr	r2, [r3, #4]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f022 0210 	bic.w	r2, r2, #16
 800b82c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800b82e:	f7fd fad3 	bl	8008dd8 <HAL_GetTick>
 800b832:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b834:	e009      	b.n	800b84a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800b836:	f7fd facf 	bl	8008dd8 <HAL_GetTick>
 800b83a:	4602      	mov	r2, r0
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	1ad3      	subs	r3, r2, r3
 800b840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b844:	d901      	bls.n	800b84a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800b846:	2303      	movs	r3, #3
 800b848:	e007      	b.n	800b85a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	f003 0320 	and.w	r3, r3, #32
 800b854:	2b00      	cmp	r3, #0
 800b856:	d0ee      	beq.n	800b836 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b082      	sub	sp, #8
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	2b00      	cmp	r3, #0
 800b876:	d027      	beq.n	800b8c8 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	f003 0301 	and.w	r3, r3, #1
 800b882:	2b00      	cmp	r3, #0
 800b884:	d020      	beq.n	800b8c8 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	f003 0304 	and.w	r3, r3, #4
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00b      	beq.n	800b8ac <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 f824 	bl	800b8e2 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f06f 0204 	mvn.w	r2, #4
 800b8a2:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2204      	movs	r2, #4
 800b8a8:	745a      	strb	r2, [r3, #17]
 800b8aa:	e005      	b.n	800b8b8 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f80f 	bl	800b8d0 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	685a      	ldr	r2, [r3, #4]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f022 0201 	bic.w	r2, r2, #1
 800b8c6:	605a      	str	r2, [r3, #4]
    }
  }
}
 800b8c8:	bf00      	nop
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bc80      	pop	{r7}
 800b8e0:	4770      	bx	lr

0800b8e2 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800b8e2:	b480      	push	{r7}
 800b8e4:	b083      	sub	sp, #12
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 800b8ea:	bf00      	nop
 800b8ec:	370c      	adds	r7, #12
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bc80      	pop	{r7}
 800b8f2:	4770      	bx	lr

0800b8f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	e076      	b.n	800b9f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d108      	bne.n	800b920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b916:	d009      	beq.n	800b92c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	61da      	str	r2, [r3, #28]
 800b91e:	e005      	b.n	800b92c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d106      	bne.n	800b94c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7fc ff60 	bl	800880c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2202      	movs	r2, #2
 800b950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b962:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b974:	431a      	orrs	r2, r3
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b97e:	431a      	orrs	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	f003 0302 	and.w	r3, r3, #2
 800b988:	431a      	orrs	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	695b      	ldr	r3, [r3, #20]
 800b98e:	f003 0301 	and.w	r3, r3, #1
 800b992:	431a      	orrs	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	699b      	ldr	r3, [r3, #24]
 800b998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b99c:	431a      	orrs	r2, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	69db      	ldr	r3, [r3, #28]
 800b9a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9a6:	431a      	orrs	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6a1b      	ldr	r3, [r3, #32]
 800b9ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9b0:	ea42 0103 	orr.w	r1, r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	430a      	orrs	r2, r1
 800b9c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	0c1a      	lsrs	r2, r3, #16
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f002 0204 	and.w	r2, r2, #4
 800b9d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	69da      	ldr	r2, [r3, #28]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b9e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b9f2:	2300      	movs	r3, #0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3708      	adds	r7, #8
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b088      	sub	sp, #32
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	603b      	str	r3, [r7, #0]
 800ba08:	4613      	mov	r3, r2
 800ba0a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba0c:	f7fd f9e4 	bl	8008dd8 <HAL_GetTick>
 800ba10:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800ba12:	88fb      	ldrh	r3, [r7, #6]
 800ba14:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d001      	beq.n	800ba26 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800ba22:	2302      	movs	r3, #2
 800ba24:	e12a      	b.n	800bc7c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d002      	beq.n	800ba32 <HAL_SPI_Transmit+0x36>
 800ba2c:	88fb      	ldrh	r3, [r7, #6]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d101      	bne.n	800ba36 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e122      	b.n	800bc7c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d101      	bne.n	800ba44 <HAL_SPI_Transmit+0x48>
 800ba40:	2302      	movs	r3, #2
 800ba42:	e11b      	b.n	800bc7c <HAL_SPI_Transmit+0x280>
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2203      	movs	r2, #3
 800ba50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2200      	movs	r2, #0
 800ba58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	88fa      	ldrh	r2, [r7, #6]
 800ba64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	88fa      	ldrh	r2, [r7, #6]
 800ba6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2200      	movs	r2, #0
 800ba82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2200      	movs	r2, #0
 800ba88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba92:	d10f      	bne.n	800bab4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800baa2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bab2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800babe:	2b40      	cmp	r3, #64	; 0x40
 800bac0:	d007      	beq.n	800bad2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bad0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bada:	d152      	bne.n	800bb82 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d002      	beq.n	800baea <HAL_SPI_Transmit+0xee>
 800bae4:	8b7b      	ldrh	r3, [r7, #26]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d145      	bne.n	800bb76 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baee:	881a      	ldrh	r2, [r3, #0]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bafa:	1c9a      	adds	r2, r3, #2
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	3b01      	subs	r3, #1
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bb0e:	e032      	b.n	800bb76 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	f003 0302 	and.w	r3, r3, #2
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d112      	bne.n	800bb44 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb22:	881a      	ldrh	r2, [r3, #0]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb2e:	1c9a      	adds	r2, r3, #2
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	b29a      	uxth	r2, r3
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	86da      	strh	r2, [r3, #54]	; 0x36
 800bb42:	e018      	b.n	800bb76 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb44:	f7fd f948 	bl	8008dd8 <HAL_GetTick>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	683a      	ldr	r2, [r7, #0]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d803      	bhi.n	800bb5c <HAL_SPI_Transmit+0x160>
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb5a:	d102      	bne.n	800bb62 <HAL_SPI_Transmit+0x166>
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d109      	bne.n	800bb76 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2201      	movs	r2, #1
 800bb66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800bb72:	2303      	movs	r3, #3
 800bb74:	e082      	b.n	800bc7c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d1c7      	bne.n	800bb10 <HAL_SPI_Transmit+0x114>
 800bb80:	e053      	b.n	800bc2a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d002      	beq.n	800bb90 <HAL_SPI_Transmit+0x194>
 800bb8a:	8b7b      	ldrh	r3, [r7, #26]
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d147      	bne.n	800bc20 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	330c      	adds	r3, #12
 800bb9a:	7812      	ldrb	r2, [r2, #0]
 800bb9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba2:	1c5a      	adds	r2, r3, #1
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bbb6:	e033      	b.n	800bc20 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	f003 0302 	and.w	r3, r3, #2
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d113      	bne.n	800bbee <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	330c      	adds	r3, #12
 800bbd0:	7812      	ldrb	r2, [r2, #0]
 800bbd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd8:	1c5a      	adds	r2, r3, #1
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	86da      	strh	r2, [r3, #54]	; 0x36
 800bbec:	e018      	b.n	800bc20 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbee:	f7fd f8f3 	bl	8008dd8 <HAL_GetTick>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	683a      	ldr	r2, [r7, #0]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d803      	bhi.n	800bc06 <HAL_SPI_Transmit+0x20a>
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc04:	d102      	bne.n	800bc0c <HAL_SPI_Transmit+0x210>
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d109      	bne.n	800bc20 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	e02d      	b.n	800bc7c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1c6      	bne.n	800bbb8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bc2a:	69fa      	ldr	r2, [r7, #28]
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f000 fcc8 	bl	800c5c4 <SPI_EndRxTxTransaction>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d002      	beq.n	800bc40 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2220      	movs	r2, #32
 800bc3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d10a      	bne.n	800bc5e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc48:	2300      	movs	r3, #0
 800bc4a:	617b      	str	r3, [r7, #20]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	617b      	str	r3, [r7, #20]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	617b      	str	r3, [r7, #20]
 800bc5c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d001      	beq.n	800bc7a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800bc76:	2301      	movs	r3, #1
 800bc78:	e000      	b.n	800bc7c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800bc7a:	2300      	movs	r3, #0
  }
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3720      	adds	r7, #32
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b088      	sub	sp, #32
 800bc88:	af02      	add	r7, sp, #8
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	603b      	str	r3, [r7, #0]
 800bc90:	4613      	mov	r3, r2
 800bc92:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d001      	beq.n	800bca4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800bca0:	2302      	movs	r3, #2
 800bca2:	e104      	b.n	800beae <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcac:	d112      	bne.n	800bcd4 <HAL_SPI_Receive+0x50>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10e      	bne.n	800bcd4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2204      	movs	r2, #4
 800bcba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bcbe:	88fa      	ldrh	r2, [r7, #6]
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	68b9      	ldr	r1, [r7, #8]
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f000 f8f3 	bl	800beb6 <HAL_SPI_TransmitReceive>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	e0ec      	b.n	800beae <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcd4:	f7fd f880 	bl	8008dd8 <HAL_GetTick>
 800bcd8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d002      	beq.n	800bce6 <HAL_SPI_Receive+0x62>
 800bce0:	88fb      	ldrh	r3, [r7, #6]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d101      	bne.n	800bcea <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	e0e1      	b.n	800beae <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d101      	bne.n	800bcf8 <HAL_SPI_Receive+0x74>
 800bcf4:	2302      	movs	r3, #2
 800bcf6:	e0da      	b.n	800beae <HAL_SPI_Receive+0x22a>
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2204      	movs	r2, #4
 800bd04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	88fa      	ldrh	r2, [r7, #6]
 800bd18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	88fa      	ldrh	r2, [r7, #6]
 800bd1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2200      	movs	r2, #0
 800bd24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd46:	d10f      	bne.n	800bd68 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bd66:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd72:	2b40      	cmp	r3, #64	; 0x40
 800bd74:	d007      	beq.n	800bd86 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd84:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d170      	bne.n	800be70 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bd8e:	e035      	b.n	800bdfc <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f003 0301 	and.w	r3, r3, #1
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d115      	bne.n	800bdca <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f103 020c 	add.w	r2, r3, #12
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdaa:	7812      	ldrb	r2, [r2, #0]
 800bdac:	b2d2      	uxtb	r2, r2
 800bdae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb4:	1c5a      	adds	r2, r3, #1
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	3b01      	subs	r3, #1
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bdc8:	e018      	b.n	800bdfc <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdca:	f7fd f805 	bl	8008dd8 <HAL_GetTick>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	683a      	ldr	r2, [r7, #0]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d803      	bhi.n	800bde2 <HAL_SPI_Receive+0x15e>
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde0:	d102      	bne.n	800bde8 <HAL_SPI_Receive+0x164>
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d109      	bne.n	800bdfc <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2201      	movs	r2, #1
 800bdec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800bdf8:	2303      	movs	r3, #3
 800bdfa:	e058      	b.n	800beae <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be00:	b29b      	uxth	r3, r3
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1c4      	bne.n	800bd90 <HAL_SPI_Receive+0x10c>
 800be06:	e038      	b.n	800be7a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	689b      	ldr	r3, [r3, #8]
 800be0e:	f003 0301 	and.w	r3, r3, #1
 800be12:	2b01      	cmp	r3, #1
 800be14:	d113      	bne.n	800be3e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	68da      	ldr	r2, [r3, #12]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be20:	b292      	uxth	r2, r2
 800be22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be28:	1c9a      	adds	r2, r3, #2
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be32:	b29b      	uxth	r3, r3
 800be34:	3b01      	subs	r3, #1
 800be36:	b29a      	uxth	r2, r3
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800be3c:	e018      	b.n	800be70 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be3e:	f7fc ffcb 	bl	8008dd8 <HAL_GetTick>
 800be42:	4602      	mov	r2, r0
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	1ad3      	subs	r3, r2, r3
 800be48:	683a      	ldr	r2, [r7, #0]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d803      	bhi.n	800be56 <HAL_SPI_Receive+0x1d2>
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be54:	d102      	bne.n	800be5c <HAL_SPI_Receive+0x1d8>
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d109      	bne.n	800be70 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2201      	movs	r2, #1
 800be60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800be6c:	2303      	movs	r3, #3
 800be6e:	e01e      	b.n	800beae <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be74:	b29b      	uxth	r3, r3
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1c6      	bne.n	800be08 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800be7a:	697a      	ldr	r2, [r7, #20]
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f000 fb4e 	bl	800c520 <SPI_EndRxTransaction>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d002      	beq.n	800be90 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2220      	movs	r2, #32
 800be8e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d001      	beq.n	800beac <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	e000      	b.n	800beae <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800beac:	2300      	movs	r3, #0
  }
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3718      	adds	r7, #24
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b08a      	sub	sp, #40	; 0x28
 800beba:	af00      	add	r7, sp, #0
 800bebc:	60f8      	str	r0, [r7, #12]
 800bebe:	60b9      	str	r1, [r7, #8]
 800bec0:	607a      	str	r2, [r7, #4]
 800bec2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bec4:	2301      	movs	r3, #1
 800bec6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bec8:	f7fc ff86 	bl	8008dd8 <HAL_GetTick>
 800becc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bed4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800bedc:	887b      	ldrh	r3, [r7, #2]
 800bede:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bee0:	7ffb      	ldrb	r3, [r7, #31]
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d00c      	beq.n	800bf00 <HAL_SPI_TransmitReceive+0x4a>
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800beec:	d106      	bne.n	800befc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d102      	bne.n	800befc <HAL_SPI_TransmitReceive+0x46>
 800bef6:	7ffb      	ldrb	r3, [r7, #31]
 800bef8:	2b04      	cmp	r3, #4
 800befa:	d001      	beq.n	800bf00 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800befc:	2302      	movs	r3, #2
 800befe:	e17f      	b.n	800c200 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d005      	beq.n	800bf12 <HAL_SPI_TransmitReceive+0x5c>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d002      	beq.n	800bf12 <HAL_SPI_TransmitReceive+0x5c>
 800bf0c:	887b      	ldrh	r3, [r7, #2]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d101      	bne.n	800bf16 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	e174      	b.n	800c200 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d101      	bne.n	800bf24 <HAL_SPI_TransmitReceive+0x6e>
 800bf20:	2302      	movs	r3, #2
 800bf22:	e16d      	b.n	800c200 <HAL_SPI_TransmitReceive+0x34a>
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2201      	movs	r2, #1
 800bf28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	2b04      	cmp	r3, #4
 800bf36:	d003      	beq.n	800bf40 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2205      	movs	r2, #5
 800bf3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2200      	movs	r2, #0
 800bf44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	887a      	ldrh	r2, [r7, #2]
 800bf50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	887a      	ldrh	r2, [r7, #2]
 800bf56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	68ba      	ldr	r2, [r7, #8]
 800bf5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	887a      	ldrh	r2, [r7, #2]
 800bf62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	887a      	ldrh	r2, [r7, #2]
 800bf68:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2200      	movs	r2, #0
 800bf74:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf80:	2b40      	cmp	r3, #64	; 0x40
 800bf82:	d007      	beq.n	800bf94 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf9c:	d17e      	bne.n	800c09c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d002      	beq.n	800bfac <HAL_SPI_TransmitReceive+0xf6>
 800bfa6:	8afb      	ldrh	r3, [r7, #22]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d16c      	bne.n	800c086 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb0:	881a      	ldrh	r2, [r3, #0]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfbc:	1c9a      	adds	r2, r3, #2
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bfd0:	e059      	b.n	800c086 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	f003 0302 	and.w	r3, r3, #2
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d11b      	bne.n	800c018 <HAL_SPI_TransmitReceive+0x162>
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d016      	beq.n	800c018 <HAL_SPI_TransmitReceive+0x162>
 800bfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d113      	bne.n	800c018 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff4:	881a      	ldrh	r2, [r3, #0]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c000:	1c9a      	adds	r2, r3, #2
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	3b01      	subs	r3, #1
 800c00e:	b29a      	uxth	r2, r3
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c014:	2300      	movs	r3, #0
 800c016:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	f003 0301 	and.w	r3, r3, #1
 800c022:	2b01      	cmp	r3, #1
 800c024:	d119      	bne.n	800c05a <HAL_SPI_TransmitReceive+0x1a4>
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d014      	beq.n	800c05a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68da      	ldr	r2, [r3, #12]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c03a:	b292      	uxth	r2, r2
 800c03c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c042:	1c9a      	adds	r2, r3, #2
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	3b01      	subs	r3, #1
 800c050:	b29a      	uxth	r2, r3
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c056:	2301      	movs	r3, #1
 800c058:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c05a:	f7fc febd 	bl	8008dd8 <HAL_GetTick>
 800c05e:	4602      	mov	r2, r0
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c066:	429a      	cmp	r2, r3
 800c068:	d80d      	bhi.n	800c086 <HAL_SPI_TransmitReceive+0x1d0>
 800c06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c070:	d009      	beq.n	800c086 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2201      	movs	r2, #1
 800c076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800c082:	2303      	movs	r3, #3
 800c084:	e0bc      	b.n	800c200 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1a0      	bne.n	800bfd2 <HAL_SPI_TransmitReceive+0x11c>
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c094:	b29b      	uxth	r3, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	d19b      	bne.n	800bfd2 <HAL_SPI_TransmitReceive+0x11c>
 800c09a:	e082      	b.n	800c1a2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d002      	beq.n	800c0aa <HAL_SPI_TransmitReceive+0x1f4>
 800c0a4:	8afb      	ldrh	r3, [r7, #22]
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d171      	bne.n	800c18e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	330c      	adds	r3, #12
 800c0b4:	7812      	ldrb	r2, [r2, #0]
 800c0b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0bc:	1c5a      	adds	r2, r3, #1
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c0d0:	e05d      	b.n	800c18e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	f003 0302 	and.w	r3, r3, #2
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	d11c      	bne.n	800c11a <HAL_SPI_TransmitReceive+0x264>
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d017      	beq.n	800c11a <HAL_SPI_TransmitReceive+0x264>
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d114      	bne.n	800c11a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	330c      	adds	r3, #12
 800c0fa:	7812      	ldrb	r2, [r2, #0]
 800c0fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c102:	1c5a      	adds	r2, r3, #1
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	3b01      	subs	r3, #1
 800c110:	b29a      	uxth	r2, r3
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c116:	2300      	movs	r3, #0
 800c118:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	f003 0301 	and.w	r3, r3, #1
 800c124:	2b01      	cmp	r3, #1
 800c126:	d119      	bne.n	800c15c <HAL_SPI_TransmitReceive+0x2a6>
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d014      	beq.n	800c15c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68da      	ldr	r2, [r3, #12]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c13c:	b2d2      	uxtb	r2, r2
 800c13e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c144:	1c5a      	adds	r2, r3, #1
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c14e:	b29b      	uxth	r3, r3
 800c150:	3b01      	subs	r3, #1
 800c152:	b29a      	uxth	r2, r3
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c158:	2301      	movs	r3, #1
 800c15a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c15c:	f7fc fe3c 	bl	8008dd8 <HAL_GetTick>
 800c160:	4602      	mov	r2, r0
 800c162:	6a3b      	ldr	r3, [r7, #32]
 800c164:	1ad3      	subs	r3, r2, r3
 800c166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c168:	429a      	cmp	r2, r3
 800c16a:	d803      	bhi.n	800c174 <HAL_SPI_TransmitReceive+0x2be>
 800c16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c172:	d102      	bne.n	800c17a <HAL_SPI_TransmitReceive+0x2c4>
 800c174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c176:	2b00      	cmp	r3, #0
 800c178:	d109      	bne.n	800c18e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2201      	movs	r2, #1
 800c17e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800c18a:	2303      	movs	r3, #3
 800c18c:	e038      	b.n	800c200 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c192:	b29b      	uxth	r3, r3
 800c194:	2b00      	cmp	r3, #0
 800c196:	d19c      	bne.n	800c0d2 <HAL_SPI_TransmitReceive+0x21c>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d197      	bne.n	800c0d2 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c1a2:	6a3a      	ldr	r2, [r7, #32]
 800c1a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	f000 fa0c 	bl	800c5c4 <SPI_EndRxTxTransaction>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d008      	beq.n	800c1c4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2220      	movs	r2, #32
 800c1b6:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e01d      	b.n	800c200 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10a      	bne.n	800c1e2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	613b      	str	r3, [r7, #16]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	613b      	str	r3, [r7, #16]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	689b      	ldr	r3, [r3, #8]
 800c1de:	613b      	str	r3, [r7, #16]
 800c1e0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d001      	beq.n	800c1fe <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e000      	b.n	800c200 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800c1fe:	2300      	movs	r3, #0
  }
}
 800c200:	4618      	mov	r0, r3
 800c202:	3728      	adds	r7, #40	; 0x28
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b088      	sub	sp, #32
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	099b      	lsrs	r3, r3, #6
 800c224:	f003 0301 	and.w	r3, r3, #1
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10f      	bne.n	800c24c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00a      	beq.n	800c24c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	099b      	lsrs	r3, r3, #6
 800c23a:	f003 0301 	and.w	r3, r3, #1
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d004      	beq.n	800c24c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	4798      	blx	r3
    return;
 800c24a:	e0be      	b.n	800c3ca <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	085b      	lsrs	r3, r3, #1
 800c250:	f003 0301 	and.w	r3, r3, #1
 800c254:	2b00      	cmp	r3, #0
 800c256:	d00a      	beq.n	800c26e <HAL_SPI_IRQHandler+0x66>
 800c258:	69fb      	ldr	r3, [r7, #28]
 800c25a:	09db      	lsrs	r3, r3, #7
 800c25c:	f003 0301 	and.w	r3, r3, #1
 800c260:	2b00      	cmp	r3, #0
 800c262:	d004      	beq.n	800c26e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	4798      	blx	r3
    return;
 800c26c:	e0ad      	b.n	800c3ca <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	095b      	lsrs	r3, r3, #5
 800c272:	f003 0301 	and.w	r3, r3, #1
 800c276:	2b00      	cmp	r3, #0
 800c278:	d106      	bne.n	800c288 <HAL_SPI_IRQHandler+0x80>
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	099b      	lsrs	r3, r3, #6
 800c27e:	f003 0301 	and.w	r3, r3, #1
 800c282:	2b00      	cmp	r3, #0
 800c284:	f000 80a1 	beq.w	800c3ca <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	095b      	lsrs	r3, r3, #5
 800c28c:	f003 0301 	and.w	r3, r3, #1
 800c290:	2b00      	cmp	r3, #0
 800c292:	f000 809a 	beq.w	800c3ca <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	099b      	lsrs	r3, r3, #6
 800c29a:	f003 0301 	and.w	r3, r3, #1
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d023      	beq.n	800c2ea <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b03      	cmp	r3, #3
 800c2ac:	d011      	beq.n	800c2d2 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2b2:	f043 0204 	orr.w	r2, r3, #4
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	617b      	str	r3, [r7, #20]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	68db      	ldr	r3, [r3, #12]
 800c2c4:	617b      	str	r3, [r7, #20]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	617b      	str	r3, [r7, #20]
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	e00b      	b.n	800c2ea <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	613b      	str	r3, [r7, #16]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	613b      	str	r3, [r7, #16]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	613b      	str	r3, [r7, #16]
 800c2e6:	693b      	ldr	r3, [r7, #16]
        return;
 800c2e8:	e06f      	b.n	800c3ca <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	095b      	lsrs	r3, r3, #5
 800c2ee:	f003 0301 	and.w	r3, r3, #1
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d014      	beq.n	800c320 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fa:	f043 0201 	orr.w	r2, r3, #1
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c302:	2300      	movs	r3, #0
 800c304:	60fb      	str	r3, [r7, #12]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	60fb      	str	r3, [r7, #12]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c31c:	601a      	str	r2, [r3, #0]
 800c31e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c324:	2b00      	cmp	r3, #0
 800c326:	d04f      	beq.n	800c3c8 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	685a      	ldr	r2, [r3, #4]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c336:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2201      	movs	r2, #1
 800c33c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	f003 0302 	and.w	r3, r3, #2
 800c346:	2b00      	cmp	r3, #0
 800c348:	d104      	bne.n	800c354 <HAL_SPI_IRQHandler+0x14c>
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	f003 0301 	and.w	r3, r3, #1
 800c350:	2b00      	cmp	r3, #0
 800c352:	d034      	beq.n	800c3be <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f022 0203 	bic.w	r2, r2, #3
 800c362:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d011      	beq.n	800c390 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c370:	4a17      	ldr	r2, [pc, #92]	; (800c3d0 <HAL_SPI_IRQHandler+0x1c8>)
 800c372:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c378:	4618      	mov	r0, r3
 800c37a:	f7fc fe69 	bl	8009050 <HAL_DMA_Abort_IT>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d005      	beq.n	800c390 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c388:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c394:	2b00      	cmp	r3, #0
 800c396:	d016      	beq.n	800c3c6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c39c:	4a0c      	ldr	r2, [pc, #48]	; (800c3d0 <HAL_SPI_IRQHandler+0x1c8>)
 800c39e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fc fe53 	bl	8009050 <HAL_DMA_Abort_IT>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00a      	beq.n	800c3c6 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800c3bc:	e003      	b.n	800c3c6 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 f808 	bl	800c3d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c3c4:	e000      	b.n	800c3c8 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800c3c6:	bf00      	nop
    return;
 800c3c8:	bf00      	nop
  }
}
 800c3ca:	3720      	adds	r7, #32
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	0800c3e7 	.word	0x0800c3e7

0800c3d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c3dc:	bf00      	nop
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bc80      	pop	{r7}
 800c3e4:	4770      	bx	lr

0800c3e6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f7ff ffe7 	bl	800c3d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c406:	bf00      	nop
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
	...

0800c410 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b088      	sub	sp, #32
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	603b      	str	r3, [r7, #0]
 800c41c:	4613      	mov	r3, r2
 800c41e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c420:	f7fc fcda 	bl	8008dd8 <HAL_GetTick>
 800c424:	4602      	mov	r2, r0
 800c426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c428:	1a9b      	subs	r3, r3, r2
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	4413      	add	r3, r2
 800c42e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c430:	f7fc fcd2 	bl	8008dd8 <HAL_GetTick>
 800c434:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c436:	4b39      	ldr	r3, [pc, #228]	; (800c51c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	015b      	lsls	r3, r3, #5
 800c43c:	0d1b      	lsrs	r3, r3, #20
 800c43e:	69fa      	ldr	r2, [r7, #28]
 800c440:	fb02 f303 	mul.w	r3, r2, r3
 800c444:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c446:	e054      	b.n	800c4f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c44e:	d050      	beq.n	800c4f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c450:	f7fc fcc2 	bl	8008dd8 <HAL_GetTick>
 800c454:	4602      	mov	r2, r0
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	1ad3      	subs	r3, r2, r3
 800c45a:	69fa      	ldr	r2, [r7, #28]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d902      	bls.n	800c466 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d13d      	bne.n	800c4e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c474:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c47e:	d111      	bne.n	800c4a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c488:	d004      	beq.n	800c494 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	689b      	ldr	r3, [r3, #8]
 800c48e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c492:	d107      	bne.n	800c4a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4ac:	d10f      	bne.n	800c4ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c4bc:	601a      	str	r2, [r3, #0]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c4cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c4de:	2303      	movs	r3, #3
 800c4e0:	e017      	b.n	800c512 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d101      	bne.n	800c4ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	689a      	ldr	r2, [r3, #8]
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	4013      	ands	r3, r2
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	bf0c      	ite	eq
 800c502:	2301      	moveq	r3, #1
 800c504:	2300      	movne	r3, #0
 800c506:	b2db      	uxtb	r3, r3
 800c508:	461a      	mov	r2, r3
 800c50a:	79fb      	ldrb	r3, [r7, #7]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d19b      	bne.n	800c448 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c510:	2300      	movs	r3, #0
}
 800c512:	4618      	mov	r0, r3
 800c514:	3720      	adds	r7, #32
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	20000040 	.word	0x20000040

0800c520 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af02      	add	r7, sp, #8
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c534:	d111      	bne.n	800c55a <SPI_EndRxTransaction+0x3a>
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c53e:	d004      	beq.n	800c54a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c548:	d107      	bne.n	800c55a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c558:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c562:	d117      	bne.n	800c594 <SPI_EndRxTransaction+0x74>
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c56c:	d112      	bne.n	800c594 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	9300      	str	r3, [sp, #0]
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	2200      	movs	r2, #0
 800c576:	2101      	movs	r1, #1
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f7ff ff49 	bl	800c410 <SPI_WaitFlagStateUntilTimeout>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d01a      	beq.n	800c5ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c588:	f043 0220 	orr.w	r2, r3, #32
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c590:	2303      	movs	r3, #3
 800c592:	e013      	b.n	800c5bc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	2200      	movs	r2, #0
 800c59c:	2180      	movs	r1, #128	; 0x80
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f7ff ff36 	bl	800c410 <SPI_WaitFlagStateUntilTimeout>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d007      	beq.n	800c5ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ae:	f043 0220 	orr.w	r2, r3, #32
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c5b6:	2303      	movs	r3, #3
 800c5b8:	e000      	b.n	800c5bc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3710      	adds	r7, #16
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b086      	sub	sp, #24
 800c5c8:	af02      	add	r7, sp, #8
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	2102      	movs	r1, #2
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f7ff ff18 	bl	800c410 <SPI_WaitFlagStateUntilTimeout>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d007      	beq.n	800c5f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ea:	f043 0220 	orr.w	r2, r3, #32
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800c5f2:	2303      	movs	r3, #3
 800c5f4:	e013      	b.n	800c61e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	2180      	movs	r1, #128	; 0x80
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	f7ff ff05 	bl	800c410 <SPI_WaitFlagStateUntilTimeout>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d007      	beq.n	800c61c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c610:	f043 0220 	orr.w	r2, r3, #32
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800c618:	2303      	movs	r3, #3
 800c61a:	e000      	b.n	800c61e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b082      	sub	sp, #8
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d101      	bne.n	800c638 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c634:	2301      	movs	r3, #1
 800c636:	e042      	b.n	800c6be <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	2b00      	cmp	r3, #0
 800c642:	d106      	bne.n	800c652 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f7fc f973 	bl	8008938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2224      	movs	r2, #36	; 0x24
 800c656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	68da      	ldr	r2, [r3, #12]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c668:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f972 	bl	800c954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	691a      	ldr	r2, [r3, #16]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c67e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	695a      	ldr	r2, [r3, #20]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c68e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	68da      	ldr	r2, [r3, #12]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c69e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2220      	movs	r2, #32
 800c6aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2220      	movs	r2, #32
 800c6b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c6bc:	2300      	movs	r3, #0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b08a      	sub	sp, #40	; 0x28
 800c6ca:	af02      	add	r7, sp, #8
 800c6cc:	60f8      	str	r0, [r7, #12]
 800c6ce:	60b9      	str	r1, [r7, #8]
 800c6d0:	603b      	str	r3, [r7, #0]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	2b20      	cmp	r3, #32
 800c6e4:	d175      	bne.n	800c7d2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d002      	beq.n	800c6f2 <HAL_UART_Transmit+0x2c>
 800c6ec:	88fb      	ldrh	r3, [r7, #6]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d101      	bne.n	800c6f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	e06e      	b.n	800c7d4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2221      	movs	r2, #33	; 0x21
 800c700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c704:	f7fc fb68 	bl	8008dd8 <HAL_GetTick>
 800c708:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	88fa      	ldrh	r2, [r7, #6]
 800c70e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	88fa      	ldrh	r2, [r7, #6]
 800c714:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c71e:	d108      	bne.n	800c732 <HAL_UART_Transmit+0x6c>
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	691b      	ldr	r3, [r3, #16]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d104      	bne.n	800c732 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c728:	2300      	movs	r3, #0
 800c72a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	61bb      	str	r3, [r7, #24]
 800c730:	e003      	b.n	800c73a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c736:	2300      	movs	r3, #0
 800c738:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c73a:	e02e      	b.n	800c79a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	2200      	movs	r2, #0
 800c744:	2180      	movs	r1, #128	; 0x80
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	f000 f848 	bl	800c7dc <UART_WaitOnFlagUntilTimeout>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d005      	beq.n	800c75e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2220      	movs	r2, #32
 800c756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800c75a:	2303      	movs	r3, #3
 800c75c:	e03a      	b.n	800c7d4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10b      	bne.n	800c77c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	881b      	ldrh	r3, [r3, #0]
 800c768:	461a      	mov	r2, r3
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c772:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c774:	69bb      	ldr	r3, [r7, #24]
 800c776:	3302      	adds	r3, #2
 800c778:	61bb      	str	r3, [r7, #24]
 800c77a:	e007      	b.n	800c78c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	781a      	ldrb	r2, [r3, #0]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	3301      	adds	r3, #1
 800c78a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c790:	b29b      	uxth	r3, r3
 800c792:	3b01      	subs	r3, #1
 800c794:	b29a      	uxth	r2, r3
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d1cb      	bne.n	800c73c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	9300      	str	r3, [sp, #0]
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	2140      	movs	r1, #64	; 0x40
 800c7ae:	68f8      	ldr	r0, [r7, #12]
 800c7b0:	f000 f814 	bl	800c7dc <UART_WaitOnFlagUntilTimeout>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d005      	beq.n	800c7c6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2220      	movs	r2, #32
 800c7be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800c7c2:	2303      	movs	r3, #3
 800c7c4:	e006      	b.n	800c7d4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2220      	movs	r2, #32
 800c7ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	e000      	b.n	800c7d4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c7d2:	2302      	movs	r3, #2
  }
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3720      	adds	r7, #32
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b086      	sub	sp, #24
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	603b      	str	r3, [r7, #0]
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7ec:	e03b      	b.n	800c866 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7ee:	6a3b      	ldr	r3, [r7, #32]
 800c7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f4:	d037      	beq.n	800c866 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7f6:	f7fc faef 	bl	8008dd8 <HAL_GetTick>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	6a3a      	ldr	r2, [r7, #32]
 800c802:	429a      	cmp	r2, r3
 800c804:	d302      	bcc.n	800c80c <UART_WaitOnFlagUntilTimeout+0x30>
 800c806:	6a3b      	ldr	r3, [r7, #32]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d101      	bne.n	800c810 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e03a      	b.n	800c886 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	f003 0304 	and.w	r3, r3, #4
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d023      	beq.n	800c866 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	2b80      	cmp	r3, #128	; 0x80
 800c822:	d020      	beq.n	800c866 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	2b40      	cmp	r3, #64	; 0x40
 800c828:	d01d      	beq.n	800c866 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 0308 	and.w	r3, r3, #8
 800c834:	2b08      	cmp	r3, #8
 800c836:	d116      	bne.n	800c866 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c838:	2300      	movs	r3, #0
 800c83a:	617b      	str	r3, [r7, #20]
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	617b      	str	r3, [r7, #20]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	617b      	str	r3, [r7, #20]
 800c84c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c84e:	68f8      	ldr	r0, [r7, #12]
 800c850:	f000 f81d 	bl	800c88e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2208      	movs	r2, #8
 800c858:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2200      	movs	r2, #0
 800c85e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c862:	2301      	movs	r3, #1
 800c864:	e00f      	b.n	800c886 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	4013      	ands	r3, r2
 800c870:	68ba      	ldr	r2, [r7, #8]
 800c872:	429a      	cmp	r2, r3
 800c874:	bf0c      	ite	eq
 800c876:	2301      	moveq	r3, #1
 800c878:	2300      	movne	r3, #0
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	461a      	mov	r2, r3
 800c87e:	79fb      	ldrb	r3, [r7, #7]
 800c880:	429a      	cmp	r2, r3
 800c882:	d0b4      	beq.n	800c7ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3718      	adds	r7, #24
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c88e:	b480      	push	{r7}
 800c890:	b095      	sub	sp, #84	; 0x54
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	330c      	adds	r3, #12
 800c89c:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a0:	e853 3f00 	ldrex	r3, [r3]
 800c8a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c8ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	330c      	adds	r3, #12
 800c8b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8b6:	643a      	str	r2, [r7, #64]	; 0x40
 800c8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c8bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8be:	e841 2300 	strex	r3, r2, [r1]
 800c8c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1e5      	bne.n	800c896 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	3314      	adds	r3, #20
 800c8d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	e853 3f00 	ldrex	r3, [r3]
 800c8d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	f023 0301 	bic.w	r3, r3, #1
 800c8e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3314      	adds	r3, #20
 800c8e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8f2:	e841 2300 	strex	r3, r2, [r1]
 800c8f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1e5      	bne.n	800c8ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c902:	2b01      	cmp	r3, #1
 800c904:	d119      	bne.n	800c93a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	330c      	adds	r3, #12
 800c90c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	e853 3f00 	ldrex	r3, [r3]
 800c914:	60bb      	str	r3, [r7, #8]
   return(result);
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	f023 0310 	bic.w	r3, r3, #16
 800c91c:	647b      	str	r3, [r7, #68]	; 0x44
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	330c      	adds	r3, #12
 800c924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c926:	61ba      	str	r2, [r7, #24]
 800c928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c92a:	6979      	ldr	r1, [r7, #20]
 800c92c:	69ba      	ldr	r2, [r7, #24]
 800c92e:	e841 2300 	strex	r3, r2, [r1]
 800c932:	613b      	str	r3, [r7, #16]
   return(result);
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1e5      	bne.n	800c906 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2220      	movs	r2, #32
 800c93e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2200      	movs	r2, #0
 800c946:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c948:	bf00      	nop
 800c94a:	3754      	adds	r7, #84	; 0x54
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bc80      	pop	{r7}
 800c950:	4770      	bx	lr
	...

0800c954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	68da      	ldr	r2, [r3, #12]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	430a      	orrs	r2, r1
 800c970:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	689a      	ldr	r2, [r3, #8]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	691b      	ldr	r3, [r3, #16]
 800c97a:	431a      	orrs	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	695b      	ldr	r3, [r3, #20]
 800c980:	4313      	orrs	r3, r2
 800c982:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c98e:	f023 030c 	bic.w	r3, r3, #12
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	6812      	ldr	r2, [r2, #0]
 800c996:	68b9      	ldr	r1, [r7, #8]
 800c998:	430b      	orrs	r3, r1
 800c99a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	695b      	ldr	r3, [r3, #20]
 800c9a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	699a      	ldr	r2, [r3, #24]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	430a      	orrs	r2, r1
 800c9b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a2c      	ldr	r2, [pc, #176]	; (800ca68 <UART_SetConfig+0x114>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d103      	bne.n	800c9c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c9bc:	f7fe fcaa 	bl	800b314 <HAL_RCC_GetPCLK2Freq>
 800c9c0:	60f8      	str	r0, [r7, #12]
 800c9c2:	e002      	b.n	800c9ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c9c4:	f7fe fc92 	bl	800b2ec <HAL_RCC_GetPCLK1Freq>
 800c9c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4413      	add	r3, r2
 800c9d2:	009a      	lsls	r2, r3, #2
 800c9d4:	441a      	add	r2, r3
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9e0:	4a22      	ldr	r2, [pc, #136]	; (800ca6c <UART_SetConfig+0x118>)
 800c9e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9e6:	095b      	lsrs	r3, r3, #5
 800c9e8:	0119      	lsls	r1, r3, #4
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	009b      	lsls	r3, r3, #2
 800c9f0:	4413      	add	r3, r2
 800c9f2:	009a      	lsls	r2, r3, #2
 800c9f4:	441a      	add	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	fbb2 f2f3 	udiv	r2, r2, r3
 800ca00:	4b1a      	ldr	r3, [pc, #104]	; (800ca6c <UART_SetConfig+0x118>)
 800ca02:	fba3 0302 	umull	r0, r3, r3, r2
 800ca06:	095b      	lsrs	r3, r3, #5
 800ca08:	2064      	movs	r0, #100	; 0x64
 800ca0a:	fb00 f303 	mul.w	r3, r0, r3
 800ca0e:	1ad3      	subs	r3, r2, r3
 800ca10:	011b      	lsls	r3, r3, #4
 800ca12:	3332      	adds	r3, #50	; 0x32
 800ca14:	4a15      	ldr	r2, [pc, #84]	; (800ca6c <UART_SetConfig+0x118>)
 800ca16:	fba2 2303 	umull	r2, r3, r2, r3
 800ca1a:	095b      	lsrs	r3, r3, #5
 800ca1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca20:	4419      	add	r1, r3
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	4613      	mov	r3, r2
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4413      	add	r3, r2
 800ca2a:	009a      	lsls	r2, r3, #2
 800ca2c:	441a      	add	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	fbb2 f2f3 	udiv	r2, r2, r3
 800ca38:	4b0c      	ldr	r3, [pc, #48]	; (800ca6c <UART_SetConfig+0x118>)
 800ca3a:	fba3 0302 	umull	r0, r3, r3, r2
 800ca3e:	095b      	lsrs	r3, r3, #5
 800ca40:	2064      	movs	r0, #100	; 0x64
 800ca42:	fb00 f303 	mul.w	r3, r0, r3
 800ca46:	1ad3      	subs	r3, r2, r3
 800ca48:	011b      	lsls	r3, r3, #4
 800ca4a:	3332      	adds	r3, #50	; 0x32
 800ca4c:	4a07      	ldr	r2, [pc, #28]	; (800ca6c <UART_SetConfig+0x118>)
 800ca4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca52:	095b      	lsrs	r3, r3, #5
 800ca54:	f003 020f 	and.w	r2, r3, #15
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	440a      	add	r2, r1
 800ca5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800ca60:	bf00      	nop
 800ca62:	3710      	adds	r7, #16
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	40013800 	.word	0x40013800
 800ca6c:	51eb851f 	.word	0x51eb851f

0800ca70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	60f8      	str	r0, [r7, #12]
 800ca78:	4638      	mov	r0, r7
 800ca7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3714      	adds	r7, #20
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bc80      	pop	{r7}
 800ca88:	4770      	bx	lr

0800ca8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ca8a:	b480      	push	{r7}
 800ca8c:	b085      	sub	sp, #20
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ca92:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800ca96:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ca9e:	b29a      	uxth	r2, r3
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	43db      	mvns	r3, r3
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	4013      	ands	r3, r2
 800caaa:	b29a      	uxth	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	bc80      	pop	{r7}
 800cabc:	4770      	bx	lr

0800cabe <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800cabe:	b480      	push	{r7}
 800cac0:	b083      	sub	sp, #12
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
 800cac6:	460b      	mov	r3, r1
 800cac8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800caca:	2300      	movs	r3, #0
}
 800cacc:	4618      	mov	r0, r3
 800cace:	370c      	adds	r7, #12
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bc80      	pop	{r7}
 800cad4:	4770      	bx	lr

0800cad6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cad6:	b480      	push	{r7}
 800cad8:	b085      	sub	sp, #20
 800cada:	af00      	add	r7, sp, #0
 800cadc:	60f8      	str	r0, [r7, #12]
 800cade:	4638      	mov	r0, r7
 800cae0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2201      	movs	r2, #1
 800cae8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2200      	movs	r2, #0
 800caf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2200      	movs	r2, #0
 800caf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800cb04:	2300      	movs	r3, #0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3714      	adds	r7, #20
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bc80      	pop	{r7}
 800cb0e:	4770      	bx	lr

0800cb10 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b0c2      	sub	sp, #264	; 0x108
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	1d3b      	adds	r3, r7, #4
 800cb18:	6018      	str	r0, [r3, #0]
 800cb1a:	463b      	mov	r3, r7
 800cb1c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cb1e:	463b      	mov	r3, r7
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	785b      	ldrb	r3, [r3, #1]
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	f040 8545 	bne.w	800d5b4 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800cb2a:	463b      	mov	r3, r7
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	699a      	ldr	r2, [r3, #24]
 800cb30:	463b      	mov	r3, r7
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	691b      	ldr	r3, [r3, #16]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d905      	bls.n	800cb46 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800cb3a:	463b      	mov	r3, r7
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	691b      	ldr	r3, [r3, #16]
 800cb40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cb44:	e004      	b.n	800cb50 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800cb46:	463b      	mov	r3, r7
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	699b      	ldr	r3, [r3, #24]
 800cb4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800cb50:	463b      	mov	r3, r7
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	7b1b      	ldrb	r3, [r3, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d128      	bne.n	800cbac <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cb5a:	463b      	mov	r3, r7
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	6959      	ldr	r1, [r3, #20]
 800cb60:	463b      	mov	r3, r7
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	88da      	ldrh	r2, [r3, #6]
 800cb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	1d38      	adds	r0, r7, #4
 800cb6e:	6800      	ldr	r0, [r0, #0]
 800cb70:	f001 f946 	bl	800de00 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cb74:	1d3b      	adds	r3, r7, #4
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	613b      	str	r3, [r7, #16]
 800cb7a:	1d3b      	adds	r3, r7, #4
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	461a      	mov	r2, r3
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	4413      	add	r3, r2
 800cb8a:	613b      	str	r3, [r7, #16]
 800cb8c:	463b      	mov	r3, r7
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	011a      	lsls	r2, r3, #4
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	4413      	add	r3, r2
 800cb98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cb9c:	60fb      	str	r3, [r7, #12]
 800cb9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cba2:	b29a      	uxth	r2, r3
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	801a      	strh	r2, [r3, #0]
 800cba8:	f000 bcdb 	b.w	800d562 <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cbac:	463b      	mov	r3, r7
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	78db      	ldrb	r3, [r3, #3]
 800cbb2:	2b02      	cmp	r3, #2
 800cbb4:	f040 836f 	bne.w	800d296 <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cbb8:	463b      	mov	r3, r7
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6a1a      	ldr	r2, [r3, #32]
 800cbbe:	463b      	mov	r3, r7
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	691b      	ldr	r3, [r3, #16]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	f240 8313 	bls.w	800d1f0 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cbca:	1d3b      	adds	r3, r7, #4
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	463b      	mov	r3, r7
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	4413      	add	r3, r2
 800cbd8:	881b      	ldrh	r3, [r3, #0]
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbe4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800cbe8:	1d3b      	adds	r3, r7, #4
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	463b      	mov	r3, r7
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	441a      	add	r2, r3
 800cbf6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cbfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc02:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800cc06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cc0e:	463b      	mov	r3, r7
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	6a1a      	ldr	r2, [r3, #32]
 800cc14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc18:	1ad2      	subs	r2, r2, r3
 800cc1a:	463b      	mov	r3, r7
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cc20:	1d3b      	adds	r3, r7, #4
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	463b      	mov	r3, r7
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	4413      	add	r3, r2
 800cc2e:	881b      	ldrh	r3, [r3, #0]
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	f000 816d 	beq.w	800cf16 <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cc3c:	1d3b      	adds	r3, r7, #4
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	633b      	str	r3, [r7, #48]	; 0x30
 800cc42:	463b      	mov	r3, r7
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	785b      	ldrb	r3, [r3, #1]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d16e      	bne.n	800cd2a <USB_EPStartXfer+0x21a>
 800cc4c:	1d3b      	adds	r3, r7, #4
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc52:	1d3b      	adds	r3, r7, #4
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc60:	4413      	add	r3, r2
 800cc62:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc64:	463b      	mov	r3, r7
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	011a      	lsls	r2, r3, #4
 800cc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6e:	4413      	add	r3, r2
 800cc70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cc74:	627b      	str	r3, [r7, #36]	; 0x24
 800cc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc78:	881b      	ldrh	r3, [r3, #0]
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc84:	801a      	strh	r2, [r3, #0]
 800cc86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc8a:	2b3e      	cmp	r3, #62	; 0x3e
 800cc8c:	d921      	bls.n	800ccd2 <USB_EPStartXfer+0x1c2>
 800cc8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc92:	095b      	lsrs	r3, r3, #5
 800cc94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cc98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc9c:	f003 031f 	and.w	r3, r3, #31
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d104      	bne.n	800ccae <USB_EPStartXfer+0x19e>
 800cca4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ccae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb0:	881b      	ldrh	r3, [r3, #0]
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	029b      	lsls	r3, r3, #10
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccce:	801a      	strh	r2, [r3, #0]
 800ccd0:	e047      	b.n	800cd62 <USB_EPStartXfer+0x252>
 800ccd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d10a      	bne.n	800ccf0 <USB_EPStartXfer+0x1e0>
 800ccda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccdc:	881b      	ldrh	r3, [r3, #0]
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccec:	801a      	strh	r2, [r3, #0]
 800ccee:	e038      	b.n	800cd62 <USB_EPStartXfer+0x252>
 800ccf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccf4:	085b      	lsrs	r3, r3, #1
 800ccf6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ccfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccfe:	f003 0301 	and.w	r3, r3, #1
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d004      	beq.n	800cd10 <USB_EPStartXfer+0x200>
 800cd06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd12:	881b      	ldrh	r3, [r3, #0]
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	029b      	lsls	r3, r3, #10
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	4313      	orrs	r3, r2
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd26:	801a      	strh	r2, [r3, #0]
 800cd28:	e01b      	b.n	800cd62 <USB_EPStartXfer+0x252>
 800cd2a:	463b      	mov	r3, r7
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	785b      	ldrb	r3, [r3, #1]
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d116      	bne.n	800cd62 <USB_EPStartXfer+0x252>
 800cd34:	1d3b      	adds	r3, r7, #4
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	461a      	mov	r2, r3
 800cd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd42:	4413      	add	r3, r2
 800cd44:	633b      	str	r3, [r7, #48]	; 0x30
 800cd46:	463b      	mov	r3, r7
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	011a      	lsls	r2, r3, #4
 800cd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd50:	4413      	add	r3, r2
 800cd52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cd56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cd62:	463b      	mov	r3, r7
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	895b      	ldrh	r3, [r3, #10]
 800cd68:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd6c:	463b      	mov	r3, r7
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	6959      	ldr	r1, [r3, #20]
 800cd72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cd7c:	1d38      	adds	r0, r7, #4
 800cd7e:	6800      	ldr	r0, [r0, #0]
 800cd80:	f001 f83e 	bl	800de00 <USB_WritePMA>
            ep->xfer_buff += len;
 800cd84:	463b      	mov	r3, r7
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	695a      	ldr	r2, [r3, #20]
 800cd8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd8e:	441a      	add	r2, r3
 800cd90:	463b      	mov	r3, r7
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cd96:	463b      	mov	r3, r7
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	6a1a      	ldr	r2, [r3, #32]
 800cd9c:	463b      	mov	r3, r7
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	691b      	ldr	r3, [r3, #16]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d909      	bls.n	800cdba <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 800cda6:	463b      	mov	r3, r7
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	6a1a      	ldr	r2, [r3, #32]
 800cdac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdb0:	1ad2      	subs	r2, r2, r3
 800cdb2:	463b      	mov	r3, r7
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	621a      	str	r2, [r3, #32]
 800cdb8:	e008      	b.n	800cdcc <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 800cdba:	463b      	mov	r3, r7
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	6a1b      	ldr	r3, [r3, #32]
 800cdc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800cdc4:	463b      	mov	r3, r7
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cdcc:	463b      	mov	r3, r7
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	785b      	ldrb	r3, [r3, #1]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d16e      	bne.n	800ceb4 <USB_EPStartXfer+0x3a4>
 800cdd6:	1d3b      	adds	r3, r7, #4
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	61bb      	str	r3, [r7, #24]
 800cddc:	1d3b      	adds	r3, r7, #4
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	461a      	mov	r2, r3
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	4413      	add	r3, r2
 800cdec:	61bb      	str	r3, [r7, #24]
 800cdee:	463b      	mov	r3, r7
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	011a      	lsls	r2, r3, #4
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cdfe:	617b      	str	r3, [r7, #20]
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	881b      	ldrh	r3, [r3, #0]
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce0a:	b29a      	uxth	r2, r3
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	801a      	strh	r2, [r3, #0]
 800ce10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce14:	2b3e      	cmp	r3, #62	; 0x3e
 800ce16:	d921      	bls.n	800ce5c <USB_EPStartXfer+0x34c>
 800ce18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce1c:	095b      	lsrs	r3, r3, #5
 800ce1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ce22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce26:	f003 031f 	and.w	r3, r3, #31
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d104      	bne.n	800ce38 <USB_EPStartXfer+0x328>
 800ce2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce32:	3b01      	subs	r3, #1
 800ce34:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	881b      	ldrh	r3, [r3, #0]
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	029b      	lsls	r3, r3, #10
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	801a      	strh	r2, [r3, #0]
 800ce5a:	e04a      	b.n	800cef2 <USB_EPStartXfer+0x3e2>
 800ce5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d10a      	bne.n	800ce7a <USB_EPStartXfer+0x36a>
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	881b      	ldrh	r3, [r3, #0]
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce72:	b29a      	uxth	r2, r3
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	801a      	strh	r2, [r3, #0]
 800ce78:	e03b      	b.n	800cef2 <USB_EPStartXfer+0x3e2>
 800ce7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce7e:	085b      	lsrs	r3, r3, #1
 800ce80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ce84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce88:	f003 0301 	and.w	r3, r3, #1
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d004      	beq.n	800ce9a <USB_EPStartXfer+0x38a>
 800ce90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce94:	3301      	adds	r3, #1
 800ce96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	881b      	ldrh	r3, [r3, #0]
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	029b      	lsls	r3, r3, #10
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	801a      	strh	r2, [r3, #0]
 800ceb2:	e01e      	b.n	800cef2 <USB_EPStartXfer+0x3e2>
 800ceb4:	463b      	mov	r3, r7
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	785b      	ldrb	r3, [r3, #1]
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d119      	bne.n	800cef2 <USB_EPStartXfer+0x3e2>
 800cebe:	1d3b      	adds	r3, r7, #4
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	623b      	str	r3, [r7, #32]
 800cec4:	1d3b      	adds	r3, r7, #4
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cecc:	b29b      	uxth	r3, r3
 800cece:	461a      	mov	r2, r3
 800ced0:	6a3b      	ldr	r3, [r7, #32]
 800ced2:	4413      	add	r3, r2
 800ced4:	623b      	str	r3, [r7, #32]
 800ced6:	463b      	mov	r3, r7
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	011a      	lsls	r2, r3, #4
 800cede:	6a3b      	ldr	r3, [r7, #32]
 800cee0:	4413      	add	r3, r2
 800cee2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cee6:	61fb      	str	r3, [r7, #28]
 800cee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cef2:	463b      	mov	r3, r7
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	891b      	ldrh	r3, [r3, #8]
 800cef8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cefc:	463b      	mov	r3, r7
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	6959      	ldr	r1, [r3, #20]
 800cf02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cf0c:	1d38      	adds	r0, r7, #4
 800cf0e:	6800      	ldr	r0, [r0, #0]
 800cf10:	f000 ff76 	bl	800de00 <USB_WritePMA>
 800cf14:	e325      	b.n	800d562 <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cf16:	463b      	mov	r3, r7
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	785b      	ldrb	r3, [r3, #1]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d16e      	bne.n	800cffe <USB_EPStartXfer+0x4ee>
 800cf20:	1d3b      	adds	r3, r7, #4
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf26:	1d3b      	adds	r3, r7, #4
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	461a      	mov	r2, r3
 800cf32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf34:	4413      	add	r3, r2
 800cf36:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf38:	463b      	mov	r3, r7
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	011a      	lsls	r2, r3, #4
 800cf40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf42:	4413      	add	r3, r2
 800cf44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cf48:	647b      	str	r3, [r7, #68]	; 0x44
 800cf4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf4c:	881b      	ldrh	r3, [r3, #0]
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf54:	b29a      	uxth	r2, r3
 800cf56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf58:	801a      	strh	r2, [r3, #0]
 800cf5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf5e:	2b3e      	cmp	r3, #62	; 0x3e
 800cf60:	d921      	bls.n	800cfa6 <USB_EPStartXfer+0x496>
 800cf62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf66:	095b      	lsrs	r3, r3, #5
 800cf68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cf6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf70:	f003 031f 	and.w	r3, r3, #31
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d104      	bne.n	800cf82 <USB_EPStartXfer+0x472>
 800cf78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cf7c:	3b01      	subs	r3, #1
 800cf7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cf82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf84:	881b      	ldrh	r3, [r3, #0]
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	029b      	lsls	r3, r3, #10
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	4313      	orrs	r3, r2
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfa2:	801a      	strh	r2, [r3, #0]
 800cfa4:	e04a      	b.n	800d03c <USB_EPStartXfer+0x52c>
 800cfa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d10a      	bne.n	800cfc4 <USB_EPStartXfer+0x4b4>
 800cfae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfb0:	881b      	ldrh	r3, [r3, #0]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfbc:	b29a      	uxth	r2, r3
 800cfbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfc0:	801a      	strh	r2, [r3, #0]
 800cfc2:	e03b      	b.n	800d03c <USB_EPStartXfer+0x52c>
 800cfc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfc8:	085b      	lsrs	r3, r3, #1
 800cfca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cfce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfd2:	f003 0301 	and.w	r3, r3, #1
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d004      	beq.n	800cfe4 <USB_EPStartXfer+0x4d4>
 800cfda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cfde:	3301      	adds	r3, #1
 800cfe0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cfe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfe6:	881b      	ldrh	r3, [r3, #0]
 800cfe8:	b29a      	uxth	r2, r3
 800cfea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	029b      	lsls	r3, r3, #10
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	4313      	orrs	r3, r2
 800cff6:	b29a      	uxth	r2, r3
 800cff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cffa:	801a      	strh	r2, [r3, #0]
 800cffc:	e01e      	b.n	800d03c <USB_EPStartXfer+0x52c>
 800cffe:	463b      	mov	r3, r7
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	785b      	ldrb	r3, [r3, #1]
 800d004:	2b01      	cmp	r3, #1
 800d006:	d119      	bne.n	800d03c <USB_EPStartXfer+0x52c>
 800d008:	1d3b      	adds	r3, r7, #4
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	653b      	str	r3, [r7, #80]	; 0x50
 800d00e:	1d3b      	adds	r3, r7, #4
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d016:	b29b      	uxth	r3, r3
 800d018:	461a      	mov	r2, r3
 800d01a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d01c:	4413      	add	r3, r2
 800d01e:	653b      	str	r3, [r7, #80]	; 0x50
 800d020:	463b      	mov	r3, r7
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	011a      	lsls	r2, r3, #4
 800d028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d02a:	4413      	add	r3, r2
 800d02c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d030:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d036:	b29a      	uxth	r2, r3
 800d038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d03a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d03c:	463b      	mov	r3, r7
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	891b      	ldrh	r3, [r3, #8]
 800d042:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d046:	463b      	mov	r3, r7
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	6959      	ldr	r1, [r3, #20]
 800d04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d050:	b29b      	uxth	r3, r3
 800d052:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d056:	1d38      	adds	r0, r7, #4
 800d058:	6800      	ldr	r0, [r0, #0]
 800d05a:	f000 fed1 	bl	800de00 <USB_WritePMA>
            ep->xfer_buff += len;
 800d05e:	463b      	mov	r3, r7
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	695a      	ldr	r2, [r3, #20]
 800d064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d068:	441a      	add	r2, r3
 800d06a:	463b      	mov	r3, r7
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d070:	463b      	mov	r3, r7
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	6a1a      	ldr	r2, [r3, #32]
 800d076:	463b      	mov	r3, r7
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	691b      	ldr	r3, [r3, #16]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d909      	bls.n	800d094 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 800d080:	463b      	mov	r3, r7
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	6a1a      	ldr	r2, [r3, #32]
 800d086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d08a:	1ad2      	subs	r2, r2, r3
 800d08c:	463b      	mov	r3, r7
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	621a      	str	r2, [r3, #32]
 800d092:	e008      	b.n	800d0a6 <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 800d094:	463b      	mov	r3, r7
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	6a1b      	ldr	r3, [r3, #32]
 800d09a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d09e:	463b      	mov	r3, r7
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d0a6:	1d3b      	adds	r3, r7, #4
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	643b      	str	r3, [r7, #64]	; 0x40
 800d0ac:	463b      	mov	r3, r7
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	785b      	ldrb	r3, [r3, #1]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d16e      	bne.n	800d194 <USB_EPStartXfer+0x684>
 800d0b6:	1d3b      	adds	r3, r7, #4
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800d0bc:	1d3b      	adds	r3, r7, #4
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ca:	4413      	add	r3, r2
 800d0cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800d0ce:	463b      	mov	r3, r7
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	011a      	lsls	r2, r3, #4
 800d0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d8:	4413      	add	r3, r2
 800d0da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d0de:	637b      	str	r3, [r7, #52]	; 0x34
 800d0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e2:	881b      	ldrh	r3, [r3, #0]
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d0ea:	b29a      	uxth	r2, r3
 800d0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ee:	801a      	strh	r2, [r3, #0]
 800d0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0f4:	2b3e      	cmp	r3, #62	; 0x3e
 800d0f6:	d921      	bls.n	800d13c <USB_EPStartXfer+0x62c>
 800d0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0fc:	095b      	lsrs	r3, r3, #5
 800d0fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d106:	f003 031f 	and.w	r3, r3, #31
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d104      	bne.n	800d118 <USB_EPStartXfer+0x608>
 800d10e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d112:	3b01      	subs	r3, #1
 800d114:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d11a:	881b      	ldrh	r3, [r3, #0]
 800d11c:	b29a      	uxth	r2, r3
 800d11e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d122:	b29b      	uxth	r3, r3
 800d124:	029b      	lsls	r3, r3, #10
 800d126:	b29b      	uxth	r3, r3
 800d128:	4313      	orrs	r3, r2
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d134:	b29a      	uxth	r2, r3
 800d136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d138:	801a      	strh	r2, [r3, #0]
 800d13a:	e047      	b.n	800d1cc <USB_EPStartXfer+0x6bc>
 800d13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10a      	bne.n	800d15a <USB_EPStartXfer+0x64a>
 800d144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	b29b      	uxth	r3, r3
 800d14a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d14e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d152:	b29a      	uxth	r2, r3
 800d154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d156:	801a      	strh	r2, [r3, #0]
 800d158:	e038      	b.n	800d1cc <USB_EPStartXfer+0x6bc>
 800d15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d15e:	085b      	lsrs	r3, r3, #1
 800d160:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d168:	f003 0301 	and.w	r3, r3, #1
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d004      	beq.n	800d17a <USB_EPStartXfer+0x66a>
 800d170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d174:	3301      	adds	r3, #1
 800d176:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d17c:	881b      	ldrh	r3, [r3, #0]
 800d17e:	b29a      	uxth	r2, r3
 800d180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d184:	b29b      	uxth	r3, r3
 800d186:	029b      	lsls	r3, r3, #10
 800d188:	b29b      	uxth	r3, r3
 800d18a:	4313      	orrs	r3, r2
 800d18c:	b29a      	uxth	r2, r3
 800d18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d190:	801a      	strh	r2, [r3, #0]
 800d192:	e01b      	b.n	800d1cc <USB_EPStartXfer+0x6bc>
 800d194:	463b      	mov	r3, r7
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	785b      	ldrb	r3, [r3, #1]
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d116      	bne.n	800d1cc <USB_EPStartXfer+0x6bc>
 800d19e:	1d3b      	adds	r3, r7, #4
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1ac:	4413      	add	r3, r2
 800d1ae:	643b      	str	r3, [r7, #64]	; 0x40
 800d1b0:	463b      	mov	r3, r7
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	011a      	lsls	r2, r3, #4
 800d1b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1ba:	4413      	add	r3, r2
 800d1bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1c6:	b29a      	uxth	r2, r3
 800d1c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d1cc:	463b      	mov	r3, r7
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	895b      	ldrh	r3, [r3, #10]
 800d1d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d1d6:	463b      	mov	r3, r7
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	6959      	ldr	r1, [r3, #20]
 800d1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d1e6:	1d38      	adds	r0, r7, #4
 800d1e8:	6800      	ldr	r0, [r0, #0]
 800d1ea:	f000 fe09 	bl	800de00 <USB_WritePMA>
 800d1ee:	e1b8      	b.n	800d562 <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d1f0:	463b      	mov	r3, r7
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	6a1b      	ldr	r3, [r3, #32]
 800d1f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d1fa:	1d3b      	adds	r3, r7, #4
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	463b      	mov	r3, r7
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	881b      	ldrh	r3, [r3, #0]
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d214:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d218:	1d3b      	adds	r3, r7, #4
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	463b      	mov	r3, r7
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	441a      	add	r2, r3
 800d226:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d22a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d22e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d23e:	1d3b      	adds	r3, r7, #4
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d244:	1d3b      	adds	r3, r7, #4
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	461a      	mov	r2, r3
 800d250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d252:	4413      	add	r3, r2
 800d254:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d256:	463b      	mov	r3, r7
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	011a      	lsls	r2, r3, #4
 800d25e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d260:	4413      	add	r3, r2
 800d262:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d266:	65bb      	str	r3, [r7, #88]	; 0x58
 800d268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d270:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d272:	463b      	mov	r3, r7
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	891b      	ldrh	r3, [r3, #8]
 800d278:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d27c:	463b      	mov	r3, r7
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	6959      	ldr	r1, [r3, #20]
 800d282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d286:	b29b      	uxth	r3, r3
 800d288:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d28c:	1d38      	adds	r0, r7, #4
 800d28e:	6800      	ldr	r0, [r0, #0]
 800d290:	f000 fdb6 	bl	800de00 <USB_WritePMA>
 800d294:	e165      	b.n	800d562 <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d296:	463b      	mov	r3, r7
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	6a1a      	ldr	r2, [r3, #32]
 800d29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2a0:	1ad2      	subs	r2, r2, r3
 800d2a2:	463b      	mov	r3, r7
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d2a8:	1d3b      	adds	r3, r7, #4
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	463b      	mov	r3, r7
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	4413      	add	r3, r2
 800d2b6:	881b      	ldrh	r3, [r3, #0]
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f000 80a5 	beq.w	800d40e <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d2c4:	1d3b      	adds	r3, r7, #4
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	673b      	str	r3, [r7, #112]	; 0x70
 800d2ca:	463b      	mov	r3, r7
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	785b      	ldrb	r3, [r3, #1]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d16e      	bne.n	800d3b2 <USB_EPStartXfer+0x8a2>
 800d2d4:	1d3b      	adds	r3, r7, #4
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2da:	1d3b      	adds	r3, r7, #4
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2e8:	4413      	add	r3, r2
 800d2ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2ec:	463b      	mov	r3, r7
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	011a      	lsls	r2, r3, #4
 800d2f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2f6:	4413      	add	r3, r2
 800d2f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d2fc:	667b      	str	r3, [r7, #100]	; 0x64
 800d2fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d300:	881b      	ldrh	r3, [r3, #0]
 800d302:	b29b      	uxth	r3, r3
 800d304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d308:	b29a      	uxth	r2, r3
 800d30a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d30c:	801a      	strh	r2, [r3, #0]
 800d30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d312:	2b3e      	cmp	r3, #62	; 0x3e
 800d314:	d921      	bls.n	800d35a <USB_EPStartXfer+0x84a>
 800d316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d31a:	095b      	lsrs	r3, r3, #5
 800d31c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d324:	f003 031f 	and.w	r3, r3, #31
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d104      	bne.n	800d336 <USB_EPStartXfer+0x826>
 800d32c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d330:	3b01      	subs	r3, #1
 800d332:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d338:	881b      	ldrh	r3, [r3, #0]
 800d33a:	b29a      	uxth	r2, r3
 800d33c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d340:	b29b      	uxth	r3, r3
 800d342:	029b      	lsls	r3, r3, #10
 800d344:	b29b      	uxth	r3, r3
 800d346:	4313      	orrs	r3, r2
 800d348:	b29b      	uxth	r3, r3
 800d34a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d34e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d352:	b29a      	uxth	r2, r3
 800d354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d356:	801a      	strh	r2, [r3, #0]
 800d358:	e047      	b.n	800d3ea <USB_EPStartXfer+0x8da>
 800d35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d10a      	bne.n	800d378 <USB_EPStartXfer+0x868>
 800d362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d364:	881b      	ldrh	r3, [r3, #0]
 800d366:	b29b      	uxth	r3, r3
 800d368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d36c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d370:	b29a      	uxth	r2, r3
 800d372:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d374:	801a      	strh	r2, [r3, #0]
 800d376:	e038      	b.n	800d3ea <USB_EPStartXfer+0x8da>
 800d378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d37c:	085b      	lsrs	r3, r3, #1
 800d37e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d386:	f003 0301 	and.w	r3, r3, #1
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d004      	beq.n	800d398 <USB_EPStartXfer+0x888>
 800d38e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d392:	3301      	adds	r3, #1
 800d394:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d39a:	881b      	ldrh	r3, [r3, #0]
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	029b      	lsls	r3, r3, #10
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	b29a      	uxth	r2, r3
 800d3ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3ae:	801a      	strh	r2, [r3, #0]
 800d3b0:	e01b      	b.n	800d3ea <USB_EPStartXfer+0x8da>
 800d3b2:	463b      	mov	r3, r7
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	785b      	ldrb	r3, [r3, #1]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d116      	bne.n	800d3ea <USB_EPStartXfer+0x8da>
 800d3bc:	1d3b      	adds	r3, r7, #4
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3ca:	4413      	add	r3, r2
 800d3cc:	673b      	str	r3, [r7, #112]	; 0x70
 800d3ce:	463b      	mov	r3, r7
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	011a      	lsls	r2, r3, #4
 800d3d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3d8:	4413      	add	r3, r2
 800d3da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d3de:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3e4:	b29a      	uxth	r2, r3
 800d3e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d3ea:	463b      	mov	r3, r7
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	895b      	ldrh	r3, [r3, #10]
 800d3f0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d3f4:	463b      	mov	r3, r7
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	6959      	ldr	r1, [r3, #20]
 800d3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d404:	1d38      	adds	r0, r7, #4
 800d406:	6800      	ldr	r0, [r0, #0]
 800d408:	f000 fcfa 	bl	800de00 <USB_WritePMA>
 800d40c:	e0a9      	b.n	800d562 <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d40e:	463b      	mov	r3, r7
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	785b      	ldrb	r3, [r3, #1]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d16e      	bne.n	800d4f6 <USB_EPStartXfer+0x9e6>
 800d418:	1d3b      	adds	r3, r7, #4
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d41e:	1d3b      	adds	r3, r7, #4
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d426:	b29b      	uxth	r3, r3
 800d428:	461a      	mov	r2, r3
 800d42a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d42c:	4413      	add	r3, r2
 800d42e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d430:	463b      	mov	r3, r7
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	011a      	lsls	r2, r3, #4
 800d438:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d43a:	4413      	add	r3, r2
 800d43c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d440:	67bb      	str	r3, [r7, #120]	; 0x78
 800d442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d444:	881b      	ldrh	r3, [r3, #0]
 800d446:	b29b      	uxth	r3, r3
 800d448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d450:	801a      	strh	r2, [r3, #0]
 800d452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d456:	2b3e      	cmp	r3, #62	; 0x3e
 800d458:	d921      	bls.n	800d49e <USB_EPStartXfer+0x98e>
 800d45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d45e:	095b      	lsrs	r3, r3, #5
 800d460:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d468:	f003 031f 	and.w	r3, r3, #31
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d104      	bne.n	800d47a <USB_EPStartXfer+0x96a>
 800d470:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d474:	3b01      	subs	r3, #1
 800d476:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d47a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d47c:	881b      	ldrh	r3, [r3, #0]
 800d47e:	b29a      	uxth	r2, r3
 800d480:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d484:	b29b      	uxth	r3, r3
 800d486:	029b      	lsls	r3, r3, #10
 800d488:	b29b      	uxth	r3, r3
 800d48a:	4313      	orrs	r3, r2
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d496:	b29a      	uxth	r2, r3
 800d498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d49a:	801a      	strh	r2, [r3, #0]
 800d49c:	e050      	b.n	800d540 <USB_EPStartXfer+0xa30>
 800d49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d10a      	bne.n	800d4bc <USB_EPStartXfer+0x9ac>
 800d4a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4a8:	881b      	ldrh	r3, [r3, #0]
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4b4:	b29a      	uxth	r2, r3
 800d4b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4b8:	801a      	strh	r2, [r3, #0]
 800d4ba:	e041      	b.n	800d540 <USB_EPStartXfer+0xa30>
 800d4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4c0:	085b      	lsrs	r3, r3, #1
 800d4c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d4c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4ca:	f003 0301 	and.w	r3, r3, #1
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d004      	beq.n	800d4dc <USB_EPStartXfer+0x9cc>
 800d4d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d4dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4de:	881b      	ldrh	r3, [r3, #0]
 800d4e0:	b29a      	uxth	r2, r3
 800d4e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	029b      	lsls	r3, r3, #10
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4f2:	801a      	strh	r2, [r3, #0]
 800d4f4:	e024      	b.n	800d540 <USB_EPStartXfer+0xa30>
 800d4f6:	463b      	mov	r3, r7
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	785b      	ldrb	r3, [r3, #1]
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d11f      	bne.n	800d540 <USB_EPStartXfer+0xa30>
 800d500:	1d3b      	adds	r3, r7, #4
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d508:	1d3b      	adds	r3, r7, #4
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d510:	b29b      	uxth	r3, r3
 800d512:	461a      	mov	r2, r3
 800d514:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d518:	4413      	add	r3, r2
 800d51a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d51e:	463b      	mov	r3, r7
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	011a      	lsls	r2, r3, #4
 800d526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d52a:	4413      	add	r3, r2
 800d52c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d538:	b29a      	uxth	r2, r3
 800d53a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d53e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d540:	463b      	mov	r3, r7
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	891b      	ldrh	r3, [r3, #8]
 800d546:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d54a:	463b      	mov	r3, r7
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	6959      	ldr	r1, [r3, #20]
 800d550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d554:	b29b      	uxth	r3, r3
 800d556:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d55a:	1d38      	adds	r0, r7, #4
 800d55c:	6800      	ldr	r0, [r0, #0]
 800d55e:	f000 fc4f 	bl	800de00 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d562:	1d3b      	adds	r3, r7, #4
 800d564:	681a      	ldr	r2, [r3, #0]
 800d566:	463b      	mov	r3, r7
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	4413      	add	r3, r2
 800d570:	881b      	ldrh	r3, [r3, #0]
 800d572:	b29b      	uxth	r3, r3
 800d574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d57c:	817b      	strh	r3, [r7, #10]
 800d57e:	897b      	ldrh	r3, [r7, #10]
 800d580:	f083 0310 	eor.w	r3, r3, #16
 800d584:	817b      	strh	r3, [r7, #10]
 800d586:	897b      	ldrh	r3, [r7, #10]
 800d588:	f083 0320 	eor.w	r3, r3, #32
 800d58c:	817b      	strh	r3, [r7, #10]
 800d58e:	1d3b      	adds	r3, r7, #4
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	463b      	mov	r3, r7
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	441a      	add	r2, r3
 800d59c:	897b      	ldrh	r3, [r7, #10]
 800d59e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	8013      	strh	r3, [r2, #0]
 800d5b2:	e3f3      	b.n	800dd9c <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d5b4:	463b      	mov	r3, r7
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	7b1b      	ldrb	r3, [r3, #12]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	f040 809c 	bne.w	800d6f8 <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d5c0:	463b      	mov	r3, r7
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	699a      	ldr	r2, [r3, #24]
 800d5c6:	463b      	mov	r3, r7
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	691b      	ldr	r3, [r3, #16]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d90e      	bls.n	800d5ee <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 800d5d0:	463b      	mov	r3, r7
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	691b      	ldr	r3, [r3, #16]
 800d5d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800d5da:	463b      	mov	r3, r7
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	699a      	ldr	r2, [r3, #24]
 800d5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5e4:	1ad2      	subs	r2, r2, r3
 800d5e6:	463b      	mov	r3, r7
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	619a      	str	r2, [r3, #24]
 800d5ec:	e008      	b.n	800d600 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 800d5ee:	463b      	mov	r3, r7
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	699b      	ldr	r3, [r3, #24]
 800d5f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800d5f8:	463b      	mov	r3, r7
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d600:	1d3b      	adds	r3, r7, #4
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d608:	1d3b      	adds	r3, r7, #4
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d610:	b29b      	uxth	r3, r3
 800d612:	461a      	mov	r2, r3
 800d614:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d618:	4413      	add	r3, r2
 800d61a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d61e:	463b      	mov	r3, r7
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	011a      	lsls	r2, r3, #4
 800d626:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d62a:	4413      	add	r3, r2
 800d62c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d638:	881b      	ldrh	r3, [r3, #0]
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d640:	b29a      	uxth	r2, r3
 800d642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d646:	801a      	strh	r2, [r3, #0]
 800d648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d64c:	2b3e      	cmp	r3, #62	; 0x3e
 800d64e:	d923      	bls.n	800d698 <USB_EPStartXfer+0xb88>
 800d650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d654:	095b      	lsrs	r3, r3, #5
 800d656:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d65e:	f003 031f 	and.w	r3, r3, #31
 800d662:	2b00      	cmp	r3, #0
 800d664:	d104      	bne.n	800d670 <USB_EPStartXfer+0xb60>
 800d666:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d66a:	3b01      	subs	r3, #1
 800d66c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d670:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d674:	881b      	ldrh	r3, [r3, #0]
 800d676:	b29a      	uxth	r2, r3
 800d678:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	029b      	lsls	r3, r3, #10
 800d680:	b29b      	uxth	r3, r3
 800d682:	4313      	orrs	r3, r2
 800d684:	b29b      	uxth	r3, r3
 800d686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d68a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d68e:	b29a      	uxth	r2, r3
 800d690:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d694:	801a      	strh	r2, [r3, #0]
 800d696:	e353      	b.n	800dd40 <USB_EPStartXfer+0x1230>
 800d698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d10c      	bne.n	800d6ba <USB_EPStartXfer+0xbaa>
 800d6a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6a4:	881b      	ldrh	r3, [r3, #0]
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6b0:	b29a      	uxth	r2, r3
 800d6b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6b6:	801a      	strh	r2, [r3, #0]
 800d6b8:	e342      	b.n	800dd40 <USB_EPStartXfer+0x1230>
 800d6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6be:	085b      	lsrs	r3, r3, #1
 800d6c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6c8:	f003 0301 	and.w	r3, r3, #1
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d004      	beq.n	800d6da <USB_EPStartXfer+0xbca>
 800d6d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d6da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6de:	881b      	ldrh	r3, [r3, #0]
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	029b      	lsls	r3, r3, #10
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	b29a      	uxth	r2, r3
 800d6f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6f4:	801a      	strh	r2, [r3, #0]
 800d6f6:	e323      	b.n	800dd40 <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d6f8:	463b      	mov	r3, r7
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	78db      	ldrb	r3, [r3, #3]
 800d6fe:	2b02      	cmp	r3, #2
 800d700:	f040 81a9 	bne.w	800da56 <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d704:	463b      	mov	r3, r7
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	785b      	ldrb	r3, [r3, #1]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	f040 8082 	bne.w	800d814 <USB_EPStartXfer+0xd04>
 800d710:	1d3b      	adds	r3, r7, #4
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d718:	1d3b      	adds	r3, r7, #4
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d720:	b29b      	uxth	r3, r3
 800d722:	461a      	mov	r2, r3
 800d724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d728:	4413      	add	r3, r2
 800d72a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d72e:	463b      	mov	r3, r7
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	011a      	lsls	r2, r3, #4
 800d736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d73a:	4413      	add	r3, r2
 800d73c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d744:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d750:	b29a      	uxth	r2, r3
 800d752:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d756:	801a      	strh	r2, [r3, #0]
 800d758:	463b      	mov	r3, r7
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	691b      	ldr	r3, [r3, #16]
 800d75e:	2b3e      	cmp	r3, #62	; 0x3e
 800d760:	d925      	bls.n	800d7ae <USB_EPStartXfer+0xc9e>
 800d762:	463b      	mov	r3, r7
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	691b      	ldr	r3, [r3, #16]
 800d768:	095b      	lsrs	r3, r3, #5
 800d76a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d76e:	463b      	mov	r3, r7
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	691b      	ldr	r3, [r3, #16]
 800d774:	f003 031f 	and.w	r3, r3, #31
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d104      	bne.n	800d786 <USB_EPStartXfer+0xc76>
 800d77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d780:	3b01      	subs	r3, #1
 800d782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d78a:	881b      	ldrh	r3, [r3, #0]
 800d78c:	b29a      	uxth	r2, r3
 800d78e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d792:	b29b      	uxth	r3, r3
 800d794:	029b      	lsls	r3, r3, #10
 800d796:	b29b      	uxth	r3, r3
 800d798:	4313      	orrs	r3, r2
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7a4:	b29a      	uxth	r2, r3
 800d7a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d7aa:	801a      	strh	r2, [r3, #0]
 800d7ac:	e058      	b.n	800d860 <USB_EPStartXfer+0xd50>
 800d7ae:	463b      	mov	r3, r7
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	691b      	ldr	r3, [r3, #16]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d10c      	bne.n	800d7d2 <USB_EPStartXfer+0xcc2>
 800d7b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d7bc:	881b      	ldrh	r3, [r3, #0]
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d7ce:	801a      	strh	r2, [r3, #0]
 800d7d0:	e046      	b.n	800d860 <USB_EPStartXfer+0xd50>
 800d7d2:	463b      	mov	r3, r7
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	691b      	ldr	r3, [r3, #16]
 800d7d8:	085b      	lsrs	r3, r3, #1
 800d7da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d7de:	463b      	mov	r3, r7
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	691b      	ldr	r3, [r3, #16]
 800d7e4:	f003 0301 	and.w	r3, r3, #1
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d004      	beq.n	800d7f6 <USB_EPStartXfer+0xce6>
 800d7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d7f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d7fa:	881b      	ldrh	r3, [r3, #0]
 800d7fc:	b29a      	uxth	r2, r3
 800d7fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d802:	b29b      	uxth	r3, r3
 800d804:	029b      	lsls	r3, r3, #10
 800d806:	b29b      	uxth	r3, r3
 800d808:	4313      	orrs	r3, r2
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d810:	801a      	strh	r2, [r3, #0]
 800d812:	e025      	b.n	800d860 <USB_EPStartXfer+0xd50>
 800d814:	463b      	mov	r3, r7
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	785b      	ldrb	r3, [r3, #1]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d120      	bne.n	800d860 <USB_EPStartXfer+0xd50>
 800d81e:	1d3b      	adds	r3, r7, #4
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d826:	1d3b      	adds	r3, r7, #4
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d82e:	b29b      	uxth	r3, r3
 800d830:	461a      	mov	r2, r3
 800d832:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d836:	4413      	add	r3, r2
 800d838:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d83c:	463b      	mov	r3, r7
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	011a      	lsls	r2, r3, #4
 800d844:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d848:	4413      	add	r3, r2
 800d84a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d84e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d852:	463b      	mov	r3, r7
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	691b      	ldr	r3, [r3, #16]
 800d858:	b29a      	uxth	r2, r3
 800d85a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d85e:	801a      	strh	r2, [r3, #0]
 800d860:	1d3b      	adds	r3, r7, #4
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d868:	463b      	mov	r3, r7
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	785b      	ldrb	r3, [r3, #1]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f040 8082 	bne.w	800d978 <USB_EPStartXfer+0xe68>
 800d874:	1d3b      	adds	r3, r7, #4
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d87c:	1d3b      	adds	r3, r7, #4
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d884:	b29b      	uxth	r3, r3
 800d886:	461a      	mov	r2, r3
 800d888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d88c:	4413      	add	r3, r2
 800d88e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d892:	463b      	mov	r3, r7
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	011a      	lsls	r2, r3, #4
 800d89a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d89e:	4413      	add	r3, r2
 800d8a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d8a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d8a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d8ac:	881b      	ldrh	r3, [r3, #0]
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d8ba:	801a      	strh	r2, [r3, #0]
 800d8bc:	463b      	mov	r3, r7
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	691b      	ldr	r3, [r3, #16]
 800d8c2:	2b3e      	cmp	r3, #62	; 0x3e
 800d8c4:	d925      	bls.n	800d912 <USB_EPStartXfer+0xe02>
 800d8c6:	463b      	mov	r3, r7
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	691b      	ldr	r3, [r3, #16]
 800d8cc:	095b      	lsrs	r3, r3, #5
 800d8ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d8d2:	463b      	mov	r3, r7
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	691b      	ldr	r3, [r3, #16]
 800d8d8:	f003 031f 	and.w	r3, r3, #31
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d104      	bne.n	800d8ea <USB_EPStartXfer+0xdda>
 800d8e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8e4:	3b01      	subs	r3, #1
 800d8e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d8ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d8ee:	881b      	ldrh	r3, [r3, #0]
 800d8f0:	b29a      	uxth	r2, r3
 800d8f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	029b      	lsls	r3, r3, #10
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d908:	b29a      	uxth	r2, r3
 800d90a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d90e:	801a      	strh	r2, [r3, #0]
 800d910:	e054      	b.n	800d9bc <USB_EPStartXfer+0xeac>
 800d912:	463b      	mov	r3, r7
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	691b      	ldr	r3, [r3, #16]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d10c      	bne.n	800d936 <USB_EPStartXfer+0xe26>
 800d91c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d920:	881b      	ldrh	r3, [r3, #0]
 800d922:	b29b      	uxth	r3, r3
 800d924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d92c:	b29a      	uxth	r2, r3
 800d92e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d932:	801a      	strh	r2, [r3, #0]
 800d934:	e042      	b.n	800d9bc <USB_EPStartXfer+0xeac>
 800d936:	463b      	mov	r3, r7
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	691b      	ldr	r3, [r3, #16]
 800d93c:	085b      	lsrs	r3, r3, #1
 800d93e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d942:	463b      	mov	r3, r7
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	691b      	ldr	r3, [r3, #16]
 800d948:	f003 0301 	and.w	r3, r3, #1
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d004      	beq.n	800d95a <USB_EPStartXfer+0xe4a>
 800d950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d954:	3301      	adds	r3, #1
 800d956:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d95a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d95e:	881b      	ldrh	r3, [r3, #0]
 800d960:	b29a      	uxth	r2, r3
 800d962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d966:	b29b      	uxth	r3, r3
 800d968:	029b      	lsls	r3, r3, #10
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	4313      	orrs	r3, r2
 800d96e:	b29a      	uxth	r2, r3
 800d970:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d974:	801a      	strh	r2, [r3, #0]
 800d976:	e021      	b.n	800d9bc <USB_EPStartXfer+0xeac>
 800d978:	463b      	mov	r3, r7
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	785b      	ldrb	r3, [r3, #1]
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d11c      	bne.n	800d9bc <USB_EPStartXfer+0xeac>
 800d982:	1d3b      	adds	r3, r7, #4
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	461a      	mov	r2, r3
 800d98e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d992:	4413      	add	r3, r2
 800d994:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d998:	463b      	mov	r3, r7
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	011a      	lsls	r2, r3, #4
 800d9a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d9a4:	4413      	add	r3, r2
 800d9a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d9aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d9ae:	463b      	mov	r3, r7
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	691b      	ldr	r3, [r3, #16]
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9ba:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d9bc:	463b      	mov	r3, r7
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	69db      	ldr	r3, [r3, #28]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	f000 81bc 	beq.w	800dd40 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d9c8:	1d3b      	adds	r3, r7, #4
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	463b      	mov	r3, r7
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	4413      	add	r3, r2
 800d9d6:	881b      	ldrh	r3, [r3, #0]
 800d9d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d9dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d9e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d005      	beq.n	800d9f4 <USB_EPStartXfer+0xee4>
 800d9e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d10d      	bne.n	800da10 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d9f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d9f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	f040 819f 	bne.w	800dd40 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800da02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800da06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f040 8198 	bne.w	800dd40 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800da10:	1d3b      	adds	r3, r7, #4
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	463b      	mov	r3, r7
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	4413      	add	r3, r2
 800da1e:	881b      	ldrh	r3, [r3, #0]
 800da20:	b29b      	uxth	r3, r3
 800da22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da2a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800da2e:	1d3b      	adds	r3, r7, #4
 800da30:	681a      	ldr	r2, [r3, #0]
 800da32:	463b      	mov	r3, r7
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	441a      	add	r2, r3
 800da3c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800da40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800da50:	b29b      	uxth	r3, r3
 800da52:	8013      	strh	r3, [r2, #0]
 800da54:	e174      	b.n	800dd40 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800da56:	463b      	mov	r3, r7
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	78db      	ldrb	r3, [r3, #3]
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	f040 816d 	bne.w	800dd3c <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800da62:	463b      	mov	r3, r7
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	699a      	ldr	r2, [r3, #24]
 800da68:	463b      	mov	r3, r7
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	691b      	ldr	r3, [r3, #16]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d90e      	bls.n	800da90 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 800da72:	463b      	mov	r3, r7
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	691b      	ldr	r3, [r3, #16]
 800da78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800da7c:	463b      	mov	r3, r7
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	699a      	ldr	r2, [r3, #24]
 800da82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da86:	1ad2      	subs	r2, r2, r3
 800da88:	463b      	mov	r3, r7
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	619a      	str	r2, [r3, #24]
 800da8e:	e008      	b.n	800daa2 <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 800da90:	463b      	mov	r3, r7
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	699b      	ldr	r3, [r3, #24]
 800da96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800da9a:	463b      	mov	r3, r7
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2200      	movs	r2, #0
 800daa0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800daa2:	463b      	mov	r3, r7
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	785b      	ldrb	r3, [r3, #1]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d17b      	bne.n	800dba4 <USB_EPStartXfer+0x1094>
 800daac:	1d3b      	adds	r3, r7, #4
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dab4:	1d3b      	adds	r3, r7, #4
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	461a      	mov	r2, r3
 800dac0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800dac4:	4413      	add	r3, r2
 800dac6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800daca:	463b      	mov	r3, r7
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	011a      	lsls	r2, r3, #4
 800dad2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800dad6:	4413      	add	r3, r2
 800dad8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dadc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dae4:	881b      	ldrh	r3, [r3, #0]
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800daec:	b29a      	uxth	r2, r3
 800daee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800daf2:	801a      	strh	r2, [r3, #0]
 800daf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800daf8:	2b3e      	cmp	r3, #62	; 0x3e
 800dafa:	d923      	bls.n	800db44 <USB_EPStartXfer+0x1034>
 800dafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db00:	095b      	lsrs	r3, r3, #5
 800db02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800db06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db0a:	f003 031f 	and.w	r3, r3, #31
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d104      	bne.n	800db1c <USB_EPStartXfer+0x100c>
 800db12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db16:	3b01      	subs	r3, #1
 800db18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800db1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800db20:	881b      	ldrh	r3, [r3, #0]
 800db22:	b29a      	uxth	r2, r3
 800db24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db28:	b29b      	uxth	r3, r3
 800db2a:	029b      	lsls	r3, r3, #10
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	4313      	orrs	r3, r2
 800db30:	b29b      	uxth	r3, r3
 800db32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db3a:	b29a      	uxth	r2, r3
 800db3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800db40:	801a      	strh	r2, [r3, #0]
 800db42:	e054      	b.n	800dbee <USB_EPStartXfer+0x10de>
 800db44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d10c      	bne.n	800db66 <USB_EPStartXfer+0x1056>
 800db4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800db50:	881b      	ldrh	r3, [r3, #0]
 800db52:	b29b      	uxth	r3, r3
 800db54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db5c:	b29a      	uxth	r2, r3
 800db5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800db62:	801a      	strh	r2, [r3, #0]
 800db64:	e043      	b.n	800dbee <USB_EPStartXfer+0x10de>
 800db66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db6a:	085b      	lsrs	r3, r3, #1
 800db6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800db70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db74:	f003 0301 	and.w	r3, r3, #1
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d004      	beq.n	800db86 <USB_EPStartXfer+0x1076>
 800db7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db80:	3301      	adds	r3, #1
 800db82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800db86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800db8a:	881b      	ldrh	r3, [r3, #0]
 800db8c:	b29a      	uxth	r2, r3
 800db8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db92:	b29b      	uxth	r3, r3
 800db94:	029b      	lsls	r3, r3, #10
 800db96:	b29b      	uxth	r3, r3
 800db98:	4313      	orrs	r3, r2
 800db9a:	b29a      	uxth	r2, r3
 800db9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dba0:	801a      	strh	r2, [r3, #0]
 800dba2:	e024      	b.n	800dbee <USB_EPStartXfer+0x10de>
 800dba4:	463b      	mov	r3, r7
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	785b      	ldrb	r3, [r3, #1]
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d11f      	bne.n	800dbee <USB_EPStartXfer+0x10de>
 800dbae:	1d3b      	adds	r3, r7, #4
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800dbb6:	1d3b      	adds	r3, r7, #4
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dbc6:	4413      	add	r3, r2
 800dbc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800dbcc:	463b      	mov	r3, r7
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	011a      	lsls	r2, r3, #4
 800dbd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dbd8:	4413      	add	r3, r2
 800dbda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dbde:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dbe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800dbec:	801a      	strh	r2, [r3, #0]
 800dbee:	1d3b      	adds	r3, r7, #4
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dbf6:	463b      	mov	r3, r7
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	785b      	ldrb	r3, [r3, #1]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d17b      	bne.n	800dcf8 <USB_EPStartXfer+0x11e8>
 800dc00:	1d3b      	adds	r3, r7, #4
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800dc08:	1d3b      	adds	r3, r7, #4
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	461a      	mov	r2, r3
 800dc14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dc18:	4413      	add	r3, r2
 800dc1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800dc1e:	463b      	mov	r3, r7
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	011a      	lsls	r2, r3, #4
 800dc26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dc2a:	4413      	add	r3, r2
 800dc2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dc30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dc34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc38:	881b      	ldrh	r3, [r3, #0]
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc40:	b29a      	uxth	r2, r3
 800dc42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc46:	801a      	strh	r2, [r3, #0]
 800dc48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc4c:	2b3e      	cmp	r3, #62	; 0x3e
 800dc4e:	d923      	bls.n	800dc98 <USB_EPStartXfer+0x1188>
 800dc50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc54:	095b      	lsrs	r3, r3, #5
 800dc56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dc5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc5e:	f003 031f 	and.w	r3, r3, #31
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d104      	bne.n	800dc70 <USB_EPStartXfer+0x1160>
 800dc66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dc70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc74:	881b      	ldrh	r3, [r3, #0]
 800dc76:	b29a      	uxth	r2, r3
 800dc78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	029b      	lsls	r3, r3, #10
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	4313      	orrs	r3, r2
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc94:	801a      	strh	r2, [r3, #0]
 800dc96:	e053      	b.n	800dd40 <USB_EPStartXfer+0x1230>
 800dc98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10c      	bne.n	800dcba <USB_EPStartXfer+0x11aa>
 800dca0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dca4:	881b      	ldrh	r3, [r3, #0]
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dcb6:	801a      	strh	r2, [r3, #0]
 800dcb8:	e042      	b.n	800dd40 <USB_EPStartXfer+0x1230>
 800dcba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcbe:	085b      	lsrs	r3, r3, #1
 800dcc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dcc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcc8:	f003 0301 	and.w	r3, r3, #1
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d004      	beq.n	800dcda <USB_EPStartXfer+0x11ca>
 800dcd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dcda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dcde:	881b      	ldrh	r3, [r3, #0]
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	029b      	lsls	r3, r3, #10
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	4313      	orrs	r3, r2
 800dcee:	b29a      	uxth	r2, r3
 800dcf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dcf4:	801a      	strh	r2, [r3, #0]
 800dcf6:	e023      	b.n	800dd40 <USB_EPStartXfer+0x1230>
 800dcf8:	463b      	mov	r3, r7
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	785b      	ldrb	r3, [r3, #1]
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d11e      	bne.n	800dd40 <USB_EPStartXfer+0x1230>
 800dd02:	1d3b      	adds	r3, r7, #4
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800dd12:	4413      	add	r3, r2
 800dd14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dd18:	463b      	mov	r3, r7
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	011a      	lsls	r2, r3, #4
 800dd20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800dd24:	4413      	add	r3, r2
 800dd26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dd2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dd38:	801a      	strh	r2, [r3, #0]
 800dd3a:	e001      	b.n	800dd40 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	e02e      	b.n	800dd9e <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dd40:	1d3b      	adds	r3, r7, #4
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	463b      	mov	r3, r7
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	4413      	add	r3, r2
 800dd4e:	881b      	ldrh	r3, [r3, #0]
 800dd50:	b29b      	uxth	r3, r3
 800dd52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd5a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dd5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dd62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dd66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dd6a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dd6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dd72:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dd76:	1d3b      	adds	r3, r7, #4
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	463b      	mov	r3, r7
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	441a      	add	r2, r3
 800dd84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dd88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800dd9c:	2300      	movs	r3, #0
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ddb4:	78fb      	ldrb	r3, [r7, #3]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d103      	bne.n	800ddc2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2280      	movs	r2, #128	; 0x80
 800ddbe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ddc2:	2300      	movs	r3, #0
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	370c      	adds	r7, #12
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bc80      	pop	{r7}
 800ddcc:	4770      	bx	lr

0800ddce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ddce:	b480      	push	{r7}
 800ddd0:	b083      	sub	sp, #12
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ddd6:	2300      	movs	r3, #0
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bc80      	pop	{r7}
 800dde0:	4770      	bx	lr

0800dde2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800dde2:	b480      	push	{r7}
 800dde4:	b085      	sub	sp, #20
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3714      	adds	r7, #20
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bc80      	pop	{r7}
 800ddfe:	4770      	bx	lr

0800de00 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800de00:	b480      	push	{r7}
 800de02:	b08b      	sub	sp, #44	; 0x2c
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	60b9      	str	r1, [r7, #8]
 800de0a:	4611      	mov	r1, r2
 800de0c:	461a      	mov	r2, r3
 800de0e:	460b      	mov	r3, r1
 800de10:	80fb      	strh	r3, [r7, #6]
 800de12:	4613      	mov	r3, r2
 800de14:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800de16:	88bb      	ldrh	r3, [r7, #4]
 800de18:	3301      	adds	r3, #1
 800de1a:	085b      	lsrs	r3, r3, #1
 800de1c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800de26:	88fb      	ldrh	r3, [r7, #6]
 800de28:	005a      	lsls	r2, r3, #1
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	4413      	add	r3, r2
 800de2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de32:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	627b      	str	r3, [r7, #36]	; 0x24
 800de38:	e01e      	b.n	800de78 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	3301      	adds	r3, #1
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	021b      	lsls	r3, r3, #8
 800de48:	b21a      	sxth	r2, r3
 800de4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de4e:	4313      	orrs	r3, r2
 800de50:	b21b      	sxth	r3, r3
 800de52:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800de54:	6a3b      	ldr	r3, [r7, #32]
 800de56:	8a7a      	ldrh	r2, [r7, #18]
 800de58:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800de5a:	6a3b      	ldr	r3, [r7, #32]
 800de5c:	3302      	adds	r3, #2
 800de5e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800de60:	6a3b      	ldr	r3, [r7, #32]
 800de62:	3302      	adds	r3, #2
 800de64:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	3301      	adds	r3, #1
 800de6a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	3301      	adds	r3, #1
 800de70:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800de72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de74:	3b01      	subs	r3, #1
 800de76:	627b      	str	r3, [r7, #36]	; 0x24
 800de78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d1dd      	bne.n	800de3a <USB_WritePMA+0x3a>
  }
}
 800de7e:	bf00      	nop
 800de80:	bf00      	nop
 800de82:	372c      	adds	r7, #44	; 0x2c
 800de84:	46bd      	mov	sp, r7
 800de86:	bc80      	pop	{r7}
 800de88:	4770      	bx	lr

0800de8a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800de8a:	b480      	push	{r7}
 800de8c:	b08b      	sub	sp, #44	; 0x2c
 800de8e:	af00      	add	r7, sp, #0
 800de90:	60f8      	str	r0, [r7, #12]
 800de92:	60b9      	str	r1, [r7, #8]
 800de94:	4611      	mov	r1, r2
 800de96:	461a      	mov	r2, r3
 800de98:	460b      	mov	r3, r1
 800de9a:	80fb      	strh	r3, [r7, #6]
 800de9c:	4613      	mov	r3, r2
 800de9e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800dea0:	88bb      	ldrh	r3, [r7, #4]
 800dea2:	085b      	lsrs	r3, r3, #1
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800deb0:	88fb      	ldrh	r3, [r7, #6]
 800deb2:	005a      	lsls	r2, r3, #1
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	4413      	add	r3, r2
 800deb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800debc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	627b      	str	r3, [r7, #36]	; 0x24
 800dec2:	e01b      	b.n	800defc <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800dec4:	6a3b      	ldr	r3, [r7, #32]
 800dec6:	881b      	ldrh	r3, [r3, #0]
 800dec8:	b29b      	uxth	r3, r3
 800deca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800decc:	6a3b      	ldr	r3, [r7, #32]
 800dece:	3302      	adds	r3, #2
 800ded0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	b2da      	uxtb	r2, r3
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800deda:	69fb      	ldr	r3, [r7, #28]
 800dedc:	3301      	adds	r3, #1
 800dede:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	0a1b      	lsrs	r3, r3, #8
 800dee4:	b2da      	uxtb	r2, r3
 800dee6:	69fb      	ldr	r3, [r7, #28]
 800dee8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800deea:	69fb      	ldr	r3, [r7, #28]
 800deec:	3301      	adds	r3, #1
 800deee:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800def0:	6a3b      	ldr	r3, [r7, #32]
 800def2:	3302      	adds	r3, #2
 800def4:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800def6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def8:	3b01      	subs	r3, #1
 800defa:	627b      	str	r3, [r7, #36]	; 0x24
 800defc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defe:	2b00      	cmp	r3, #0
 800df00:	d1e0      	bne.n	800dec4 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800df02:	88bb      	ldrh	r3, [r7, #4]
 800df04:	f003 0301 	and.w	r3, r3, #1
 800df08:	b29b      	uxth	r3, r3
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d007      	beq.n	800df1e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800df0e:	6a3b      	ldr	r3, [r7, #32]
 800df10:	881b      	ldrh	r3, [r3, #0]
 800df12:	b29b      	uxth	r3, r3
 800df14:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	b2da      	uxtb	r2, r3
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	701a      	strb	r2, [r3, #0]
  }
}
 800df1e:	bf00      	nop
 800df20:	372c      	adds	r7, #44	; 0x2c
 800df22:	46bd      	mov	sp, r7
 800df24:	bc80      	pop	{r7}
 800df26:	4770      	bx	lr

0800df28 <__assert_func>:
 800df28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df2a:	4614      	mov	r4, r2
 800df2c:	461a      	mov	r2, r3
 800df2e:	4b09      	ldr	r3, [pc, #36]	; (800df54 <__assert_func+0x2c>)
 800df30:	4605      	mov	r5, r0
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	68d8      	ldr	r0, [r3, #12]
 800df36:	b14c      	cbz	r4, 800df4c <__assert_func+0x24>
 800df38:	4b07      	ldr	r3, [pc, #28]	; (800df58 <__assert_func+0x30>)
 800df3a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df3e:	9100      	str	r1, [sp, #0]
 800df40:	462b      	mov	r3, r5
 800df42:	4906      	ldr	r1, [pc, #24]	; (800df5c <__assert_func+0x34>)
 800df44:	f000 f814 	bl	800df70 <fiprintf>
 800df48:	f000 fd7a 	bl	800ea40 <abort>
 800df4c:	4b04      	ldr	r3, [pc, #16]	; (800df60 <__assert_func+0x38>)
 800df4e:	461c      	mov	r4, r3
 800df50:	e7f3      	b.n	800df3a <__assert_func+0x12>
 800df52:	bf00      	nop
 800df54:	2000004c 	.word	0x2000004c
 800df58:	08010096 	.word	0x08010096
 800df5c:	080100a3 	.word	0x080100a3
 800df60:	080100d1 	.word	0x080100d1

0800df64 <__errno>:
 800df64:	4b01      	ldr	r3, [pc, #4]	; (800df6c <__errno+0x8>)
 800df66:	6818      	ldr	r0, [r3, #0]
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	2000004c 	.word	0x2000004c

0800df70 <fiprintf>:
 800df70:	b40e      	push	{r1, r2, r3}
 800df72:	b503      	push	{r0, r1, lr}
 800df74:	4601      	mov	r1, r0
 800df76:	ab03      	add	r3, sp, #12
 800df78:	4805      	ldr	r0, [pc, #20]	; (800df90 <fiprintf+0x20>)
 800df7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800df7e:	6800      	ldr	r0, [r0, #0]
 800df80:	9301      	str	r3, [sp, #4]
 800df82:	f000 f92d 	bl	800e1e0 <_vfiprintf_r>
 800df86:	b002      	add	sp, #8
 800df88:	f85d eb04 	ldr.w	lr, [sp], #4
 800df8c:	b003      	add	sp, #12
 800df8e:	4770      	bx	lr
 800df90:	2000004c 	.word	0x2000004c

0800df94 <__libc_init_array>:
 800df94:	b570      	push	{r4, r5, r6, lr}
 800df96:	2600      	movs	r6, #0
 800df98:	4d0c      	ldr	r5, [pc, #48]	; (800dfcc <__libc_init_array+0x38>)
 800df9a:	4c0d      	ldr	r4, [pc, #52]	; (800dfd0 <__libc_init_array+0x3c>)
 800df9c:	1b64      	subs	r4, r4, r5
 800df9e:	10a4      	asrs	r4, r4, #2
 800dfa0:	42a6      	cmp	r6, r4
 800dfa2:	d109      	bne.n	800dfb8 <__libc_init_array+0x24>
 800dfa4:	f001 fa20 	bl	800f3e8 <_init>
 800dfa8:	2600      	movs	r6, #0
 800dfaa:	4d0a      	ldr	r5, [pc, #40]	; (800dfd4 <__libc_init_array+0x40>)
 800dfac:	4c0a      	ldr	r4, [pc, #40]	; (800dfd8 <__libc_init_array+0x44>)
 800dfae:	1b64      	subs	r4, r4, r5
 800dfb0:	10a4      	asrs	r4, r4, #2
 800dfb2:	42a6      	cmp	r6, r4
 800dfb4:	d105      	bne.n	800dfc2 <__libc_init_array+0x2e>
 800dfb6:	bd70      	pop	{r4, r5, r6, pc}
 800dfb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfbc:	4798      	blx	r3
 800dfbe:	3601      	adds	r6, #1
 800dfc0:	e7ee      	b.n	800dfa0 <__libc_init_array+0xc>
 800dfc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfc6:	4798      	blx	r3
 800dfc8:	3601      	adds	r6, #1
 800dfca:	e7f2      	b.n	800dfb2 <__libc_init_array+0x1e>
 800dfcc:	0801016c 	.word	0x0801016c
 800dfd0:	0801016c 	.word	0x0801016c
 800dfd4:	0801016c 	.word	0x0801016c
 800dfd8:	08010170 	.word	0x08010170

0800dfdc <malloc>:
 800dfdc:	4b02      	ldr	r3, [pc, #8]	; (800dfe8 <malloc+0xc>)
 800dfde:	4601      	mov	r1, r0
 800dfe0:	6818      	ldr	r0, [r3, #0]
 800dfe2:	f000 b87b 	b.w	800e0dc <_malloc_r>
 800dfe6:	bf00      	nop
 800dfe8:	2000004c 	.word	0x2000004c

0800dfec <free>:
 800dfec:	4b02      	ldr	r3, [pc, #8]	; (800dff8 <free+0xc>)
 800dfee:	4601      	mov	r1, r0
 800dff0:	6818      	ldr	r0, [r3, #0]
 800dff2:	f000 b827 	b.w	800e044 <_free_r>
 800dff6:	bf00      	nop
 800dff8:	2000004c 	.word	0x2000004c

0800dffc <memcmp>:
 800dffc:	b530      	push	{r4, r5, lr}
 800dffe:	2400      	movs	r4, #0
 800e000:	3901      	subs	r1, #1
 800e002:	42a2      	cmp	r2, r4
 800e004:	d101      	bne.n	800e00a <memcmp+0xe>
 800e006:	2000      	movs	r0, #0
 800e008:	e005      	b.n	800e016 <memcmp+0x1a>
 800e00a:	5d03      	ldrb	r3, [r0, r4]
 800e00c:	3401      	adds	r4, #1
 800e00e:	5d0d      	ldrb	r5, [r1, r4]
 800e010:	42ab      	cmp	r3, r5
 800e012:	d0f6      	beq.n	800e002 <memcmp+0x6>
 800e014:	1b58      	subs	r0, r3, r5
 800e016:	bd30      	pop	{r4, r5, pc}

0800e018 <memcpy>:
 800e018:	440a      	add	r2, r1
 800e01a:	4291      	cmp	r1, r2
 800e01c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e020:	d100      	bne.n	800e024 <memcpy+0xc>
 800e022:	4770      	bx	lr
 800e024:	b510      	push	{r4, lr}
 800e026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e02a:	4291      	cmp	r1, r2
 800e02c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e030:	d1f9      	bne.n	800e026 <memcpy+0xe>
 800e032:	bd10      	pop	{r4, pc}

0800e034 <memset>:
 800e034:	4603      	mov	r3, r0
 800e036:	4402      	add	r2, r0
 800e038:	4293      	cmp	r3, r2
 800e03a:	d100      	bne.n	800e03e <memset+0xa>
 800e03c:	4770      	bx	lr
 800e03e:	f803 1b01 	strb.w	r1, [r3], #1
 800e042:	e7f9      	b.n	800e038 <memset+0x4>

0800e044 <_free_r>:
 800e044:	b538      	push	{r3, r4, r5, lr}
 800e046:	4605      	mov	r5, r0
 800e048:	2900      	cmp	r1, #0
 800e04a:	d043      	beq.n	800e0d4 <_free_r+0x90>
 800e04c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e050:	1f0c      	subs	r4, r1, #4
 800e052:	2b00      	cmp	r3, #0
 800e054:	bfb8      	it	lt
 800e056:	18e4      	addlt	r4, r4, r3
 800e058:	f000 ff40 	bl	800eedc <__malloc_lock>
 800e05c:	4a1e      	ldr	r2, [pc, #120]	; (800e0d8 <_free_r+0x94>)
 800e05e:	6813      	ldr	r3, [r2, #0]
 800e060:	4610      	mov	r0, r2
 800e062:	b933      	cbnz	r3, 800e072 <_free_r+0x2e>
 800e064:	6063      	str	r3, [r4, #4]
 800e066:	6014      	str	r4, [r2, #0]
 800e068:	4628      	mov	r0, r5
 800e06a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e06e:	f000 bf3b 	b.w	800eee8 <__malloc_unlock>
 800e072:	42a3      	cmp	r3, r4
 800e074:	d90a      	bls.n	800e08c <_free_r+0x48>
 800e076:	6821      	ldr	r1, [r4, #0]
 800e078:	1862      	adds	r2, r4, r1
 800e07a:	4293      	cmp	r3, r2
 800e07c:	bf01      	itttt	eq
 800e07e:	681a      	ldreq	r2, [r3, #0]
 800e080:	685b      	ldreq	r3, [r3, #4]
 800e082:	1852      	addeq	r2, r2, r1
 800e084:	6022      	streq	r2, [r4, #0]
 800e086:	6063      	str	r3, [r4, #4]
 800e088:	6004      	str	r4, [r0, #0]
 800e08a:	e7ed      	b.n	800e068 <_free_r+0x24>
 800e08c:	461a      	mov	r2, r3
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	b10b      	cbz	r3, 800e096 <_free_r+0x52>
 800e092:	42a3      	cmp	r3, r4
 800e094:	d9fa      	bls.n	800e08c <_free_r+0x48>
 800e096:	6811      	ldr	r1, [r2, #0]
 800e098:	1850      	adds	r0, r2, r1
 800e09a:	42a0      	cmp	r0, r4
 800e09c:	d10b      	bne.n	800e0b6 <_free_r+0x72>
 800e09e:	6820      	ldr	r0, [r4, #0]
 800e0a0:	4401      	add	r1, r0
 800e0a2:	1850      	adds	r0, r2, r1
 800e0a4:	4283      	cmp	r3, r0
 800e0a6:	6011      	str	r1, [r2, #0]
 800e0a8:	d1de      	bne.n	800e068 <_free_r+0x24>
 800e0aa:	6818      	ldr	r0, [r3, #0]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	4401      	add	r1, r0
 800e0b0:	6011      	str	r1, [r2, #0]
 800e0b2:	6053      	str	r3, [r2, #4]
 800e0b4:	e7d8      	b.n	800e068 <_free_r+0x24>
 800e0b6:	d902      	bls.n	800e0be <_free_r+0x7a>
 800e0b8:	230c      	movs	r3, #12
 800e0ba:	602b      	str	r3, [r5, #0]
 800e0bc:	e7d4      	b.n	800e068 <_free_r+0x24>
 800e0be:	6820      	ldr	r0, [r4, #0]
 800e0c0:	1821      	adds	r1, r4, r0
 800e0c2:	428b      	cmp	r3, r1
 800e0c4:	bf01      	itttt	eq
 800e0c6:	6819      	ldreq	r1, [r3, #0]
 800e0c8:	685b      	ldreq	r3, [r3, #4]
 800e0ca:	1809      	addeq	r1, r1, r0
 800e0cc:	6021      	streq	r1, [r4, #0]
 800e0ce:	6063      	str	r3, [r4, #4]
 800e0d0:	6054      	str	r4, [r2, #4]
 800e0d2:	e7c9      	b.n	800e068 <_free_r+0x24>
 800e0d4:	bd38      	pop	{r3, r4, r5, pc}
 800e0d6:	bf00      	nop
 800e0d8:	2000017c 	.word	0x2000017c

0800e0dc <_malloc_r>:
 800e0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0de:	1ccd      	adds	r5, r1, #3
 800e0e0:	f025 0503 	bic.w	r5, r5, #3
 800e0e4:	3508      	adds	r5, #8
 800e0e6:	2d0c      	cmp	r5, #12
 800e0e8:	bf38      	it	cc
 800e0ea:	250c      	movcc	r5, #12
 800e0ec:	2d00      	cmp	r5, #0
 800e0ee:	4606      	mov	r6, r0
 800e0f0:	db01      	blt.n	800e0f6 <_malloc_r+0x1a>
 800e0f2:	42a9      	cmp	r1, r5
 800e0f4:	d903      	bls.n	800e0fe <_malloc_r+0x22>
 800e0f6:	230c      	movs	r3, #12
 800e0f8:	6033      	str	r3, [r6, #0]
 800e0fa:	2000      	movs	r0, #0
 800e0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0fe:	f000 feed 	bl	800eedc <__malloc_lock>
 800e102:	4921      	ldr	r1, [pc, #132]	; (800e188 <_malloc_r+0xac>)
 800e104:	680a      	ldr	r2, [r1, #0]
 800e106:	4614      	mov	r4, r2
 800e108:	b99c      	cbnz	r4, 800e132 <_malloc_r+0x56>
 800e10a:	4f20      	ldr	r7, [pc, #128]	; (800e18c <_malloc_r+0xb0>)
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	b923      	cbnz	r3, 800e11a <_malloc_r+0x3e>
 800e110:	4621      	mov	r1, r4
 800e112:	4630      	mov	r0, r6
 800e114:	f000 fb42 	bl	800e79c <_sbrk_r>
 800e118:	6038      	str	r0, [r7, #0]
 800e11a:	4629      	mov	r1, r5
 800e11c:	4630      	mov	r0, r6
 800e11e:	f000 fb3d 	bl	800e79c <_sbrk_r>
 800e122:	1c43      	adds	r3, r0, #1
 800e124:	d123      	bne.n	800e16e <_malloc_r+0x92>
 800e126:	230c      	movs	r3, #12
 800e128:	4630      	mov	r0, r6
 800e12a:	6033      	str	r3, [r6, #0]
 800e12c:	f000 fedc 	bl	800eee8 <__malloc_unlock>
 800e130:	e7e3      	b.n	800e0fa <_malloc_r+0x1e>
 800e132:	6823      	ldr	r3, [r4, #0]
 800e134:	1b5b      	subs	r3, r3, r5
 800e136:	d417      	bmi.n	800e168 <_malloc_r+0x8c>
 800e138:	2b0b      	cmp	r3, #11
 800e13a:	d903      	bls.n	800e144 <_malloc_r+0x68>
 800e13c:	6023      	str	r3, [r4, #0]
 800e13e:	441c      	add	r4, r3
 800e140:	6025      	str	r5, [r4, #0]
 800e142:	e004      	b.n	800e14e <_malloc_r+0x72>
 800e144:	6863      	ldr	r3, [r4, #4]
 800e146:	42a2      	cmp	r2, r4
 800e148:	bf0c      	ite	eq
 800e14a:	600b      	streq	r3, [r1, #0]
 800e14c:	6053      	strne	r3, [r2, #4]
 800e14e:	4630      	mov	r0, r6
 800e150:	f000 feca 	bl	800eee8 <__malloc_unlock>
 800e154:	f104 000b 	add.w	r0, r4, #11
 800e158:	1d23      	adds	r3, r4, #4
 800e15a:	f020 0007 	bic.w	r0, r0, #7
 800e15e:	1ac2      	subs	r2, r0, r3
 800e160:	d0cc      	beq.n	800e0fc <_malloc_r+0x20>
 800e162:	1a1b      	subs	r3, r3, r0
 800e164:	50a3      	str	r3, [r4, r2]
 800e166:	e7c9      	b.n	800e0fc <_malloc_r+0x20>
 800e168:	4622      	mov	r2, r4
 800e16a:	6864      	ldr	r4, [r4, #4]
 800e16c:	e7cc      	b.n	800e108 <_malloc_r+0x2c>
 800e16e:	1cc4      	adds	r4, r0, #3
 800e170:	f024 0403 	bic.w	r4, r4, #3
 800e174:	42a0      	cmp	r0, r4
 800e176:	d0e3      	beq.n	800e140 <_malloc_r+0x64>
 800e178:	1a21      	subs	r1, r4, r0
 800e17a:	4630      	mov	r0, r6
 800e17c:	f000 fb0e 	bl	800e79c <_sbrk_r>
 800e180:	3001      	adds	r0, #1
 800e182:	d1dd      	bne.n	800e140 <_malloc_r+0x64>
 800e184:	e7cf      	b.n	800e126 <_malloc_r+0x4a>
 800e186:	bf00      	nop
 800e188:	2000017c 	.word	0x2000017c
 800e18c:	20000180 	.word	0x20000180

0800e190 <__sfputc_r>:
 800e190:	6893      	ldr	r3, [r2, #8]
 800e192:	b410      	push	{r4}
 800e194:	3b01      	subs	r3, #1
 800e196:	2b00      	cmp	r3, #0
 800e198:	6093      	str	r3, [r2, #8]
 800e19a:	da07      	bge.n	800e1ac <__sfputc_r+0x1c>
 800e19c:	6994      	ldr	r4, [r2, #24]
 800e19e:	42a3      	cmp	r3, r4
 800e1a0:	db01      	blt.n	800e1a6 <__sfputc_r+0x16>
 800e1a2:	290a      	cmp	r1, #10
 800e1a4:	d102      	bne.n	800e1ac <__sfputc_r+0x1c>
 800e1a6:	bc10      	pop	{r4}
 800e1a8:	f000 bb8a 	b.w	800e8c0 <__swbuf_r>
 800e1ac:	6813      	ldr	r3, [r2, #0]
 800e1ae:	1c58      	adds	r0, r3, #1
 800e1b0:	6010      	str	r0, [r2, #0]
 800e1b2:	7019      	strb	r1, [r3, #0]
 800e1b4:	4608      	mov	r0, r1
 800e1b6:	bc10      	pop	{r4}
 800e1b8:	4770      	bx	lr

0800e1ba <__sfputs_r>:
 800e1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1bc:	4606      	mov	r6, r0
 800e1be:	460f      	mov	r7, r1
 800e1c0:	4614      	mov	r4, r2
 800e1c2:	18d5      	adds	r5, r2, r3
 800e1c4:	42ac      	cmp	r4, r5
 800e1c6:	d101      	bne.n	800e1cc <__sfputs_r+0x12>
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	e007      	b.n	800e1dc <__sfputs_r+0x22>
 800e1cc:	463a      	mov	r2, r7
 800e1ce:	4630      	mov	r0, r6
 800e1d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1d4:	f7ff ffdc 	bl	800e190 <__sfputc_r>
 800e1d8:	1c43      	adds	r3, r0, #1
 800e1da:	d1f3      	bne.n	800e1c4 <__sfputs_r+0xa>
 800e1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e1e0 <_vfiprintf_r>:
 800e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e4:	460d      	mov	r5, r1
 800e1e6:	4614      	mov	r4, r2
 800e1e8:	4698      	mov	r8, r3
 800e1ea:	4606      	mov	r6, r0
 800e1ec:	b09d      	sub	sp, #116	; 0x74
 800e1ee:	b118      	cbz	r0, 800e1f8 <_vfiprintf_r+0x18>
 800e1f0:	6983      	ldr	r3, [r0, #24]
 800e1f2:	b90b      	cbnz	r3, 800e1f8 <_vfiprintf_r+0x18>
 800e1f4:	f000 fd46 	bl	800ec84 <__sinit>
 800e1f8:	4b89      	ldr	r3, [pc, #548]	; (800e420 <_vfiprintf_r+0x240>)
 800e1fa:	429d      	cmp	r5, r3
 800e1fc:	d11b      	bne.n	800e236 <_vfiprintf_r+0x56>
 800e1fe:	6875      	ldr	r5, [r6, #4]
 800e200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e202:	07d9      	lsls	r1, r3, #31
 800e204:	d405      	bmi.n	800e212 <_vfiprintf_r+0x32>
 800e206:	89ab      	ldrh	r3, [r5, #12]
 800e208:	059a      	lsls	r2, r3, #22
 800e20a:	d402      	bmi.n	800e212 <_vfiprintf_r+0x32>
 800e20c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e20e:	f000 fdd7 	bl	800edc0 <__retarget_lock_acquire_recursive>
 800e212:	89ab      	ldrh	r3, [r5, #12]
 800e214:	071b      	lsls	r3, r3, #28
 800e216:	d501      	bpl.n	800e21c <_vfiprintf_r+0x3c>
 800e218:	692b      	ldr	r3, [r5, #16]
 800e21a:	b9eb      	cbnz	r3, 800e258 <_vfiprintf_r+0x78>
 800e21c:	4629      	mov	r1, r5
 800e21e:	4630      	mov	r0, r6
 800e220:	f000 fba0 	bl	800e964 <__swsetup_r>
 800e224:	b1c0      	cbz	r0, 800e258 <_vfiprintf_r+0x78>
 800e226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e228:	07dc      	lsls	r4, r3, #31
 800e22a:	d50e      	bpl.n	800e24a <_vfiprintf_r+0x6a>
 800e22c:	f04f 30ff 	mov.w	r0, #4294967295
 800e230:	b01d      	add	sp, #116	; 0x74
 800e232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e236:	4b7b      	ldr	r3, [pc, #492]	; (800e424 <_vfiprintf_r+0x244>)
 800e238:	429d      	cmp	r5, r3
 800e23a:	d101      	bne.n	800e240 <_vfiprintf_r+0x60>
 800e23c:	68b5      	ldr	r5, [r6, #8]
 800e23e:	e7df      	b.n	800e200 <_vfiprintf_r+0x20>
 800e240:	4b79      	ldr	r3, [pc, #484]	; (800e428 <_vfiprintf_r+0x248>)
 800e242:	429d      	cmp	r5, r3
 800e244:	bf08      	it	eq
 800e246:	68f5      	ldreq	r5, [r6, #12]
 800e248:	e7da      	b.n	800e200 <_vfiprintf_r+0x20>
 800e24a:	89ab      	ldrh	r3, [r5, #12]
 800e24c:	0598      	lsls	r0, r3, #22
 800e24e:	d4ed      	bmi.n	800e22c <_vfiprintf_r+0x4c>
 800e250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e252:	f000 fdb6 	bl	800edc2 <__retarget_lock_release_recursive>
 800e256:	e7e9      	b.n	800e22c <_vfiprintf_r+0x4c>
 800e258:	2300      	movs	r3, #0
 800e25a:	9309      	str	r3, [sp, #36]	; 0x24
 800e25c:	2320      	movs	r3, #32
 800e25e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e262:	2330      	movs	r3, #48	; 0x30
 800e264:	f04f 0901 	mov.w	r9, #1
 800e268:	f8cd 800c 	str.w	r8, [sp, #12]
 800e26c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e42c <_vfiprintf_r+0x24c>
 800e270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e274:	4623      	mov	r3, r4
 800e276:	469a      	mov	sl, r3
 800e278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e27c:	b10a      	cbz	r2, 800e282 <_vfiprintf_r+0xa2>
 800e27e:	2a25      	cmp	r2, #37	; 0x25
 800e280:	d1f9      	bne.n	800e276 <_vfiprintf_r+0x96>
 800e282:	ebba 0b04 	subs.w	fp, sl, r4
 800e286:	d00b      	beq.n	800e2a0 <_vfiprintf_r+0xc0>
 800e288:	465b      	mov	r3, fp
 800e28a:	4622      	mov	r2, r4
 800e28c:	4629      	mov	r1, r5
 800e28e:	4630      	mov	r0, r6
 800e290:	f7ff ff93 	bl	800e1ba <__sfputs_r>
 800e294:	3001      	adds	r0, #1
 800e296:	f000 80aa 	beq.w	800e3ee <_vfiprintf_r+0x20e>
 800e29a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e29c:	445a      	add	r2, fp
 800e29e:	9209      	str	r2, [sp, #36]	; 0x24
 800e2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	f000 80a2 	beq.w	800e3ee <_vfiprintf_r+0x20e>
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e2b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2b4:	f10a 0a01 	add.w	sl, sl, #1
 800e2b8:	9304      	str	r3, [sp, #16]
 800e2ba:	9307      	str	r3, [sp, #28]
 800e2bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2c0:	931a      	str	r3, [sp, #104]	; 0x68
 800e2c2:	4654      	mov	r4, sl
 800e2c4:	2205      	movs	r2, #5
 800e2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2ca:	4858      	ldr	r0, [pc, #352]	; (800e42c <_vfiprintf_r+0x24c>)
 800e2cc:	f000 fdde 	bl	800ee8c <memchr>
 800e2d0:	9a04      	ldr	r2, [sp, #16]
 800e2d2:	b9d8      	cbnz	r0, 800e30c <_vfiprintf_r+0x12c>
 800e2d4:	06d1      	lsls	r1, r2, #27
 800e2d6:	bf44      	itt	mi
 800e2d8:	2320      	movmi	r3, #32
 800e2da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2de:	0713      	lsls	r3, r2, #28
 800e2e0:	bf44      	itt	mi
 800e2e2:	232b      	movmi	r3, #43	; 0x2b
 800e2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800e2ec:	2b2a      	cmp	r3, #42	; 0x2a
 800e2ee:	d015      	beq.n	800e31c <_vfiprintf_r+0x13c>
 800e2f0:	4654      	mov	r4, sl
 800e2f2:	2000      	movs	r0, #0
 800e2f4:	f04f 0c0a 	mov.w	ip, #10
 800e2f8:	9a07      	ldr	r2, [sp, #28]
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e300:	3b30      	subs	r3, #48	; 0x30
 800e302:	2b09      	cmp	r3, #9
 800e304:	d94e      	bls.n	800e3a4 <_vfiprintf_r+0x1c4>
 800e306:	b1b0      	cbz	r0, 800e336 <_vfiprintf_r+0x156>
 800e308:	9207      	str	r2, [sp, #28]
 800e30a:	e014      	b.n	800e336 <_vfiprintf_r+0x156>
 800e30c:	eba0 0308 	sub.w	r3, r0, r8
 800e310:	fa09 f303 	lsl.w	r3, r9, r3
 800e314:	4313      	orrs	r3, r2
 800e316:	46a2      	mov	sl, r4
 800e318:	9304      	str	r3, [sp, #16]
 800e31a:	e7d2      	b.n	800e2c2 <_vfiprintf_r+0xe2>
 800e31c:	9b03      	ldr	r3, [sp, #12]
 800e31e:	1d19      	adds	r1, r3, #4
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	9103      	str	r1, [sp, #12]
 800e324:	2b00      	cmp	r3, #0
 800e326:	bfbb      	ittet	lt
 800e328:	425b      	neglt	r3, r3
 800e32a:	f042 0202 	orrlt.w	r2, r2, #2
 800e32e:	9307      	strge	r3, [sp, #28]
 800e330:	9307      	strlt	r3, [sp, #28]
 800e332:	bfb8      	it	lt
 800e334:	9204      	strlt	r2, [sp, #16]
 800e336:	7823      	ldrb	r3, [r4, #0]
 800e338:	2b2e      	cmp	r3, #46	; 0x2e
 800e33a:	d10c      	bne.n	800e356 <_vfiprintf_r+0x176>
 800e33c:	7863      	ldrb	r3, [r4, #1]
 800e33e:	2b2a      	cmp	r3, #42	; 0x2a
 800e340:	d135      	bne.n	800e3ae <_vfiprintf_r+0x1ce>
 800e342:	9b03      	ldr	r3, [sp, #12]
 800e344:	3402      	adds	r4, #2
 800e346:	1d1a      	adds	r2, r3, #4
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	9203      	str	r2, [sp, #12]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	bfb8      	it	lt
 800e350:	f04f 33ff 	movlt.w	r3, #4294967295
 800e354:	9305      	str	r3, [sp, #20]
 800e356:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e43c <_vfiprintf_r+0x25c>
 800e35a:	2203      	movs	r2, #3
 800e35c:	4650      	mov	r0, sl
 800e35e:	7821      	ldrb	r1, [r4, #0]
 800e360:	f000 fd94 	bl	800ee8c <memchr>
 800e364:	b140      	cbz	r0, 800e378 <_vfiprintf_r+0x198>
 800e366:	2340      	movs	r3, #64	; 0x40
 800e368:	eba0 000a 	sub.w	r0, r0, sl
 800e36c:	fa03 f000 	lsl.w	r0, r3, r0
 800e370:	9b04      	ldr	r3, [sp, #16]
 800e372:	3401      	adds	r4, #1
 800e374:	4303      	orrs	r3, r0
 800e376:	9304      	str	r3, [sp, #16]
 800e378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e37c:	2206      	movs	r2, #6
 800e37e:	482c      	ldr	r0, [pc, #176]	; (800e430 <_vfiprintf_r+0x250>)
 800e380:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e384:	f000 fd82 	bl	800ee8c <memchr>
 800e388:	2800      	cmp	r0, #0
 800e38a:	d03f      	beq.n	800e40c <_vfiprintf_r+0x22c>
 800e38c:	4b29      	ldr	r3, [pc, #164]	; (800e434 <_vfiprintf_r+0x254>)
 800e38e:	bb1b      	cbnz	r3, 800e3d8 <_vfiprintf_r+0x1f8>
 800e390:	9b03      	ldr	r3, [sp, #12]
 800e392:	3307      	adds	r3, #7
 800e394:	f023 0307 	bic.w	r3, r3, #7
 800e398:	3308      	adds	r3, #8
 800e39a:	9303      	str	r3, [sp, #12]
 800e39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e39e:	443b      	add	r3, r7
 800e3a0:	9309      	str	r3, [sp, #36]	; 0x24
 800e3a2:	e767      	b.n	800e274 <_vfiprintf_r+0x94>
 800e3a4:	460c      	mov	r4, r1
 800e3a6:	2001      	movs	r0, #1
 800e3a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3ac:	e7a5      	b.n	800e2fa <_vfiprintf_r+0x11a>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	f04f 0c0a 	mov.w	ip, #10
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	3401      	adds	r4, #1
 800e3b8:	9305      	str	r3, [sp, #20]
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3c0:	3a30      	subs	r2, #48	; 0x30
 800e3c2:	2a09      	cmp	r2, #9
 800e3c4:	d903      	bls.n	800e3ce <_vfiprintf_r+0x1ee>
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d0c5      	beq.n	800e356 <_vfiprintf_r+0x176>
 800e3ca:	9105      	str	r1, [sp, #20]
 800e3cc:	e7c3      	b.n	800e356 <_vfiprintf_r+0x176>
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3d6:	e7f0      	b.n	800e3ba <_vfiprintf_r+0x1da>
 800e3d8:	ab03      	add	r3, sp, #12
 800e3da:	9300      	str	r3, [sp, #0]
 800e3dc:	462a      	mov	r2, r5
 800e3de:	4630      	mov	r0, r6
 800e3e0:	4b15      	ldr	r3, [pc, #84]	; (800e438 <_vfiprintf_r+0x258>)
 800e3e2:	a904      	add	r1, sp, #16
 800e3e4:	f3af 8000 	nop.w
 800e3e8:	4607      	mov	r7, r0
 800e3ea:	1c78      	adds	r0, r7, #1
 800e3ec:	d1d6      	bne.n	800e39c <_vfiprintf_r+0x1bc>
 800e3ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3f0:	07d9      	lsls	r1, r3, #31
 800e3f2:	d405      	bmi.n	800e400 <_vfiprintf_r+0x220>
 800e3f4:	89ab      	ldrh	r3, [r5, #12]
 800e3f6:	059a      	lsls	r2, r3, #22
 800e3f8:	d402      	bmi.n	800e400 <_vfiprintf_r+0x220>
 800e3fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3fc:	f000 fce1 	bl	800edc2 <__retarget_lock_release_recursive>
 800e400:	89ab      	ldrh	r3, [r5, #12]
 800e402:	065b      	lsls	r3, r3, #25
 800e404:	f53f af12 	bmi.w	800e22c <_vfiprintf_r+0x4c>
 800e408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e40a:	e711      	b.n	800e230 <_vfiprintf_r+0x50>
 800e40c:	ab03      	add	r3, sp, #12
 800e40e:	9300      	str	r3, [sp, #0]
 800e410:	462a      	mov	r2, r5
 800e412:	4630      	mov	r0, r6
 800e414:	4b08      	ldr	r3, [pc, #32]	; (800e438 <_vfiprintf_r+0x258>)
 800e416:	a904      	add	r1, sp, #16
 800e418:	f000 f882 	bl	800e520 <_printf_i>
 800e41c:	e7e4      	b.n	800e3e8 <_vfiprintf_r+0x208>
 800e41e:	bf00      	nop
 800e420:	0801012c 	.word	0x0801012c
 800e424:	0801014c 	.word	0x0801014c
 800e428:	0801010c 	.word	0x0801010c
 800e42c:	080100d8 	.word	0x080100d8
 800e430:	080100e2 	.word	0x080100e2
 800e434:	00000000 	.word	0x00000000
 800e438:	0800e1bb 	.word	0x0800e1bb
 800e43c:	080100de 	.word	0x080100de

0800e440 <_printf_common>:
 800e440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e444:	4616      	mov	r6, r2
 800e446:	4699      	mov	r9, r3
 800e448:	688a      	ldr	r2, [r1, #8]
 800e44a:	690b      	ldr	r3, [r1, #16]
 800e44c:	4607      	mov	r7, r0
 800e44e:	4293      	cmp	r3, r2
 800e450:	bfb8      	it	lt
 800e452:	4613      	movlt	r3, r2
 800e454:	6033      	str	r3, [r6, #0]
 800e456:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e45a:	460c      	mov	r4, r1
 800e45c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e460:	b10a      	cbz	r2, 800e466 <_printf_common+0x26>
 800e462:	3301      	adds	r3, #1
 800e464:	6033      	str	r3, [r6, #0]
 800e466:	6823      	ldr	r3, [r4, #0]
 800e468:	0699      	lsls	r1, r3, #26
 800e46a:	bf42      	ittt	mi
 800e46c:	6833      	ldrmi	r3, [r6, #0]
 800e46e:	3302      	addmi	r3, #2
 800e470:	6033      	strmi	r3, [r6, #0]
 800e472:	6825      	ldr	r5, [r4, #0]
 800e474:	f015 0506 	ands.w	r5, r5, #6
 800e478:	d106      	bne.n	800e488 <_printf_common+0x48>
 800e47a:	f104 0a19 	add.w	sl, r4, #25
 800e47e:	68e3      	ldr	r3, [r4, #12]
 800e480:	6832      	ldr	r2, [r6, #0]
 800e482:	1a9b      	subs	r3, r3, r2
 800e484:	42ab      	cmp	r3, r5
 800e486:	dc28      	bgt.n	800e4da <_printf_common+0x9a>
 800e488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e48c:	1e13      	subs	r3, r2, #0
 800e48e:	6822      	ldr	r2, [r4, #0]
 800e490:	bf18      	it	ne
 800e492:	2301      	movne	r3, #1
 800e494:	0692      	lsls	r2, r2, #26
 800e496:	d42d      	bmi.n	800e4f4 <_printf_common+0xb4>
 800e498:	4649      	mov	r1, r9
 800e49a:	4638      	mov	r0, r7
 800e49c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4a0:	47c0      	blx	r8
 800e4a2:	3001      	adds	r0, #1
 800e4a4:	d020      	beq.n	800e4e8 <_printf_common+0xa8>
 800e4a6:	6823      	ldr	r3, [r4, #0]
 800e4a8:	68e5      	ldr	r5, [r4, #12]
 800e4aa:	f003 0306 	and.w	r3, r3, #6
 800e4ae:	2b04      	cmp	r3, #4
 800e4b0:	bf18      	it	ne
 800e4b2:	2500      	movne	r5, #0
 800e4b4:	6832      	ldr	r2, [r6, #0]
 800e4b6:	f04f 0600 	mov.w	r6, #0
 800e4ba:	68a3      	ldr	r3, [r4, #8]
 800e4bc:	bf08      	it	eq
 800e4be:	1aad      	subeq	r5, r5, r2
 800e4c0:	6922      	ldr	r2, [r4, #16]
 800e4c2:	bf08      	it	eq
 800e4c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	bfc4      	itt	gt
 800e4cc:	1a9b      	subgt	r3, r3, r2
 800e4ce:	18ed      	addgt	r5, r5, r3
 800e4d0:	341a      	adds	r4, #26
 800e4d2:	42b5      	cmp	r5, r6
 800e4d4:	d11a      	bne.n	800e50c <_printf_common+0xcc>
 800e4d6:	2000      	movs	r0, #0
 800e4d8:	e008      	b.n	800e4ec <_printf_common+0xac>
 800e4da:	2301      	movs	r3, #1
 800e4dc:	4652      	mov	r2, sl
 800e4de:	4649      	mov	r1, r9
 800e4e0:	4638      	mov	r0, r7
 800e4e2:	47c0      	blx	r8
 800e4e4:	3001      	adds	r0, #1
 800e4e6:	d103      	bne.n	800e4f0 <_printf_common+0xb0>
 800e4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f0:	3501      	adds	r5, #1
 800e4f2:	e7c4      	b.n	800e47e <_printf_common+0x3e>
 800e4f4:	2030      	movs	r0, #48	; 0x30
 800e4f6:	18e1      	adds	r1, r4, r3
 800e4f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e4fc:	1c5a      	adds	r2, r3, #1
 800e4fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e502:	4422      	add	r2, r4
 800e504:	3302      	adds	r3, #2
 800e506:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e50a:	e7c5      	b.n	800e498 <_printf_common+0x58>
 800e50c:	2301      	movs	r3, #1
 800e50e:	4622      	mov	r2, r4
 800e510:	4649      	mov	r1, r9
 800e512:	4638      	mov	r0, r7
 800e514:	47c0      	blx	r8
 800e516:	3001      	adds	r0, #1
 800e518:	d0e6      	beq.n	800e4e8 <_printf_common+0xa8>
 800e51a:	3601      	adds	r6, #1
 800e51c:	e7d9      	b.n	800e4d2 <_printf_common+0x92>
	...

0800e520 <_printf_i>:
 800e520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e524:	460c      	mov	r4, r1
 800e526:	7e27      	ldrb	r7, [r4, #24]
 800e528:	4691      	mov	r9, r2
 800e52a:	2f78      	cmp	r7, #120	; 0x78
 800e52c:	4680      	mov	r8, r0
 800e52e:	469a      	mov	sl, r3
 800e530:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e532:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e536:	d807      	bhi.n	800e548 <_printf_i+0x28>
 800e538:	2f62      	cmp	r7, #98	; 0x62
 800e53a:	d80a      	bhi.n	800e552 <_printf_i+0x32>
 800e53c:	2f00      	cmp	r7, #0
 800e53e:	f000 80d9 	beq.w	800e6f4 <_printf_i+0x1d4>
 800e542:	2f58      	cmp	r7, #88	; 0x58
 800e544:	f000 80a4 	beq.w	800e690 <_printf_i+0x170>
 800e548:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e54c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e550:	e03a      	b.n	800e5c8 <_printf_i+0xa8>
 800e552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e556:	2b15      	cmp	r3, #21
 800e558:	d8f6      	bhi.n	800e548 <_printf_i+0x28>
 800e55a:	a001      	add	r0, pc, #4	; (adr r0, 800e560 <_printf_i+0x40>)
 800e55c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e560:	0800e5b9 	.word	0x0800e5b9
 800e564:	0800e5cd 	.word	0x0800e5cd
 800e568:	0800e549 	.word	0x0800e549
 800e56c:	0800e549 	.word	0x0800e549
 800e570:	0800e549 	.word	0x0800e549
 800e574:	0800e549 	.word	0x0800e549
 800e578:	0800e5cd 	.word	0x0800e5cd
 800e57c:	0800e549 	.word	0x0800e549
 800e580:	0800e549 	.word	0x0800e549
 800e584:	0800e549 	.word	0x0800e549
 800e588:	0800e549 	.word	0x0800e549
 800e58c:	0800e6db 	.word	0x0800e6db
 800e590:	0800e5fd 	.word	0x0800e5fd
 800e594:	0800e6bd 	.word	0x0800e6bd
 800e598:	0800e549 	.word	0x0800e549
 800e59c:	0800e549 	.word	0x0800e549
 800e5a0:	0800e6fd 	.word	0x0800e6fd
 800e5a4:	0800e549 	.word	0x0800e549
 800e5a8:	0800e5fd 	.word	0x0800e5fd
 800e5ac:	0800e549 	.word	0x0800e549
 800e5b0:	0800e549 	.word	0x0800e549
 800e5b4:	0800e6c5 	.word	0x0800e6c5
 800e5b8:	680b      	ldr	r3, [r1, #0]
 800e5ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e5be:	1d1a      	adds	r2, r3, #4
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	600a      	str	r2, [r1, #0]
 800e5c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	e0a4      	b.n	800e716 <_printf_i+0x1f6>
 800e5cc:	6825      	ldr	r5, [r4, #0]
 800e5ce:	6808      	ldr	r0, [r1, #0]
 800e5d0:	062e      	lsls	r6, r5, #24
 800e5d2:	f100 0304 	add.w	r3, r0, #4
 800e5d6:	d50a      	bpl.n	800e5ee <_printf_i+0xce>
 800e5d8:	6805      	ldr	r5, [r0, #0]
 800e5da:	600b      	str	r3, [r1, #0]
 800e5dc:	2d00      	cmp	r5, #0
 800e5de:	da03      	bge.n	800e5e8 <_printf_i+0xc8>
 800e5e0:	232d      	movs	r3, #45	; 0x2d
 800e5e2:	426d      	negs	r5, r5
 800e5e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5e8:	230a      	movs	r3, #10
 800e5ea:	485e      	ldr	r0, [pc, #376]	; (800e764 <_printf_i+0x244>)
 800e5ec:	e019      	b.n	800e622 <_printf_i+0x102>
 800e5ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e5f2:	6805      	ldr	r5, [r0, #0]
 800e5f4:	600b      	str	r3, [r1, #0]
 800e5f6:	bf18      	it	ne
 800e5f8:	b22d      	sxthne	r5, r5
 800e5fa:	e7ef      	b.n	800e5dc <_printf_i+0xbc>
 800e5fc:	680b      	ldr	r3, [r1, #0]
 800e5fe:	6825      	ldr	r5, [r4, #0]
 800e600:	1d18      	adds	r0, r3, #4
 800e602:	6008      	str	r0, [r1, #0]
 800e604:	0628      	lsls	r0, r5, #24
 800e606:	d501      	bpl.n	800e60c <_printf_i+0xec>
 800e608:	681d      	ldr	r5, [r3, #0]
 800e60a:	e002      	b.n	800e612 <_printf_i+0xf2>
 800e60c:	0669      	lsls	r1, r5, #25
 800e60e:	d5fb      	bpl.n	800e608 <_printf_i+0xe8>
 800e610:	881d      	ldrh	r5, [r3, #0]
 800e612:	2f6f      	cmp	r7, #111	; 0x6f
 800e614:	bf0c      	ite	eq
 800e616:	2308      	moveq	r3, #8
 800e618:	230a      	movne	r3, #10
 800e61a:	4852      	ldr	r0, [pc, #328]	; (800e764 <_printf_i+0x244>)
 800e61c:	2100      	movs	r1, #0
 800e61e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e622:	6866      	ldr	r6, [r4, #4]
 800e624:	2e00      	cmp	r6, #0
 800e626:	bfa8      	it	ge
 800e628:	6821      	ldrge	r1, [r4, #0]
 800e62a:	60a6      	str	r6, [r4, #8]
 800e62c:	bfa4      	itt	ge
 800e62e:	f021 0104 	bicge.w	r1, r1, #4
 800e632:	6021      	strge	r1, [r4, #0]
 800e634:	b90d      	cbnz	r5, 800e63a <_printf_i+0x11a>
 800e636:	2e00      	cmp	r6, #0
 800e638:	d04d      	beq.n	800e6d6 <_printf_i+0x1b6>
 800e63a:	4616      	mov	r6, r2
 800e63c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e640:	fb03 5711 	mls	r7, r3, r1, r5
 800e644:	5dc7      	ldrb	r7, [r0, r7]
 800e646:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e64a:	462f      	mov	r7, r5
 800e64c:	42bb      	cmp	r3, r7
 800e64e:	460d      	mov	r5, r1
 800e650:	d9f4      	bls.n	800e63c <_printf_i+0x11c>
 800e652:	2b08      	cmp	r3, #8
 800e654:	d10b      	bne.n	800e66e <_printf_i+0x14e>
 800e656:	6823      	ldr	r3, [r4, #0]
 800e658:	07df      	lsls	r7, r3, #31
 800e65a:	d508      	bpl.n	800e66e <_printf_i+0x14e>
 800e65c:	6923      	ldr	r3, [r4, #16]
 800e65e:	6861      	ldr	r1, [r4, #4]
 800e660:	4299      	cmp	r1, r3
 800e662:	bfde      	ittt	le
 800e664:	2330      	movle	r3, #48	; 0x30
 800e666:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e66a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e66e:	1b92      	subs	r2, r2, r6
 800e670:	6122      	str	r2, [r4, #16]
 800e672:	464b      	mov	r3, r9
 800e674:	4621      	mov	r1, r4
 800e676:	4640      	mov	r0, r8
 800e678:	f8cd a000 	str.w	sl, [sp]
 800e67c:	aa03      	add	r2, sp, #12
 800e67e:	f7ff fedf 	bl	800e440 <_printf_common>
 800e682:	3001      	adds	r0, #1
 800e684:	d14c      	bne.n	800e720 <_printf_i+0x200>
 800e686:	f04f 30ff 	mov.w	r0, #4294967295
 800e68a:	b004      	add	sp, #16
 800e68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e690:	4834      	ldr	r0, [pc, #208]	; (800e764 <_printf_i+0x244>)
 800e692:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e696:	680e      	ldr	r6, [r1, #0]
 800e698:	6823      	ldr	r3, [r4, #0]
 800e69a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e69e:	061f      	lsls	r7, r3, #24
 800e6a0:	600e      	str	r6, [r1, #0]
 800e6a2:	d514      	bpl.n	800e6ce <_printf_i+0x1ae>
 800e6a4:	07d9      	lsls	r1, r3, #31
 800e6a6:	bf44      	itt	mi
 800e6a8:	f043 0320 	orrmi.w	r3, r3, #32
 800e6ac:	6023      	strmi	r3, [r4, #0]
 800e6ae:	b91d      	cbnz	r5, 800e6b8 <_printf_i+0x198>
 800e6b0:	6823      	ldr	r3, [r4, #0]
 800e6b2:	f023 0320 	bic.w	r3, r3, #32
 800e6b6:	6023      	str	r3, [r4, #0]
 800e6b8:	2310      	movs	r3, #16
 800e6ba:	e7af      	b.n	800e61c <_printf_i+0xfc>
 800e6bc:	6823      	ldr	r3, [r4, #0]
 800e6be:	f043 0320 	orr.w	r3, r3, #32
 800e6c2:	6023      	str	r3, [r4, #0]
 800e6c4:	2378      	movs	r3, #120	; 0x78
 800e6c6:	4828      	ldr	r0, [pc, #160]	; (800e768 <_printf_i+0x248>)
 800e6c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e6cc:	e7e3      	b.n	800e696 <_printf_i+0x176>
 800e6ce:	065e      	lsls	r6, r3, #25
 800e6d0:	bf48      	it	mi
 800e6d2:	b2ad      	uxthmi	r5, r5
 800e6d4:	e7e6      	b.n	800e6a4 <_printf_i+0x184>
 800e6d6:	4616      	mov	r6, r2
 800e6d8:	e7bb      	b.n	800e652 <_printf_i+0x132>
 800e6da:	680b      	ldr	r3, [r1, #0]
 800e6dc:	6826      	ldr	r6, [r4, #0]
 800e6de:	1d1d      	adds	r5, r3, #4
 800e6e0:	6960      	ldr	r0, [r4, #20]
 800e6e2:	600d      	str	r5, [r1, #0]
 800e6e4:	0635      	lsls	r5, r6, #24
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	d501      	bpl.n	800e6ee <_printf_i+0x1ce>
 800e6ea:	6018      	str	r0, [r3, #0]
 800e6ec:	e002      	b.n	800e6f4 <_printf_i+0x1d4>
 800e6ee:	0671      	lsls	r1, r6, #25
 800e6f0:	d5fb      	bpl.n	800e6ea <_printf_i+0x1ca>
 800e6f2:	8018      	strh	r0, [r3, #0]
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	4616      	mov	r6, r2
 800e6f8:	6123      	str	r3, [r4, #16]
 800e6fa:	e7ba      	b.n	800e672 <_printf_i+0x152>
 800e6fc:	680b      	ldr	r3, [r1, #0]
 800e6fe:	1d1a      	adds	r2, r3, #4
 800e700:	600a      	str	r2, [r1, #0]
 800e702:	681e      	ldr	r6, [r3, #0]
 800e704:	2100      	movs	r1, #0
 800e706:	4630      	mov	r0, r6
 800e708:	6862      	ldr	r2, [r4, #4]
 800e70a:	f000 fbbf 	bl	800ee8c <memchr>
 800e70e:	b108      	cbz	r0, 800e714 <_printf_i+0x1f4>
 800e710:	1b80      	subs	r0, r0, r6
 800e712:	6060      	str	r0, [r4, #4]
 800e714:	6863      	ldr	r3, [r4, #4]
 800e716:	6123      	str	r3, [r4, #16]
 800e718:	2300      	movs	r3, #0
 800e71a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e71e:	e7a8      	b.n	800e672 <_printf_i+0x152>
 800e720:	4632      	mov	r2, r6
 800e722:	4649      	mov	r1, r9
 800e724:	4640      	mov	r0, r8
 800e726:	6923      	ldr	r3, [r4, #16]
 800e728:	47d0      	blx	sl
 800e72a:	3001      	adds	r0, #1
 800e72c:	d0ab      	beq.n	800e686 <_printf_i+0x166>
 800e72e:	6823      	ldr	r3, [r4, #0]
 800e730:	079b      	lsls	r3, r3, #30
 800e732:	d413      	bmi.n	800e75c <_printf_i+0x23c>
 800e734:	68e0      	ldr	r0, [r4, #12]
 800e736:	9b03      	ldr	r3, [sp, #12]
 800e738:	4298      	cmp	r0, r3
 800e73a:	bfb8      	it	lt
 800e73c:	4618      	movlt	r0, r3
 800e73e:	e7a4      	b.n	800e68a <_printf_i+0x16a>
 800e740:	2301      	movs	r3, #1
 800e742:	4632      	mov	r2, r6
 800e744:	4649      	mov	r1, r9
 800e746:	4640      	mov	r0, r8
 800e748:	47d0      	blx	sl
 800e74a:	3001      	adds	r0, #1
 800e74c:	d09b      	beq.n	800e686 <_printf_i+0x166>
 800e74e:	3501      	adds	r5, #1
 800e750:	68e3      	ldr	r3, [r4, #12]
 800e752:	9903      	ldr	r1, [sp, #12]
 800e754:	1a5b      	subs	r3, r3, r1
 800e756:	42ab      	cmp	r3, r5
 800e758:	dcf2      	bgt.n	800e740 <_printf_i+0x220>
 800e75a:	e7eb      	b.n	800e734 <_printf_i+0x214>
 800e75c:	2500      	movs	r5, #0
 800e75e:	f104 0619 	add.w	r6, r4, #25
 800e762:	e7f5      	b.n	800e750 <_printf_i+0x230>
 800e764:	080100e9 	.word	0x080100e9
 800e768:	080100fa 	.word	0x080100fa

0800e76c <iprintf>:
 800e76c:	b40f      	push	{r0, r1, r2, r3}
 800e76e:	4b0a      	ldr	r3, [pc, #40]	; (800e798 <iprintf+0x2c>)
 800e770:	b513      	push	{r0, r1, r4, lr}
 800e772:	681c      	ldr	r4, [r3, #0]
 800e774:	b124      	cbz	r4, 800e780 <iprintf+0x14>
 800e776:	69a3      	ldr	r3, [r4, #24]
 800e778:	b913      	cbnz	r3, 800e780 <iprintf+0x14>
 800e77a:	4620      	mov	r0, r4
 800e77c:	f000 fa82 	bl	800ec84 <__sinit>
 800e780:	ab05      	add	r3, sp, #20
 800e782:	4620      	mov	r0, r4
 800e784:	9a04      	ldr	r2, [sp, #16]
 800e786:	68a1      	ldr	r1, [r4, #8]
 800e788:	9301      	str	r3, [sp, #4]
 800e78a:	f7ff fd29 	bl	800e1e0 <_vfiprintf_r>
 800e78e:	b002      	add	sp, #8
 800e790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e794:	b004      	add	sp, #16
 800e796:	4770      	bx	lr
 800e798:	2000004c 	.word	0x2000004c

0800e79c <_sbrk_r>:
 800e79c:	b538      	push	{r3, r4, r5, lr}
 800e79e:	2300      	movs	r3, #0
 800e7a0:	4d05      	ldr	r5, [pc, #20]	; (800e7b8 <_sbrk_r+0x1c>)
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	4608      	mov	r0, r1
 800e7a6:	602b      	str	r3, [r5, #0]
 800e7a8:	f7fa fa5c 	bl	8008c64 <_sbrk>
 800e7ac:	1c43      	adds	r3, r0, #1
 800e7ae:	d102      	bne.n	800e7b6 <_sbrk_r+0x1a>
 800e7b0:	682b      	ldr	r3, [r5, #0]
 800e7b2:	b103      	cbz	r3, 800e7b6 <_sbrk_r+0x1a>
 800e7b4:	6023      	str	r3, [r4, #0]
 800e7b6:	bd38      	pop	{r3, r4, r5, pc}
 800e7b8:	20000a7c 	.word	0x20000a7c

0800e7bc <sniprintf>:
 800e7bc:	b40c      	push	{r2, r3}
 800e7be:	b530      	push	{r4, r5, lr}
 800e7c0:	4b17      	ldr	r3, [pc, #92]	; (800e820 <sniprintf+0x64>)
 800e7c2:	1e0c      	subs	r4, r1, #0
 800e7c4:	681d      	ldr	r5, [r3, #0]
 800e7c6:	b09d      	sub	sp, #116	; 0x74
 800e7c8:	da08      	bge.n	800e7dc <sniprintf+0x20>
 800e7ca:	238b      	movs	r3, #139	; 0x8b
 800e7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d0:	602b      	str	r3, [r5, #0]
 800e7d2:	b01d      	add	sp, #116	; 0x74
 800e7d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7d8:	b002      	add	sp, #8
 800e7da:	4770      	bx	lr
 800e7dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e7e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e7e4:	bf0c      	ite	eq
 800e7e6:	4623      	moveq	r3, r4
 800e7e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e7ec:	9304      	str	r3, [sp, #16]
 800e7ee:	9307      	str	r3, [sp, #28]
 800e7f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e7f4:	9002      	str	r0, [sp, #8]
 800e7f6:	9006      	str	r0, [sp, #24]
 800e7f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	ab21      	add	r3, sp, #132	; 0x84
 800e800:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e802:	a902      	add	r1, sp, #8
 800e804:	9301      	str	r3, [sp, #4]
 800e806:	f000 fbf7 	bl	800eff8 <_svfiprintf_r>
 800e80a:	1c43      	adds	r3, r0, #1
 800e80c:	bfbc      	itt	lt
 800e80e:	238b      	movlt	r3, #139	; 0x8b
 800e810:	602b      	strlt	r3, [r5, #0]
 800e812:	2c00      	cmp	r4, #0
 800e814:	d0dd      	beq.n	800e7d2 <sniprintf+0x16>
 800e816:	2200      	movs	r2, #0
 800e818:	9b02      	ldr	r3, [sp, #8]
 800e81a:	701a      	strb	r2, [r3, #0]
 800e81c:	e7d9      	b.n	800e7d2 <sniprintf+0x16>
 800e81e:	bf00      	nop
 800e820:	2000004c 	.word	0x2000004c

0800e824 <siprintf>:
 800e824:	b40e      	push	{r1, r2, r3}
 800e826:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e82a:	b500      	push	{lr}
 800e82c:	b09c      	sub	sp, #112	; 0x70
 800e82e:	ab1d      	add	r3, sp, #116	; 0x74
 800e830:	9002      	str	r0, [sp, #8]
 800e832:	9006      	str	r0, [sp, #24]
 800e834:	9107      	str	r1, [sp, #28]
 800e836:	9104      	str	r1, [sp, #16]
 800e838:	4808      	ldr	r0, [pc, #32]	; (800e85c <siprintf+0x38>)
 800e83a:	4909      	ldr	r1, [pc, #36]	; (800e860 <siprintf+0x3c>)
 800e83c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e840:	9105      	str	r1, [sp, #20]
 800e842:	6800      	ldr	r0, [r0, #0]
 800e844:	a902      	add	r1, sp, #8
 800e846:	9301      	str	r3, [sp, #4]
 800e848:	f000 fbd6 	bl	800eff8 <_svfiprintf_r>
 800e84c:	2200      	movs	r2, #0
 800e84e:	9b02      	ldr	r3, [sp, #8]
 800e850:	701a      	strb	r2, [r3, #0]
 800e852:	b01c      	add	sp, #112	; 0x70
 800e854:	f85d eb04 	ldr.w	lr, [sp], #4
 800e858:	b003      	add	sp, #12
 800e85a:	4770      	bx	lr
 800e85c:	2000004c 	.word	0x2000004c
 800e860:	ffff0208 	.word	0xffff0208

0800e864 <strchr>:
 800e864:	4603      	mov	r3, r0
 800e866:	b2c9      	uxtb	r1, r1
 800e868:	4618      	mov	r0, r3
 800e86a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e86e:	b112      	cbz	r2, 800e876 <strchr+0x12>
 800e870:	428a      	cmp	r2, r1
 800e872:	d1f9      	bne.n	800e868 <strchr+0x4>
 800e874:	4770      	bx	lr
 800e876:	2900      	cmp	r1, #0
 800e878:	bf18      	it	ne
 800e87a:	2000      	movne	r0, #0
 800e87c:	4770      	bx	lr

0800e87e <strcspn>:
 800e87e:	4603      	mov	r3, r0
 800e880:	b570      	push	{r4, r5, r6, lr}
 800e882:	461e      	mov	r6, r3
 800e884:	f813 4b01 	ldrb.w	r4, [r3], #1
 800e888:	b144      	cbz	r4, 800e89c <strcspn+0x1e>
 800e88a:	1e4a      	subs	r2, r1, #1
 800e88c:	e001      	b.n	800e892 <strcspn+0x14>
 800e88e:	42a5      	cmp	r5, r4
 800e890:	d004      	beq.n	800e89c <strcspn+0x1e>
 800e892:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800e896:	2d00      	cmp	r5, #0
 800e898:	d1f9      	bne.n	800e88e <strcspn+0x10>
 800e89a:	e7f2      	b.n	800e882 <strcspn+0x4>
 800e89c:	1a30      	subs	r0, r6, r0
 800e89e:	bd70      	pop	{r4, r5, r6, pc}

0800e8a0 <strspn>:
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	b570      	push	{r4, r5, r6, lr}
 800e8a4:	461e      	mov	r6, r3
 800e8a6:	f813 4b01 	ldrb.w	r4, [r3], #1
 800e8aa:	b13c      	cbz	r4, 800e8bc <strspn+0x1c>
 800e8ac:	1e4a      	subs	r2, r1, #1
 800e8ae:	e001      	b.n	800e8b4 <strspn+0x14>
 800e8b0:	42a5      	cmp	r5, r4
 800e8b2:	d0f7      	beq.n	800e8a4 <strspn+0x4>
 800e8b4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800e8b8:	2d00      	cmp	r5, #0
 800e8ba:	d1f9      	bne.n	800e8b0 <strspn+0x10>
 800e8bc:	1a30      	subs	r0, r6, r0
 800e8be:	bd70      	pop	{r4, r5, r6, pc}

0800e8c0 <__swbuf_r>:
 800e8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c2:	460e      	mov	r6, r1
 800e8c4:	4614      	mov	r4, r2
 800e8c6:	4605      	mov	r5, r0
 800e8c8:	b118      	cbz	r0, 800e8d2 <__swbuf_r+0x12>
 800e8ca:	6983      	ldr	r3, [r0, #24]
 800e8cc:	b90b      	cbnz	r3, 800e8d2 <__swbuf_r+0x12>
 800e8ce:	f000 f9d9 	bl	800ec84 <__sinit>
 800e8d2:	4b21      	ldr	r3, [pc, #132]	; (800e958 <__swbuf_r+0x98>)
 800e8d4:	429c      	cmp	r4, r3
 800e8d6:	d12b      	bne.n	800e930 <__swbuf_r+0x70>
 800e8d8:	686c      	ldr	r4, [r5, #4]
 800e8da:	69a3      	ldr	r3, [r4, #24]
 800e8dc:	60a3      	str	r3, [r4, #8]
 800e8de:	89a3      	ldrh	r3, [r4, #12]
 800e8e0:	071a      	lsls	r2, r3, #28
 800e8e2:	d52f      	bpl.n	800e944 <__swbuf_r+0x84>
 800e8e4:	6923      	ldr	r3, [r4, #16]
 800e8e6:	b36b      	cbz	r3, 800e944 <__swbuf_r+0x84>
 800e8e8:	6923      	ldr	r3, [r4, #16]
 800e8ea:	6820      	ldr	r0, [r4, #0]
 800e8ec:	b2f6      	uxtb	r6, r6
 800e8ee:	1ac0      	subs	r0, r0, r3
 800e8f0:	6963      	ldr	r3, [r4, #20]
 800e8f2:	4637      	mov	r7, r6
 800e8f4:	4283      	cmp	r3, r0
 800e8f6:	dc04      	bgt.n	800e902 <__swbuf_r+0x42>
 800e8f8:	4621      	mov	r1, r4
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	f000 f92e 	bl	800eb5c <_fflush_r>
 800e900:	bb30      	cbnz	r0, 800e950 <__swbuf_r+0x90>
 800e902:	68a3      	ldr	r3, [r4, #8]
 800e904:	3001      	adds	r0, #1
 800e906:	3b01      	subs	r3, #1
 800e908:	60a3      	str	r3, [r4, #8]
 800e90a:	6823      	ldr	r3, [r4, #0]
 800e90c:	1c5a      	adds	r2, r3, #1
 800e90e:	6022      	str	r2, [r4, #0]
 800e910:	701e      	strb	r6, [r3, #0]
 800e912:	6963      	ldr	r3, [r4, #20]
 800e914:	4283      	cmp	r3, r0
 800e916:	d004      	beq.n	800e922 <__swbuf_r+0x62>
 800e918:	89a3      	ldrh	r3, [r4, #12]
 800e91a:	07db      	lsls	r3, r3, #31
 800e91c:	d506      	bpl.n	800e92c <__swbuf_r+0x6c>
 800e91e:	2e0a      	cmp	r6, #10
 800e920:	d104      	bne.n	800e92c <__swbuf_r+0x6c>
 800e922:	4621      	mov	r1, r4
 800e924:	4628      	mov	r0, r5
 800e926:	f000 f919 	bl	800eb5c <_fflush_r>
 800e92a:	b988      	cbnz	r0, 800e950 <__swbuf_r+0x90>
 800e92c:	4638      	mov	r0, r7
 800e92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e930:	4b0a      	ldr	r3, [pc, #40]	; (800e95c <__swbuf_r+0x9c>)
 800e932:	429c      	cmp	r4, r3
 800e934:	d101      	bne.n	800e93a <__swbuf_r+0x7a>
 800e936:	68ac      	ldr	r4, [r5, #8]
 800e938:	e7cf      	b.n	800e8da <__swbuf_r+0x1a>
 800e93a:	4b09      	ldr	r3, [pc, #36]	; (800e960 <__swbuf_r+0xa0>)
 800e93c:	429c      	cmp	r4, r3
 800e93e:	bf08      	it	eq
 800e940:	68ec      	ldreq	r4, [r5, #12]
 800e942:	e7ca      	b.n	800e8da <__swbuf_r+0x1a>
 800e944:	4621      	mov	r1, r4
 800e946:	4628      	mov	r0, r5
 800e948:	f000 f80c 	bl	800e964 <__swsetup_r>
 800e94c:	2800      	cmp	r0, #0
 800e94e:	d0cb      	beq.n	800e8e8 <__swbuf_r+0x28>
 800e950:	f04f 37ff 	mov.w	r7, #4294967295
 800e954:	e7ea      	b.n	800e92c <__swbuf_r+0x6c>
 800e956:	bf00      	nop
 800e958:	0801012c 	.word	0x0801012c
 800e95c:	0801014c 	.word	0x0801014c
 800e960:	0801010c 	.word	0x0801010c

0800e964 <__swsetup_r>:
 800e964:	4b32      	ldr	r3, [pc, #200]	; (800ea30 <__swsetup_r+0xcc>)
 800e966:	b570      	push	{r4, r5, r6, lr}
 800e968:	681d      	ldr	r5, [r3, #0]
 800e96a:	4606      	mov	r6, r0
 800e96c:	460c      	mov	r4, r1
 800e96e:	b125      	cbz	r5, 800e97a <__swsetup_r+0x16>
 800e970:	69ab      	ldr	r3, [r5, #24]
 800e972:	b913      	cbnz	r3, 800e97a <__swsetup_r+0x16>
 800e974:	4628      	mov	r0, r5
 800e976:	f000 f985 	bl	800ec84 <__sinit>
 800e97a:	4b2e      	ldr	r3, [pc, #184]	; (800ea34 <__swsetup_r+0xd0>)
 800e97c:	429c      	cmp	r4, r3
 800e97e:	d10f      	bne.n	800e9a0 <__swsetup_r+0x3c>
 800e980:	686c      	ldr	r4, [r5, #4]
 800e982:	89a3      	ldrh	r3, [r4, #12]
 800e984:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e988:	0719      	lsls	r1, r3, #28
 800e98a:	d42c      	bmi.n	800e9e6 <__swsetup_r+0x82>
 800e98c:	06dd      	lsls	r5, r3, #27
 800e98e:	d411      	bmi.n	800e9b4 <__swsetup_r+0x50>
 800e990:	2309      	movs	r3, #9
 800e992:	6033      	str	r3, [r6, #0]
 800e994:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e998:	f04f 30ff 	mov.w	r0, #4294967295
 800e99c:	81a3      	strh	r3, [r4, #12]
 800e99e:	e03e      	b.n	800ea1e <__swsetup_r+0xba>
 800e9a0:	4b25      	ldr	r3, [pc, #148]	; (800ea38 <__swsetup_r+0xd4>)
 800e9a2:	429c      	cmp	r4, r3
 800e9a4:	d101      	bne.n	800e9aa <__swsetup_r+0x46>
 800e9a6:	68ac      	ldr	r4, [r5, #8]
 800e9a8:	e7eb      	b.n	800e982 <__swsetup_r+0x1e>
 800e9aa:	4b24      	ldr	r3, [pc, #144]	; (800ea3c <__swsetup_r+0xd8>)
 800e9ac:	429c      	cmp	r4, r3
 800e9ae:	bf08      	it	eq
 800e9b0:	68ec      	ldreq	r4, [r5, #12]
 800e9b2:	e7e6      	b.n	800e982 <__swsetup_r+0x1e>
 800e9b4:	0758      	lsls	r0, r3, #29
 800e9b6:	d512      	bpl.n	800e9de <__swsetup_r+0x7a>
 800e9b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9ba:	b141      	cbz	r1, 800e9ce <__swsetup_r+0x6a>
 800e9bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9c0:	4299      	cmp	r1, r3
 800e9c2:	d002      	beq.n	800e9ca <__swsetup_r+0x66>
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	f7ff fb3d 	bl	800e044 <_free_r>
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	6363      	str	r3, [r4, #52]	; 0x34
 800e9ce:	89a3      	ldrh	r3, [r4, #12]
 800e9d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e9d4:	81a3      	strh	r3, [r4, #12]
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	6063      	str	r3, [r4, #4]
 800e9da:	6923      	ldr	r3, [r4, #16]
 800e9dc:	6023      	str	r3, [r4, #0]
 800e9de:	89a3      	ldrh	r3, [r4, #12]
 800e9e0:	f043 0308 	orr.w	r3, r3, #8
 800e9e4:	81a3      	strh	r3, [r4, #12]
 800e9e6:	6923      	ldr	r3, [r4, #16]
 800e9e8:	b94b      	cbnz	r3, 800e9fe <__swsetup_r+0x9a>
 800e9ea:	89a3      	ldrh	r3, [r4, #12]
 800e9ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e9f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9f4:	d003      	beq.n	800e9fe <__swsetup_r+0x9a>
 800e9f6:	4621      	mov	r1, r4
 800e9f8:	4630      	mov	r0, r6
 800e9fa:	f000 fa07 	bl	800ee0c <__smakebuf_r>
 800e9fe:	89a0      	ldrh	r0, [r4, #12]
 800ea00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea04:	f010 0301 	ands.w	r3, r0, #1
 800ea08:	d00a      	beq.n	800ea20 <__swsetup_r+0xbc>
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	60a3      	str	r3, [r4, #8]
 800ea0e:	6963      	ldr	r3, [r4, #20]
 800ea10:	425b      	negs	r3, r3
 800ea12:	61a3      	str	r3, [r4, #24]
 800ea14:	6923      	ldr	r3, [r4, #16]
 800ea16:	b943      	cbnz	r3, 800ea2a <__swsetup_r+0xc6>
 800ea18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ea1c:	d1ba      	bne.n	800e994 <__swsetup_r+0x30>
 800ea1e:	bd70      	pop	{r4, r5, r6, pc}
 800ea20:	0781      	lsls	r1, r0, #30
 800ea22:	bf58      	it	pl
 800ea24:	6963      	ldrpl	r3, [r4, #20]
 800ea26:	60a3      	str	r3, [r4, #8]
 800ea28:	e7f4      	b.n	800ea14 <__swsetup_r+0xb0>
 800ea2a:	2000      	movs	r0, #0
 800ea2c:	e7f7      	b.n	800ea1e <__swsetup_r+0xba>
 800ea2e:	bf00      	nop
 800ea30:	2000004c 	.word	0x2000004c
 800ea34:	0801012c 	.word	0x0801012c
 800ea38:	0801014c 	.word	0x0801014c
 800ea3c:	0801010c 	.word	0x0801010c

0800ea40 <abort>:
 800ea40:	2006      	movs	r0, #6
 800ea42:	b508      	push	{r3, lr}
 800ea44:	f000 fc00 	bl	800f248 <raise>
 800ea48:	2001      	movs	r0, #1
 800ea4a:	f7fa f898 	bl	8008b7e <_exit>
	...

0800ea50 <__sflush_r>:
 800ea50:	898a      	ldrh	r2, [r1, #12]
 800ea52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea56:	4605      	mov	r5, r0
 800ea58:	0710      	lsls	r0, r2, #28
 800ea5a:	460c      	mov	r4, r1
 800ea5c:	d458      	bmi.n	800eb10 <__sflush_r+0xc0>
 800ea5e:	684b      	ldr	r3, [r1, #4]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	dc05      	bgt.n	800ea70 <__sflush_r+0x20>
 800ea64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	dc02      	bgt.n	800ea70 <__sflush_r+0x20>
 800ea6a:	2000      	movs	r0, #0
 800ea6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea72:	2e00      	cmp	r6, #0
 800ea74:	d0f9      	beq.n	800ea6a <__sflush_r+0x1a>
 800ea76:	2300      	movs	r3, #0
 800ea78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ea7c:	682f      	ldr	r7, [r5, #0]
 800ea7e:	602b      	str	r3, [r5, #0]
 800ea80:	d032      	beq.n	800eae8 <__sflush_r+0x98>
 800ea82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea84:	89a3      	ldrh	r3, [r4, #12]
 800ea86:	075a      	lsls	r2, r3, #29
 800ea88:	d505      	bpl.n	800ea96 <__sflush_r+0x46>
 800ea8a:	6863      	ldr	r3, [r4, #4]
 800ea8c:	1ac0      	subs	r0, r0, r3
 800ea8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea90:	b10b      	cbz	r3, 800ea96 <__sflush_r+0x46>
 800ea92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea94:	1ac0      	subs	r0, r0, r3
 800ea96:	2300      	movs	r3, #0
 800ea98:	4602      	mov	r2, r0
 800ea9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	6a21      	ldr	r1, [r4, #32]
 800eaa0:	47b0      	blx	r6
 800eaa2:	1c43      	adds	r3, r0, #1
 800eaa4:	89a3      	ldrh	r3, [r4, #12]
 800eaa6:	d106      	bne.n	800eab6 <__sflush_r+0x66>
 800eaa8:	6829      	ldr	r1, [r5, #0]
 800eaaa:	291d      	cmp	r1, #29
 800eaac:	d82c      	bhi.n	800eb08 <__sflush_r+0xb8>
 800eaae:	4a2a      	ldr	r2, [pc, #168]	; (800eb58 <__sflush_r+0x108>)
 800eab0:	40ca      	lsrs	r2, r1
 800eab2:	07d6      	lsls	r6, r2, #31
 800eab4:	d528      	bpl.n	800eb08 <__sflush_r+0xb8>
 800eab6:	2200      	movs	r2, #0
 800eab8:	6062      	str	r2, [r4, #4]
 800eaba:	6922      	ldr	r2, [r4, #16]
 800eabc:	04d9      	lsls	r1, r3, #19
 800eabe:	6022      	str	r2, [r4, #0]
 800eac0:	d504      	bpl.n	800eacc <__sflush_r+0x7c>
 800eac2:	1c42      	adds	r2, r0, #1
 800eac4:	d101      	bne.n	800eaca <__sflush_r+0x7a>
 800eac6:	682b      	ldr	r3, [r5, #0]
 800eac8:	b903      	cbnz	r3, 800eacc <__sflush_r+0x7c>
 800eaca:	6560      	str	r0, [r4, #84]	; 0x54
 800eacc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eace:	602f      	str	r7, [r5, #0]
 800ead0:	2900      	cmp	r1, #0
 800ead2:	d0ca      	beq.n	800ea6a <__sflush_r+0x1a>
 800ead4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ead8:	4299      	cmp	r1, r3
 800eada:	d002      	beq.n	800eae2 <__sflush_r+0x92>
 800eadc:	4628      	mov	r0, r5
 800eade:	f7ff fab1 	bl	800e044 <_free_r>
 800eae2:	2000      	movs	r0, #0
 800eae4:	6360      	str	r0, [r4, #52]	; 0x34
 800eae6:	e7c1      	b.n	800ea6c <__sflush_r+0x1c>
 800eae8:	6a21      	ldr	r1, [r4, #32]
 800eaea:	2301      	movs	r3, #1
 800eaec:	4628      	mov	r0, r5
 800eaee:	47b0      	blx	r6
 800eaf0:	1c41      	adds	r1, r0, #1
 800eaf2:	d1c7      	bne.n	800ea84 <__sflush_r+0x34>
 800eaf4:	682b      	ldr	r3, [r5, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d0c4      	beq.n	800ea84 <__sflush_r+0x34>
 800eafa:	2b1d      	cmp	r3, #29
 800eafc:	d001      	beq.n	800eb02 <__sflush_r+0xb2>
 800eafe:	2b16      	cmp	r3, #22
 800eb00:	d101      	bne.n	800eb06 <__sflush_r+0xb6>
 800eb02:	602f      	str	r7, [r5, #0]
 800eb04:	e7b1      	b.n	800ea6a <__sflush_r+0x1a>
 800eb06:	89a3      	ldrh	r3, [r4, #12]
 800eb08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb0c:	81a3      	strh	r3, [r4, #12]
 800eb0e:	e7ad      	b.n	800ea6c <__sflush_r+0x1c>
 800eb10:	690f      	ldr	r7, [r1, #16]
 800eb12:	2f00      	cmp	r7, #0
 800eb14:	d0a9      	beq.n	800ea6a <__sflush_r+0x1a>
 800eb16:	0793      	lsls	r3, r2, #30
 800eb18:	bf18      	it	ne
 800eb1a:	2300      	movne	r3, #0
 800eb1c:	680e      	ldr	r6, [r1, #0]
 800eb1e:	bf08      	it	eq
 800eb20:	694b      	ldreq	r3, [r1, #20]
 800eb22:	eba6 0807 	sub.w	r8, r6, r7
 800eb26:	600f      	str	r7, [r1, #0]
 800eb28:	608b      	str	r3, [r1, #8]
 800eb2a:	f1b8 0f00 	cmp.w	r8, #0
 800eb2e:	dd9c      	ble.n	800ea6a <__sflush_r+0x1a>
 800eb30:	4643      	mov	r3, r8
 800eb32:	463a      	mov	r2, r7
 800eb34:	4628      	mov	r0, r5
 800eb36:	6a21      	ldr	r1, [r4, #32]
 800eb38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb3a:	47b0      	blx	r6
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	dc06      	bgt.n	800eb4e <__sflush_r+0xfe>
 800eb40:	89a3      	ldrh	r3, [r4, #12]
 800eb42:	f04f 30ff 	mov.w	r0, #4294967295
 800eb46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb4a:	81a3      	strh	r3, [r4, #12]
 800eb4c:	e78e      	b.n	800ea6c <__sflush_r+0x1c>
 800eb4e:	4407      	add	r7, r0
 800eb50:	eba8 0800 	sub.w	r8, r8, r0
 800eb54:	e7e9      	b.n	800eb2a <__sflush_r+0xda>
 800eb56:	bf00      	nop
 800eb58:	20400001 	.word	0x20400001

0800eb5c <_fflush_r>:
 800eb5c:	b538      	push	{r3, r4, r5, lr}
 800eb5e:	690b      	ldr	r3, [r1, #16]
 800eb60:	4605      	mov	r5, r0
 800eb62:	460c      	mov	r4, r1
 800eb64:	b913      	cbnz	r3, 800eb6c <_fflush_r+0x10>
 800eb66:	2500      	movs	r5, #0
 800eb68:	4628      	mov	r0, r5
 800eb6a:	bd38      	pop	{r3, r4, r5, pc}
 800eb6c:	b118      	cbz	r0, 800eb76 <_fflush_r+0x1a>
 800eb6e:	6983      	ldr	r3, [r0, #24]
 800eb70:	b90b      	cbnz	r3, 800eb76 <_fflush_r+0x1a>
 800eb72:	f000 f887 	bl	800ec84 <__sinit>
 800eb76:	4b14      	ldr	r3, [pc, #80]	; (800ebc8 <_fflush_r+0x6c>)
 800eb78:	429c      	cmp	r4, r3
 800eb7a:	d11b      	bne.n	800ebb4 <_fflush_r+0x58>
 800eb7c:	686c      	ldr	r4, [r5, #4]
 800eb7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d0ef      	beq.n	800eb66 <_fflush_r+0xa>
 800eb86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eb88:	07d0      	lsls	r0, r2, #31
 800eb8a:	d404      	bmi.n	800eb96 <_fflush_r+0x3a>
 800eb8c:	0599      	lsls	r1, r3, #22
 800eb8e:	d402      	bmi.n	800eb96 <_fflush_r+0x3a>
 800eb90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb92:	f000 f915 	bl	800edc0 <__retarget_lock_acquire_recursive>
 800eb96:	4628      	mov	r0, r5
 800eb98:	4621      	mov	r1, r4
 800eb9a:	f7ff ff59 	bl	800ea50 <__sflush_r>
 800eb9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eba0:	4605      	mov	r5, r0
 800eba2:	07da      	lsls	r2, r3, #31
 800eba4:	d4e0      	bmi.n	800eb68 <_fflush_r+0xc>
 800eba6:	89a3      	ldrh	r3, [r4, #12]
 800eba8:	059b      	lsls	r3, r3, #22
 800ebaa:	d4dd      	bmi.n	800eb68 <_fflush_r+0xc>
 800ebac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebae:	f000 f908 	bl	800edc2 <__retarget_lock_release_recursive>
 800ebb2:	e7d9      	b.n	800eb68 <_fflush_r+0xc>
 800ebb4:	4b05      	ldr	r3, [pc, #20]	; (800ebcc <_fflush_r+0x70>)
 800ebb6:	429c      	cmp	r4, r3
 800ebb8:	d101      	bne.n	800ebbe <_fflush_r+0x62>
 800ebba:	68ac      	ldr	r4, [r5, #8]
 800ebbc:	e7df      	b.n	800eb7e <_fflush_r+0x22>
 800ebbe:	4b04      	ldr	r3, [pc, #16]	; (800ebd0 <_fflush_r+0x74>)
 800ebc0:	429c      	cmp	r4, r3
 800ebc2:	bf08      	it	eq
 800ebc4:	68ec      	ldreq	r4, [r5, #12]
 800ebc6:	e7da      	b.n	800eb7e <_fflush_r+0x22>
 800ebc8:	0801012c 	.word	0x0801012c
 800ebcc:	0801014c 	.word	0x0801014c
 800ebd0:	0801010c 	.word	0x0801010c

0800ebd4 <std>:
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	b510      	push	{r4, lr}
 800ebd8:	4604      	mov	r4, r0
 800ebda:	e9c0 3300 	strd	r3, r3, [r0]
 800ebde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebe2:	6083      	str	r3, [r0, #8]
 800ebe4:	8181      	strh	r1, [r0, #12]
 800ebe6:	6643      	str	r3, [r0, #100]	; 0x64
 800ebe8:	81c2      	strh	r2, [r0, #14]
 800ebea:	6183      	str	r3, [r0, #24]
 800ebec:	4619      	mov	r1, r3
 800ebee:	2208      	movs	r2, #8
 800ebf0:	305c      	adds	r0, #92	; 0x5c
 800ebf2:	f7ff fa1f 	bl	800e034 <memset>
 800ebf6:	4b05      	ldr	r3, [pc, #20]	; (800ec0c <std+0x38>)
 800ebf8:	6224      	str	r4, [r4, #32]
 800ebfa:	6263      	str	r3, [r4, #36]	; 0x24
 800ebfc:	4b04      	ldr	r3, [pc, #16]	; (800ec10 <std+0x3c>)
 800ebfe:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec00:	4b04      	ldr	r3, [pc, #16]	; (800ec14 <std+0x40>)
 800ec02:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec04:	4b04      	ldr	r3, [pc, #16]	; (800ec18 <std+0x44>)
 800ec06:	6323      	str	r3, [r4, #48]	; 0x30
 800ec08:	bd10      	pop	{r4, pc}
 800ec0a:	bf00      	nop
 800ec0c:	0800f281 	.word	0x0800f281
 800ec10:	0800f2a3 	.word	0x0800f2a3
 800ec14:	0800f2db 	.word	0x0800f2db
 800ec18:	0800f2ff 	.word	0x0800f2ff

0800ec1c <_cleanup_r>:
 800ec1c:	4901      	ldr	r1, [pc, #4]	; (800ec24 <_cleanup_r+0x8>)
 800ec1e:	f000 b8af 	b.w	800ed80 <_fwalk_reent>
 800ec22:	bf00      	nop
 800ec24:	0800eb5d 	.word	0x0800eb5d

0800ec28 <__sfmoreglue>:
 800ec28:	b570      	push	{r4, r5, r6, lr}
 800ec2a:	2568      	movs	r5, #104	; 0x68
 800ec2c:	1e4a      	subs	r2, r1, #1
 800ec2e:	4355      	muls	r5, r2
 800ec30:	460e      	mov	r6, r1
 800ec32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ec36:	f7ff fa51 	bl	800e0dc <_malloc_r>
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	b140      	cbz	r0, 800ec50 <__sfmoreglue+0x28>
 800ec3e:	2100      	movs	r1, #0
 800ec40:	e9c0 1600 	strd	r1, r6, [r0]
 800ec44:	300c      	adds	r0, #12
 800ec46:	60a0      	str	r0, [r4, #8]
 800ec48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ec4c:	f7ff f9f2 	bl	800e034 <memset>
 800ec50:	4620      	mov	r0, r4
 800ec52:	bd70      	pop	{r4, r5, r6, pc}

0800ec54 <__sfp_lock_acquire>:
 800ec54:	4801      	ldr	r0, [pc, #4]	; (800ec5c <__sfp_lock_acquire+0x8>)
 800ec56:	f000 b8b3 	b.w	800edc0 <__retarget_lock_acquire_recursive>
 800ec5a:	bf00      	nop
 800ec5c:	20000a78 	.word	0x20000a78

0800ec60 <__sfp_lock_release>:
 800ec60:	4801      	ldr	r0, [pc, #4]	; (800ec68 <__sfp_lock_release+0x8>)
 800ec62:	f000 b8ae 	b.w	800edc2 <__retarget_lock_release_recursive>
 800ec66:	bf00      	nop
 800ec68:	20000a78 	.word	0x20000a78

0800ec6c <__sinit_lock_acquire>:
 800ec6c:	4801      	ldr	r0, [pc, #4]	; (800ec74 <__sinit_lock_acquire+0x8>)
 800ec6e:	f000 b8a7 	b.w	800edc0 <__retarget_lock_acquire_recursive>
 800ec72:	bf00      	nop
 800ec74:	20000a73 	.word	0x20000a73

0800ec78 <__sinit_lock_release>:
 800ec78:	4801      	ldr	r0, [pc, #4]	; (800ec80 <__sinit_lock_release+0x8>)
 800ec7a:	f000 b8a2 	b.w	800edc2 <__retarget_lock_release_recursive>
 800ec7e:	bf00      	nop
 800ec80:	20000a73 	.word	0x20000a73

0800ec84 <__sinit>:
 800ec84:	b510      	push	{r4, lr}
 800ec86:	4604      	mov	r4, r0
 800ec88:	f7ff fff0 	bl	800ec6c <__sinit_lock_acquire>
 800ec8c:	69a3      	ldr	r3, [r4, #24]
 800ec8e:	b11b      	cbz	r3, 800ec98 <__sinit+0x14>
 800ec90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec94:	f7ff bff0 	b.w	800ec78 <__sinit_lock_release>
 800ec98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ec9c:	6523      	str	r3, [r4, #80]	; 0x50
 800ec9e:	4b13      	ldr	r3, [pc, #76]	; (800ecec <__sinit+0x68>)
 800eca0:	4a13      	ldr	r2, [pc, #76]	; (800ecf0 <__sinit+0x6c>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	62a2      	str	r2, [r4, #40]	; 0x28
 800eca6:	42a3      	cmp	r3, r4
 800eca8:	bf08      	it	eq
 800ecaa:	2301      	moveq	r3, #1
 800ecac:	4620      	mov	r0, r4
 800ecae:	bf08      	it	eq
 800ecb0:	61a3      	streq	r3, [r4, #24]
 800ecb2:	f000 f81f 	bl	800ecf4 <__sfp>
 800ecb6:	6060      	str	r0, [r4, #4]
 800ecb8:	4620      	mov	r0, r4
 800ecba:	f000 f81b 	bl	800ecf4 <__sfp>
 800ecbe:	60a0      	str	r0, [r4, #8]
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	f000 f817 	bl	800ecf4 <__sfp>
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	2104      	movs	r1, #4
 800ecca:	60e0      	str	r0, [r4, #12]
 800eccc:	6860      	ldr	r0, [r4, #4]
 800ecce:	f7ff ff81 	bl	800ebd4 <std>
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	2109      	movs	r1, #9
 800ecd6:	68a0      	ldr	r0, [r4, #8]
 800ecd8:	f7ff ff7c 	bl	800ebd4 <std>
 800ecdc:	2202      	movs	r2, #2
 800ecde:	2112      	movs	r1, #18
 800ece0:	68e0      	ldr	r0, [r4, #12]
 800ece2:	f7ff ff77 	bl	800ebd4 <std>
 800ece6:	2301      	movs	r3, #1
 800ece8:	61a3      	str	r3, [r4, #24]
 800ecea:	e7d1      	b.n	800ec90 <__sinit+0xc>
 800ecec:	080100d4 	.word	0x080100d4
 800ecf0:	0800ec1d 	.word	0x0800ec1d

0800ecf4 <__sfp>:
 800ecf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf6:	4607      	mov	r7, r0
 800ecf8:	f7ff ffac 	bl	800ec54 <__sfp_lock_acquire>
 800ecfc:	4b1e      	ldr	r3, [pc, #120]	; (800ed78 <__sfp+0x84>)
 800ecfe:	681e      	ldr	r6, [r3, #0]
 800ed00:	69b3      	ldr	r3, [r6, #24]
 800ed02:	b913      	cbnz	r3, 800ed0a <__sfp+0x16>
 800ed04:	4630      	mov	r0, r6
 800ed06:	f7ff ffbd 	bl	800ec84 <__sinit>
 800ed0a:	3648      	adds	r6, #72	; 0x48
 800ed0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ed10:	3b01      	subs	r3, #1
 800ed12:	d503      	bpl.n	800ed1c <__sfp+0x28>
 800ed14:	6833      	ldr	r3, [r6, #0]
 800ed16:	b30b      	cbz	r3, 800ed5c <__sfp+0x68>
 800ed18:	6836      	ldr	r6, [r6, #0]
 800ed1a:	e7f7      	b.n	800ed0c <__sfp+0x18>
 800ed1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ed20:	b9d5      	cbnz	r5, 800ed58 <__sfp+0x64>
 800ed22:	4b16      	ldr	r3, [pc, #88]	; (800ed7c <__sfp+0x88>)
 800ed24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ed28:	60e3      	str	r3, [r4, #12]
 800ed2a:	6665      	str	r5, [r4, #100]	; 0x64
 800ed2c:	f000 f847 	bl	800edbe <__retarget_lock_init_recursive>
 800ed30:	f7ff ff96 	bl	800ec60 <__sfp_lock_release>
 800ed34:	2208      	movs	r2, #8
 800ed36:	4629      	mov	r1, r5
 800ed38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ed3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ed40:	6025      	str	r5, [r4, #0]
 800ed42:	61a5      	str	r5, [r4, #24]
 800ed44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ed48:	f7ff f974 	bl	800e034 <memset>
 800ed4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ed50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ed54:	4620      	mov	r0, r4
 800ed56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed58:	3468      	adds	r4, #104	; 0x68
 800ed5a:	e7d9      	b.n	800ed10 <__sfp+0x1c>
 800ed5c:	2104      	movs	r1, #4
 800ed5e:	4638      	mov	r0, r7
 800ed60:	f7ff ff62 	bl	800ec28 <__sfmoreglue>
 800ed64:	4604      	mov	r4, r0
 800ed66:	6030      	str	r0, [r6, #0]
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d1d5      	bne.n	800ed18 <__sfp+0x24>
 800ed6c:	f7ff ff78 	bl	800ec60 <__sfp_lock_release>
 800ed70:	230c      	movs	r3, #12
 800ed72:	603b      	str	r3, [r7, #0]
 800ed74:	e7ee      	b.n	800ed54 <__sfp+0x60>
 800ed76:	bf00      	nop
 800ed78:	080100d4 	.word	0x080100d4
 800ed7c:	ffff0001 	.word	0xffff0001

0800ed80 <_fwalk_reent>:
 800ed80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed84:	4606      	mov	r6, r0
 800ed86:	4688      	mov	r8, r1
 800ed88:	2700      	movs	r7, #0
 800ed8a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed92:	f1b9 0901 	subs.w	r9, r9, #1
 800ed96:	d505      	bpl.n	800eda4 <_fwalk_reent+0x24>
 800ed98:	6824      	ldr	r4, [r4, #0]
 800ed9a:	2c00      	cmp	r4, #0
 800ed9c:	d1f7      	bne.n	800ed8e <_fwalk_reent+0xe>
 800ed9e:	4638      	mov	r0, r7
 800eda0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eda4:	89ab      	ldrh	r3, [r5, #12]
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d907      	bls.n	800edba <_fwalk_reent+0x3a>
 800edaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800edae:	3301      	adds	r3, #1
 800edb0:	d003      	beq.n	800edba <_fwalk_reent+0x3a>
 800edb2:	4629      	mov	r1, r5
 800edb4:	4630      	mov	r0, r6
 800edb6:	47c0      	blx	r8
 800edb8:	4307      	orrs	r7, r0
 800edba:	3568      	adds	r5, #104	; 0x68
 800edbc:	e7e9      	b.n	800ed92 <_fwalk_reent+0x12>

0800edbe <__retarget_lock_init_recursive>:
 800edbe:	4770      	bx	lr

0800edc0 <__retarget_lock_acquire_recursive>:
 800edc0:	4770      	bx	lr

0800edc2 <__retarget_lock_release_recursive>:
 800edc2:	4770      	bx	lr

0800edc4 <__swhatbuf_r>:
 800edc4:	b570      	push	{r4, r5, r6, lr}
 800edc6:	460e      	mov	r6, r1
 800edc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edcc:	4614      	mov	r4, r2
 800edce:	2900      	cmp	r1, #0
 800edd0:	461d      	mov	r5, r3
 800edd2:	b096      	sub	sp, #88	; 0x58
 800edd4:	da07      	bge.n	800ede6 <__swhatbuf_r+0x22>
 800edd6:	2300      	movs	r3, #0
 800edd8:	602b      	str	r3, [r5, #0]
 800edda:	89b3      	ldrh	r3, [r6, #12]
 800eddc:	061a      	lsls	r2, r3, #24
 800edde:	d410      	bmi.n	800ee02 <__swhatbuf_r+0x3e>
 800ede0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ede4:	e00e      	b.n	800ee04 <__swhatbuf_r+0x40>
 800ede6:	466a      	mov	r2, sp
 800ede8:	f000 fab0 	bl	800f34c <_fstat_r>
 800edec:	2800      	cmp	r0, #0
 800edee:	dbf2      	blt.n	800edd6 <__swhatbuf_r+0x12>
 800edf0:	9a01      	ldr	r2, [sp, #4]
 800edf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800edf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800edfa:	425a      	negs	r2, r3
 800edfc:	415a      	adcs	r2, r3
 800edfe:	602a      	str	r2, [r5, #0]
 800ee00:	e7ee      	b.n	800ede0 <__swhatbuf_r+0x1c>
 800ee02:	2340      	movs	r3, #64	; 0x40
 800ee04:	2000      	movs	r0, #0
 800ee06:	6023      	str	r3, [r4, #0]
 800ee08:	b016      	add	sp, #88	; 0x58
 800ee0a:	bd70      	pop	{r4, r5, r6, pc}

0800ee0c <__smakebuf_r>:
 800ee0c:	898b      	ldrh	r3, [r1, #12]
 800ee0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ee10:	079d      	lsls	r5, r3, #30
 800ee12:	4606      	mov	r6, r0
 800ee14:	460c      	mov	r4, r1
 800ee16:	d507      	bpl.n	800ee28 <__smakebuf_r+0x1c>
 800ee18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ee1c:	6023      	str	r3, [r4, #0]
 800ee1e:	6123      	str	r3, [r4, #16]
 800ee20:	2301      	movs	r3, #1
 800ee22:	6163      	str	r3, [r4, #20]
 800ee24:	b002      	add	sp, #8
 800ee26:	bd70      	pop	{r4, r5, r6, pc}
 800ee28:	466a      	mov	r2, sp
 800ee2a:	ab01      	add	r3, sp, #4
 800ee2c:	f7ff ffca 	bl	800edc4 <__swhatbuf_r>
 800ee30:	9900      	ldr	r1, [sp, #0]
 800ee32:	4605      	mov	r5, r0
 800ee34:	4630      	mov	r0, r6
 800ee36:	f7ff f951 	bl	800e0dc <_malloc_r>
 800ee3a:	b948      	cbnz	r0, 800ee50 <__smakebuf_r+0x44>
 800ee3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee40:	059a      	lsls	r2, r3, #22
 800ee42:	d4ef      	bmi.n	800ee24 <__smakebuf_r+0x18>
 800ee44:	f023 0303 	bic.w	r3, r3, #3
 800ee48:	f043 0302 	orr.w	r3, r3, #2
 800ee4c:	81a3      	strh	r3, [r4, #12]
 800ee4e:	e7e3      	b.n	800ee18 <__smakebuf_r+0xc>
 800ee50:	4b0d      	ldr	r3, [pc, #52]	; (800ee88 <__smakebuf_r+0x7c>)
 800ee52:	62b3      	str	r3, [r6, #40]	; 0x28
 800ee54:	89a3      	ldrh	r3, [r4, #12]
 800ee56:	6020      	str	r0, [r4, #0]
 800ee58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee5c:	81a3      	strh	r3, [r4, #12]
 800ee5e:	9b00      	ldr	r3, [sp, #0]
 800ee60:	6120      	str	r0, [r4, #16]
 800ee62:	6163      	str	r3, [r4, #20]
 800ee64:	9b01      	ldr	r3, [sp, #4]
 800ee66:	b15b      	cbz	r3, 800ee80 <__smakebuf_r+0x74>
 800ee68:	4630      	mov	r0, r6
 800ee6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee6e:	f000 fa7f 	bl	800f370 <_isatty_r>
 800ee72:	b128      	cbz	r0, 800ee80 <__smakebuf_r+0x74>
 800ee74:	89a3      	ldrh	r3, [r4, #12]
 800ee76:	f023 0303 	bic.w	r3, r3, #3
 800ee7a:	f043 0301 	orr.w	r3, r3, #1
 800ee7e:	81a3      	strh	r3, [r4, #12]
 800ee80:	89a0      	ldrh	r0, [r4, #12]
 800ee82:	4305      	orrs	r5, r0
 800ee84:	81a5      	strh	r5, [r4, #12]
 800ee86:	e7cd      	b.n	800ee24 <__smakebuf_r+0x18>
 800ee88:	0800ec1d 	.word	0x0800ec1d

0800ee8c <memchr>:
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	b510      	push	{r4, lr}
 800ee90:	b2c9      	uxtb	r1, r1
 800ee92:	4402      	add	r2, r0
 800ee94:	4293      	cmp	r3, r2
 800ee96:	4618      	mov	r0, r3
 800ee98:	d101      	bne.n	800ee9e <memchr+0x12>
 800ee9a:	2000      	movs	r0, #0
 800ee9c:	e003      	b.n	800eea6 <memchr+0x1a>
 800ee9e:	7804      	ldrb	r4, [r0, #0]
 800eea0:	3301      	adds	r3, #1
 800eea2:	428c      	cmp	r4, r1
 800eea4:	d1f6      	bne.n	800ee94 <memchr+0x8>
 800eea6:	bd10      	pop	{r4, pc}

0800eea8 <memmove>:
 800eea8:	4288      	cmp	r0, r1
 800eeaa:	b510      	push	{r4, lr}
 800eeac:	eb01 0402 	add.w	r4, r1, r2
 800eeb0:	d902      	bls.n	800eeb8 <memmove+0x10>
 800eeb2:	4284      	cmp	r4, r0
 800eeb4:	4623      	mov	r3, r4
 800eeb6:	d807      	bhi.n	800eec8 <memmove+0x20>
 800eeb8:	1e43      	subs	r3, r0, #1
 800eeba:	42a1      	cmp	r1, r4
 800eebc:	d008      	beq.n	800eed0 <memmove+0x28>
 800eebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eec2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eec6:	e7f8      	b.n	800eeba <memmove+0x12>
 800eec8:	4601      	mov	r1, r0
 800eeca:	4402      	add	r2, r0
 800eecc:	428a      	cmp	r2, r1
 800eece:	d100      	bne.n	800eed2 <memmove+0x2a>
 800eed0:	bd10      	pop	{r4, pc}
 800eed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eeda:	e7f7      	b.n	800eecc <memmove+0x24>

0800eedc <__malloc_lock>:
 800eedc:	4801      	ldr	r0, [pc, #4]	; (800eee4 <__malloc_lock+0x8>)
 800eede:	f7ff bf6f 	b.w	800edc0 <__retarget_lock_acquire_recursive>
 800eee2:	bf00      	nop
 800eee4:	20000a74 	.word	0x20000a74

0800eee8 <__malloc_unlock>:
 800eee8:	4801      	ldr	r0, [pc, #4]	; (800eef0 <__malloc_unlock+0x8>)
 800eeea:	f7ff bf6a 	b.w	800edc2 <__retarget_lock_release_recursive>
 800eeee:	bf00      	nop
 800eef0:	20000a74 	.word	0x20000a74

0800eef4 <_realloc_r>:
 800eef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef6:	4607      	mov	r7, r0
 800eef8:	4614      	mov	r4, r2
 800eefa:	460e      	mov	r6, r1
 800eefc:	b921      	cbnz	r1, 800ef08 <_realloc_r+0x14>
 800eefe:	4611      	mov	r1, r2
 800ef00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ef04:	f7ff b8ea 	b.w	800e0dc <_malloc_r>
 800ef08:	b922      	cbnz	r2, 800ef14 <_realloc_r+0x20>
 800ef0a:	f7ff f89b 	bl	800e044 <_free_r>
 800ef0e:	4625      	mov	r5, r4
 800ef10:	4628      	mov	r0, r5
 800ef12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef14:	f000 fa4e 	bl	800f3b4 <_malloc_usable_size_r>
 800ef18:	42a0      	cmp	r0, r4
 800ef1a:	d20f      	bcs.n	800ef3c <_realloc_r+0x48>
 800ef1c:	4621      	mov	r1, r4
 800ef1e:	4638      	mov	r0, r7
 800ef20:	f7ff f8dc 	bl	800e0dc <_malloc_r>
 800ef24:	4605      	mov	r5, r0
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d0f2      	beq.n	800ef10 <_realloc_r+0x1c>
 800ef2a:	4631      	mov	r1, r6
 800ef2c:	4622      	mov	r2, r4
 800ef2e:	f7ff f873 	bl	800e018 <memcpy>
 800ef32:	4631      	mov	r1, r6
 800ef34:	4638      	mov	r0, r7
 800ef36:	f7ff f885 	bl	800e044 <_free_r>
 800ef3a:	e7e9      	b.n	800ef10 <_realloc_r+0x1c>
 800ef3c:	4635      	mov	r5, r6
 800ef3e:	e7e7      	b.n	800ef10 <_realloc_r+0x1c>

0800ef40 <__ssputs_r>:
 800ef40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef44:	688e      	ldr	r6, [r1, #8]
 800ef46:	4682      	mov	sl, r0
 800ef48:	429e      	cmp	r6, r3
 800ef4a:	460c      	mov	r4, r1
 800ef4c:	4690      	mov	r8, r2
 800ef4e:	461f      	mov	r7, r3
 800ef50:	d838      	bhi.n	800efc4 <__ssputs_r+0x84>
 800ef52:	898a      	ldrh	r2, [r1, #12]
 800ef54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef58:	d032      	beq.n	800efc0 <__ssputs_r+0x80>
 800ef5a:	6825      	ldr	r5, [r4, #0]
 800ef5c:	6909      	ldr	r1, [r1, #16]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	eba5 0901 	sub.w	r9, r5, r1
 800ef64:	6965      	ldr	r5, [r4, #20]
 800ef66:	444b      	add	r3, r9
 800ef68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef70:	106d      	asrs	r5, r5, #1
 800ef72:	429d      	cmp	r5, r3
 800ef74:	bf38      	it	cc
 800ef76:	461d      	movcc	r5, r3
 800ef78:	0553      	lsls	r3, r2, #21
 800ef7a:	d531      	bpl.n	800efe0 <__ssputs_r+0xa0>
 800ef7c:	4629      	mov	r1, r5
 800ef7e:	f7ff f8ad 	bl	800e0dc <_malloc_r>
 800ef82:	4606      	mov	r6, r0
 800ef84:	b950      	cbnz	r0, 800ef9c <__ssputs_r+0x5c>
 800ef86:	230c      	movs	r3, #12
 800ef88:	f04f 30ff 	mov.w	r0, #4294967295
 800ef8c:	f8ca 3000 	str.w	r3, [sl]
 800ef90:	89a3      	ldrh	r3, [r4, #12]
 800ef92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef96:	81a3      	strh	r3, [r4, #12]
 800ef98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef9c:	464a      	mov	r2, r9
 800ef9e:	6921      	ldr	r1, [r4, #16]
 800efa0:	f7ff f83a 	bl	800e018 <memcpy>
 800efa4:	89a3      	ldrh	r3, [r4, #12]
 800efa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800efaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efae:	81a3      	strh	r3, [r4, #12]
 800efb0:	6126      	str	r6, [r4, #16]
 800efb2:	444e      	add	r6, r9
 800efb4:	6026      	str	r6, [r4, #0]
 800efb6:	463e      	mov	r6, r7
 800efb8:	6165      	str	r5, [r4, #20]
 800efba:	eba5 0509 	sub.w	r5, r5, r9
 800efbe:	60a5      	str	r5, [r4, #8]
 800efc0:	42be      	cmp	r6, r7
 800efc2:	d900      	bls.n	800efc6 <__ssputs_r+0x86>
 800efc4:	463e      	mov	r6, r7
 800efc6:	4632      	mov	r2, r6
 800efc8:	4641      	mov	r1, r8
 800efca:	6820      	ldr	r0, [r4, #0]
 800efcc:	f7ff ff6c 	bl	800eea8 <memmove>
 800efd0:	68a3      	ldr	r3, [r4, #8]
 800efd2:	6822      	ldr	r2, [r4, #0]
 800efd4:	1b9b      	subs	r3, r3, r6
 800efd6:	4432      	add	r2, r6
 800efd8:	2000      	movs	r0, #0
 800efda:	60a3      	str	r3, [r4, #8]
 800efdc:	6022      	str	r2, [r4, #0]
 800efde:	e7db      	b.n	800ef98 <__ssputs_r+0x58>
 800efe0:	462a      	mov	r2, r5
 800efe2:	f7ff ff87 	bl	800eef4 <_realloc_r>
 800efe6:	4606      	mov	r6, r0
 800efe8:	2800      	cmp	r0, #0
 800efea:	d1e1      	bne.n	800efb0 <__ssputs_r+0x70>
 800efec:	4650      	mov	r0, sl
 800efee:	6921      	ldr	r1, [r4, #16]
 800eff0:	f7ff f828 	bl	800e044 <_free_r>
 800eff4:	e7c7      	b.n	800ef86 <__ssputs_r+0x46>
	...

0800eff8 <_svfiprintf_r>:
 800eff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800effc:	4698      	mov	r8, r3
 800effe:	898b      	ldrh	r3, [r1, #12]
 800f000:	4607      	mov	r7, r0
 800f002:	061b      	lsls	r3, r3, #24
 800f004:	460d      	mov	r5, r1
 800f006:	4614      	mov	r4, r2
 800f008:	b09d      	sub	sp, #116	; 0x74
 800f00a:	d50e      	bpl.n	800f02a <_svfiprintf_r+0x32>
 800f00c:	690b      	ldr	r3, [r1, #16]
 800f00e:	b963      	cbnz	r3, 800f02a <_svfiprintf_r+0x32>
 800f010:	2140      	movs	r1, #64	; 0x40
 800f012:	f7ff f863 	bl	800e0dc <_malloc_r>
 800f016:	6028      	str	r0, [r5, #0]
 800f018:	6128      	str	r0, [r5, #16]
 800f01a:	b920      	cbnz	r0, 800f026 <_svfiprintf_r+0x2e>
 800f01c:	230c      	movs	r3, #12
 800f01e:	603b      	str	r3, [r7, #0]
 800f020:	f04f 30ff 	mov.w	r0, #4294967295
 800f024:	e0d1      	b.n	800f1ca <_svfiprintf_r+0x1d2>
 800f026:	2340      	movs	r3, #64	; 0x40
 800f028:	616b      	str	r3, [r5, #20]
 800f02a:	2300      	movs	r3, #0
 800f02c:	9309      	str	r3, [sp, #36]	; 0x24
 800f02e:	2320      	movs	r3, #32
 800f030:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f034:	2330      	movs	r3, #48	; 0x30
 800f036:	f04f 0901 	mov.w	r9, #1
 800f03a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f03e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f1e4 <_svfiprintf_r+0x1ec>
 800f042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f046:	4623      	mov	r3, r4
 800f048:	469a      	mov	sl, r3
 800f04a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f04e:	b10a      	cbz	r2, 800f054 <_svfiprintf_r+0x5c>
 800f050:	2a25      	cmp	r2, #37	; 0x25
 800f052:	d1f9      	bne.n	800f048 <_svfiprintf_r+0x50>
 800f054:	ebba 0b04 	subs.w	fp, sl, r4
 800f058:	d00b      	beq.n	800f072 <_svfiprintf_r+0x7a>
 800f05a:	465b      	mov	r3, fp
 800f05c:	4622      	mov	r2, r4
 800f05e:	4629      	mov	r1, r5
 800f060:	4638      	mov	r0, r7
 800f062:	f7ff ff6d 	bl	800ef40 <__ssputs_r>
 800f066:	3001      	adds	r0, #1
 800f068:	f000 80aa 	beq.w	800f1c0 <_svfiprintf_r+0x1c8>
 800f06c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f06e:	445a      	add	r2, fp
 800f070:	9209      	str	r2, [sp, #36]	; 0x24
 800f072:	f89a 3000 	ldrb.w	r3, [sl]
 800f076:	2b00      	cmp	r3, #0
 800f078:	f000 80a2 	beq.w	800f1c0 <_svfiprintf_r+0x1c8>
 800f07c:	2300      	movs	r3, #0
 800f07e:	f04f 32ff 	mov.w	r2, #4294967295
 800f082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f086:	f10a 0a01 	add.w	sl, sl, #1
 800f08a:	9304      	str	r3, [sp, #16]
 800f08c:	9307      	str	r3, [sp, #28]
 800f08e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f092:	931a      	str	r3, [sp, #104]	; 0x68
 800f094:	4654      	mov	r4, sl
 800f096:	2205      	movs	r2, #5
 800f098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f09c:	4851      	ldr	r0, [pc, #324]	; (800f1e4 <_svfiprintf_r+0x1ec>)
 800f09e:	f7ff fef5 	bl	800ee8c <memchr>
 800f0a2:	9a04      	ldr	r2, [sp, #16]
 800f0a4:	b9d8      	cbnz	r0, 800f0de <_svfiprintf_r+0xe6>
 800f0a6:	06d0      	lsls	r0, r2, #27
 800f0a8:	bf44      	itt	mi
 800f0aa:	2320      	movmi	r3, #32
 800f0ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0b0:	0711      	lsls	r1, r2, #28
 800f0b2:	bf44      	itt	mi
 800f0b4:	232b      	movmi	r3, #43	; 0x2b
 800f0b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0ba:	f89a 3000 	ldrb.w	r3, [sl]
 800f0be:	2b2a      	cmp	r3, #42	; 0x2a
 800f0c0:	d015      	beq.n	800f0ee <_svfiprintf_r+0xf6>
 800f0c2:	4654      	mov	r4, sl
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	f04f 0c0a 	mov.w	ip, #10
 800f0ca:	9a07      	ldr	r2, [sp, #28]
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0d2:	3b30      	subs	r3, #48	; 0x30
 800f0d4:	2b09      	cmp	r3, #9
 800f0d6:	d94e      	bls.n	800f176 <_svfiprintf_r+0x17e>
 800f0d8:	b1b0      	cbz	r0, 800f108 <_svfiprintf_r+0x110>
 800f0da:	9207      	str	r2, [sp, #28]
 800f0dc:	e014      	b.n	800f108 <_svfiprintf_r+0x110>
 800f0de:	eba0 0308 	sub.w	r3, r0, r8
 800f0e2:	fa09 f303 	lsl.w	r3, r9, r3
 800f0e6:	4313      	orrs	r3, r2
 800f0e8:	46a2      	mov	sl, r4
 800f0ea:	9304      	str	r3, [sp, #16]
 800f0ec:	e7d2      	b.n	800f094 <_svfiprintf_r+0x9c>
 800f0ee:	9b03      	ldr	r3, [sp, #12]
 800f0f0:	1d19      	adds	r1, r3, #4
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	9103      	str	r1, [sp, #12]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	bfbb      	ittet	lt
 800f0fa:	425b      	neglt	r3, r3
 800f0fc:	f042 0202 	orrlt.w	r2, r2, #2
 800f100:	9307      	strge	r3, [sp, #28]
 800f102:	9307      	strlt	r3, [sp, #28]
 800f104:	bfb8      	it	lt
 800f106:	9204      	strlt	r2, [sp, #16]
 800f108:	7823      	ldrb	r3, [r4, #0]
 800f10a:	2b2e      	cmp	r3, #46	; 0x2e
 800f10c:	d10c      	bne.n	800f128 <_svfiprintf_r+0x130>
 800f10e:	7863      	ldrb	r3, [r4, #1]
 800f110:	2b2a      	cmp	r3, #42	; 0x2a
 800f112:	d135      	bne.n	800f180 <_svfiprintf_r+0x188>
 800f114:	9b03      	ldr	r3, [sp, #12]
 800f116:	3402      	adds	r4, #2
 800f118:	1d1a      	adds	r2, r3, #4
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	9203      	str	r2, [sp, #12]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	bfb8      	it	lt
 800f122:	f04f 33ff 	movlt.w	r3, #4294967295
 800f126:	9305      	str	r3, [sp, #20]
 800f128:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f1f4 <_svfiprintf_r+0x1fc>
 800f12c:	2203      	movs	r2, #3
 800f12e:	4650      	mov	r0, sl
 800f130:	7821      	ldrb	r1, [r4, #0]
 800f132:	f7ff feab 	bl	800ee8c <memchr>
 800f136:	b140      	cbz	r0, 800f14a <_svfiprintf_r+0x152>
 800f138:	2340      	movs	r3, #64	; 0x40
 800f13a:	eba0 000a 	sub.w	r0, r0, sl
 800f13e:	fa03 f000 	lsl.w	r0, r3, r0
 800f142:	9b04      	ldr	r3, [sp, #16]
 800f144:	3401      	adds	r4, #1
 800f146:	4303      	orrs	r3, r0
 800f148:	9304      	str	r3, [sp, #16]
 800f14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f14e:	2206      	movs	r2, #6
 800f150:	4825      	ldr	r0, [pc, #148]	; (800f1e8 <_svfiprintf_r+0x1f0>)
 800f152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f156:	f7ff fe99 	bl	800ee8c <memchr>
 800f15a:	2800      	cmp	r0, #0
 800f15c:	d038      	beq.n	800f1d0 <_svfiprintf_r+0x1d8>
 800f15e:	4b23      	ldr	r3, [pc, #140]	; (800f1ec <_svfiprintf_r+0x1f4>)
 800f160:	bb1b      	cbnz	r3, 800f1aa <_svfiprintf_r+0x1b2>
 800f162:	9b03      	ldr	r3, [sp, #12]
 800f164:	3307      	adds	r3, #7
 800f166:	f023 0307 	bic.w	r3, r3, #7
 800f16a:	3308      	adds	r3, #8
 800f16c:	9303      	str	r3, [sp, #12]
 800f16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f170:	4433      	add	r3, r6
 800f172:	9309      	str	r3, [sp, #36]	; 0x24
 800f174:	e767      	b.n	800f046 <_svfiprintf_r+0x4e>
 800f176:	460c      	mov	r4, r1
 800f178:	2001      	movs	r0, #1
 800f17a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f17e:	e7a5      	b.n	800f0cc <_svfiprintf_r+0xd4>
 800f180:	2300      	movs	r3, #0
 800f182:	f04f 0c0a 	mov.w	ip, #10
 800f186:	4619      	mov	r1, r3
 800f188:	3401      	adds	r4, #1
 800f18a:	9305      	str	r3, [sp, #20]
 800f18c:	4620      	mov	r0, r4
 800f18e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f192:	3a30      	subs	r2, #48	; 0x30
 800f194:	2a09      	cmp	r2, #9
 800f196:	d903      	bls.n	800f1a0 <_svfiprintf_r+0x1a8>
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d0c5      	beq.n	800f128 <_svfiprintf_r+0x130>
 800f19c:	9105      	str	r1, [sp, #20]
 800f19e:	e7c3      	b.n	800f128 <_svfiprintf_r+0x130>
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1a8:	e7f0      	b.n	800f18c <_svfiprintf_r+0x194>
 800f1aa:	ab03      	add	r3, sp, #12
 800f1ac:	9300      	str	r3, [sp, #0]
 800f1ae:	462a      	mov	r2, r5
 800f1b0:	4638      	mov	r0, r7
 800f1b2:	4b0f      	ldr	r3, [pc, #60]	; (800f1f0 <_svfiprintf_r+0x1f8>)
 800f1b4:	a904      	add	r1, sp, #16
 800f1b6:	f3af 8000 	nop.w
 800f1ba:	1c42      	adds	r2, r0, #1
 800f1bc:	4606      	mov	r6, r0
 800f1be:	d1d6      	bne.n	800f16e <_svfiprintf_r+0x176>
 800f1c0:	89ab      	ldrh	r3, [r5, #12]
 800f1c2:	065b      	lsls	r3, r3, #25
 800f1c4:	f53f af2c 	bmi.w	800f020 <_svfiprintf_r+0x28>
 800f1c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1ca:	b01d      	add	sp, #116	; 0x74
 800f1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d0:	ab03      	add	r3, sp, #12
 800f1d2:	9300      	str	r3, [sp, #0]
 800f1d4:	462a      	mov	r2, r5
 800f1d6:	4638      	mov	r0, r7
 800f1d8:	4b05      	ldr	r3, [pc, #20]	; (800f1f0 <_svfiprintf_r+0x1f8>)
 800f1da:	a904      	add	r1, sp, #16
 800f1dc:	f7ff f9a0 	bl	800e520 <_printf_i>
 800f1e0:	e7eb      	b.n	800f1ba <_svfiprintf_r+0x1c2>
 800f1e2:	bf00      	nop
 800f1e4:	080100d8 	.word	0x080100d8
 800f1e8:	080100e2 	.word	0x080100e2
 800f1ec:	00000000 	.word	0x00000000
 800f1f0:	0800ef41 	.word	0x0800ef41
 800f1f4:	080100de 	.word	0x080100de

0800f1f8 <_raise_r>:
 800f1f8:	291f      	cmp	r1, #31
 800f1fa:	b538      	push	{r3, r4, r5, lr}
 800f1fc:	4604      	mov	r4, r0
 800f1fe:	460d      	mov	r5, r1
 800f200:	d904      	bls.n	800f20c <_raise_r+0x14>
 800f202:	2316      	movs	r3, #22
 800f204:	6003      	str	r3, [r0, #0]
 800f206:	f04f 30ff 	mov.w	r0, #4294967295
 800f20a:	bd38      	pop	{r3, r4, r5, pc}
 800f20c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f20e:	b112      	cbz	r2, 800f216 <_raise_r+0x1e>
 800f210:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f214:	b94b      	cbnz	r3, 800f22a <_raise_r+0x32>
 800f216:	4620      	mov	r0, r4
 800f218:	f000 f830 	bl	800f27c <_getpid_r>
 800f21c:	462a      	mov	r2, r5
 800f21e:	4601      	mov	r1, r0
 800f220:	4620      	mov	r0, r4
 800f222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f226:	f000 b817 	b.w	800f258 <_kill_r>
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d00a      	beq.n	800f244 <_raise_r+0x4c>
 800f22e:	1c59      	adds	r1, r3, #1
 800f230:	d103      	bne.n	800f23a <_raise_r+0x42>
 800f232:	2316      	movs	r3, #22
 800f234:	6003      	str	r3, [r0, #0]
 800f236:	2001      	movs	r0, #1
 800f238:	e7e7      	b.n	800f20a <_raise_r+0x12>
 800f23a:	2400      	movs	r4, #0
 800f23c:	4628      	mov	r0, r5
 800f23e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f242:	4798      	blx	r3
 800f244:	2000      	movs	r0, #0
 800f246:	e7e0      	b.n	800f20a <_raise_r+0x12>

0800f248 <raise>:
 800f248:	4b02      	ldr	r3, [pc, #8]	; (800f254 <raise+0xc>)
 800f24a:	4601      	mov	r1, r0
 800f24c:	6818      	ldr	r0, [r3, #0]
 800f24e:	f7ff bfd3 	b.w	800f1f8 <_raise_r>
 800f252:	bf00      	nop
 800f254:	2000004c 	.word	0x2000004c

0800f258 <_kill_r>:
 800f258:	b538      	push	{r3, r4, r5, lr}
 800f25a:	2300      	movs	r3, #0
 800f25c:	4d06      	ldr	r5, [pc, #24]	; (800f278 <_kill_r+0x20>)
 800f25e:	4604      	mov	r4, r0
 800f260:	4608      	mov	r0, r1
 800f262:	4611      	mov	r1, r2
 800f264:	602b      	str	r3, [r5, #0]
 800f266:	f7f9 fc7a 	bl	8008b5e <_kill>
 800f26a:	1c43      	adds	r3, r0, #1
 800f26c:	d102      	bne.n	800f274 <_kill_r+0x1c>
 800f26e:	682b      	ldr	r3, [r5, #0]
 800f270:	b103      	cbz	r3, 800f274 <_kill_r+0x1c>
 800f272:	6023      	str	r3, [r4, #0]
 800f274:	bd38      	pop	{r3, r4, r5, pc}
 800f276:	bf00      	nop
 800f278:	20000a7c 	.word	0x20000a7c

0800f27c <_getpid_r>:
 800f27c:	f7f9 bc68 	b.w	8008b50 <_getpid>

0800f280 <__sread>:
 800f280:	b510      	push	{r4, lr}
 800f282:	460c      	mov	r4, r1
 800f284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f288:	f000 f89c 	bl	800f3c4 <_read_r>
 800f28c:	2800      	cmp	r0, #0
 800f28e:	bfab      	itete	ge
 800f290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f292:	89a3      	ldrhlt	r3, [r4, #12]
 800f294:	181b      	addge	r3, r3, r0
 800f296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f29a:	bfac      	ite	ge
 800f29c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f29e:	81a3      	strhlt	r3, [r4, #12]
 800f2a0:	bd10      	pop	{r4, pc}

0800f2a2 <__swrite>:
 800f2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a6:	461f      	mov	r7, r3
 800f2a8:	898b      	ldrh	r3, [r1, #12]
 800f2aa:	4605      	mov	r5, r0
 800f2ac:	05db      	lsls	r3, r3, #23
 800f2ae:	460c      	mov	r4, r1
 800f2b0:	4616      	mov	r6, r2
 800f2b2:	d505      	bpl.n	800f2c0 <__swrite+0x1e>
 800f2b4:	2302      	movs	r3, #2
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2bc:	f000 f868 	bl	800f390 <_lseek_r>
 800f2c0:	89a3      	ldrh	r3, [r4, #12]
 800f2c2:	4632      	mov	r2, r6
 800f2c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2c8:	81a3      	strh	r3, [r4, #12]
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	463b      	mov	r3, r7
 800f2ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2d6:	f000 b817 	b.w	800f308 <_write_r>

0800f2da <__sseek>:
 800f2da:	b510      	push	{r4, lr}
 800f2dc:	460c      	mov	r4, r1
 800f2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2e2:	f000 f855 	bl	800f390 <_lseek_r>
 800f2e6:	1c43      	adds	r3, r0, #1
 800f2e8:	89a3      	ldrh	r3, [r4, #12]
 800f2ea:	bf15      	itete	ne
 800f2ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800f2ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2f6:	81a3      	strheq	r3, [r4, #12]
 800f2f8:	bf18      	it	ne
 800f2fa:	81a3      	strhne	r3, [r4, #12]
 800f2fc:	bd10      	pop	{r4, pc}

0800f2fe <__sclose>:
 800f2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f302:	f000 b813 	b.w	800f32c <_close_r>
	...

0800f308 <_write_r>:
 800f308:	b538      	push	{r3, r4, r5, lr}
 800f30a:	4604      	mov	r4, r0
 800f30c:	4608      	mov	r0, r1
 800f30e:	4611      	mov	r1, r2
 800f310:	2200      	movs	r2, #0
 800f312:	4d05      	ldr	r5, [pc, #20]	; (800f328 <_write_r+0x20>)
 800f314:	602a      	str	r2, [r5, #0]
 800f316:	461a      	mov	r2, r3
 800f318:	f7f9 fc58 	bl	8008bcc <_write>
 800f31c:	1c43      	adds	r3, r0, #1
 800f31e:	d102      	bne.n	800f326 <_write_r+0x1e>
 800f320:	682b      	ldr	r3, [r5, #0]
 800f322:	b103      	cbz	r3, 800f326 <_write_r+0x1e>
 800f324:	6023      	str	r3, [r4, #0]
 800f326:	bd38      	pop	{r3, r4, r5, pc}
 800f328:	20000a7c 	.word	0x20000a7c

0800f32c <_close_r>:
 800f32c:	b538      	push	{r3, r4, r5, lr}
 800f32e:	2300      	movs	r3, #0
 800f330:	4d05      	ldr	r5, [pc, #20]	; (800f348 <_close_r+0x1c>)
 800f332:	4604      	mov	r4, r0
 800f334:	4608      	mov	r0, r1
 800f336:	602b      	str	r3, [r5, #0]
 800f338:	f7f9 fc64 	bl	8008c04 <_close>
 800f33c:	1c43      	adds	r3, r0, #1
 800f33e:	d102      	bne.n	800f346 <_close_r+0x1a>
 800f340:	682b      	ldr	r3, [r5, #0]
 800f342:	b103      	cbz	r3, 800f346 <_close_r+0x1a>
 800f344:	6023      	str	r3, [r4, #0]
 800f346:	bd38      	pop	{r3, r4, r5, pc}
 800f348:	20000a7c 	.word	0x20000a7c

0800f34c <_fstat_r>:
 800f34c:	b538      	push	{r3, r4, r5, lr}
 800f34e:	2300      	movs	r3, #0
 800f350:	4d06      	ldr	r5, [pc, #24]	; (800f36c <_fstat_r+0x20>)
 800f352:	4604      	mov	r4, r0
 800f354:	4608      	mov	r0, r1
 800f356:	4611      	mov	r1, r2
 800f358:	602b      	str	r3, [r5, #0]
 800f35a:	f7f9 fc5e 	bl	8008c1a <_fstat>
 800f35e:	1c43      	adds	r3, r0, #1
 800f360:	d102      	bne.n	800f368 <_fstat_r+0x1c>
 800f362:	682b      	ldr	r3, [r5, #0]
 800f364:	b103      	cbz	r3, 800f368 <_fstat_r+0x1c>
 800f366:	6023      	str	r3, [r4, #0]
 800f368:	bd38      	pop	{r3, r4, r5, pc}
 800f36a:	bf00      	nop
 800f36c:	20000a7c 	.word	0x20000a7c

0800f370 <_isatty_r>:
 800f370:	b538      	push	{r3, r4, r5, lr}
 800f372:	2300      	movs	r3, #0
 800f374:	4d05      	ldr	r5, [pc, #20]	; (800f38c <_isatty_r+0x1c>)
 800f376:	4604      	mov	r4, r0
 800f378:	4608      	mov	r0, r1
 800f37a:	602b      	str	r3, [r5, #0]
 800f37c:	f7f9 fc5c 	bl	8008c38 <_isatty>
 800f380:	1c43      	adds	r3, r0, #1
 800f382:	d102      	bne.n	800f38a <_isatty_r+0x1a>
 800f384:	682b      	ldr	r3, [r5, #0]
 800f386:	b103      	cbz	r3, 800f38a <_isatty_r+0x1a>
 800f388:	6023      	str	r3, [r4, #0]
 800f38a:	bd38      	pop	{r3, r4, r5, pc}
 800f38c:	20000a7c 	.word	0x20000a7c

0800f390 <_lseek_r>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	4604      	mov	r4, r0
 800f394:	4608      	mov	r0, r1
 800f396:	4611      	mov	r1, r2
 800f398:	2200      	movs	r2, #0
 800f39a:	4d05      	ldr	r5, [pc, #20]	; (800f3b0 <_lseek_r+0x20>)
 800f39c:	602a      	str	r2, [r5, #0]
 800f39e:	461a      	mov	r2, r3
 800f3a0:	f7f9 fc54 	bl	8008c4c <_lseek>
 800f3a4:	1c43      	adds	r3, r0, #1
 800f3a6:	d102      	bne.n	800f3ae <_lseek_r+0x1e>
 800f3a8:	682b      	ldr	r3, [r5, #0]
 800f3aa:	b103      	cbz	r3, 800f3ae <_lseek_r+0x1e>
 800f3ac:	6023      	str	r3, [r4, #0]
 800f3ae:	bd38      	pop	{r3, r4, r5, pc}
 800f3b0:	20000a7c 	.word	0x20000a7c

0800f3b4 <_malloc_usable_size_r>:
 800f3b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3b8:	1f18      	subs	r0, r3, #4
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	bfbc      	itt	lt
 800f3be:	580b      	ldrlt	r3, [r1, r0]
 800f3c0:	18c0      	addlt	r0, r0, r3
 800f3c2:	4770      	bx	lr

0800f3c4 <_read_r>:
 800f3c4:	b538      	push	{r3, r4, r5, lr}
 800f3c6:	4604      	mov	r4, r0
 800f3c8:	4608      	mov	r0, r1
 800f3ca:	4611      	mov	r1, r2
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	4d05      	ldr	r5, [pc, #20]	; (800f3e4 <_read_r+0x20>)
 800f3d0:	602a      	str	r2, [r5, #0]
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	f7f9 fbdd 	bl	8008b92 <_read>
 800f3d8:	1c43      	adds	r3, r0, #1
 800f3da:	d102      	bne.n	800f3e2 <_read_r+0x1e>
 800f3dc:	682b      	ldr	r3, [r5, #0]
 800f3de:	b103      	cbz	r3, 800f3e2 <_read_r+0x1e>
 800f3e0:	6023      	str	r3, [r4, #0]
 800f3e2:	bd38      	pop	{r3, r4, r5, pc}
 800f3e4:	20000a7c 	.word	0x20000a7c

0800f3e8 <_init>:
 800f3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ea:	bf00      	nop
 800f3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ee:	bc08      	pop	{r3}
 800f3f0:	469e      	mov	lr, r3
 800f3f2:	4770      	bx	lr

0800f3f4 <_fini>:
 800f3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3f6:	bf00      	nop
 800f3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3fa:	bc08      	pop	{r3}
 800f3fc:	469e      	mov	lr, r3
 800f3fe:	4770      	bx	lr
